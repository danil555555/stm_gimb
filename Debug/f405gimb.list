
f405gimb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800db60  0800db60  0000eb60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2f8  0800e2f8  000102d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2f8  0800e2f8  0000f2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e300  0800e300  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e300  0800e300  0000f300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e304  0800e304  0000f304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  0800e308  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102d8  2**0
                  CONTENTS
 10 .bss          00001f3c  200002d8  200002d8  000102d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002214  20002214  000102d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017443  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c7a  00000000  00000000  0002774b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0002b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001022  00000000  00000000  0002c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b8a  00000000  00000000  0002d912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae61  00000000  00000000  0005249c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fe6  00000000  00000000  0006d2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001402e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a00  00000000  00000000  00140328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00146d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db48 	.word	0x0800db48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800db48 	.word	0x0800db48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <AS5048_Transfer>:
#define AS5048_CMD_READ_ANGLE  0x3FFF  // адрес регистра угла

extern SPI_HandleTypeDef hspi1;

uint16_t AS5048_Transfer(uint16_t data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
    uint8_t tx[2] = { data >> 8, data & 0xFF };
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	733b      	strb	r3, [r7, #12]
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2] = {0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	813b      	strh	r3, [r7, #8]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <AS5048_Transfer+0x60>)
 8000f5c:	f002 fb4e 	bl	80035fc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, HAL_MAX_DELAY);
 8000f60:	f107 0208 	add.w	r2, r7, #8
 8000f64:	f107 010c 	add.w	r1, r7, #12
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2302      	movs	r3, #2
 8000f70:	480a      	ldr	r0, [pc, #40]	@ (8000f9c <AS5048_Transfer+0x64>)
 8000f72:	f004 faa8 	bl	80054c6 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
 8000f76:	2201      	movs	r2, #1
 8000f78:	2110      	movs	r1, #16
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <AS5048_Transfer+0x60>)
 8000f7c:	f002 fb3e 	bl	80035fc <HAL_GPIO_WritePin>

    return ((uint16_t)rx[0] << 8) | rx[1];
 8000f80:	7a3b      	ldrb	r3, [r7, #8]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	7a7b      	ldrb	r3, [r7, #9]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	b29b      	uxth	r3, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	2000043c 	.word	0x2000043c

08000fa0 <AS5048_ReadAngle>:

// Чтение угла
uint16_t AS5048_ReadAngle(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	AS5048_Transfer(AS5048_CMD_READ_ANGLE | 0x4000); // бит R=1 (чтение)
 8000fa6:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8000faa:	f7ff ffc5 	bl	8000f38 <AS5048_Transfer>
	    // Вторая транзакция — получение результата
	    uint16_t res = AS5048_Transfer(0x0000);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff ffc2 	bl	8000f38 <AS5048_Transfer>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	80fb      	strh	r3, [r7, #6]
	    return res & 0x3FFF;
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fbe:	b29b      	uxth	r3, r3
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <LPF_current_q>:
float dc_a = 0;
float dc_b = 0;
float dc_c = 0;

float LPF_current_q(float in)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0a01 	vstr	s0, [r7, #4]
    static float prev_q = 0.0f;   //syokai dake syokika
    float tau_q = 0.01f;         // tau > 0
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <LPF_current_q+0x88>)
 8000fd4:	617b      	str	r3, [r7, #20]
    float alpha = dt / (tau_q + dt);
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff fab6 	bl	8000548 <__aeabi_f2d>
 8000fdc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001048 <LPF_current_q+0x80>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff f953 	bl	800028c <__adddf3>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	a117      	add	r1, pc, #92	@ (adr r1, 8001048 <LPF_current_q+0x80>)
 8000fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ff0:	f7ff fc2c 	bl	800084c <__aeabi_ddiv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fdd4 	bl	8000ba8 <__aeabi_d2f>
 8001000:	4603      	mov	r3, r0
 8001002:	613b      	str	r3, [r7, #16]
    alpha = 0.2;
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <LPF_current_q+0x8c>)
 8001006:	613b      	str	r3, [r7, #16]

    float out = prev_q + alpha * (in - prev_q);
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <LPF_current_q+0x90>)
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001012:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001016:	edd7 7a04 	vldr	s15, [r7, #16]
 800101a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <LPF_current_q+0x90>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001028:	edc7 7a03 	vstr	s15, [r7, #12]
    prev_q = out;
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LPF_current_q+0x90>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6013      	str	r3, [r2, #0]
    return out;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	ee07 3a90 	vmov	s15, r3
}
 8001038:	eeb0 0a67 	vmov.f32	s0, s15
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	f3af 8000 	nop.w
 8001048:	eb1c432d 	.word	0xeb1c432d
 800104c:	3f1a36e2 	.word	0x3f1a36e2
 8001050:	3c23d70a 	.word	0x3c23d70a
 8001054:	3e4ccccd 	.word	0x3e4ccccd
 8001058:	20000310 	.word	0x20000310
 800105c:	00000000 	.word	0x00000000

08001060 <LPF_current_d>:

float LPF_current_d(float in)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a01 	vstr	s0, [r7, #4]
    static float prev_d = 0.0f;//syokai dake syokika
    float tau_d = 0.01f;         // tau > 0
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <LPF_current_d+0x88>)
 800106c:	617b      	str	r3, [r7, #20]
    float alpha = dt / (tau_d + dt);
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff fa6a 	bl	8000548 <__aeabi_f2d>
 8001074:	a31a      	add	r3, pc, #104	@ (adr r3, 80010e0 <LPF_current_d+0x80>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff f907 	bl	800028c <__adddf3>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	a117      	add	r1, pc, #92	@ (adr r1, 80010e0 <LPF_current_d+0x80>)
 8001084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001088:	f7ff fbe0 	bl	800084c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd88 	bl	8000ba8 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	613b      	str	r3, [r7, #16]
    alpha = 0.2;
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <LPF_current_d+0x8c>)
 800109e:	613b      	str	r3, [r7, #16]

    float out = prev_d + alpha * (in - prev_d);
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <LPF_current_d+0x90>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80010aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <LPF_current_d+0x90>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	edc7 7a03 	vstr	s15, [r7, #12]
    prev_d = out;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <LPF_current_d+0x90>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6013      	str	r3, [r2, #0]
    return out;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	ee07 3a90 	vmov	s15, r3
}
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	f3af 8000 	nop.w
 80010e0:	eb1c432d 	.word	0xeb1c432d
 80010e4:	3f1a36e2 	.word	0x3f1a36e2
 80010e8:	3c23d70a 	.word	0x3c23d70a
 80010ec:	3e4ccccd 	.word	0x3e4ccccd
 80010f0:	20000314 	.word	0x20000314
 80010f4:	00000000 	.word	0x00000000

080010f8 <foc_callback>:

Current foc_callback(uint16_t adc1_value, uint16_t adc2_value, float theta_electric_rad)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	ed2d 8b02 	vpush	{d8}
 80010fe:	b098      	sub	sp, #96	@ 0x60
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	ed87 0a04 	vstr	s0, [r7, #16]
 800110a:	82fb      	strh	r3, [r7, #22]
 800110c:	4613      	mov	r3, r2
 800110e:	82bb      	strh	r3, [r7, #20]
	Current current;
	float voltageA = (adc1_value/4095.0) * 3.265 - 3.265/2.0;
 8001110:	8afb      	ldrh	r3, [r7, #22]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa06 	bl	8000524 <__aeabi_i2d>
 8001118:	a38a      	add	r3, pc, #552	@ (adr r3, 8001344 <foc_callback+0x24c>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fb95 	bl	800084c <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	a388      	add	r3, pc, #544	@ (adr r3, 800134c <foc_callback+0x254>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fa62 	bl	80005f8 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	a385      	add	r3, pc, #532	@ (adr r3, 8001354 <foc_callback+0x25c>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff f8a1 	bl	8000288 <__aeabi_dsub>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd2b 	bl	8000ba8 <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float voltageB = (adc2_value/4095.0) * 3.265 - 3.265/2.0;
 8001156:	8abb      	ldrh	r3, [r7, #20]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9e3 	bl	8000524 <__aeabi_i2d>
 800115e:	a379      	add	r3, pc, #484	@ (adr r3, 8001344 <foc_callback+0x24c>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fb72 	bl	800084c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	a376      	add	r3, pc, #472	@ (adr r3, 800134c <foc_callback+0x254>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa3f 	bl	80005f8 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a374      	add	r3, pc, #464	@ (adr r3, 8001354 <foc_callback+0x25c>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f87e 	bl	8000288 <__aeabi_dsub>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd08 	bl	8000ba8 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	65bb      	str	r3, [r7, #88]	@ 0x58
	float currentA_measure = voltageA/(0.05 * 10.0);
 800119c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011a0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80011a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	float currentB_measure = voltageB/(0.05 * 10.0);
 80011ac:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80011b0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80011b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    current.value1 = currentA_measure;
 80011bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011be:	61bb      	str	r3, [r7, #24]
	current.value2 = currentB_measure;
 80011c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011c2:	61fb      	str	r3, [r7, #28]
	float phasa_B_callback = current.value2;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float phasa_A_callback = current.value1;
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	float phasa_C_callback = -(phasa_B_callback + phasa_A_callback);
 80011cc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80011d0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	eef1 7a67 	vneg.f32	s15, s15
 80011dc:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	float mid = (1.f/3)*(phasa_B_callback + phasa_A_callback + phasa_C_callback);
 80011e0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80011e4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80011e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ec:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80011f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001340 <foc_callback+0x248>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	phasa_A_callback = phasa_A_callback - mid;
 8001200:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001204:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	phasa_B_callback = phasa_B_callback - mid;
 8001210:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001214:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	float alpha_callback = phasa_A_callback;
 8001220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float betta_callback = 1.0/sqrt(3)*(phasa_A_callback + 2.0*phasa_B_callback);
 8001224:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001226:	f7ff f98f 	bl	8000548 <__aeabi_f2d>
 800122a:	4604      	mov	r4, r0
 800122c:	460d      	mov	r5, r1
 800122e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001230:	f7ff f98a 	bl	8000548 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	f7ff f828 	bl	800028c <__adddf3>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f822 	bl	800028c <__adddf3>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	a339      	add	r3, pc, #228	@ (adr r3, 8001338 <foc_callback+0x240>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f9cf 	bl	80005f8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fca1 	bl	8000ba8 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	63bb      	str	r3, [r7, #56]	@ 0x38


	current.id_callback = alpha_callback * cosf(theta_electric_rad) + betta_callback * sinf(theta_electric_rad);
 800126a:	ed97 0a04 	vldr	s0, [r7, #16]
 800126e:	f00b feed 	bl	800d04c <cosf>
 8001272:	eeb0 7a40 	vmov.f32	s14, s0
 8001276:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800127a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800127e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001282:	f00b ff27 	bl	800d0d4 <sinf>
 8001286:	eeb0 7a40 	vmov.f32	s14, s0
 800128a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800128e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001292:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001296:	edc7 7a08 	vstr	s15, [r7, #32]
	current.iq_callback = -alpha_callback * sinf(theta_electric_rad) + betta_callback * cosf(theta_electric_rad);
 800129a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800129e:	eeb1 8a67 	vneg.f32	s16, s15
 80012a2:	ed97 0a04 	vldr	s0, [r7, #16]
 80012a6:	f00b ff15 	bl	800d0d4 <sinf>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
 80012ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80012b2:	ed97 0a04 	vldr	s0, [r7, #16]
 80012b6:	f00b fec9 	bl	800d04c <cosf>
 80012ba:	eeb0 7a40 	vmov.f32	s14, s0
 80012be:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	current.iq_callback = LPF_current_q(current.iq_callback);
 80012ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	f7ff fe77 	bl	8000fc8 <LPF_current_q>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	current.id_callback = LPF_current_d(current.id_callback);
 80012e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	f7ff feb9 	bl	8001060 <LPF_current_d>
 80012ee:	eef0 7a40 	vmov.f32	s15, s0
 80012f2:	edc7 7a08 	vstr	s15, [r7, #32]

	return current;
 80012f6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800130a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800130c:	ee06 0a10 	vmov	s12, r0
 8001310:	ee06 1a90 	vmov	s13, r1
 8001314:	ee07 2a10 	vmov	s14, r2
 8001318:	ee07 3a90 	vmov	s15, r3
}
 800131c:	eeb0 0a46 	vmov.f32	s0, s12
 8001320:	eef0 0a66 	vmov.f32	s1, s13
 8001324:	eeb0 1a47 	vmov.f32	s2, s14
 8001328:	eef0 1a67 	vmov.f32	s3, s15
 800132c:	3760      	adds	r7, #96	@ 0x60
 800132e:	46bd      	mov	sp, r7
 8001330:	ecbd 8b02 	vpop	{d8}
 8001334:	bdb0      	pop	{r4, r5, r7, pc}
 8001336:	bf00      	nop
 8001338:	4590331d 	.word	0x4590331d
 800133c:	3fe279a7 	.word	0x3fe279a7
 8001340:	3eaaaaab 	.word	0x3eaaaaab
 8001344:	00000000 	.word	0x00000000
 8001348:	40affe00 	.word	0x40affe00
 800134c:	51eb851f 	.word	0x51eb851f
 8001350:	400a1eb8 	.word	0x400a1eb8
 8001354:	51eb851f 	.word	0x51eb851f
 8001358:	3ffa1eb8 	.word	0x3ffa1eb8
 800135c:	00000000 	.word	0x00000000

08001360 <foc_direct>:

Phasa foc_direct(float id_ref, float iq_ref, float angle_electric_rad, TIM_HandleTypeDef *htim)
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	ed2d 8b02 	vpush	{d8}
 8001366:	b094      	sub	sp, #80	@ 0x50
 8001368:	af00      	add	r7, sp, #0
 800136a:	ed87 0a07 	vstr	s0, [r7, #28]
 800136e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001372:	ed87 1a05 	vstr	s2, [r7, #20]
 8001376:	6138      	str	r0, [r7, #16]
	Phasa phasa;
	float alpha = (id_ref * cosf(angle_electric_rad)) - (iq_ref * sinf(angle_electric_rad));
 8001378:	ed97 0a05 	vldr	s0, [r7, #20]
 800137c:	f00b fe66 	bl	800d04c <cosf>
 8001380:	eeb0 7a40 	vmov.f32	s14, s0
 8001384:	edd7 7a07 	vldr	s15, [r7, #28]
 8001388:	ee27 8a27 	vmul.f32	s16, s14, s15
 800138c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001390:	f00b fea0 	bl	800d0d4 <sinf>
 8001394:	eeb0 7a40 	vmov.f32	s14, s0
 8001398:	edd7 7a06 	vldr	s15, [r7, #24]
 800139c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80013a4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	float betta = (id_ref * sinf(angle_electric_rad)) + (iq_ref * cosf(angle_electric_rad));
 80013a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80013ac:	f00b fe92 	bl	800d0d4 <sinf>
 80013b0:	eeb0 7a40 	vmov.f32	s14, s0
 80013b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80013bc:	ed97 0a05 	vldr	s0, [r7, #20]
 80013c0:	f00b fe44 	bl	800d04c <cosf>
 80013c4:	eeb0 7a40 	vmov.f32	s14, s0
 80013c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013d4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	phasa.phasa_A = alpha;
 80013d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
	phasa.phasa_B = (-0.5 * alpha) + (sqrt(3)/2 * betta);
 80013dc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80013de:	f7ff f8b3 	bl	8000548 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4bb4      	ldr	r3, [pc, #720]	@ (80016b8 <foc_direct+0x358>)
 80013e8:	f7ff f906 	bl	80005f8 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80013f6:	f7ff f8a7 	bl	8000548 <__aeabi_f2d>
 80013fa:	a3ad      	add	r3, pc, #692	@ (adr r3, 80016b0 <foc_direct+0x350>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f8fa 	bl	80005f8 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4620      	mov	r0, r4
 800140a:	4629      	mov	r1, r5
 800140c:	f7fe ff3e 	bl	800028c <__adddf3>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbc6 	bl	8000ba8 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
	phasa.phasa_C = (-0.5 * alpha) - (sqrt(3)/2 * betta);
 8001420:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4ba3      	ldr	r3, [pc, #652]	@ (80016b8 <foc_direct+0x358>)
 800142c:	f7ff f8e4 	bl	80005f8 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4614      	mov	r4, r2
 8001436:	461d      	mov	r5, r3
 8001438:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800143a:	f7ff f885 	bl	8000548 <__aeabi_f2d>
 800143e:	a39c      	add	r3, pc, #624	@ (adr r3, 80016b0 <foc_direct+0x350>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff f8d8 	bl	80005f8 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4620      	mov	r0, r4
 800144e:	4629      	mov	r1, r5
 8001450:	f7fe ff1a 	bl	8000288 <__aeabi_dsub>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fba4 	bl	8000ba8 <__aeabi_d2f>
 8001460:	4603      	mov	r3, r0
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//phasa.phasa_A = phasa.phasa_A * 0.5 + 0.5;
	//phasa.phasa_B = phasa.phasa_B * 0.5 + 0.5;
	//phasa.phasa_C = phasa.phasa_C * 0.5 + 0.5;

    center = VOLTAGE_LIMIT / 2;
 8001464:	4b95      	ldr	r3, [pc, #596]	@ (80016bc <foc_direct+0x35c>)
 8001466:	4a96      	ldr	r2, [pc, #600]	@ (80016c0 <foc_direct+0x360>)
 8001468:	601a      	str	r2, [r3, #0]
    float Umin = min(Ua, min(Ub, Uc));
 800146a:	4b96      	ldr	r3, [pc, #600]	@ (80016c4 <foc_direct+0x364>)
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	4b95      	ldr	r3, [pc, #596]	@ (80016c8 <foc_direct+0x368>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d503      	bpl.n	8001488 <foc_direct+0x128>
 8001480:	4b90      	ldr	r3, [pc, #576]	@ (80016c4 <foc_direct+0x364>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	e002      	b.n	800148e <foc_direct+0x12e>
 8001488:	4b8f      	ldr	r3, [pc, #572]	@ (80016c8 <foc_direct+0x368>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	4b8f      	ldr	r3, [pc, #572]	@ (80016cc <foc_direct+0x36c>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	dd02      	ble.n	80014a4 <foc_direct+0x144>
 800149e:	4b8b      	ldr	r3, [pc, #556]	@ (80016cc <foc_direct+0x36c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	e00f      	b.n	80014c4 <foc_direct+0x164>
 80014a4:	4b87      	ldr	r3, [pc, #540]	@ (80016c4 <foc_direct+0x364>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	4b87      	ldr	r3, [pc, #540]	@ (80016c8 <foc_direct+0x368>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d502      	bpl.n	80014c0 <foc_direct+0x160>
 80014ba:	4b82      	ldr	r3, [pc, #520]	@ (80016c4 <foc_direct+0x364>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	e001      	b.n	80014c4 <foc_direct+0x164>
 80014c0:	4b81      	ldr	r3, [pc, #516]	@ (80016c8 <foc_direct+0x368>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	647b      	str	r3, [r7, #68]	@ 0x44
    float Umax = max(Ua, max(Ub, Uc));
 80014c6:	4b7f      	ldr	r3, [pc, #508]	@ (80016c4 <foc_direct+0x364>)
 80014c8:	ed93 7a00 	vldr	s14, [r3]
 80014cc:	4b7e      	ldr	r3, [pc, #504]	@ (80016c8 <foc_direct+0x368>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	dd03      	ble.n	80014e4 <foc_direct+0x184>
 80014dc:	4b79      	ldr	r3, [pc, #484]	@ (80016c4 <foc_direct+0x364>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	e002      	b.n	80014ea <foc_direct+0x18a>
 80014e4:	4b78      	ldr	r3, [pc, #480]	@ (80016c8 <foc_direct+0x368>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	4b78      	ldr	r3, [pc, #480]	@ (80016cc <foc_direct+0x36c>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	d502      	bpl.n	8001500 <foc_direct+0x1a0>
 80014fa:	4b74      	ldr	r3, [pc, #464]	@ (80016cc <foc_direct+0x36c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	e00f      	b.n	8001520 <foc_direct+0x1c0>
 8001500:	4b70      	ldr	r3, [pc, #448]	@ (80016c4 <foc_direct+0x364>)
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	4b70      	ldr	r3, [pc, #448]	@ (80016c8 <foc_direct+0x368>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	dd02      	ble.n	800151c <foc_direct+0x1bc>
 8001516:	4b6b      	ldr	r3, [pc, #428]	@ (80016c4 <foc_direct+0x364>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	e001      	b.n	8001520 <foc_direct+0x1c0>
 800151c:	4b6a      	ldr	r3, [pc, #424]	@ (80016c8 <foc_direct+0x368>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	643b      	str	r3, [r7, #64]	@ 0x40
    center -= (Umax + Umin) / 2;
 8001522:	4b66      	ldr	r3, [pc, #408]	@ (80016bc <foc_direct+0x35c>)
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800152c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001530:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001534:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001538:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800153c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001540:	4b5e      	ldr	r3, [pc, #376]	@ (80016bc <foc_direct+0x35c>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
    Ua += center;
 8001546:	4b61      	ldr	r3, [pc, #388]	@ (80016cc <foc_direct+0x36c>)
 8001548:	ed93 7a00 	vldr	s14, [r3]
 800154c:	4b5b      	ldr	r3, [pc, #364]	@ (80016bc <foc_direct+0x35c>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001556:	4b5d      	ldr	r3, [pc, #372]	@ (80016cc <foc_direct+0x36c>)
 8001558:	edc3 7a00 	vstr	s15, [r3]
    Ub += center;
 800155c:	4b59      	ldr	r3, [pc, #356]	@ (80016c4 <foc_direct+0x364>)
 800155e:	ed93 7a00 	vldr	s14, [r3]
 8001562:	4b56      	ldr	r3, [pc, #344]	@ (80016bc <foc_direct+0x35c>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156c:	4b55      	ldr	r3, [pc, #340]	@ (80016c4 <foc_direct+0x364>)
 800156e:	edc3 7a00 	vstr	s15, [r3]
    Uc += center;
 8001572:	4b55      	ldr	r3, [pc, #340]	@ (80016c8 <foc_direct+0x368>)
 8001574:	ed93 7a00 	vldr	s14, [r3]
 8001578:	4b50      	ldr	r3, [pc, #320]	@ (80016bc <foc_direct+0x35c>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	4b51      	ldr	r3, [pc, #324]	@ (80016c8 <foc_direct+0x368>)
 8001584:	edc3 7a00 	vstr	s15, [r3]

    Ua = _constrain(phasa.phasa_A, 0, VOLTAGE_LIMIT);
 8001588:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800158c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d502      	bpl.n	800159c <foc_direct+0x23c>
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e00b      	b.n	80015b4 <foc_direct+0x254>
 800159c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80016d0 <foc_direct+0x370>
 80015a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	dd01      	ble.n	80015b2 <foc_direct+0x252>
 80015ae:	4b49      	ldr	r3, [pc, #292]	@ (80016d4 <foc_direct+0x374>)
 80015b0:	e000      	b.n	80015b4 <foc_direct+0x254>
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	4a45      	ldr	r2, [pc, #276]	@ (80016cc <foc_direct+0x36c>)
 80015b6:	6013      	str	r3, [r2, #0]
    Ub = _constrain(phasa.phasa_B, 0, VOLTAGE_LIMIT);
 80015b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80015bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d502      	bpl.n	80015cc <foc_direct+0x26c>
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	e00b      	b.n	80015e4 <foc_direct+0x284>
 80015cc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80015d0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80016d0 <foc_direct+0x370>
 80015d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	dd01      	ble.n	80015e2 <foc_direct+0x282>
 80015de:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <foc_direct+0x374>)
 80015e0:	e000      	b.n	80015e4 <foc_direct+0x284>
 80015e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e4:	4a37      	ldr	r2, [pc, #220]	@ (80016c4 <foc_direct+0x364>)
 80015e6:	6013      	str	r3, [r2, #0]
    Uc = _constrain(phasa.phasa_C, 0, VOLTAGE_LIMIT);
 80015e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80015ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d502      	bpl.n	80015fc <foc_direct+0x29c>
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e00b      	b.n	8001614 <foc_direct+0x2b4>
 80015fc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001600:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80016d0 <foc_direct+0x370>
 8001604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	dd01      	ble.n	8001612 <foc_direct+0x2b2>
 800160e:	4b31      	ldr	r3, [pc, #196]	@ (80016d4 <foc_direct+0x374>)
 8001610:	e000      	b.n	8001614 <foc_direct+0x2b4>
 8001612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001614:	4a2c      	ldr	r2, [pc, #176]	@ (80016c8 <foc_direct+0x368>)
 8001616:	6013      	str	r3, [r2, #0]

    dc_a = _constrain(Ua / VOLTAGE_POWER_SUPPLY, 0.0f, 1.0f);
 8001618:	4b2c      	ldr	r3, [pc, #176]	@ (80016cc <foc_direct+0x36c>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	d502      	bpl.n	8001636 <foc_direct+0x2d6>
 8001630:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80016d8 <foc_direct+0x378>
 8001634:	e017      	b.n	8001666 <foc_direct+0x306>
 8001636:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <foc_direct+0x36c>)
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001640:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001644:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	dd02      	ble.n	8001658 <foc_direct+0x2f8>
 8001652:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001656:	e006      	b.n	8001666 <foc_direct+0x306>
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <foc_direct+0x36c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <foc_direct+0x37c>)
 8001668:	edc3 7a00 	vstr	s15, [r3]
    dc_b = _constrain(Ub / VOLTAGE_POWER_SUPPLY, 0.0f, 1.0f);
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <foc_direct+0x364>)
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d502      	bpl.n	800168a <foc_direct+0x32a>
 8001684:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80016d8 <foc_direct+0x378>
 8001688:	e031      	b.n	80016ee <foc_direct+0x38e>
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <foc_direct+0x364>)
 800168c:	ed93 7a00 	vldr	s14, [r3]
 8001690:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001698:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800169c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	dd1c      	ble.n	80016e0 <foc_direct+0x380>
 80016a6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80016aa:	e020      	b.n	80016ee <foc_direct+0x38e>
 80016ac:	f3af 8000 	nop.w
 80016b0:	e8584caa 	.word	0xe8584caa
 80016b4:	3febb67a 	.word	0x3febb67a
 80016b8:	bfe00000 	.word	0xbfe00000
 80016bc:	20000300 	.word	0x20000300
 80016c0:	40a645a2 	.word	0x40a645a2
 80016c4:	200002f8 	.word	0x200002f8
 80016c8:	200002fc 	.word	0x200002fc
 80016cc:	200002f4 	.word	0x200002f4
 80016d0:	412645a2 	.word	0x412645a2
 80016d4:	412645a2 	.word	0x412645a2
 80016d8:	00000000 	.word	0x00000000
 80016dc:	20000304 	.word	0x20000304
 80016e0:	4b42      	ldr	r3, [pc, #264]	@ (80017ec <foc_direct+0x48c>)
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 80016ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ee:	4b40      	ldr	r3, [pc, #256]	@ (80017f0 <foc_direct+0x490>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]
    dc_c = _constrain(Uc / VOLTAGE_POWER_SUPPLY, 0.0f, 1.0f);
 80016f4:	4b3f      	ldr	r3, [pc, #252]	@ (80017f4 <foc_direct+0x494>)
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d502      	bpl.n	8001712 <foc_direct+0x3b2>
 800170c:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80017f8 <foc_direct+0x498>
 8001710:	e017      	b.n	8001742 <foc_direct+0x3e2>
 8001712:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <foc_direct+0x494>)
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800171c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001720:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	dd02      	ble.n	8001734 <foc_direct+0x3d4>
 800172e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001732:	e006      	b.n	8001742 <foc_direct+0x3e2>
 8001734:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <foc_direct+0x494>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800173e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001742:	4b2e      	ldr	r3, [pc, #184]	@ (80017fc <foc_direct+0x49c>)
 8001744:	edc3 7a00 	vstr	s15, [r3]

    uint32_t period = __HAL_TIM_GET_AUTORELOAD(htim);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c



    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (uint32_t)(dc_a * (float)period) );
 8001750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <foc_direct+0x4a0>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800176c:	ee17 2a90 	vmov	r2, s15
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (uint32_t)(dc_b * (float)period) );
 8001772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800177c:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <foc_direct+0x490>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178e:	ee17 2a90 	vmov	r2, s15
 8001792:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (uint32_t)(dc_c * (float)period) );
 8001794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <foc_direct+0x49c>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b0:	ee17 2a90 	vmov	r2, s15
 80017b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	return phasa;
 80017b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017ba:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80017be:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ca:	ee06 1a90 	vmov	s13, r1
 80017ce:	ee07 2a10 	vmov	s14, r2
 80017d2:	ee07 3a90 	vmov	s15, r3


	//TIM1->CCR1 = TIM1->ARR*phasa_A;
	//TIM1->CCR2 = TIM1->ARR*phasa_B;
	//TIM1->CCR3 = TIM1->ARR*phasa_C;
}
 80017d6:	eeb0 0a66 	vmov.f32	s0, s13
 80017da:	eef0 0a47 	vmov.f32	s1, s14
 80017de:	eeb0 1a67 	vmov.f32	s2, s15
 80017e2:	3750      	adds	r7, #80	@ 0x50
 80017e4:	46bd      	mov	sp, r7
 80017e6:	ecbd 8b02 	vpop	{d8}
 80017ea:	bdb0      	pop	{r4, r5, r7, pc}
 80017ec:	200002f8 	.word	0x200002f8
 80017f0:	20000308 	.word	0x20000308
 80017f4:	200002fc 	.word	0x200002fc
 80017f8:	00000000 	.word	0x00000000
 80017fc:	2000030c 	.word	0x2000030c
 8001800:	20000304 	.word	0x20000304

08001804 <_normalizeAngle>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float _normalizeAngle(float angle) {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle > 2.0f * (float)M_PI) {
 800180e:	e007      	b.n	8001820 <_normalizeAngle+0x1c>
        angle -= 2.0f * (float)M_PI;
 8001810:	edd7 7a01 	vldr	s15, [r7, #4]
 8001814:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001868 <_normalizeAngle+0x64>
 8001818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800181c:	edc7 7a01 	vstr	s15, [r7, #4]
    while (angle > 2.0f * (float)M_PI) {
 8001820:	edd7 7a01 	vldr	s15, [r7, #4]
 8001824:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001868 <_normalizeAngle+0x64>
 8001828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	dcee      	bgt.n	8001810 <_normalizeAngle+0xc>
    }
    while (angle < 0) {
 8001832:	e007      	b.n	8001844 <_normalizeAngle+0x40>
        angle += 2.0f * (float)M_PI;
 8001834:	edd7 7a01 	vldr	s15, [r7, #4]
 8001838:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001868 <_normalizeAngle+0x64>
 800183c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001840:	edc7 7a01 	vstr	s15, [r7, #4]
    while (angle < 0) {
 8001844:	edd7 7a01 	vldr	s15, [r7, #4]
 8001848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d4f0      	bmi.n	8001834 <_normalizeAngle+0x30>
    }
    return angle;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	ee07 3a90 	vmov	s15, r3
}
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40c90fdb 	.word	0x40c90fdb
 800186c:	00000000 	.word	0x00000000

08001870 <Sensor_Init>:

void Sensor_Init()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
    float mecAngleNum   = AS5048_ReadAngle() / 8192.0f * 360.0f;
 8001876:	f7ff fb93 	bl	8000fa0 <AS5048_ReadAngle>
 800187a:	ee07 0a90 	vmov	s15, r0
 800187e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001882:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80018e8 <Sensor_Init+0x78>
 8001886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80018ec <Sensor_Init+0x7c>
 800188e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001892:	edc7 7a01 	vstr	s15, [r7, #4]
    prev_angle_rad      = mecAngleNum * M_PI / 180.0f;
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	a310      	add	r3, pc, #64	@ (adr r3, 80018e0 <Sensor_Init+0x70>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fea9 	bl	80005f8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <Sensor_Init+0x80>)
 80018b4:	f7fe ffca 	bl	800084c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f972 	bl	8000ba8 <__aeabi_d2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a0b      	ldr	r2, [pc, #44]	@ (80018f4 <Sensor_Init+0x84>)
 80018c8:	6013      	str	r3, [r2, #0]
    full_rotations      = 0.0f;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <Sensor_Init+0x88>)
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	f3af 8000 	nop.w
 80018e0:	54442d18 	.word	0x54442d18
 80018e4:	400921fb 	.word	0x400921fb
 80018e8:	46000000 	.word	0x46000000
 80018ec:	43b40000 	.word	0x43b40000
 80018f0:	40668000 	.word	0x40668000
 80018f4:	20000350 	.word	0x20000350
 80018f8:	20000354 	.word	0x20000354
 80018fc:	00000000 	.word	0x00000000

08001900 <SensorUpdate>:

void SensorUpdate()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
    float mecAngleNum   = AS5048_ReadAngle() / 8192.0f * 360.0f;
 8001906:	f7ff fb4b 	bl	8000fa0 <AS5048_ReadAngle>
 800190a:	ee07 0a90 	vmov	s15, r0
 800190e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001912:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001a18 <SensorUpdate+0x118>
 8001916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001a1c <SensorUpdate+0x11c>
 800191e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001922:	edc7 7a03 	vstr	s15, [r7, #12]
    float angle_rad = mecAngleNum * M_PI / 180.0f;
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f7fe fe0e 	bl	8000548 <__aeabi_f2d>
 800192c:	a338      	add	r3, pc, #224	@ (adr r3, 8001a10 <SensorUpdate+0x110>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe61 	bl	80005f8 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <SensorUpdate+0x120>)
 8001944:	f7fe ff82 	bl	800084c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f92a 	bl	8000ba8 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	60bb      	str	r3, [r7, #8]

    float delta_angle = angle_rad - prev_angle_rad;
 8001958:	4b32      	ldr	r3, [pc, #200]	@ (8001a24 <SensorUpdate+0x124>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001966:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(delta_angle) > 0.8f * 2.0f * (float)M_PI) {
 800196a:	edd7 7a01 	vldr	s15, [r7, #4]
 800196e:	eef0 7ae7 	vabs.f32	s15, s15
 8001972:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001a28 <SensorUpdate+0x128>
 8001976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	dd13      	ble.n	80019a8 <SensorUpdate+0xa8>
        full_rotations += (delta_angle > 0.0f) ? -1 : 1;
 8001980:	edd7 7a01 	vldr	s15, [r7, #4]
 8001984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	dd02      	ble.n	8001994 <SensorUpdate+0x94>
 800198e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001992:	e001      	b.n	8001998 <SensorUpdate+0x98>
 8001994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <SensorUpdate+0x12c>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <SensorUpdate+0x12c>)
 80019a4:	edc3 7a00 	vstr	s15, [r3]
    }
    prev_angle_rad = angle_rad;
 80019a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <SensorUpdate+0x124>)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	6013      	str	r3, [r2, #0]

    angle_el = _normalizeAngle( (float)(sensor_direction * pole_pairs) * prev_angle_rad  - zero_electric_angle );
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <SensorUpdate+0x130>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a20      	ldr	r2, [pc, #128]	@ (8001a34 <SensorUpdate+0x134>)
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <SensorUpdate+0x124>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <SensorUpdate+0x138>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	f7ff ff13 	bl	8001804 <_normalizeAngle>
 80019de:	eef0 7a40 	vmov.f32	s15, s0
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <SensorUpdate+0x13c>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]

    now_angle = ( ( 2.0f * (float)M_PI ) * full_rotations ) + prev_angle_rad;
 80019e8:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <SensorUpdate+0x12c>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a40 <SensorUpdate+0x140>
 80019f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <SensorUpdate+0x124>)
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a00:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <SensorUpdate+0x144>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	54442d18 	.word	0x54442d18
 8001a14:	400921fb 	.word	0x400921fb
 8001a18:	46000000 	.word	0x46000000
 8001a1c:	43b40000 	.word	0x43b40000
 8001a20:	40668000 	.word	0x40668000
 8001a24:	20000350 	.word	0x20000350
 8001a28:	40a0d97c 	.word	0x40a0d97c
 8001a2c:	20000354 	.word	0x20000354
 8001a30:	20000010 	.word	0x20000010
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	20000358 	.word	0x20000358
 8001a3c:	20000360 	.word	0x20000360
 8001a40:	40c90fdb 	.word	0x40c90fdb
 8001a44:	2000035c 	.word	0x2000035c

08001a48 <electricalAngle>:

float electricalAngle(void){
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	return angle_el;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <electricalAngle+0x18>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	ee07 3a90 	vmov	s15, r3
}
 8001a54:	eeb0 0a67 	vmov.f32	s0, s15
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	20000360 	.word	0x20000360

08001a64 <PI_Controller_Iq>:

float PI_Controller_Iq(float iq_ref, float iq_callback )
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a6e:	edc7 0a00 	vstr	s1, [r7]
	float err;
	float output;
	err = iq_ref - iq_callback;
 8001a72:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a76:	edd7 7a00 	vldr	s15, [r7]
 8001a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7e:	edc7 7a03 	vstr	s15, [r7, #12]
	integralq += err*dt;
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <PI_Controller_Iq+0x78>)
 8001a84:	ed93 7a00 	vldr	s14, [r3]
 8001a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <PI_Controller_Iq+0x7c>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <PI_Controller_Iq+0x7c>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
	output = Kp*err + Ki*integralq;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <PI_Controller_Iq+0x80>)
 8001aa2:	ed93 7a00 	vldr	s14, [r3]
 8001aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <PI_Controller_Iq+0x84>)
 8001ab0:	edd3 6a00 	vldr	s13, [r3]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <PI_Controller_Iq+0x7c>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	edc7 7a02 	vstr	s15, [r7, #8]
	//if(output>1) output = 1;
	//if(output > pid->max) output = pid->max;
	//if(output < 0) output = 0;
	return output;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	ee07 3a90 	vmov	s15, r3
}
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000338 	.word	0x20000338
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	20000344 	.word	0x20000344

08001aec <PI_Controller_Id>:

float PI_Controller_Id(float id_ref, float id_callback )
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001af6:	edc7 0a00 	vstr	s1, [r7]
	float err;
	float output;
	err = id_ref - id_callback;
 8001afa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001afe:	edd7 7a00 	vldr	s15, [r7]
 8001b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b06:	edc7 7a03 	vstr	s15, [r7, #12]
	integrald += err*dt;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <PI_Controller_Id+0x78>)
 8001b0c:	ed93 7a00 	vldr	s14, [r3]
 8001b10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <PI_Controller_Id+0x7c>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <PI_Controller_Id+0x7c>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
	output = Kp_d*err + Ki*integrald;
 8001b28:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <PI_Controller_Id+0x80>)
 8001b2a:	ed93 7a00 	vldr	s14, [r3]
 8001b2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <PI_Controller_Id+0x84>)
 8001b38:	edd3 6a00 	vldr	s13, [r3]
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <PI_Controller_Id+0x7c>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	edc7 7a02 	vstr	s15, [r7, #8]
	//if(output<-0.5) output = -0.5;
	//if(output > 0.5) output = 0.5;
	//if(output < pid->min) output = pid->min;
	return output;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	ee07 3a90 	vmov	s15, r3
}
 8001b54:	eeb0 0a67 	vmov.f32	s0, s15
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000334 	.word	0x20000334
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000344 	.word	0x20000344

08001b74 <DWT_Init>:
	usb_rx_flag = 1;

	return USBD_OK;
}

void DWT_Init(void) {
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <DWT_Init+0x28>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <DWT_Init+0x28>)
 8001b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b82:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <DWT_Init+0x2c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <DWT_Init+0x2c>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000edf0 	.word	0xe000edf0
 8001ba0:	e0001000 	.word	0xe0001000

08001ba4 <alignSensor>:
    uint32_t ticks = (SystemCoreClock / 1000000) * us;
    while ((DWT->CYCCNT - start) < ticks);
}

void alignSensor()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
    phasa = foc_direct(0.0f, 1.0f, 3.0f * M_PI / 2.0f, &htim1);
 8001ba8:	4822      	ldr	r0, [pc, #136]	@ (8001c34 <alignSensor+0x90>)
 8001baa:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8001c38 <alignSensor+0x94>
 8001bae:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001bb2:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001c3c <alignSensor+0x98>
 8001bb6:	f7ff fbd3 	bl	8001360 <foc_direct>
 8001bba:	eef0 6a40 	vmov.f32	s13, s0
 8001bbe:	eeb0 7a60 	vmov.f32	s14, s1
 8001bc2:	eef0 7a41 	vmov.f32	s15, s2
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <alignSensor+0x9c>)
 8001bc8:	edc3 6a00 	vstr	s13, [r3]
 8001bcc:	ed83 7a01 	vstr	s14, [r3, #4]
 8001bd0:	edc3 7a02 	vstr	s15, [r3, #8]
    HAL_Delay(700);
 8001bd4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001bd8:	f000 fefc 	bl	80029d4 <HAL_Delay>
    SensorUpdate();
 8001bdc:	f7ff fe90 	bl	8001900 <SensorUpdate>
    zero_electric_angle = 0;
 8001be0:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <alignSensor+0xa0>)
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
    zero_electric_angle = electricalAngle();
 8001be8:	f7ff ff2e 	bl	8001a48 <electricalAngle>
 8001bec:	eef0 7a40 	vmov.f32	s15, s0
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <alignSensor+0xa0>)
 8001bf2:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(20);
 8001bf6:	2014      	movs	r0, #20
 8001bf8:	f000 feec 	bl	80029d4 <HAL_Delay>
    phasa = foc_direct(0.0f, 0.0f, 0.0f, &htim1);
 8001bfc:	480d      	ldr	r0, [pc, #52]	@ (8001c34 <alignSensor+0x90>)
 8001bfe:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8001c3c <alignSensor+0x98>
 8001c02:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001c3c <alignSensor+0x98>
 8001c06:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001c3c <alignSensor+0x98>
 8001c0a:	f7ff fba9 	bl	8001360 <foc_direct>
 8001c0e:	eef0 6a40 	vmov.f32	s13, s0
 8001c12:	eeb0 7a60 	vmov.f32	s14, s1
 8001c16:	eef0 7a41 	vmov.f32	s15, s2
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <alignSensor+0x9c>)
 8001c1c:	edc3 6a00 	vstr	s13, [r3]
 8001c20:	ed83 7a01 	vstr	s14, [r3, #4]
 8001c24:	edc3 7a02 	vstr	s15, [r3, #8]
    HAL_Delay(100);
 8001c28:	2064      	movs	r0, #100	@ 0x64
 8001c2a:	f000 fed3 	bl	80029d4 <HAL_Delay>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000494 	.word	0x20000494
 8001c38:	4096cbe4 	.word	0x4096cbe4
 8001c3c:	00000000 	.word	0x00000000
 8001c40:	20000318 	.word	0x20000318
 8001c44:	20000358 	.word	0x20000358

08001c48 <loopFOC>:
void loopFOC()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	SensorUpdate();
 8001c4e:	f7ff fe57 	bl	8001900 <SensorUpdate>
    angle_el = electricalAngle();
 8001c52:	f7ff fef9 	bl	8001a48 <electricalAngle>
 8001c56:	eef0 7a40 	vmov.f32	s15, s0
 8001c5a:	4b42      	ldr	r3, [pc, #264]	@ (8001d64 <loopFOC+0x11c>)
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Start(&hadc1);
 8001c60:	4841      	ldr	r0, [pc, #260]	@ (8001d68 <loopFOC+0x120>)
 8001c62:	f000 ff1f 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8001c66:	4841      	ldr	r0, [pc, #260]	@ (8001d6c <loopFOC+0x124>)
 8001c68:	f000 ff1c 	bl	8002aa4 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc3);
 8001c6c:	4840      	ldr	r0, [pc, #256]	@ (8001d70 <loopFOC+0x128>)
 8001c6e:	f000 ff19 	bl	8002aa4 <HAL_ADC_Start>
	adc1 = HAL_ADC_GetValue(&hadc1);
 8001c72:	483d      	ldr	r0, [pc, #244]	@ (8001d68 <loopFOC+0x120>)
 8001c74:	f000 ffe8 	bl	8002c48 <HAL_ADC_GetValue>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d74 <loopFOC+0x12c>)
 8001c7e:	801a      	strh	r2, [r3, #0]
	adc2 = HAL_ADC_GetValue(&hadc2);
 8001c80:	483a      	ldr	r0, [pc, #232]	@ (8001d6c <loopFOC+0x124>)
 8001c82:	f000 ffe1 	bl	8002c48 <HAL_ADC_GetValue>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <loopFOC+0x130>)
 8001c8c:	801a      	strh	r2, [r3, #0]
	adc3 = HAL_ADC_GetValue(&hadc3);
 8001c8e:	4838      	ldr	r0, [pc, #224]	@ (8001d70 <loopFOC+0x128>)
 8001c90:	f000 ffda 	bl	8002c48 <HAL_ADC_GetValue>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b38      	ldr	r3, [pc, #224]	@ (8001d7c <loopFOC+0x134>)
 8001c9a:	801a      	strh	r2, [r3, #0]
    current = foc_callback(adc1, adc2, angle_el);
 8001c9c:	4b35      	ldr	r3, [pc, #212]	@ (8001d74 <loopFOC+0x12c>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	4a35      	ldr	r2, [pc, #212]	@ (8001d78 <loopFOC+0x130>)
 8001ca2:	8812      	ldrh	r2, [r2, #0]
 8001ca4:	492f      	ldr	r1, [pc, #188]	@ (8001d64 <loopFOC+0x11c>)
 8001ca6:	edd1 7a00 	vldr	s15, [r1]
 8001caa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fa21 	bl	80010f8 <foc_callback>
 8001cb6:	eeb0 6a40 	vmov.f32	s12, s0
 8001cba:	eef0 6a60 	vmov.f32	s13, s1
 8001cbe:	eeb0 7a41 	vmov.f32	s14, s2
 8001cc2:	eef0 7a61 	vmov.f32	s15, s3
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <loopFOC+0x138>)
 8001cc8:	ed83 6a00 	vstr	s12, [r3]
 8001ccc:	edc3 6a01 	vstr	s13, [r3, #4]
 8001cd0:	ed83 7a02 	vstr	s14, [r3, #8]
 8001cd4:	edc3 7a03 	vstr	s15, [r3, #12]
    float id_ref = 0.0f;
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
    float iq_ref = 2.0f;
 8001cde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ce2:	603b      	str	r3, [r7, #0]
    vd = PI_Controller_Id(id_ref, current.id_callback);
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <loopFOC+0x138>)
 8001ce6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cea:	eef0 0a67 	vmov.f32	s1, s15
 8001cee:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cf2:	f7ff fefb 	bl	8001aec <PI_Controller_Id>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <loopFOC+0x13c>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
    vq = PI_Controller_Iq(iq_ref, current.iq_callback);
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <loopFOC+0x138>)
 8001d02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d06:	eef0 0a67 	vmov.f32	s1, s15
 8001d0a:	ed97 0a00 	vldr	s0, [r7]
 8001d0e:	f7ff fea9 	bl	8001a64 <PI_Controller_Iq>
 8001d12:	eef0 7a40 	vmov.f32	s15, s0
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <loopFOC+0x140>)
 8001d18:	edc3 7a00 	vstr	s15, [r3]
    phasa = foc_direct(vd, vq, angle_el , &htim1);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <loopFOC+0x13c>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <loopFOC+0x140>)
 8001d24:	ed93 7a00 	vldr	s14, [r3]
 8001d28:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <loopFOC+0x11c>)
 8001d2a:	edd3 6a00 	vldr	s13, [r3]
 8001d2e:	4817      	ldr	r0, [pc, #92]	@ (8001d8c <loopFOC+0x144>)
 8001d30:	eeb0 1a66 	vmov.f32	s2, s13
 8001d34:	eef0 0a47 	vmov.f32	s1, s14
 8001d38:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3c:	f7ff fb10 	bl	8001360 <foc_direct>
 8001d40:	eef0 6a40 	vmov.f32	s13, s0
 8001d44:	eeb0 7a60 	vmov.f32	s14, s1
 8001d48:	eef0 7a41 	vmov.f32	s15, s2
 8001d4c:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <loopFOC+0x148>)
 8001d4e:	edc3 6a00 	vstr	s13, [r3]
 8001d52:	ed83 7a01 	vstr	s14, [r3, #4]
 8001d56:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000360 	.word	0x20000360
 8001d68:	20000364 	.word	0x20000364
 8001d6c:	200003ac 	.word	0x200003ac
 8001d70:	200003f4 	.word	0x200003f4
 8001d74:	2000033c 	.word	0x2000033c
 8001d78:	2000033e 	.word	0x2000033e
 8001d7c:	20000340 	.word	0x20000340
 8001d80:	20000324 	.word	0x20000324
 8001d84:	20000348 	.word	0x20000348
 8001d88:	2000034c 	.word	0x2000034c
 8001d8c:	20000494 	.word	0x20000494
 8001d90:	20000318 	.word	0x20000318

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9a:	f000 fda9 	bl	80028f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9e:	f000 f833 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da2:	f000 fa7f 	bl	80022a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001da6:	f007 ffed 	bl	8009d84 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001daa:	f000 f897 	bl	8001edc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001dae:	f000 f8e7 	bl	8001f80 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001db2:	f000 f9bf 	bl	8002134 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001db6:	f000 f935 	bl	8002024 <MX_ADC3_Init>
  MX_SPI1_Init();
 8001dba:	f000 f985 	bl	80020c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4810      	ldr	r0, [pc, #64]	@ (8001e04 <main+0x70>)
 8001dc2:	f003 fead 	bl	8005b20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	480e      	ldr	r0, [pc, #56]	@ (8001e04 <main+0x70>)
 8001dca:	f003 fea9 	bl	8005b20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001dce:	2108      	movs	r1, #8
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <main+0x70>)
 8001dd2:	f003 fea5 	bl	8005b20 <HAL_TIM_PWM_Start>

  uint32_t last_tick = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
  uint32_t last_tick1 = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	603b      	str	r3, [r7, #0]
  DWT_Init();
 8001dde:	f7ff fec9 	bl	8001b74 <DWT_Init>
  Sensor_Init();
 8001de2:	f7ff fd45 	bl	8001870 <Sensor_Init>
  alignSensor();
 8001de6:	f7ff fedd 	bl	8001ba4 <alignSensor>
			{
				usb_rx_flag = 0;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
				HAL_Delay(100);
			}*/
			  if (HAL_GetTick() - last_tick >= 1)
 8001dea:	f000 fde7 	bl	80029bc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d0f9      	beq.n	8001dea <main+0x56>
			 	  {
				  last_tick = HAL_GetTick();
 8001df6:	f000 fde1 	bl	80029bc <HAL_GetTick>
 8001dfa:	6078      	str	r0, [r7, #4]
		  loopFOC();
 8001dfc:	f7ff ff24 	bl	8001c48 <loopFOC>
			  if (HAL_GetTick() - last_tick >= 1)
 8001e00:	e7f3      	b.n	8001dea <main+0x56>
 8001e02:	bf00      	nop
 8001e04:	20000494 	.word	0x20000494

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	@ 0x50
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	2230      	movs	r2, #48	@ 0x30
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f009 f9f5 	bl	800b206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	4b28      	ldr	r3, [pc, #160]	@ (8001ed4 <SystemClock_Config+0xcc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	4a27      	ldr	r2, [pc, #156]	@ (8001ed4 <SystemClock_Config+0xcc>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <SystemClock_Config+0xcc>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <SystemClock_Config+0xd0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <SystemClock_Config+0xd0>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <SystemClock_Config+0xd0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e7c:	23a8      	movs	r3, #168	@ 0xa8
 8001e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e84:	2307      	movs	r3, #7
 8001e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e88:	f107 0320 	add.w	r3, r7, #32
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 fe21 	bl	8004ad4 <HAL_RCC_OscConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e98:	f000 fa78 	bl	800238c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 f882 	bl	8004fc4 <HAL_RCC_ClockConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ec6:	f000 fa61 	bl	800238c <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3750      	adds	r7, #80	@ 0x50
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000

08001edc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001ef0:	4a21      	ldr	r2, [pc, #132]	@ (8001f78 <MX_ADC1_Init+0x9c>)
 8001ef2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f1c:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <MX_ADC1_Init+0xa0>)
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f3a:	480e      	ldr	r0, [pc, #56]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f3c:	f000 fd6e 	bl	8002a1c <HAL_ADC_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f46:	f000 fa21 	bl	800238c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f56:	463b      	mov	r3, r7
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	@ (8001f74 <MX_ADC1_Init+0x98>)
 8001f5c:	f000 fe82 	bl	8002c64 <HAL_ADC_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f66:	f000 fa11 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000364 	.word	0x20000364
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	0f000001 	.word	0x0f000001

08001f80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f86:	463b      	mov	r3, r7
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001f92:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001f94:	4a21      	ldr	r2, [pc, #132]	@ (800201c <MX_ADC2_Init+0x9c>)
 8001f96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f98:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001faa:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fb0:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fc0:	4a17      	ldr	r2, [pc, #92]	@ (8002020 <MX_ADC2_Init+0xa0>)
 8001fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001fca:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001fde:	480e      	ldr	r0, [pc, #56]	@ (8002018 <MX_ADC2_Init+0x98>)
 8001fe0:	f000 fd1c 	bl	8002a1c <HAL_ADC_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001fea:	f000 f9cf 	bl	800238c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	@ (8002018 <MX_ADC2_Init+0x98>)
 8002000:	f000 fe30 	bl	8002c64 <HAL_ADC_ConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800200a:	f000 f9bf 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200003ac 	.word	0x200003ac
 800201c:	40012100 	.word	0x40012100
 8002020:	0f000001 	.word	0x0f000001

08002024 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800202a:	463b      	mov	r3, r7
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002036:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <MX_ADC3_Init+0x98>)
 8002038:	4a21      	ldr	r2, [pc, #132]	@ (80020c0 <MX_ADC3_Init+0x9c>)
 800203a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800203c:	4b1f      	ldr	r3, [pc, #124]	@ (80020bc <MX_ADC3_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002042:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <MX_ADC3_Init+0x98>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002048:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <MX_ADC3_Init+0x98>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800204e:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <MX_ADC3_Init+0x98>)
 8002050:	2201      	movs	r2, #1
 8002052:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <MX_ADC3_Init+0x98>)
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800205c:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <MX_ADC3_Init+0x98>)
 800205e:	2200      	movs	r2, #0
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002062:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <MX_ADC3_Init+0x98>)
 8002064:	4a17      	ldr	r2, [pc, #92]	@ (80020c4 <MX_ADC3_Init+0xa0>)
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <MX_ADC3_Init+0x98>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800206e:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <MX_ADC3_Init+0x98>)
 8002070:	2201      	movs	r2, #1
 8002072:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <MX_ADC3_Init+0x98>)
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <MX_ADC3_Init+0x98>)
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002082:	480e      	ldr	r0, [pc, #56]	@ (80020bc <MX_ADC3_Init+0x98>)
 8002084:	f000 fcca 	bl	8002a1c <HAL_ADC_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800208e:	f000 f97d 	bl	800238c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002092:	2302      	movs	r3, #2
 8002094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002096:	2301      	movs	r3, #1
 8002098:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800209e:	463b      	mov	r3, r7
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	@ (80020bc <MX_ADC3_Init+0x98>)
 80020a4:	f000 fdde 	bl	8002c64 <HAL_ADC_ConfigChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80020ae:	f000 f96d 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200003f4 	.word	0x200003f4
 80020c0:	40012200 	.word	0x40012200
 80020c4:	0f000001 	.word	0x0f000001

080020c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <MX_SPI1_Init+0x64>)
 80020ce:	4a18      	ldr	r2, [pc, #96]	@ (8002130 <MX_SPI1_Init+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020d2:	4b16      	ldr	r3, [pc, #88]	@ (800212c <MX_SPI1_Init+0x64>)
 80020d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020da:	4b14      	ldr	r3, [pc, #80]	@ (800212c <MX_SPI1_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <MX_SPI1_Init+0x64>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <MX_SPI1_Init+0x64>)
 80020e8:	2202      	movs	r2, #2
 80020ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <MX_SPI1_Init+0x64>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <MX_SPI1_Init+0x64>)
 80020f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020fa:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <MX_SPI1_Init+0x64>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002100:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <MX_SPI1_Init+0x64>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <MX_SPI1_Init+0x64>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210c:	4b07      	ldr	r3, [pc, #28]	@ (800212c <MX_SPI1_Init+0x64>)
 800210e:	2200      	movs	r2, #0
 8002110:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <MX_SPI1_Init+0x64>)
 8002114:	220a      	movs	r2, #10
 8002116:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002118:	4804      	ldr	r0, [pc, #16]	@ (800212c <MX_SPI1_Init+0x64>)
 800211a:	f003 f94b 	bl	80053b4 <HAL_SPI_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002124:	f000 f932 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000043c 	.word	0x2000043c
 8002130:	40013000 	.word	0x40013000

08002134 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b096      	sub	sp, #88	@ 0x58
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002148:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	615a      	str	r2, [r3, #20]
 8002164:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2220      	movs	r2, #32
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f009 f84a 	bl	800b206 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002172:	4b4a      	ldr	r3, [pc, #296]	@ (800229c <MX_TIM1_Init+0x168>)
 8002174:	4a4a      	ldr	r2, [pc, #296]	@ (80022a0 <MX_TIM1_Init+0x16c>)
 8002176:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002178:	4b48      	ldr	r3, [pc, #288]	@ (800229c <MX_TIM1_Init+0x168>)
 800217a:	2200      	movs	r2, #0
 800217c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <MX_TIM1_Init+0x168>)
 8002180:	2220      	movs	r2, #32
 8002182:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8002184:	4b45      	ldr	r3, [pc, #276]	@ (800229c <MX_TIM1_Init+0x168>)
 8002186:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800218a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218c:	4b43      	ldr	r3, [pc, #268]	@ (800229c <MX_TIM1_Init+0x168>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002192:	4b42      	ldr	r3, [pc, #264]	@ (800229c <MX_TIM1_Init+0x168>)
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002198:	4b40      	ldr	r3, [pc, #256]	@ (800229c <MX_TIM1_Init+0x168>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800219e:	483f      	ldr	r0, [pc, #252]	@ (800229c <MX_TIM1_Init+0x168>)
 80021a0:	f003 fc16 	bl	80059d0 <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80021aa:	f000 f8ef 	bl	800238c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021b4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021b8:	4619      	mov	r1, r3
 80021ba:	4838      	ldr	r0, [pc, #224]	@ (800229c <MX_TIM1_Init+0x168>)
 80021bc:	f003 fe3a 	bl	8005e34 <HAL_TIM_ConfigClockSource>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021c6:	f000 f8e1 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021ca:	4834      	ldr	r0, [pc, #208]	@ (800229c <MX_TIM1_Init+0x168>)
 80021cc:	f003 fc4f 	bl	8005a6e <HAL_TIM_PWM_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80021d6:	f000 f8d9 	bl	800238c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021e6:	4619      	mov	r1, r3
 80021e8:	482c      	ldr	r0, [pc, #176]	@ (800229c <MX_TIM1_Init+0x168>)
 80021ea:	f004 fa01 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80021f4:	f000 f8ca 	bl	800238c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f8:	2360      	movs	r3, #96	@ 0x60
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002204:	2300      	movs	r3, #0
 8002206:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002218:	2200      	movs	r2, #0
 800221a:	4619      	mov	r1, r3
 800221c:	481f      	ldr	r0, [pc, #124]	@ (800229c <MX_TIM1_Init+0x168>)
 800221e:	f003 fd47 	bl	8005cb0 <HAL_TIM_PWM_ConfigChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002228:	f000 f8b0 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800222c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002230:	2204      	movs	r2, #4
 8002232:	4619      	mov	r1, r3
 8002234:	4819      	ldr	r0, [pc, #100]	@ (800229c <MX_TIM1_Init+0x168>)
 8002236:	f003 fd3b 	bl	8005cb0 <HAL_TIM_PWM_ConfigChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002240:	f000 f8a4 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002248:	2208      	movs	r2, #8
 800224a:	4619      	mov	r1, r3
 800224c:	4813      	ldr	r0, [pc, #76]	@ (800229c <MX_TIM1_Init+0x168>)
 800224e:	f003 fd2f 	bl	8005cb0 <HAL_TIM_PWM_ConfigChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002258:	f000 f898 	bl	800238c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002270:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002274:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4807      	ldr	r0, [pc, #28]	@ (800229c <MX_TIM1_Init+0x168>)
 8002280:	f004 fa32 	bl	80066e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800228a:	f000 f87f 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800228e:	4803      	ldr	r0, [pc, #12]	@ (800229c <MX_TIM1_Init+0x168>)
 8002290:	f000 f9b8 	bl	8002604 <HAL_TIM_MspPostInit>

}
 8002294:	bf00      	nop
 8002296:	3758      	adds	r7, #88	@ 0x58
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000494 	.word	0x20000494
 80022a0:	40010000 	.word	0x40010000

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <MX_GPIO_Init+0xdc>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002380 <MX_GPIO_Init+0xdc>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <MX_GPIO_Init+0xdc>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <MX_GPIO_Init+0xdc>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a28      	ldr	r2, [pc, #160]	@ (8002380 <MX_GPIO_Init+0xdc>)
 80022e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <MX_GPIO_Init+0xdc>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <MX_GPIO_Init+0xdc>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a21      	ldr	r2, [pc, #132]	@ (8002380 <MX_GPIO_Init+0xdc>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <MX_GPIO_Init+0xdc>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <MX_GPIO_Init+0xdc>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a1a      	ldr	r2, [pc, #104]	@ (8002380 <MX_GPIO_Init+0xdc>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <MX_GPIO_Init+0xdc>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	2110      	movs	r1, #16
 800232e:	4815      	ldr	r0, [pc, #84]	@ (8002384 <MX_GPIO_Init+0xe0>)
 8002330:	f001 f964 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	2104      	movs	r1, #4
 8002338:	4813      	ldr	r0, [pc, #76]	@ (8002388 <MX_GPIO_Init+0xe4>)
 800233a:	f001 f95f 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800233e:	2310      	movs	r3, #16
 8002340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	480b      	ldr	r0, [pc, #44]	@ (8002384 <MX_GPIO_Init+0xe0>)
 8002356:	f000 ffb5 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800235a:	2304      	movs	r3, #4
 800235c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	@ (8002388 <MX_GPIO_Init+0xe4>)
 8002372:	f000 ffa7 	bl	80032c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	@ 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400

0800238c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002390:	b672      	cpsid	i
}
 8002392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <Error_Handler+0x8>

08002398 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	4a0f      	ldr	r2, [pc, #60]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ae:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4a08      	ldr	r2, [pc, #32]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800

080023e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	@ 0x38
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a45      	ldr	r2, [pc, #276]	@ (800251c <HAL_ADC_MspInit+0x134>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d128      	bne.n	800245c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	4b44      	ldr	r3, [pc, #272]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	4a43      	ldr	r2, [pc, #268]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002418:	6453      	str	r3, [r2, #68]	@ 0x44
 800241a:	4b41      	ldr	r3, [pc, #260]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	4b3d      	ldr	r3, [pc, #244]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	4a3c      	ldr	r2, [pc, #240]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	@ 0x30
 8002436:	4b3a      	ldr	r3, [pc, #232]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002442:	2301      	movs	r3, #1
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002446:	2303      	movs	r3, #3
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002452:	4619      	mov	r1, r3
 8002454:	4833      	ldr	r0, [pc, #204]	@ (8002524 <HAL_ADC_MspInit+0x13c>)
 8002456:	f000 ff35 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800245a:	e05a      	b.n	8002512 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a31      	ldr	r2, [pc, #196]	@ (8002528 <HAL_ADC_MspInit+0x140>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d128      	bne.n	80024b8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 8002470:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a25      	ldr	r2, [pc, #148]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800249e:	2302      	movs	r3, #2
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a2:	2303      	movs	r3, #3
 80024a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ae:	4619      	mov	r1, r3
 80024b0:	481c      	ldr	r0, [pc, #112]	@ (8002524 <HAL_ADC_MspInit+0x13c>)
 80024b2:	f000 ff07 	bl	80032c4 <HAL_GPIO_Init>
}
 80024b6:	e02c      	b.n	8002512 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1b      	ldr	r2, [pc, #108]	@ (800252c <HAL_ADC_MspInit+0x144>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d127      	bne.n	8002512 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 80024cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <HAL_ADC_MspInit+0x138>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024fa:	2304      	movs	r3, #4
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fe:	2303      	movs	r3, #3
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	4805      	ldr	r0, [pc, #20]	@ (8002524 <HAL_ADC_MspInit+0x13c>)
 800250e:	f000 fed9 	bl	80032c4 <HAL_GPIO_Init>
}
 8002512:	bf00      	nop
 8002514:	3738      	adds	r7, #56	@ 0x38
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40012000 	.word	0x40012000
 8002520:	40023800 	.word	0x40023800
 8002524:	40020000 	.word	0x40020000
 8002528:	40012100 	.word	0x40012100
 800252c:	40012200 	.word	0x40012200

08002530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <HAL_SPI_MspInit+0x84>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12b      	bne.n	80025aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	4a17      	ldr	r2, [pc, #92]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 800255c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002560:	6453      	str	r3, [r2, #68]	@ 0x44
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800258a:	23e0      	movs	r3, #224	@ 0xe0
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259a:	2305      	movs	r3, #5
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	@ (80025bc <HAL_SPI_MspInit+0x8c>)
 80025a6:	f000 fe8d 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	@ 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40013000 	.word	0x40013000
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000

080025c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0b      	ldr	r2, [pc, #44]	@ (80025fc <HAL_TIM_Base_MspInit+0x3c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d10d      	bne.n	80025ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_TIM_Base_MspInit+0x40>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <HAL_TIM_Base_MspInit+0x40>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e2:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <HAL_TIM_Base_MspInit+0x40>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40010000 	.word	0x40010000
 8002600:	40023800 	.word	0x40023800

08002604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a12      	ldr	r2, [pc, #72]	@ (800266c <HAL_TIM_MspPostInit+0x68>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d11e      	bne.n	8002664 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_TIM_MspPostInit+0x6c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a10      	ldr	r2, [pc, #64]	@ (8002670 <HAL_TIM_MspPostInit+0x6c>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <HAL_TIM_MspPostInit+0x6c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002642:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002654:	2301      	movs	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4619      	mov	r1, r3
 800265e:	4805      	ldr	r0, [pc, #20]	@ (8002674 <HAL_TIM_MspPostInit+0x70>)
 8002660:	f000 fe30 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40010000 	.word	0x40010000
 8002670:	40023800 	.word	0x40023800
 8002674:	40020000 	.word	0x40020000

08002678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <NMI_Handler+0x4>

08002680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <MemManage_Handler+0x4>

08002690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <BusFault_Handler+0x4>

08002698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <UsageFault_Handler+0x4>

080026a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ce:	f000 f961 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <OTG_FS_IRQHandler+0x10>)
 80026de:	f001 f8ea 	bl	80038b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200019c4 	.word	0x200019c4

080026ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return 1;
 80026f0:	2301      	movs	r3, #1
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_kill>:

int _kill(int pid, int sig)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002706:	f008 fdd1 	bl	800b2ac <__errno>
 800270a:	4603      	mov	r3, r0
 800270c:	2216      	movs	r2, #22
 800270e:	601a      	str	r2, [r3, #0]
  return -1;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_exit>:

void _exit (int status)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ffe7 	bl	80026fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <_exit+0x12>

08002732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e00a      	b.n	800275a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002744:	f3af 8000 	nop.w
 8002748:	4601      	mov	r1, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	60ba      	str	r2, [r7, #8]
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	dbf0      	blt.n	8002744 <_read+0x12>
  }

  return len;
 8002762:	687b      	ldr	r3, [r7, #4]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e009      	b.n	8002792 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	60ba      	str	r2, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	dbf1      	blt.n	800277e <_write+0x12>
  }
  return len;
 800279a:	687b      	ldr	r3, [r7, #4]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_close>:

int _close(int file)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027cc:	605a      	str	r2, [r3, #4]
  return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_isatty>:

int _isatty(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002814:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <_sbrk+0x5c>)
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <_sbrk+0x60>)
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <_sbrk+0x64>)
 800282a:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <_sbrk+0x68>)
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	429a      	cmp	r2, r3
 800283a:	d207      	bcs.n	800284c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800283c:	f008 fd36 	bl	800b2ac <__errno>
 8002840:	4603      	mov	r3, r0
 8002842:	220c      	movs	r2, #12
 8002844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e009      	b.n	8002860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <_sbrk+0x64>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <_sbrk+0x64>)
 800285c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20020000 	.word	0x20020000
 800286c:	00000400 	.word	0x00000400
 8002870:	200004dc 	.word	0x200004dc
 8002874:	20002218 	.word	0x20002218

08002878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <SystemInit+0x20>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <SystemInit+0x20>)
 8002884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800289c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028a0:	f7ff ffea 	bl	8002878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028a4:	480c      	ldr	r0, [pc, #48]	@ (80028d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028a6:	490d      	ldr	r1, [pc, #52]	@ (80028dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ac:	e002      	b.n	80028b4 <LoopCopyDataInit>

080028ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b2:	3304      	adds	r3, #4

080028b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b8:	d3f9      	bcc.n	80028ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ba:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028bc:	4c0a      	ldr	r4, [pc, #40]	@ (80028e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c0:	e001      	b.n	80028c6 <LoopFillZerobss>

080028c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c4:	3204      	adds	r2, #4

080028c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c8:	d3fb      	bcc.n	80028c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80028ca:	f008 fcf5 	bl	800b2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ce:	f7ff fa61 	bl	8001d94 <main>
  bx  lr    
 80028d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028dc:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80028e0:	0800e308 	.word	0x0800e308
  ldr r2, =_sbss
 80028e4:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80028e8:	20002214 	.word	0x20002214

080028ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ec:	e7fe      	b.n	80028ec <ADC_IRQHandler>
	...

080028f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_Init+0x40>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <HAL_Init+0x40>)
 80028fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <HAL_Init+0x40>)
 8002906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800290a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_Init+0x40>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002918:	2003      	movs	r0, #3
 800291a:	f000 fc91 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291e:	200f      	movs	r0, #15
 8002920:	f000 f808 	bl	8002934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002924:	f7ff fd38 	bl	8002398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023c00 	.word	0x40023c00

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fca9 	bl	80032aa <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 fc71 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000014 	.word	0x20000014
 800298c:	2000001c 	.word	0x2000001c
 8002990:	20000018 	.word	0x20000018

08002994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_IncTick+0x20>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000001c 	.word	0x2000001c
 80029b8:	200004e0 	.word	0x200004e0

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	200004e0 	.word	0x200004e0

080029d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff ffee 	bl	80029bc <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d005      	beq.n	80029fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_Delay+0x44>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029fa:	bf00      	nop
 80029fc:	f7ff ffde 	bl	80029bc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d8f7      	bhi.n	80029fc <HAL_Delay+0x28>
  {
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000001c 	.word	0x2000001c

08002a1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e033      	b.n	8002a9a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fcd4 	bl	80023e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a62:	f023 0302 	bic.w	r3, r3, #2
 8002a66:	f043 0202 	orr.w	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fa1a 	bl	8002ea8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a8a:	e001      	b.n	8002a90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_Start+0x1a>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e0b2      	b.n	8002c24 <HAL_ADC_Start+0x180>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d018      	beq.n	8002b06 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae4:	4b52      	ldr	r3, [pc, #328]	@ (8002c30 <HAL_ADC_Start+0x18c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	@ (8002c34 <HAL_ADC_Start+0x190>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0c9a      	lsrs	r2, r3, #18
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002af8:	e002      	b.n	8002b00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f9      	bne.n	8002afa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d17a      	bne.n	8002c0a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b3e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b52:	d106      	bne.n	8002b62 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b58:	f023 0206 	bic.w	r2, r3, #6
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b60:	e002      	b.n	8002b68 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b70:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <HAL_ADC_Start+0x194>)
 8002b72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d12a      	bne.n	8002be0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c3c <HAL_ADC_Start+0x198>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d015      	beq.n	8002bc0 <HAL_ADC_Start+0x11c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a29      	ldr	r2, [pc, #164]	@ (8002c40 <HAL_ADC_Start+0x19c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d105      	bne.n	8002baa <HAL_ADC_Start+0x106>
 8002b9e:	4b26      	ldr	r3, [pc, #152]	@ (8002c38 <HAL_ADC_Start+0x194>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a25      	ldr	r2, [pc, #148]	@ (8002c44 <HAL_ADC_Start+0x1a0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d136      	bne.n	8002c22 <HAL_ADC_Start+0x17e>
 8002bb4:	4b20      	ldr	r3, [pc, #128]	@ (8002c38 <HAL_ADC_Start+0x194>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d130      	bne.n	8002c22 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d129      	bne.n	8002c22 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	e020      	b.n	8002c22 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <HAL_ADC_Start+0x198>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d11b      	bne.n	8002c22 <HAL_ADC_Start+0x17e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d114      	bne.n	8002c22 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	e00b      	b.n	8002c22 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	20000014 	.word	0x20000014
 8002c34:	431bde83 	.word	0x431bde83
 8002c38:	40012300 	.word	0x40012300
 8002c3c:	40012000 	.word	0x40012000
 8002c40:	40012100 	.word	0x40012100
 8002c44:	40012200 	.word	0x40012200

08002c48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1c>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e105      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x228>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b09      	cmp	r3, #9
 8002c8e:	d925      	bls.n	8002cdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68d9      	ldr	r1, [r3, #12]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b1e      	subs	r3, #30
 8002ca6:	2207      	movs	r2, #7
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43da      	mvns	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68d9      	ldr	r1, [r3, #12]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	4603      	mov	r3, r0
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4403      	add	r3, r0
 8002cce:	3b1e      	subs	r3, #30
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e022      	b.n	8002d22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6919      	ldr	r1, [r3, #16]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6919      	ldr	r1, [r3, #16]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4403      	add	r3, r0
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d824      	bhi.n	8002d74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b05      	subs	r3, #5
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	400a      	ands	r2, r1
 8002d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	3b05      	subs	r3, #5
 8002d66:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d72:	e04c      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d824      	bhi.n	8002dc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b23      	subs	r3, #35	@ 0x23
 8002d8e:	221f      	movs	r2, #31
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43da      	mvns	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	3b23      	subs	r3, #35	@ 0x23
 8002db8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dc4:	e023      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b41      	subs	r3, #65	@ 0x41
 8002dd8:	221f      	movs	r2, #31
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	400a      	ands	r2, r1
 8002de6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b41      	subs	r3, #65	@ 0x41
 8002e02:	fa00 f203 	lsl.w	r2, r0, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e0e:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <HAL_ADC_ConfigChannel+0x234>)
 8002e10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a21      	ldr	r2, [pc, #132]	@ (8002e9c <HAL_ADC_ConfigChannel+0x238>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1cc>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b12      	cmp	r3, #18
 8002e22:	d105      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	@ (8002e9c <HAL_ADC_ConfigChannel+0x238>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d123      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x21e>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d003      	beq.n	8002e4a <HAL_ADC_ConfigChannel+0x1e6>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b11      	cmp	r3, #17
 8002e48:	d11b      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d111      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x23c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a10      	ldr	r2, [pc, #64]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x240>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	0c9a      	lsrs	r2, r3, #18
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e74:	e002      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f9      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40012300 	.word	0x40012300
 8002e9c:	40012000 	.word	0x40012000
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	431bde83 	.word	0x431bde83

08002ea8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb0:	4b79      	ldr	r3, [pc, #484]	@ (8003098 <ADC_Init+0x1f0>)
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	021a      	lsls	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6899      	ldr	r1, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	4a58      	ldr	r2, [pc, #352]	@ (800309c <ADC_Init+0x1f4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d022      	beq.n	8002f86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6899      	ldr	r1, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	e00f      	b.n	8002fa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fa4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0202 	bic.w	r2, r2, #2
 8002fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6899      	ldr	r1, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7e1b      	ldrb	r3, [r3, #24]
 8002fc0:	005a      	lsls	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01b      	beq.n	800300c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ff2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	3b01      	subs	r3, #1
 8003000:	035a      	lsls	r2, r3, #13
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	e007      	b.n	800301c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800301a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800302a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	3b01      	subs	r3, #1
 8003038:	051a      	lsls	r2, r3, #20
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800305e:	025a      	lsls	r2, r3, #9
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	029a      	lsls	r2, r3, #10
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40012300 	.word	0x40012300
 800309c:	0f000001 	.word	0x0f000001

080030a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	@ (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	@ (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	@ (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	@ 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	@ 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff8e 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	@ (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	@ (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff29 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff3e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff8e 	bl	8003194 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5d 	bl	8003140 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff31 	bl	8003104 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e16b      	b.n	80035b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f040 815a 	bne.w	80035b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d005      	beq.n	8003316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	2b02      	cmp	r3, #2
 8003314:	d130      	bne.n	8003378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 0201 	and.w	r2, r3, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b03      	cmp	r3, #3
 8003382:	d017      	beq.n	80033b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d123      	bne.n	8003408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	220f      	movs	r2, #15
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	08da      	lsrs	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3208      	adds	r2, #8
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80b4 	beq.w	80035b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b60      	ldr	r3, [pc, #384]	@ (80035d0 <HAL_GPIO_Init+0x30c>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	4a5f      	ldr	r2, [pc, #380]	@ (80035d0 <HAL_GPIO_Init+0x30c>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003458:	6453      	str	r3, [r2, #68]	@ 0x44
 800345a:	4b5d      	ldr	r3, [pc, #372]	@ (80035d0 <HAL_GPIO_Init+0x30c>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003466:	4a5b      	ldr	r2, [pc, #364]	@ (80035d4 <HAL_GPIO_Init+0x310>)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	220f      	movs	r2, #15
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a52      	ldr	r2, [pc, #328]	@ (80035d8 <HAL_GPIO_Init+0x314>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d02b      	beq.n	80034ea <HAL_GPIO_Init+0x226>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a51      	ldr	r2, [pc, #324]	@ (80035dc <HAL_GPIO_Init+0x318>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d025      	beq.n	80034e6 <HAL_GPIO_Init+0x222>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a50      	ldr	r2, [pc, #320]	@ (80035e0 <HAL_GPIO_Init+0x31c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01f      	beq.n	80034e2 <HAL_GPIO_Init+0x21e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4f      	ldr	r2, [pc, #316]	@ (80035e4 <HAL_GPIO_Init+0x320>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d019      	beq.n	80034de <HAL_GPIO_Init+0x21a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4e      	ldr	r2, [pc, #312]	@ (80035e8 <HAL_GPIO_Init+0x324>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_GPIO_Init+0x216>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4d      	ldr	r2, [pc, #308]	@ (80035ec <HAL_GPIO_Init+0x328>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00d      	beq.n	80034d6 <HAL_GPIO_Init+0x212>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4c      	ldr	r2, [pc, #304]	@ (80035f0 <HAL_GPIO_Init+0x32c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d007      	beq.n	80034d2 <HAL_GPIO_Init+0x20e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	@ (80035f4 <HAL_GPIO_Init+0x330>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_GPIO_Init+0x20a>
 80034ca:	2307      	movs	r3, #7
 80034cc:	e00e      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034ce:	2308      	movs	r3, #8
 80034d0:	e00c      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034d2:	2306      	movs	r3, #6
 80034d4:	e00a      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034d6:	2305      	movs	r3, #5
 80034d8:	e008      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034da:	2304      	movs	r3, #4
 80034dc:	e006      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034de:	2303      	movs	r3, #3
 80034e0:	e004      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034ea:	2300      	movs	r3, #0
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	f002 0203 	and.w	r2, r2, #3
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	4093      	lsls	r3, r2
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034fc:	4935      	ldr	r1, [pc, #212]	@ (80035d4 <HAL_GPIO_Init+0x310>)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800350a:	4b3b      	ldr	r3, [pc, #236]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800352e:	4a32      	ldr	r2, [pc, #200]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003534:	4b30      	ldr	r3, [pc, #192]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003558:	4a27      	ldr	r2, [pc, #156]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800355e:	4b26      	ldr	r3, [pc, #152]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003582:	4a1d      	ldr	r2, [pc, #116]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003588:	4b1b      	ldr	r3, [pc, #108]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ac:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	f67f ae90 	bls.w	80032e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3724      	adds	r7, #36	@ 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020400 	.word	0x40020400
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020c00 	.word	0x40020c00
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40021400 	.word	0x40021400
 80035f0:	40021800 	.word	0x40021800
 80035f4:	40021c00 	.word	0x40021c00
 80035f8:	40013c00 	.word	0x40013c00

080035fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
 8003608:	4613      	mov	r3, r2
 800360a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003618:	e003      	b.n	8003622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	041a      	lsls	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	619a      	str	r2, [r3, #24]
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af02      	add	r7, sp, #8
 8003634:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e101      	b.n	8003844 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f006 fd62 	bl	800a124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2203      	movs	r2, #3
 8003664:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800366e:	d102      	bne.n	8003676 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f003 f99d 	bl	80069ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7c1a      	ldrb	r2, [r3, #16]
 8003688:	f88d 2000 	strb.w	r2, [sp]
 800368c:	3304      	adds	r3, #4
 800368e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003690:	f003 f87c 	bl	800678c <USB_CoreInit>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0ce      	b.n	8003844 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f003 f995 	bl	80069dc <USB_SetCurrentMode>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0bf      	b.n	8003844 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
 80036c8:	e04a      	b.n	8003760 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3315      	adds	r3, #21
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036de:	7bfa      	ldrb	r2, [r7, #15]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3314      	adds	r3, #20
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	b298      	uxth	r0, r3
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	332e      	adds	r3, #46	@ 0x2e
 8003706:	4602      	mov	r2, r0
 8003708:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3318      	adds	r3, #24
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	331c      	adds	r3, #28
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	3320      	adds	r3, #32
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3324      	adds	r3, #36	@ 0x24
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	3301      	adds	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	791b      	ldrb	r3, [r3, #4]
 8003764:	7bfa      	ldrb	r2, [r7, #15]
 8003766:	429a      	cmp	r2, r3
 8003768:	d3af      	bcc.n	80036ca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e044      	b.n	80037fa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	3301      	adds	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	791b      	ldrb	r3, [r3, #4]
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	429a      	cmp	r2, r3
 8003802:	d3b5      	bcc.n	8003770 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7c1a      	ldrb	r2, [r3, #16]
 800380c:	f88d 2000 	strb.w	r2, [sp]
 8003810:	3304      	adds	r3, #4
 8003812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003814:	f003 f92e 	bl	8006a74 <USB_DevInit>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e00c      	b.n	8003844 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f004 f978 	bl	8007b32 <USB_DevDisconnect>

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_PCD_Start+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e022      	b.n	80038ae <HAL_PCD_Start+0x62>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003888:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f003 f87f 	bl	8006998 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f004 f926 	bl	8007af0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038b6:	b590      	push	{r4, r7, lr}
 80038b8:	b08d      	sub	sp, #52	@ 0x34
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 f9e4 	bl	8007c9a <USB_GetMode>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 848c 	bne.w	80041f2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 f948 	bl	8007b74 <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8482 	beq.w	80041f0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f004 f935 	bl	8007b74 <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d107      	bne.n	8003924 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f002 0202 	and.w	r2, r2, #2
 8003922:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f004 f923 	bl	8007b74 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b10      	cmp	r3, #16
 8003936:	d161      	bne.n	80039fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0210 	bic.w	r2, r2, #16
 8003946:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	0c5b      	lsrs	r3, r3, #17
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	2b02      	cmp	r3, #2
 8003972:	d124      	bne.n	80039be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d035      	beq.n	80039ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800398a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6a38      	ldr	r0, [r7, #32]
 8003994:	f003 ff5a 	bl	800784c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a4:	441a      	add	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b6:	441a      	add	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	615a      	str	r2, [r3, #20]
 80039bc:	e016      	b.n	80039ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	0c5b      	lsrs	r3, r3, #17
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d110      	bne.n	80039ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039d0:	2208      	movs	r2, #8
 80039d2:	4619      	mov	r1, r3
 80039d4:	6a38      	ldr	r0, [r7, #32]
 80039d6:	f003 ff39 	bl	800784c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e6:	441a      	add	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0210 	orr.w	r2, r2, #16
 80039fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 f8b7 	bl	8007b74 <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a10:	f040 80a7 	bne.w	8003b62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 f8bc 	bl	8007b9a <USB_ReadDevAllOutEpInterrupt>
 8003a22:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a24:	e099      	b.n	8003b5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 808e 	beq.w	8003b4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f004 f8e0 	bl	8007c02 <USB_ReadDevOutEPInterrupt>
 8003a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fea4 	bl	80047b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2308      	movs	r3, #8
 8003a82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 ff7a 	bl	8004980 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d030      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aba:	2b80      	cmp	r3, #128	@ 0x80
 8003abc:	d109      	bne.n	8003ad2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003acc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ad0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f006 fc17 	bl	800a330 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2302      	movs	r3, #2
 8003b12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af62 	bne.w	8003a26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 f804 	bl	8007b74 <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b76:	f040 80db 	bne.w	8003d30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f004 f825 	bl	8007bce <USB_ReadDevAllInEpInterrupt>
 8003b84:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b8a:	e0cd      	b.n	8003d28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80c2 	beq.w	8003d1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f004 f84b 	bl	8007c3e <USB_ReadDevInEPInterrupt>
 8003ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d057      	beq.n	8003c64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69f9      	ldr	r1, [r7, #28]
 8003bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	2301      	movs	r3, #1
 8003be8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	799b      	ldrb	r3, [r3, #6]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d132      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	3320      	adds	r3, #32
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4403      	add	r3, r0
 8003c12:	331c      	adds	r3, #28
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4419      	add	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4403      	add	r3, r0
 8003c26:	3320      	adds	r3, #32
 8003c28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3324      	adds	r3, #36	@ 0x24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c50:	461a      	mov	r2, r3
 8003c52:	2101      	movs	r1, #1
 8003c54:	f004 f852 	bl	8007cfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f006 fae1 	bl	800a226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c96:	461a      	mov	r2, r3
 8003c98:	2310      	movs	r3, #16
 8003c9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2340      	movs	r3, #64	@ 0x40
 8003cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d023      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cc4:	6a38      	ldr	r0, [r7, #32]
 8003cc6:	f003 f839 	bl	8006d3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	3310      	adds	r3, #16
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3304      	adds	r3, #4
 8003cdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	78db      	ldrb	r3, [r3, #3]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f006 fb2e 	bl	800a354 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d04:	461a      	mov	r2, r3
 8003d06:	2302      	movs	r3, #2
 8003d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fcbd 	bl	8004696 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	3301      	adds	r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f47f af2e 	bne.w	8003b8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f003 ff1d 	bl	8007b74 <USB_ReadInterrupts>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d44:	d122      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d108      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fea4 	bl	8004abc <HAL_PCDEx_LPM_Callback>
 8003d74:	e002      	b.n	8003d7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f006 facc 	bl	800a314 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f003 feef 	bl	8007b74 <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da0:	d112      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f006 fa88 	bl	800a2c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003dc6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 fed1 	bl	8007b74 <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ddc:	f040 80b7 	bne.w	8003f4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2110      	movs	r1, #16
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 ff9e 	bl	8006d3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e00:	2300      	movs	r3, #0
 8003e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e04:	e046      	b.n	8003e94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e12:	461a      	mov	r2, r3
 8003e14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e46:	461a      	mov	r2, r3
 8003e48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e5e:	0151      	lsls	r1, r2, #5
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	440a      	add	r2, r1
 8003e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e7e:	0151      	lsls	r1, r2, #5
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	440a      	add	r2, r1
 8003e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	3301      	adds	r3, #1
 8003e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	791b      	ldrb	r3, [r3, #4]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d3b2      	bcc.n	8003e06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003eb2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7bdb      	ldrb	r3, [r3, #15]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d016      	beq.n	8003eea <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ecc:	f043 030b 	orr.w	r3, r3, #11
 8003ed0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ee2:	f043 030b 	orr.w	r3, r3, #11
 8003ee6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ee8:	e015      	b.n	8003f16 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ef8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003efc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003f00:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f10:	f043 030b 	orr.w	r3, r3, #11
 8003f14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f24:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f003 fedf 	bl	8007cfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 fe0e 	bl	8007b74 <USB_ReadInterrupts>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f62:	d123      	bne.n	8003fac <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 fea4 	bl	8007cb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f002 ff5b 	bl	8006e2e <USB_GetDevSpeed>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681c      	ldr	r4, [r3, #0]
 8003f84:	f001 fa0a 	bl	800539c <HAL_RCC_GetHCLKFreq>
 8003f88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4620      	mov	r0, r4
 8003f92:	f002 fc5f 	bl	8006854 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f006 f96d 	bl	800a276 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 fddf 	bl	8007b74 <USB_ReadInterrupts>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f006 f94a 	bl	800a25a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f002 0208 	and.w	r2, r2, #8
 8003fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f003 fdca 	bl	8007b74 <USB_ReadInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b80      	cmp	r3, #128	@ 0x80
 8003fe8:	d123      	bne.n	8004032 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffa:	e014      	b.n	8004026 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d105      	bne.n	8004020 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fb0a 	bl	8004634 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	3301      	adds	r3, #1
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	791b      	ldrb	r3, [r3, #4]
 800402a:	461a      	mov	r2, r3
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	4293      	cmp	r3, r2
 8004030:	d3e4      	bcc.n	8003ffc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fd9c 	bl	8007b74 <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004046:	d13c      	bne.n	80040c2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004048:	2301      	movs	r3, #1
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
 800404c:	e02b      	b.n	80040a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3318      	adds	r3, #24
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d115      	bne.n	80040a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004074:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004076:	2b00      	cmp	r3, #0
 8004078:	da12      	bge.n	80040a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3317      	adds	r3, #23
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 faca 	bl	8004634 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	3301      	adds	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	791b      	ldrb	r3, [r3, #4]
 80040aa:	461a      	mov	r2, r3
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d3cd      	bcc.n	800404e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80040c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fd54 	bl	8007b74 <USB_ReadInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040d6:	d156      	bne.n	8004186 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d8:	2301      	movs	r3, #1
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
 80040dc:	e045      	b.n	800416a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d12e      	bne.n	8004164 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004106:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004108:	2b00      	cmp	r3, #0
 800410a:	da2b      	bge.n	8004164 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	0c1a      	lsrs	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004116:	4053      	eors	r3, r2
 8004118:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800411c:	2b00      	cmp	r3, #0
 800411e:	d121      	bne.n	8004164 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800415c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004160:	6053      	str	r3, [r2, #4]
            break;
 8004162:	e008      	b.n	8004176 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	3301      	adds	r3, #1
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	791b      	ldrb	r3, [r3, #4]
 800416e:	461a      	mov	r2, r3
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	4293      	cmp	r3, r2
 8004174:	d3b3      	bcc.n	80040de <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f003 fcf2 	bl	8007b74 <USB_ReadInterrupts>
 8004190:	4603      	mov	r3, r0
 8004192:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419a:	d10a      	bne.n	80041b2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f006 f8eb 	bl	800a378 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80041b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f003 fcdc 	bl	8007b74 <USB_ReadInterrupts>
 80041bc:	4603      	mov	r3, r0
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d115      	bne.n	80041f2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f006 f8db 	bl	800a394 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e000      	b.n	80041f2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80041f0:	bf00      	nop
    }
  }
}
 80041f2:	3734      	adds	r7, #52	@ 0x34
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}

080041f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_PCD_SetAddress+0x1a>
 800420e:	2302      	movs	r3, #2
 8004210:	e012      	b.n	8004238 <HAL_PCD_SetAddress+0x40>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f003 fc3b 	bl	8007aa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4603      	mov	r3, r0
 8004250:	70fb      	strb	r3, [r7, #3]
 8004252:	460b      	mov	r3, r1
 8004254:	803b      	strh	r3, [r7, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800425e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004262:	2b00      	cmp	r3, #0
 8004264:	da0f      	bge.n	8004286 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	f003 020f 	and.w	r2, r3, #15
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	3310      	adds	r3, #16
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	705a      	strb	r2, [r3, #1]
 8004284:	e00f      	b.n	80042a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	f003 020f 	and.w	r2, r3, #15
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	3304      	adds	r3, #4
 800429e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80042b2:	883b      	ldrh	r3, [r7, #0]
 80042b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	78ba      	ldrb	r2, [r7, #2]
 80042c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042d4:	78bb      	ldrb	r3, [r7, #2]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d102      	bne.n	80042e0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_PCD_EP_Open+0xae>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e00e      	b.n	800430c <HAL_PCD_EP_Open+0xcc>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f002 fdbb 	bl	8006e78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800430a:	7afb      	ldrb	r3, [r7, #11]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004324:	2b00      	cmp	r3, #0
 8004326:	da0f      	bge.n	8004348 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 020f 	and.w	r2, r3, #15
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	3310      	adds	r3, #16
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4413      	add	r3, r2
 800433c:	3304      	adds	r3, #4
 800433e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	705a      	strb	r2, [r3, #1]
 8004346:	e00f      	b.n	8004368 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	f003 020f 	and.w	r2, r3, #15
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	3304      	adds	r3, #4
 8004360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_PCD_EP_Close+0x6e>
 800437e:	2302      	movs	r3, #2
 8004380:	e00e      	b.n	80043a0 <HAL_PCD_EP_Close+0x8c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	4618      	mov	r0, r3
 8004392:	f002 fdf9 	bl	8006f88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	460b      	mov	r3, r1
 80043b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b8:	7afb      	ldrb	r3, [r7, #11]
 80043ba:	f003 020f 	and.w	r2, r3, #15
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	3304      	adds	r3, #4
 80043d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2200      	movs	r2, #0
 80043e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ea:	7afb      	ldrb	r3, [r7, #11]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	799b      	ldrb	r3, [r3, #6]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d102      	bne.n	8004404 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	799b      	ldrb	r3, [r3, #6]
 800440c:	461a      	mov	r2, r3
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	f002 fe96 	bl	8007140 <USB_EPStartXfer>

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	f003 020f 	and.w	r2, r3, #15
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004440:	681b      	ldr	r3, [r3, #0]
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	460b      	mov	r3, r1
 800445c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	f003 020f 	and.w	r2, r3, #15
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	3310      	adds	r3, #16
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	3304      	adds	r3, #4
 8004474:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2201      	movs	r2, #1
 800448c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	b2da      	uxtb	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	799b      	ldrb	r3, [r3, #6]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d102      	bne.n	80044a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	799b      	ldrb	r3, [r3, #6]
 80044b0:	461a      	mov	r2, r3
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	f002 fe44 	bl	8007140 <USB_EPStartXfer>

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	7912      	ldrb	r2, [r2, #4]
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e04f      	b.n	8004580 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da0f      	bge.n	8004508 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	3310      	adds	r3, #16
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	705a      	strb	r2, [r3, #1]
 8004506:	e00d      	b.n	8004524 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	3304      	adds	r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_PCD_EP_SetStall+0x82>
 8004540:	2302      	movs	r3, #2
 8004542:	e01d      	b.n	8004580 <HAL_PCD_EP_SetStall+0xbe>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	4618      	mov	r0, r3
 8004554:	f003 f9d2 	bl	80078fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7999      	ldrb	r1, [r3, #6]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004570:	461a      	mov	r2, r3
 8004572:	f003 fbc3 	bl	8007cfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	7912      	ldrb	r2, [r2, #4]
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e042      	b.n	800462c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	da0f      	bge.n	80045ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	f003 020f 	and.w	r2, r3, #15
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	3310      	adds	r3, #16
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	3304      	adds	r3, #4
 80045c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	705a      	strb	r2, [r3, #1]
 80045cc:	e00f      	b.n	80045ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	f003 020f 	and.w	r2, r3, #15
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	3304      	adds	r3, #4
 80045e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_PCD_EP_ClrStall+0x86>
 800460a:	2302      	movs	r3, #2
 800460c:	e00e      	b.n	800462c <HAL_PCD_EP_ClrStall+0xa4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68f9      	ldr	r1, [r7, #12]
 800461c:	4618      	mov	r0, r3
 800461e:	f003 f9db 	bl	80079d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004644:	2b00      	cmp	r3, #0
 8004646:	da0c      	bge.n	8004662 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 020f 	and.w	r2, r3, #15
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	3310      	adds	r3, #16
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	3304      	adds	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e00c      	b.n	800467c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	f003 020f 	and.w	r2, r3, #15
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	3304      	adds	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	4618      	mov	r0, r3
 8004684:	f002 fffa 	bl	800767c <USB_EPStopXfer>
 8004688:	4603      	mov	r3, r0
 800468a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800468c:	7afb      	ldrb	r3, [r7, #11]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b08a      	sub	sp, #40	@ 0x28
 800469a:	af02      	add	r7, sp, #8
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	3310      	adds	r3, #16
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	3304      	adds	r3, #4
 80046bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d901      	bls.n	80046ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e06b      	b.n	80047a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d902      	bls.n	80046ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3303      	adds	r3, #3
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046f2:	e02a      	b.n	800474a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	429a      	cmp	r2, r3
 8004708:	d902      	bls.n	8004710 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	3303      	adds	r3, #3
 8004714:	089b      	lsrs	r3, r3, #2
 8004716:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68d9      	ldr	r1, [r3, #12]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	4603      	mov	r3, r0
 800472c:	6978      	ldr	r0, [r7, #20]
 800472e:	f003 f84f 	bl	80077d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	441a      	add	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	429a      	cmp	r2, r3
 800475e:	d809      	bhi.n	8004774 <PCD_WriteEmptyTxFifo+0xde>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004768:	429a      	cmp	r2, r3
 800476a:	d203      	bcs.n	8004774 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1bf      	bne.n	80046f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	d811      	bhi.n	80047a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	43db      	mvns	r3, r3
 800479a:	6939      	ldr	r1, [r7, #16]
 800479c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047a0:	4013      	ands	r3, r2
 80047a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	333c      	adds	r3, #60	@ 0x3c
 80047c8:	3304      	adds	r3, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	799b      	ldrb	r3, [r3, #6]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d17b      	bne.n	80048de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4a61      	ldr	r2, [pc, #388]	@ (8004978 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	f240 80b9 	bls.w	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80b3 	beq.w	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	461a      	mov	r2, r3
 8004814:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004818:	6093      	str	r3, [r2, #8]
 800481a:	e0a7      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004832:	461a      	mov	r2, r3
 8004834:	2320      	movs	r3, #32
 8004836:	6093      	str	r3, [r2, #8]
 8004838:	e098      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 8093 	bne.w	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	4a4b      	ldr	r2, [pc, #300]	@ (8004978 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d90f      	bls.n	800486e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004864:	461a      	mov	r2, r3
 8004866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800486a:	6093      	str	r3, [r2, #8]
 800486c:	e07e      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	3304      	adds	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	0159      	lsls	r1, r3, #5
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	440b      	add	r3, r1
 8004890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d114      	bne.n	80048d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048b8:	461a      	mov	r2, r3
 80048ba:	2101      	movs	r1, #1
 80048bc:	f003 fa1e 	bl	8007cfc <USB_EP0_OutStart>
 80048c0:	e006      	b.n	80048d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	441a      	add	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f005 fc8a 	bl	800a1f0 <HAL_PCD_DataOutStageCallback>
 80048dc:	e046      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4a26      	ldr	r2, [pc, #152]	@ (800497c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d124      	bne.n	8004930 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fc:	461a      	mov	r2, r3
 80048fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004902:	6093      	str	r3, [r2, #8]
 8004904:	e032      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	2320      	movs	r3, #32
 8004920:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f005 fc61 	bl	800a1f0 <HAL_PCD_DataOutStageCallback>
 800492e:	e01d      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d114      	bne.n	8004960 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004958:	461a      	mov	r2, r3
 800495a:	2100      	movs	r1, #0
 800495c:	f003 f9ce 	bl	8007cfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f005 fc42 	bl	800a1f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	4f54300a 	.word	0x4f54300a
 800497c:	4f54310a 	.word	0x4f54310a

08004980 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	333c      	adds	r3, #60	@ 0x3c
 8004998:	3304      	adds	r3, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d90e      	bls.n	80049d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d009      	beq.n	80049d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049cc:	461a      	mov	r2, r3
 80049ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f005 fbf9 	bl	800a1cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d90c      	bls.n	80049fc <PCD_EP_OutSetupPacket_int+0x7c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	799b      	ldrb	r3, [r3, #6]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d108      	bne.n	80049fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049f4:	461a      	mov	r2, r3
 80049f6:	2101      	movs	r1, #1
 80049f8:	f003 f980 	bl	8007cfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	4f54300a 	.word	0x4f54300a

08004a0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d107      	bne.n	8004a3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a2a:	883b      	ldrh	r3, [r7, #0]
 8004a2c:	0419      	lsls	r1, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a38:	e028      	b.n	8004a8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4413      	add	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	e00d      	b.n	8004a6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	3340      	adds	r3, #64	@ 0x40
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4413      	add	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	3301      	adds	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d3ec      	bcc.n	8004a4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a74:	883b      	ldrh	r3, [r7, #0]
 8004a76:	0418      	lsls	r0, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	4302      	orrs	r2, r0
 8004a84:	3340      	adds	r3, #64	@ 0x40
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e267      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d075      	beq.n	8004bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004af2:	4b88      	ldr	r3, [pc, #544]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d00c      	beq.n	8004b18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afe:	4b85      	ldr	r3, [pc, #532]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d112      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0a:	4b82      	ldr	r3, [pc, #520]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b16:	d10b      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	4b7e      	ldr	r3, [pc, #504]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d05b      	beq.n	8004bdc <HAL_RCC_OscConfig+0x108>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d157      	bne.n	8004bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e242      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b38:	d106      	bne.n	8004b48 <HAL_RCC_OscConfig+0x74>
 8004b3a:	4b76      	ldr	r3, [pc, #472]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a75      	ldr	r2, [pc, #468]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e01d      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x98>
 8004b52:	4b70      	ldr	r3, [pc, #448]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a6f      	ldr	r2, [pc, #444]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6c      	ldr	r2, [pc, #432]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
 8004b6c:	4b69      	ldr	r3, [pc, #420]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a68      	ldr	r2, [pc, #416]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	4b66      	ldr	r3, [pc, #408]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a65      	ldr	r2, [pc, #404]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d013      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd ff16 	bl	80029bc <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fd ff12 	bl	80029bc <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e207      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0xc0>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fd ff02 	bl	80029bc <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fd fefe 	bl	80029bc <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	@ 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e1f3      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	4b51      	ldr	r3, [pc, #324]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0xe8>
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d063      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf6:	4b47      	ldr	r3, [pc, #284]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d11c      	bne.n	8004c3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c02:	4b44      	ldr	r3, [pc, #272]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0e:	4b41      	ldr	r3, [pc, #260]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCC_OscConfig+0x152>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d001      	beq.n	8004c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e1c7      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c26:	4b3b      	ldr	r3, [pc, #236]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4937      	ldr	r1, [pc, #220]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	e03a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c44:	4b34      	ldr	r3, [pc, #208]	@ (8004d18 <HAL_RCC_OscConfig+0x244>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fd feb7 	bl	80029bc <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c52:	f7fd feb3 	bl	80029bc <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e1a8      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c64:	4b2b      	ldr	r3, [pc, #172]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c70:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4925      	ldr	r1, [pc, #148]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]
 8004c84:	e015      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c86:	4b24      	ldr	r3, [pc, #144]	@ (8004d18 <HAL_RCC_OscConfig+0x244>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fe96 	bl	80029bc <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fd fe92 	bl	80029bc <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e187      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d036      	beq.n	8004d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <HAL_RCC_OscConfig+0x248>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fd fe76 	bl	80029bc <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd4:	f7fd fe72 	bl	80029bc <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e167      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x200>
 8004cf2:	e01b      	b.n	8004d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf4:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_OscConfig+0x248>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fd fe5f 	bl	80029bc <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d00:	e00e      	b.n	8004d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d02:	f7fd fe5b 	bl	80029bc <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d907      	bls.n	8004d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e150      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
 8004d14:	40023800 	.word	0x40023800
 8004d18:	42470000 	.word	0x42470000
 8004d1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	4b88      	ldr	r3, [pc, #544]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ea      	bne.n	8004d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8097 	beq.w	8004e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3e:	4b81      	ldr	r3, [pc, #516]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	4a7c      	ldr	r2, [pc, #496]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6a:	4b77      	ldr	r3, [pc, #476]	@ (8004f48 <HAL_RCC_OscConfig+0x474>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d118      	bne.n	8004da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d76:	4b74      	ldr	r3, [pc, #464]	@ (8004f48 <HAL_RCC_OscConfig+0x474>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a73      	ldr	r2, [pc, #460]	@ (8004f48 <HAL_RCC_OscConfig+0x474>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d82:	f7fd fe1b 	bl	80029bc <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8a:	f7fd fe17 	bl	80029bc <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e10c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f48 <HAL_RCC_OscConfig+0x474>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <HAL_RCC_OscConfig+0x2ea>
 8004db0:	4b64      	ldr	r3, [pc, #400]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db4:	4a63      	ldr	r2, [pc, #396]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dbc:	e01c      	b.n	8004df8 <HAL_RCC_OscConfig+0x324>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x30c>
 8004dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	4a5e      	ldr	r2, [pc, #376]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	f043 0304 	orr.w	r3, r3, #4
 8004dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dde:	e00b      	b.n	8004df8 <HAL_RCC_OscConfig+0x324>
 8004de0:	4b58      	ldr	r3, [pc, #352]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	4a57      	ldr	r2, [pc, #348]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dec:	4b55      	ldr	r3, [pc, #340]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df0:	4a54      	ldr	r2, [pc, #336]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004df2:	f023 0304 	bic.w	r3, r3, #4
 8004df6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d015      	beq.n	8004e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fd fddc 	bl	80029bc <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e08:	f7fd fdd8 	bl	80029bc <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e0cb      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1e:	4b49      	ldr	r3, [pc, #292]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0ee      	beq.n	8004e08 <HAL_RCC_OscConfig+0x334>
 8004e2a:	e014      	b.n	8004e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2c:	f7fd fdc6 	bl	80029bc <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd fdc2 	bl	80029bc <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0b5      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ee      	bne.n	8004e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5c:	4b39      	ldr	r3, [pc, #228]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	4a38      	ldr	r2, [pc, #224]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80a1 	beq.w	8004fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e72:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d05c      	beq.n	8004f38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d141      	bne.n	8004f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b31      	ldr	r3, [pc, #196]	@ (8004f4c <HAL_RCC_OscConfig+0x478>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fd96 	bl	80029bc <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fd fd92 	bl	80029bc <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e087      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea6:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	019b      	lsls	r3, r3, #6
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	061b      	lsls	r3, r3, #24
 8004ed6:	491b      	ldr	r1, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004edc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f4c <HAL_RCC_OscConfig+0x478>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee2:	f7fd fd6b 	bl	80029bc <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eea:	f7fd fd67 	bl	80029bc <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e05c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efc:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x416>
 8004f08:	e054      	b.n	8004fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0a:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <HAL_RCC_OscConfig+0x478>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fd fd54 	bl	80029bc <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd fd50 	bl	80029bc <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e045      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x444>
 8004f36:	e03d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e038      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f50:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <HAL_RCC_OscConfig+0x4ec>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d028      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d121      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d11a      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d111      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800

08004fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0cc      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b68      	ldr	r3, [pc, #416]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d90c      	bls.n	8005000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b65      	ldr	r3, [pc, #404]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b63      	ldr	r3, [pc, #396]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0b8      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d020      	beq.n	800504e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005018:	4b59      	ldr	r3, [pc, #356]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a58      	ldr	r2, [pc, #352]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005030:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a52      	ldr	r2, [pc, #328]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800503a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503c:	4b50      	ldr	r3, [pc, #320]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	494d      	ldr	r1, [pc, #308]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d044      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	4b47      	ldr	r3, [pc, #284]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d119      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e07f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d003      	beq.n	8005082 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507e:	2b03      	cmp	r3, #3
 8005080:	d107      	bne.n	8005092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005082:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e06f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005092:	4b3b      	ldr	r3, [pc, #236]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e067      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a2:	4b37      	ldr	r3, [pc, #220]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f023 0203 	bic.w	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4934      	ldr	r1, [pc, #208]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b4:	f7fd fc82 	bl	80029bc <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050bc:	f7fd fc7e 	bl	80029bc <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e04f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 020c 	and.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1eb      	bne.n	80050bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050e4:	4b25      	ldr	r3, [pc, #148]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d20c      	bcs.n	800510c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b22      	ldr	r3, [pc, #136]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b20      	ldr	r3, [pc, #128]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e032      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005118:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4916      	ldr	r1, [pc, #88]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005136:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	490e      	ldr	r1, [pc, #56]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800514a:	f000 f821 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800514e:	4602      	mov	r2, r0
 8005150:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	490a      	ldr	r1, [pc, #40]	@ (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 800515c:	5ccb      	ldrb	r3, [r1, r3]
 800515e:	fa22 f303 	lsr.w	r3, r2, r3
 8005162:	4a09      	ldr	r2, [pc, #36]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005166:	4b09      	ldr	r3, [pc, #36]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd fbe2 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023c00 	.word	0x40023c00
 8005180:	40023800 	.word	0x40023800
 8005184:	0800dba8 	.word	0x0800dba8
 8005188:	20000014 	.word	0x20000014
 800518c:	20000018 	.word	0x20000018

08005190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005194:	b094      	sub	sp, #80	@ 0x50
 8005196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a8:	4b79      	ldr	r3, [pc, #484]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d00d      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x40>
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	f200 80e1 	bhi.w	800537c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x34>
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d003      	beq.n	80051ca <HAL_RCC_GetSysClockFreq+0x3a>
 80051c2:	e0db      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c4:	4b73      	ldr	r3, [pc, #460]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x204>)
 80051c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051c8:	e0db      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ca:	4b73      	ldr	r3, [pc, #460]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x208>)
 80051cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051ce:	e0d8      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051da:	4b6d      	ldr	r3, [pc, #436]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d063      	beq.n	80052ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	2200      	movs	r2, #0
 80051ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051fa:	2300      	movs	r3, #0
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005202:	4622      	mov	r2, r4
 8005204:	462b      	mov	r3, r5
 8005206:	f04f 0000 	mov.w	r0, #0
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	0159      	lsls	r1, r3, #5
 8005210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005214:	0150      	lsls	r0, r2, #5
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4621      	mov	r1, r4
 800521c:	1a51      	subs	r1, r2, r1
 800521e:	6139      	str	r1, [r7, #16]
 8005220:	4629      	mov	r1, r5
 8005222:	eb63 0301 	sbc.w	r3, r3, r1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005234:	4659      	mov	r1, fp
 8005236:	018b      	lsls	r3, r1, #6
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800523e:	4651      	mov	r1, sl
 8005240:	018a      	lsls	r2, r1, #6
 8005242:	4651      	mov	r1, sl
 8005244:	ebb2 0801 	subs.w	r8, r2, r1
 8005248:	4659      	mov	r1, fp
 800524a:	eb63 0901 	sbc.w	r9, r3, r1
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800525a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800525e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005262:	4690      	mov	r8, r2
 8005264:	4699      	mov	r9, r3
 8005266:	4623      	mov	r3, r4
 8005268:	eb18 0303 	adds.w	r3, r8, r3
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	462b      	mov	r3, r5
 8005270:	eb49 0303 	adc.w	r3, r9, r3
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005282:	4629      	mov	r1, r5
 8005284:	024b      	lsls	r3, r1, #9
 8005286:	4621      	mov	r1, r4
 8005288:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800528c:	4621      	mov	r1, r4
 800528e:	024a      	lsls	r2, r1, #9
 8005290:	4610      	mov	r0, r2
 8005292:	4619      	mov	r1, r3
 8005294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005296:	2200      	movs	r2, #0
 8005298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800529c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052a0:	f7fb fcd2 	bl	8000c48 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ac:	e058      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ae:	4b38      	ldr	r3, [pc, #224]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	2200      	movs	r2, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	4611      	mov	r1, r2
 80052ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	2300      	movs	r3, #0
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052c8:	4642      	mov	r2, r8
 80052ca:	464b      	mov	r3, r9
 80052cc:	f04f 0000 	mov.w	r0, #0
 80052d0:	f04f 0100 	mov.w	r1, #0
 80052d4:	0159      	lsls	r1, r3, #5
 80052d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052da:	0150      	lsls	r0, r2, #5
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4641      	mov	r1, r8
 80052e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052e6:	4649      	mov	r1, r9
 80052e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005300:	ebb2 040a 	subs.w	r4, r2, sl
 8005304:	eb63 050b 	sbc.w	r5, r3, fp
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	00eb      	lsls	r3, r5, #3
 8005312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005316:	00e2      	lsls	r2, r4, #3
 8005318:	4614      	mov	r4, r2
 800531a:	461d      	mov	r5, r3
 800531c:	4643      	mov	r3, r8
 800531e:	18e3      	adds	r3, r4, r3
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	464b      	mov	r3, r9
 8005324:	eb45 0303 	adc.w	r3, r5, r3
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005336:	4629      	mov	r1, r5
 8005338:	028b      	lsls	r3, r1, #10
 800533a:	4621      	mov	r1, r4
 800533c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005340:	4621      	mov	r1, r4
 8005342:	028a      	lsls	r2, r1, #10
 8005344:	4610      	mov	r0, r2
 8005346:	4619      	mov	r1, r3
 8005348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800534a:	2200      	movs	r2, #0
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	61fa      	str	r2, [r7, #28]
 8005350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005354:	f7fb fc78 	bl	8000c48 <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4613      	mov	r3, r2
 800535e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	3301      	adds	r3, #1
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800537a:	e002      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x204>)
 800537e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005384:	4618      	mov	r0, r3
 8005386:	3750      	adds	r7, #80	@ 0x50
 8005388:	46bd      	mov	sp, r7
 800538a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800
 8005394:	00f42400 	.word	0x00f42400
 8005398:	007a1200 	.word	0x007a1200

0800539c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a0:	4b03      	ldr	r3, [pc, #12]	@ (80053b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053a2:	681b      	ldr	r3, [r3, #0]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000014 	.word	0x20000014

080053b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e07b      	b.n	80054be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d108      	bne.n	80053e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d6:	d009      	beq.n	80053ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	61da      	str	r2, [r3, #28]
 80053de:	e005      	b.n	80053ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd f892 	bl	8002530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005422:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005470:	ea42 0103 	orr.w	r1, r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	f003 0104 	and.w	r1, r3, #4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	f003 0210 	and.w	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b08a      	sub	sp, #40	@ 0x28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054d4:	2301      	movs	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d8:	f7fd fa70 	bl	80029bc <HAL_GetTick>
 80054dc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054e4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80054ec:	887b      	ldrh	r3, [r7, #2]
 80054ee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054f0:	7ffb      	ldrb	r3, [r7, #31]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d00c      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x4a>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fc:	d106      	bne.n	800550c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <HAL_SPI_TransmitReceive+0x46>
 8005506:	7ffb      	ldrb	r3, [r7, #31]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d001      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	e17f      	b.n	8005810 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x5c>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x5c>
 800551c:	887b      	ldrh	r3, [r7, #2]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e174      	b.n	8005810 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_SPI_TransmitReceive+0x6e>
 8005530:	2302      	movs	r3, #2
 8005532:	e16d      	b.n	8005810 <HAL_SPI_TransmitReceive+0x34a>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b04      	cmp	r3, #4
 8005546:	d003      	beq.n	8005550 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2205      	movs	r2, #5
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	887a      	ldrh	r2, [r7, #2]
 8005560:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	887a      	ldrh	r2, [r7, #2]
 8005566:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	887a      	ldrh	r2, [r7, #2]
 8005572:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	887a      	ldrh	r2, [r7, #2]
 8005578:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005590:	2b40      	cmp	r3, #64	@ 0x40
 8005592:	d007      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ac:	d17e      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_TransmitReceive+0xf6>
 80055b6:	8afb      	ldrh	r3, [r7, #22]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d16c      	bne.n	8005696 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e0:	e059      	b.n	8005696 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d11b      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x162>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x162>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d113      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005604:	881a      	ldrh	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d119      	bne.n	800566a <HAL_SPI_TransmitReceive+0x1a4>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d014      	beq.n	800566a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564a:	b292      	uxth	r2, r2
 800564c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	1c9a      	adds	r2, r3, #2
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005666:	2301      	movs	r3, #1
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800566a:	f7fd f9a7 	bl	80029bc <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005676:	429a      	cmp	r2, r3
 8005678:	d80d      	bhi.n	8005696 <HAL_SPI_TransmitReceive+0x1d0>
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d009      	beq.n	8005696 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0bc      	b.n	8005810 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1a0      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x11c>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d19b      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x11c>
 80056aa:	e082      	b.n	80057b2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_SPI_TransmitReceive+0x1f4>
 80056b4:	8afb      	ldrh	r3, [r7, #22]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d171      	bne.n	800579e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e0:	e05d      	b.n	800579e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d11c      	bne.n	800572a <HAL_SPI_TransmitReceive+0x264>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d017      	beq.n	800572a <HAL_SPI_TransmitReceive+0x264>
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d114      	bne.n	800572a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	7812      	ldrb	r2, [r2, #0]
 800570c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d119      	bne.n	800576c <HAL_SPI_TransmitReceive+0x2a6>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d014      	beq.n	800576c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005768:	2301      	movs	r3, #1
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800576c:	f7fd f926 	bl	80029bc <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005778:	429a      	cmp	r2, r3
 800577a:	d803      	bhi.n	8005784 <HAL_SPI_TransmitReceive+0x2be>
 800577c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d102      	bne.n	800578a <HAL_SPI_TransmitReceive+0x2c4>
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e038      	b.n	8005810 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d19c      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x21c>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d197      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057b2:	6a3a      	ldr	r2, [r7, #32]
 80057b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f8b6 	bl	8005928 <SPI_EndRxTxTransaction>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e01d      	b.n	8005810 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057dc:	2300      	movs	r3, #0
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800580e:	2300      	movs	r3, #0
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	3728      	adds	r7, #40	@ 0x28
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005828:	f7fd f8c8 	bl	80029bc <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	4413      	add	r3, r2
 8005836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005838:	f7fd f8c0 	bl	80029bc <HAL_GetTick>
 800583c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800583e:	4b39      	ldr	r3, [pc, #228]	@ (8005924 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	015b      	lsls	r3, r3, #5
 8005844:	0d1b      	lsrs	r3, r3, #20
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800584e:	e055      	b.n	80058fc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d051      	beq.n	80058fc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005858:	f7fd f8b0 	bl	80029bc <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	429a      	cmp	r2, r3
 8005866:	d902      	bls.n	800586e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d13d      	bne.n	80058ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800587c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005886:	d111      	bne.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005890:	d004      	beq.n	800589c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800589a:	d107      	bne.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b4:	d10f      	bne.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e018      	b.n	800591c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e002      	b.n	80058fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4013      	ands	r3, r2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	429a      	cmp	r2, r3
 800590a:	bf0c      	ite	eq
 800590c:	2301      	moveq	r3, #1
 800590e:	2300      	movne	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	429a      	cmp	r2, r3
 8005918:	d19a      	bne.n	8005850 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000014 	.word	0x20000014

08005928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2201      	movs	r2, #1
 800593c:	2102      	movs	r1, #2
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff ff6a 	bl	8005818 <SPI_WaitFlagStateUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e032      	b.n	80059c0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800595a:	4b1b      	ldr	r3, [pc, #108]	@ (80059c8 <SPI_EndRxTxTransaction+0xa0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1b      	ldr	r2, [pc, #108]	@ (80059cc <SPI_EndRxTxTransaction+0xa4>)
 8005960:	fba2 2303 	umull	r2, r3, r2, r3
 8005964:	0d5b      	lsrs	r3, r3, #21
 8005966:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005978:	d112      	bne.n	80059a0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2200      	movs	r2, #0
 8005982:	2180      	movs	r1, #128	@ 0x80
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff ff47 	bl	8005818 <SPI_WaitFlagStateUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d016      	beq.n	80059be <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e00f      	b.n	80059c0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b80      	cmp	r3, #128	@ 0x80
 80059b8:	d0f2      	beq.n	80059a0 <SPI_EndRxTxTransaction+0x78>
 80059ba:	e000      	b.n	80059be <SPI_EndRxTxTransaction+0x96>
        break;
 80059bc:	bf00      	nop
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20000014 	.word	0x20000014
 80059cc:	165e9f81 	.word	0x165e9f81

080059d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e041      	b.n	8005a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fc fde2 	bl	80025c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f000 fad8 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e041      	b.n	8005b04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f839 	bl	8005b0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f000 fa89 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <HAL_TIM_PWM_Start+0x24>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	e022      	b.n	8005b8a <HAL_TIM_PWM_Start+0x6a>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d109      	bne.n	8005b5e <HAL_TIM_PWM_Start+0x3e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	bf14      	ite	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	2300      	moveq	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	e015      	b.n	8005b8a <HAL_TIM_PWM_Start+0x6a>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d109      	bne.n	8005b78 <HAL_TIM_PWM_Start+0x58>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	bf14      	ite	ne
 8005b70:	2301      	movne	r3, #1
 8005b72:	2300      	moveq	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	e008      	b.n	8005b8a <HAL_TIM_PWM_Start+0x6a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e07c      	b.n	8005c8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <HAL_TIM_PWM_Start+0x82>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ba0:	e013      	b.n	8005bca <HAL_TIM_PWM_Start+0xaa>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d104      	bne.n	8005bb2 <HAL_TIM_PWM_Start+0x92>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bb0:	e00b      	b.n	8005bca <HAL_TIM_PWM_Start+0xaa>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d104      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0xa2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bc0:	e003      	b.n	8005bca <HAL_TIM_PWM_Start+0xaa>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fce6 	bl	80065a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8005c94 <HAL_TIM_PWM_Start+0x174>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIM_PWM_Start+0xcc>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2c      	ldr	r2, [pc, #176]	@ (8005c98 <HAL_TIM_PWM_Start+0x178>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIM_PWM_Start+0xd0>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <HAL_TIM_PWM_Start+0xd2>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a22      	ldr	r2, [pc, #136]	@ (8005c94 <HAL_TIM_PWM_Start+0x174>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d022      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x136>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c18:	d01d      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x136>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c9c <HAL_TIM_PWM_Start+0x17c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d018      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x136>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca0 <HAL_TIM_PWM_Start+0x180>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d013      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x136>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca4 <HAL_TIM_PWM_Start+0x184>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00e      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x136>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a16      	ldr	r2, [pc, #88]	@ (8005c98 <HAL_TIM_PWM_Start+0x178>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d009      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x136>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a18      	ldr	r2, [pc, #96]	@ (8005ca8 <HAL_TIM_PWM_Start+0x188>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d004      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x136>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <HAL_TIM_PWM_Start+0x18c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d111      	bne.n	8005c7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b06      	cmp	r3, #6
 8005c66:	d010      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	e007      	b.n	8005c8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40001800 	.word	0x40001800

08005cb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e0ae      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	f200 809f 	bhi.w	8005e1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cde:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005d19 	.word	0x08005d19
 8005ce8:	08005e1d 	.word	0x08005e1d
 8005cec:	08005e1d 	.word	0x08005e1d
 8005cf0:	08005e1d 	.word	0x08005e1d
 8005cf4:	08005d59 	.word	0x08005d59
 8005cf8:	08005e1d 	.word	0x08005e1d
 8005cfc:	08005e1d 	.word	0x08005e1d
 8005d00:	08005e1d 	.word	0x08005e1d
 8005d04:	08005d9b 	.word	0x08005d9b
 8005d08:	08005e1d 	.word	0x08005e1d
 8005d0c:	08005e1d 	.word	0x08005e1d
 8005d10:	08005e1d 	.word	0x08005e1d
 8005d14:	08005ddb 	.word	0x08005ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f9f6 	bl	8006110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0208 	orr.w	r2, r2, #8
 8005d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0204 	bic.w	r2, r2, #4
 8005d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6999      	ldr	r1, [r3, #24]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	619a      	str	r2, [r3, #24]
      break;
 8005d56:	e064      	b.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fa46 	bl	80061f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6999      	ldr	r1, [r3, #24]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	021a      	lsls	r2, r3, #8
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	619a      	str	r2, [r3, #24]
      break;
 8005d98:	e043      	b.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fa9b 	bl	80062dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0208 	orr.w	r2, r2, #8
 8005db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0204 	bic.w	r2, r2, #4
 8005dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69d9      	ldr	r1, [r3, #28]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	61da      	str	r2, [r3, #28]
      break;
 8005dd8:	e023      	b.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 faef 	bl	80063c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69d9      	ldr	r1, [r3, #28]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	021a      	lsls	r2, r3, #8
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	61da      	str	r2, [r3, #28]
      break;
 8005e1a:	e002      	b.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0b4      	b.n	8005fba <HAL_TIM_ConfigClockSource+0x186>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e88:	d03e      	beq.n	8005f08 <HAL_TIM_ConfigClockSource+0xd4>
 8005e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e8e:	f200 8087 	bhi.w	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e96:	f000 8086 	beq.w	8005fa6 <HAL_TIM_ConfigClockSource+0x172>
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e9e:	d87f      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b70      	cmp	r3, #112	@ 0x70
 8005ea2:	d01a      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0xa6>
 8005ea4:	2b70      	cmp	r3, #112	@ 0x70
 8005ea6:	d87b      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b60      	cmp	r3, #96	@ 0x60
 8005eaa:	d050      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x11a>
 8005eac:	2b60      	cmp	r3, #96	@ 0x60
 8005eae:	d877      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	2b50      	cmp	r3, #80	@ 0x50
 8005eb2:	d03c      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0xfa>
 8005eb4:	2b50      	cmp	r3, #80	@ 0x50
 8005eb6:	d873      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b40      	cmp	r3, #64	@ 0x40
 8005eba:	d058      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x13a>
 8005ebc:	2b40      	cmp	r3, #64	@ 0x40
 8005ebe:	d86f      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b30      	cmp	r3, #48	@ 0x30
 8005ec2:	d064      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15a>
 8005ec4:	2b30      	cmp	r3, #48	@ 0x30
 8005ec6:	d86b      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d060      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15a>
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d867      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d05c      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15a>
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d05a      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15a>
 8005ed8:	e062      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eea:	f000 fb3b 	bl	8006564 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	609a      	str	r2, [r3, #8]
      break;
 8005f06:	e04f      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f18:	f000 fb24 	bl	8006564 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f2a:	609a      	str	r2, [r3, #8]
      break;
 8005f2c:	e03c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f000 fa98 	bl	8006470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2150      	movs	r1, #80	@ 0x50
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 faf1 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e02c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f000 fab7 	bl	80064ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2160      	movs	r1, #96	@ 0x60
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fae1 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8005f6c:	e01c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f000 fa78 	bl	8006470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2140      	movs	r1, #64	@ 0x40
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fad1 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8005f8c:	e00c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f000 fac8 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8005f9e:	e003      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	e000      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a43      	ldr	r2, [pc, #268]	@ (80060e4 <TIM_Base_SetConfig+0x120>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a40      	ldr	r2, [pc, #256]	@ (80060e8 <TIM_Base_SetConfig+0x124>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3f      	ldr	r2, [pc, #252]	@ (80060ec <TIM_Base_SetConfig+0x128>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80060f0 <TIM_Base_SetConfig+0x12c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3d      	ldr	r2, [pc, #244]	@ (80060f4 <TIM_Base_SetConfig+0x130>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a32      	ldr	r2, [pc, #200]	@ (80060e4 <TIM_Base_SetConfig+0x120>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d02b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006024:	d027      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2f      	ldr	r2, [pc, #188]	@ (80060e8 <TIM_Base_SetConfig+0x124>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d023      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2e      	ldr	r2, [pc, #184]	@ (80060ec <TIM_Base_SetConfig+0x128>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01f      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2d      	ldr	r2, [pc, #180]	@ (80060f0 <TIM_Base_SetConfig+0x12c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2c      	ldr	r2, [pc, #176]	@ (80060f4 <TIM_Base_SetConfig+0x130>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d017      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2b      	ldr	r2, [pc, #172]	@ (80060f8 <TIM_Base_SetConfig+0x134>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2a      	ldr	r2, [pc, #168]	@ (80060fc <TIM_Base_SetConfig+0x138>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a29      	ldr	r2, [pc, #164]	@ (8006100 <TIM_Base_SetConfig+0x13c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a28      	ldr	r2, [pc, #160]	@ (8006104 <TIM_Base_SetConfig+0x140>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a27      	ldr	r2, [pc, #156]	@ (8006108 <TIM_Base_SetConfig+0x144>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a26      	ldr	r2, [pc, #152]	@ (800610c <TIM_Base_SetConfig+0x148>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d108      	bne.n	8006088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800607c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a0e      	ldr	r2, [pc, #56]	@ (80060e4 <TIM_Base_SetConfig+0x120>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0xf2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a10      	ldr	r2, [pc, #64]	@ (80060f4 <TIM_Base_SetConfig+0x130>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d103      	bne.n	80060be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f043 0204 	orr.w	r2, r3, #4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40010400 	.word	0x40010400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800
 8006104:	40001800 	.word	0x40001800
 8006108:	40001c00 	.word	0x40001c00
 800610c:	40002000 	.word	0x40002000

08006110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f023 0201 	bic.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0302 	bic.w	r3, r3, #2
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a20      	ldr	r2, [pc, #128]	@ (80061e8 <TIM_OC1_SetConfig+0xd8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC1_SetConfig+0x64>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <TIM_OC1_SetConfig+0xdc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10c      	bne.n	800618e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0308 	bic.w	r3, r3, #8
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a15      	ldr	r2, [pc, #84]	@ (80061e8 <TIM_OC1_SetConfig+0xd8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_OC1_SetConfig+0x8e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a14      	ldr	r2, [pc, #80]	@ (80061ec <TIM_OC1_SetConfig+0xdc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d111      	bne.n	80061c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	40010000 	.word	0x40010000
 80061ec:	40010400 	.word	0x40010400

080061f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 0210 	bic.w	r2, r3, #16
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800621e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 0320 	bic.w	r3, r3, #32
 800623a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a22      	ldr	r2, [pc, #136]	@ (80062d4 <TIM_OC2_SetConfig+0xe4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0x68>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a21      	ldr	r2, [pc, #132]	@ (80062d8 <TIM_OC2_SetConfig+0xe8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d10d      	bne.n	8006274 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800625e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a17      	ldr	r2, [pc, #92]	@ (80062d4 <TIM_OC2_SetConfig+0xe4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC2_SetConfig+0x94>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a16      	ldr	r2, [pc, #88]	@ (80062d8 <TIM_OC2_SetConfig+0xe8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d113      	bne.n	80062ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800628a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400

080062dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a21      	ldr	r2, [pc, #132]	@ (80063bc <TIM_OC3_SetConfig+0xe0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC3_SetConfig+0x66>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a20      	ldr	r2, [pc, #128]	@ (80063c0 <TIM_OC3_SetConfig+0xe4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10d      	bne.n	800635e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800635c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <TIM_OC3_SetConfig+0xe0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC3_SetConfig+0x92>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a15      	ldr	r2, [pc, #84]	@ (80063c0 <TIM_OC3_SetConfig+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d113      	bne.n	8006396 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800637c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400

080063c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a12      	ldr	r2, [pc, #72]	@ (8006468 <TIM_OC4_SetConfig+0xa4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC4_SetConfig+0x68>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a11      	ldr	r2, [pc, #68]	@ (800646c <TIM_OC4_SetConfig+0xa8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d109      	bne.n	8006440 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000
 800646c:	40010400 	.word	0x40010400

08006470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800649a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 030a 	bic.w	r3, r3, #10
 80064ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b087      	sub	sp, #28
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f023 0210 	bic.w	r2, r3, #16
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	031b      	lsls	r3, r3, #12
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800650a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	bf00      	nop
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	f043 0307 	orr.w	r3, r3, #7
 8006550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800657e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	021a      	lsls	r2, r3, #8
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	431a      	orrs	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4313      	orrs	r3, r2
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2201      	movs	r2, #1
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	401a      	ands	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	fa01 f303 	lsl.w	r3, r1, r3
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006604:	2302      	movs	r3, #2
 8006606:	e05a      	b.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a21      	ldr	r2, [pc, #132]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006654:	d01d      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1d      	ldr	r2, [pc, #116]	@ (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1b      	ldr	r2, [pc, #108]	@ (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1a      	ldr	r2, [pc, #104]	@ (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a18      	ldr	r2, [pc, #96]	@ (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a17      	ldr	r2, [pc, #92]	@ (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a15      	ldr	r2, [pc, #84]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d10c      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40001800 	.word	0x40001800

080066e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006700:	2302      	movs	r3, #2
 8006702:	e03d      	b.n	8006780 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800678c:	b084      	sub	sp, #16
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	f107 001c 	add.w	r0, r7, #28
 800679a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800679e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d123      	bne.n	80067ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80067ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d105      	bne.n	80067e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 fae8 	bl	8007db8 <USB_CoreReset>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]
 80067ec:	e01b      	b.n	8006826 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 fadc 	bl	8007db8 <USB_CoreReset>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006804:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006810:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	639a      	str	r2, [r3, #56]	@ 0x38
 8006818:	e005      	b.n	8006826 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006826:	7fbb      	ldrb	r3, [r7, #30]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10b      	bne.n	8006844 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f043 0206 	orr.w	r2, r3, #6
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f043 0220 	orr.w	r2, r3, #32
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006850:	b004      	add	sp, #16
 8006852:	4770      	bx	lr

08006854 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d165      	bne.n	8006934 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a41      	ldr	r2, [pc, #260]	@ (8006970 <USB_SetTurnaroundTime+0x11c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d906      	bls.n	800687e <USB_SetTurnaroundTime+0x2a>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4a40      	ldr	r2, [pc, #256]	@ (8006974 <USB_SetTurnaroundTime+0x120>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d202      	bcs.n	800687e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006878:	230f      	movs	r3, #15
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e062      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4a3c      	ldr	r2, [pc, #240]	@ (8006974 <USB_SetTurnaroundTime+0x120>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d306      	bcc.n	8006894 <USB_SetTurnaroundTime+0x40>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4a3b      	ldr	r2, [pc, #236]	@ (8006978 <USB_SetTurnaroundTime+0x124>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d202      	bcs.n	8006894 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800688e:	230e      	movs	r3, #14
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	e057      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4a38      	ldr	r2, [pc, #224]	@ (8006978 <USB_SetTurnaroundTime+0x124>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d306      	bcc.n	80068aa <USB_SetTurnaroundTime+0x56>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4a37      	ldr	r2, [pc, #220]	@ (800697c <USB_SetTurnaroundTime+0x128>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d202      	bcs.n	80068aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068a4:	230d      	movs	r3, #13
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e04c      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4a33      	ldr	r2, [pc, #204]	@ (800697c <USB_SetTurnaroundTime+0x128>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d306      	bcc.n	80068c0 <USB_SetTurnaroundTime+0x6c>
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4a32      	ldr	r2, [pc, #200]	@ (8006980 <USB_SetTurnaroundTime+0x12c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d802      	bhi.n	80068c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068ba:	230c      	movs	r3, #12
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e041      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006980 <USB_SetTurnaroundTime+0x12c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d906      	bls.n	80068d6 <USB_SetTurnaroundTime+0x82>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4a2e      	ldr	r2, [pc, #184]	@ (8006984 <USB_SetTurnaroundTime+0x130>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d802      	bhi.n	80068d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068d0:	230b      	movs	r3, #11
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e036      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006984 <USB_SetTurnaroundTime+0x130>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d906      	bls.n	80068ec <USB_SetTurnaroundTime+0x98>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4a29      	ldr	r2, [pc, #164]	@ (8006988 <USB_SetTurnaroundTime+0x134>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d802      	bhi.n	80068ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068e6:	230a      	movs	r3, #10
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	e02b      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4a26      	ldr	r2, [pc, #152]	@ (8006988 <USB_SetTurnaroundTime+0x134>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d906      	bls.n	8006902 <USB_SetTurnaroundTime+0xae>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4a25      	ldr	r2, [pc, #148]	@ (800698c <USB_SetTurnaroundTime+0x138>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d202      	bcs.n	8006902 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80068fc:	2309      	movs	r3, #9
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e020      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4a21      	ldr	r2, [pc, #132]	@ (800698c <USB_SetTurnaroundTime+0x138>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d306      	bcc.n	8006918 <USB_SetTurnaroundTime+0xc4>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4a20      	ldr	r2, [pc, #128]	@ (8006990 <USB_SetTurnaroundTime+0x13c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d802      	bhi.n	8006918 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006912:	2308      	movs	r3, #8
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e015      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4a1d      	ldr	r2, [pc, #116]	@ (8006990 <USB_SetTurnaroundTime+0x13c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d906      	bls.n	800692e <USB_SetTurnaroundTime+0xda>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4a1c      	ldr	r2, [pc, #112]	@ (8006994 <USB_SetTurnaroundTime+0x140>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d202      	bcs.n	800692e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006928:	2307      	movs	r3, #7
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e00a      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800692e:	2306      	movs	r3, #6
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	e007      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d102      	bne.n	8006940 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800693a:	2309      	movs	r3, #9
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e001      	b.n	8006944 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006940:	2309      	movs	r3, #9
 8006942:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	029b      	lsls	r3, r3, #10
 8006958:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800695c:	431a      	orrs	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	00d8acbf 	.word	0x00d8acbf
 8006974:	00e4e1c0 	.word	0x00e4e1c0
 8006978:	00f42400 	.word	0x00f42400
 800697c:	01067380 	.word	0x01067380
 8006980:	011a499f 	.word	0x011a499f
 8006984:	01312cff 	.word	0x01312cff
 8006988:	014ca43f 	.word	0x014ca43f
 800698c:	016e3600 	.word	0x016e3600
 8006990:	01a6ab1f 	.word	0x01a6ab1f
 8006994:	01e84800 	.word	0x01e84800

08006998 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f043 0201 	orr.w	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f023 0201 	bic.w	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d115      	bne.n	8006a2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a0a:	200a      	movs	r0, #10
 8006a0c:	f7fb ffe2 	bl	80029d4 <HAL_Delay>
      ms += 10U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	330a      	adds	r3, #10
 8006a14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f93f 	bl	8007c9a <USB_GetMode>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d01e      	beq.n	8006a60 <USB_SetCurrentMode+0x84>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a26:	d9f0      	bls.n	8006a0a <USB_SetCurrentMode+0x2e>
 8006a28:	e01a      	b.n	8006a60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d115      	bne.n	8006a5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a3c:	200a      	movs	r0, #10
 8006a3e:	f7fb ffc9 	bl	80029d4 <HAL_Delay>
      ms += 10U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	330a      	adds	r3, #10
 8006a46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f926 	bl	8007c9a <USB_GetMode>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <USB_SetCurrentMode+0x84>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a58:	d9f0      	bls.n	8006a3c <USB_SetCurrentMode+0x60>
 8006a5a:	e001      	b.n	8006a60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e005      	b.n	8006a6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2bc8      	cmp	r3, #200	@ 0xc8
 8006a64:	d101      	bne.n	8006a6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a74:	b084      	sub	sp, #16
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b086      	sub	sp, #24
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	e009      	b.n	8006aa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3340      	adds	r3, #64	@ 0x40
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b0e      	cmp	r3, #14
 8006aac:	d9f2      	bls.n	8006a94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006aae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d11c      	bne.n	8006af0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ac4:	f043 0302 	orr.w	r3, r3, #2
 8006ac8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ace:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ada:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	639a      	str	r2, [r3, #56]	@ 0x38
 8006aee:	e00b      	b.n	8006b08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2300      	movs	r3, #0
 8006b12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10d      	bne.n	8006b38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b24:	2100      	movs	r1, #0
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f968 	bl	8006dfc <USB_SetDevSpeed>
 8006b2c:	e008      	b.n	8006b40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b2e:	2101      	movs	r1, #1
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f963 	bl	8006dfc <USB_SetDevSpeed>
 8006b36:	e003      	b.n	8006b40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b38:	2103      	movs	r1, #3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f95e 	bl	8006dfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b40:	2110      	movs	r1, #16
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f8fa 	bl	8006d3c <USB_FlushTxFifo>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f924 	bl	8006da0 <USB_FlushRxFifo>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b68:	461a      	mov	r2, r3
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b74:	461a      	mov	r2, r3
 8006b76:	2300      	movs	r3, #0
 8006b78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b80:	461a      	mov	r2, r3
 8006b82:	2300      	movs	r3, #0
 8006b84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	e043      	b.n	8006c14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ba2:	d118      	bne.n	8006bd6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e013      	b.n	8006be8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	e008      	b.n	8006be8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be2:	461a      	mov	r2, r3
 8006be4:	2300      	movs	r3, #0
 8006be6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c06:	461a      	mov	r2, r3
 8006c08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c18:	461a      	mov	r2, r3
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d3b5      	bcc.n	8006b8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	e043      	b.n	8006cae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c3c:	d118      	bne.n	8006c70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c50:	461a      	mov	r2, r3
 8006c52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e013      	b.n	8006c82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c66:	461a      	mov	r2, r3
 8006c68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e008      	b.n	8006c82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8e:	461a      	mov	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	3301      	adds	r3, #1
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d3b5      	bcc.n	8006c26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ccc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006cda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f043 0210 	orr.w	r2, r3, #16
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	4b10      	ldr	r3, [pc, #64]	@ (8006d38 <USB_DevInit+0x2c4>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f043 0208 	orr.w	r2, r3, #8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d107      	bne.n	8006d28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d20:	f043 0304 	orr.w	r3, r3, #4
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d34:	b004      	add	sp, #16
 8006d36:	4770      	bx	lr
 8006d38:	803c3800 	.word	0x803c3800

08006d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d56:	d901      	bls.n	8006d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e01b      	b.n	8006d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	daf2      	bge.n	8006d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	019b      	lsls	r3, r3, #6
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3301      	adds	r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d80:	d901      	bls.n	8006d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e006      	b.n	8006d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d0f0      	beq.n	8006d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006db8:	d901      	bls.n	8006dbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e018      	b.n	8006df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	daf2      	bge.n	8006dac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2210      	movs	r2, #16
 8006dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ddc:	d901      	bls.n	8006de2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e006      	b.n	8006df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d0f0      	beq.n	8006dd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b087      	sub	sp, #28
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0306 	and.w	r3, r3, #6
 8006e46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d102      	bne.n	8006e54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	75fb      	strb	r3, [r7, #23]
 8006e52:	e00a      	b.n	8006e6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d002      	beq.n	8006e60 <USB_GetDevSpeed+0x32>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b06      	cmp	r3, #6
 8006e5e:	d102      	bne.n	8006e66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e60:	2302      	movs	r3, #2
 8006e62:	75fb      	strb	r3, [r7, #23]
 8006e64:	e001      	b.n	8006e6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e66:	230f      	movs	r3, #15
 8006e68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d13a      	bne.n	8006f0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	68f9      	ldr	r1, [r7, #12]
 8006eae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d155      	bne.n	8006f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	791b      	ldrb	r3, [r3, #4]
 8006ee6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ee8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	059b      	lsls	r3, r3, #22
 8006eee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e036      	b.n	8006f78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	68f9      	ldr	r1, [r7, #12]
 8006f24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d11a      	bne.n	8006f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	791b      	ldrb	r3, [r3, #4]
 8006f5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	4313      	orrs	r3, r2
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d161      	bne.n	8007068 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fba:	d11f      	bne.n	8006ffc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	2101      	movs	r1, #1
 800700e:	fa01 f303 	lsl.w	r3, r1, r3
 8007012:	b29b      	uxth	r3, r3
 8007014:	43db      	mvns	r3, r3
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800701c:	4013      	ands	r3, r2
 800701e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	2101      	movs	r1, #1
 8007032:	fa01 f303 	lsl.w	r3, r1, r3
 8007036:	b29b      	uxth	r3, r3
 8007038:	43db      	mvns	r3, r3
 800703a:	68f9      	ldr	r1, [r7, #12]
 800703c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007040:	4013      	ands	r3, r2
 8007042:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	0159      	lsls	r1, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	440b      	add	r3, r1
 800705a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705e:	4619      	mov	r1, r3
 8007060:	4b35      	ldr	r3, [pc, #212]	@ (8007138 <USB_DeactivateEndpoint+0x1b0>)
 8007062:	4013      	ands	r3, r2
 8007064:	600b      	str	r3, [r1, #0]
 8007066:	e060      	b.n	800712a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800707a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800707e:	d11f      	bne.n	80070c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800709a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800709e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	041b      	lsls	r3, r3, #16
 80070d8:	43db      	mvns	r3, r3
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070e0:	4013      	ands	r3, r2
 80070e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	2101      	movs	r1, #1
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	43db      	mvns	r3, r3
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007104:	4013      	ands	r3, r2
 8007106:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	0159      	lsls	r1, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	440b      	add	r3, r1
 800711e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007122:	4619      	mov	r1, r3
 8007124:	4b05      	ldr	r3, [pc, #20]	@ (800713c <USB_DeactivateEndpoint+0x1b4>)
 8007126:	4013      	ands	r3, r2
 8007128:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	ec337800 	.word	0xec337800
 800713c:	eff37800 	.word	0xeff37800

08007140 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	@ 0x28
 8007144:	af02      	add	r7, sp, #8
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b01      	cmp	r3, #1
 800715e:	f040 817f 	bne.w	8007460 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d132      	bne.n	80071d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007184:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007188:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800718c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	0151      	lsls	r1, r2, #5
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	440a      	add	r2, r1
 80071a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071c8:	0cdb      	lsrs	r3, r3, #19
 80071ca:	04db      	lsls	r3, r3, #19
 80071cc:	6113      	str	r3, [r2, #16]
 80071ce:	e097      	b.n	8007300 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071ea:	0cdb      	lsrs	r3, r3, #19
 80071ec:	04db      	lsls	r3, r3, #19
 80071ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	440a      	add	r2, r1
 8007206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800720a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800720e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007212:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d11a      	bne.n	8007250 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	429a      	cmp	r2, r3
 8007224:	d903      	bls.n	800722e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007248:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800724c:	6113      	str	r3, [r2, #16]
 800724e:	e044      	b.n	80072da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	4413      	add	r3, r2
 800725a:	1e5a      	subs	r2, r3, #1
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	8afb      	ldrh	r3, [r7, #22]
 8007276:	04d9      	lsls	r1, r3, #19
 8007278:	4ba4      	ldr	r3, [pc, #656]	@ (800750c <USB_EPStartXfer+0x3cc>)
 800727a:	400b      	ands	r3, r1
 800727c:	69b9      	ldr	r1, [r7, #24]
 800727e:	0148      	lsls	r0, r1, #5
 8007280:	69f9      	ldr	r1, [r7, #28]
 8007282:	4401      	add	r1, r0
 8007284:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007288:	4313      	orrs	r3, r2
 800728a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	791b      	ldrb	r3, [r3, #4]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d122      	bne.n	80072da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80072b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	8afb      	ldrh	r3, [r7, #22]
 80072c4:	075b      	lsls	r3, r3, #29
 80072c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80072ca:	69b9      	ldr	r1, [r7, #24]
 80072cc:	0148      	lsls	r0, r1, #5
 80072ce:	69f9      	ldr	r1, [r7, #28]
 80072d0:	4401      	add	r1, r0
 80072d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80072d6:	4313      	orrs	r3, r2
 80072d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e6:	691a      	ldr	r2, [r3, #16]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072f0:	69b9      	ldr	r1, [r7, #24]
 80072f2:	0148      	lsls	r0, r1, #5
 80072f4:	69f9      	ldr	r1, [r7, #28]
 80072f6:	4401      	add	r1, r0
 80072f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80072fc:	4313      	orrs	r3, r2
 80072fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d14b      	bne.n	800739e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d009      	beq.n	8007322 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731a:	461a      	mov	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	791b      	ldrb	r3, [r3, #4]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d128      	bne.n	800737c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d110      	bne.n	800735c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007354:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	e00f      	b.n	800737c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	440a      	add	r2, r1
 8007372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800737a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007396:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	e166      	b.n	800766c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80073bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	791b      	ldrb	r3, [r3, #4]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d015      	beq.n	80073f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 814e 	beq.w	800766c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	2101      	movs	r1, #1
 80073e2:	fa01 f303 	lsl.w	r3, r1, r3
 80073e6:	69f9      	ldr	r1, [r7, #28]
 80073e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073ec:	4313      	orrs	r3, r2
 80073ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80073f0:	e13c      	b.n	800766c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d110      	bne.n	8007424 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800741c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	e00f      	b.n	8007444 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007442:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	68d9      	ldr	r1, [r3, #12]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	b298      	uxth	r0, r3
 8007452:	79fb      	ldrb	r3, [r7, #7]
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	4603      	mov	r3, r0
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 f9b9 	bl	80077d0 <USB_WritePacket>
 800745e:	e105      	b.n	800766c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	0151      	lsls	r1, r2, #5
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	440a      	add	r2, r1
 8007476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747a:	0cdb      	lsrs	r3, r3, #19
 800747c:	04db      	lsls	r3, r3, #19
 800747e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800749a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800749e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80074a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d132      	bne.n	8007510 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d8:	69b9      	ldr	r1, [r7, #24]
 80074da:	0148      	lsls	r0, r1, #5
 80074dc:	69f9      	ldr	r1, [r7, #28]
 80074de:	4401      	add	r1, r0
 80074e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80074e4:	4313      	orrs	r3, r2
 80074e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007502:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007506:	6113      	str	r3, [r2, #16]
 8007508:	e062      	b.n	80075d0 <USB_EPStartXfer+0x490>
 800750a:	bf00      	nop
 800750c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d123      	bne.n	8007560 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800752e:	69b9      	ldr	r1, [r7, #24]
 8007530:	0148      	lsls	r0, r1, #5
 8007532:	69f9      	ldr	r1, [r7, #28]
 8007534:	4401      	add	r1, r0
 8007536:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800753a:	4313      	orrs	r3, r2
 800753c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800755c:	6113      	str	r3, [r2, #16]
 800755e:	e037      	b.n	80075d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	4413      	add	r3, r2
 800756a:	1e5a      	subs	r2, r3, #1
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	fbb2 f3f3 	udiv	r3, r2, r3
 8007574:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	8afa      	ldrh	r2, [r7, #22]
 800757c:	fb03 f202 	mul.w	r2, r3, r2
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	8afb      	ldrh	r3, [r7, #22]
 8007594:	04d9      	lsls	r1, r3, #19
 8007596:	4b38      	ldr	r3, [pc, #224]	@ (8007678 <USB_EPStartXfer+0x538>)
 8007598:	400b      	ands	r3, r1
 800759a:	69b9      	ldr	r1, [r7, #24]
 800759c:	0148      	lsls	r0, r1, #5
 800759e:	69f9      	ldr	r1, [r7, #28]
 80075a0:	4401      	add	r1, r0
 80075a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075a6:	4313      	orrs	r3, r2
 80075a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075c0:	69b9      	ldr	r1, [r7, #24]
 80075c2:	0148      	lsls	r0, r1, #5
 80075c4:	69f9      	ldr	r1, [r7, #28]
 80075c6:	4401      	add	r1, r0
 80075c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075cc:	4313      	orrs	r3, r2
 80075ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d10d      	bne.n	80075f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d009      	beq.n	80075f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	68d9      	ldr	r1, [r3, #12]
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ee:	460a      	mov	r2, r1
 80075f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	791b      	ldrb	r3, [r3, #4]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d128      	bne.n	800764c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007606:	2b00      	cmp	r3, #0
 8007608:	d110      	bne.n	800762c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007624:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	e00f      	b.n	800764c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	440a      	add	r2, r1
 8007642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800764a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	0151      	lsls	r1, r2, #5
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	440a      	add	r2, r1
 8007662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007666:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800766a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	1ff80000 	.word	0x1ff80000

0800767c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d14a      	bne.n	8007730 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076b2:	f040 8086 	bne.w	80077c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	7812      	ldrb	r2, [r2, #0]
 80076ca:	0151      	lsls	r1, r2, #5
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	440a      	add	r2, r1
 80076d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f242 7210 	movw	r2, #10000	@ 0x2710
 800770a:	4293      	cmp	r3, r2
 800770c:	d902      	bls.n	8007714 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	75fb      	strb	r3, [r7, #23]
          break;
 8007712:	e056      	b.n	80077c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800772c:	d0e7      	beq.n	80076fe <USB_EPStopXfer+0x82>
 800772e:	e048      	b.n	80077c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007748:	d13b      	bne.n	80077c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007768:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800776c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800778c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800779e:	4293      	cmp	r3, r2
 80077a0:	d902      	bls.n	80077a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	75fb      	strb	r3, [r7, #23]
          break;
 80077a6:	e00c      	b.n	80077c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077c0:	d0e7      	beq.n	8007792 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	@ 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4611      	mov	r1, r2
 80077dc:	461a      	mov	r2, r3
 80077de:	460b      	mov	r3, r1
 80077e0:	71fb      	strb	r3, [r7, #7]
 80077e2:	4613      	mov	r3, r2
 80077e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80077ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d123      	bne.n	800783e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80077f6:	88bb      	ldrh	r3, [r7, #4]
 80077f8:	3303      	adds	r3, #3
 80077fa:	089b      	lsrs	r3, r3, #2
 80077fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80077fe:	2300      	movs	r3, #0
 8007800:	61bb      	str	r3, [r7, #24]
 8007802:	e018      	b.n	8007836 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	031a      	lsls	r2, r3, #12
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	4413      	add	r3, r2
 800780c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007810:	461a      	mov	r2, r3
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	3301      	adds	r3, #1
 800781c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	3301      	adds	r3, #1
 8007822:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	3301      	adds	r3, #1
 8007828:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	3301      	adds	r3, #1
 800782e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	3301      	adds	r3, #1
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	429a      	cmp	r2, r3
 800783c:	d3e2      	bcc.n	8007804 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3724      	adds	r7, #36	@ 0x24
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800784c:	b480      	push	{r7}
 800784e:	b08b      	sub	sp, #44	@ 0x2c
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	089b      	lsrs	r3, r3, #2
 8007866:	b29b      	uxth	r3, r3
 8007868:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	f003 0303 	and.w	r3, r3, #3
 8007870:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007872:	2300      	movs	r3, #0
 8007874:	623b      	str	r3, [r7, #32]
 8007876:	e014      	b.n	80078a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	601a      	str	r2, [r3, #0]
    pDest++;
 8007884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007886:	3301      	adds	r3, #1
 8007888:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	3301      	adds	r3, #1
 800788e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007892:	3301      	adds	r3, #1
 8007894:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	3301      	adds	r3, #1
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	3301      	adds	r3, #1
 80078a0:	623b      	str	r3, [r7, #32]
 80078a2:	6a3a      	ldr	r2, [r7, #32]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d3e6      	bcc.n	8007878 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078aa:	8bfb      	ldrh	r3, [r7, #30]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01e      	beq.n	80078ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078ba:	461a      	mov	r2, r3
 80078bc:	f107 0310 	add.w	r3, r7, #16
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	701a      	strb	r2, [r3, #0]
      i++;
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	3301      	adds	r3, #1
 80078da:	623b      	str	r3, [r7, #32]
      pDest++;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	3301      	adds	r3, #1
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80078e2:	8bfb      	ldrh	r3, [r7, #30]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80078e8:	8bfb      	ldrh	r3, [r7, #30]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1ea      	bne.n	80078c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	372c      	adds	r7, #44	@ 0x2c
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d12c      	bne.n	8007972 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	db12      	blt.n	8007950 <USB_EPSetStall+0x54>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00f      	beq.n	8007950 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	440a      	add	r2, r1
 8007946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800794a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800794e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	440a      	add	r2, r1
 8007966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800796a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	e02b      	b.n	80079ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	db12      	blt.n	80079aa <USB_EPSetStall+0xae>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00f      	beq.n	80079aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	0151      	lsls	r1, r2, #5
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	440a      	add	r2, r1
 80079c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d128      	bne.n	8007a46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	791b      	ldrb	r3, [r3, #4]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d003      	beq.n	8007a24 <USB_EPClearStall+0x4c>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	791b      	ldrb	r3, [r3, #4]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d138      	bne.n	8007a96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	0151      	lsls	r1, r2, #5
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	440a      	add	r2, r1
 8007a3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	e027      	b.n	8007a96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	791b      	ldrb	r3, [r3, #4]
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d003      	beq.n	8007a76 <USB_EPClearStall+0x9e>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	791b      	ldrb	r3, [r3, #4]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d10f      	bne.n	8007a96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	0151      	lsls	r1, r2, #5
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	440a      	add	r2, r1
 8007a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ac2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007ac6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007ad8:	68f9      	ldr	r1, [r7, #12]
 8007ada:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b0a:	f023 0303 	bic.w	r3, r3, #3
 8007b0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b1e:	f023 0302 	bic.w	r3, r3, #2
 8007b22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b4c:	f023 0303 	bic.w	r3, r3, #3
 8007b50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b60:	f043 0302 	orr.w	r3, r3, #2
 8007b64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	0c1b      	lsrs	r3, r3, #16
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b085      	sub	sp, #20
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	b29b      	uxth	r3, r3
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c30:	68bb      	ldr	r3, [r7, #8]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b087      	sub	sp, #28
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6e:	01db      	lsls	r3, r3, #7
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007cd4:	f023 0307 	bic.w	r3, r3, #7
 8007cd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	460b      	mov	r3, r1
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	333c      	adds	r3, #60	@ 0x3c
 8007d12:	3304      	adds	r3, #4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	4a26      	ldr	r2, [pc, #152]	@ (8007db4 <USB_EP0_OutStart+0xb8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d90a      	bls.n	8007d36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d30:	d101      	bne.n	8007d36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	e037      	b.n	8007da6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	2300      	movs	r3, #0
 8007d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d64:	f043 0318 	orr.w	r3, r3, #24
 8007d68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007d7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d7e:	7afb      	ldrb	r3, [r7, #11]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d10f      	bne.n	8007da4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	4f54300a 	.word	0x4f54300a

08007db8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dd0:	d901      	bls.n	8007dd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e022      	b.n	8007e1c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	daf2      	bge.n	8007dc4 <USB_CoreReset+0xc>

  count = 10U;
 8007dde:	230a      	movs	r3, #10
 8007de0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007de2:	e002      	b.n	8007dea <USB_CoreReset+0x32>
  {
    count--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1f9      	bne.n	8007de4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f043 0201 	orr.w	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e08:	d901      	bls.n	8007e0e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e006      	b.n	8007e1c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d0f0      	beq.n	8007dfc <USB_CoreReset+0x44>

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e34:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007e38:	f002 fc44 	bl	800a6c4 <USBD_static_malloc>
 8007e3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	32b0      	adds	r2, #176	@ 0xb0
 8007e4e:	2100      	movs	r1, #0
 8007e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007e54:	2302      	movs	r3, #2
 8007e56:	e0d4      	b.n	8008002 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e58:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f003 f9d1 	bl	800b206 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32b0      	adds	r2, #176	@ 0xb0
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	32b0      	adds	r2, #176	@ 0xb0
 8007e7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	7c1b      	ldrb	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d138      	bne.n	8007f02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e90:	4b5e      	ldr	r3, [pc, #376]	@ (800800c <USBD_CDC_Init+0x1e4>)
 8007e92:	7819      	ldrb	r1, [r3, #0]
 8007e94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e98:	2202      	movs	r2, #2
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f002 faef 	bl	800a47e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800800c <USBD_CDC_Init+0x1e4>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f003 020f 	and.w	r2, r3, #15
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	440b      	add	r3, r1
 8007eb4:	3323      	adds	r3, #35	@ 0x23
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007eba:	4b55      	ldr	r3, [pc, #340]	@ (8008010 <USBD_CDC_Init+0x1e8>)
 8007ebc:	7819      	ldrb	r1, [r3, #0]
 8007ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f002 fada 	bl	800a47e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007eca:	4b51      	ldr	r3, [pc, #324]	@ (8008010 <USBD_CDC_Init+0x1e8>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 020f 	and.w	r2, r3, #15
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	440b      	add	r3, r1
 8007ede:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8008014 <USBD_CDC_Init+0x1ec>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	f003 020f 	and.w	r2, r3, #15
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	440b      	add	r3, r1
 8007efa:	331c      	adds	r3, #28
 8007efc:	2210      	movs	r2, #16
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	e035      	b.n	8007f6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f02:	4b42      	ldr	r3, [pc, #264]	@ (800800c <USBD_CDC_Init+0x1e4>)
 8007f04:	7819      	ldrb	r1, [r3, #0]
 8007f06:	2340      	movs	r3, #64	@ 0x40
 8007f08:	2202      	movs	r2, #2
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f002 fab7 	bl	800a47e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f10:	4b3e      	ldr	r3, [pc, #248]	@ (800800c <USBD_CDC_Init+0x1e4>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	f003 020f 	and.w	r2, r3, #15
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	440b      	add	r3, r1
 8007f24:	3323      	adds	r3, #35	@ 0x23
 8007f26:	2201      	movs	r2, #1
 8007f28:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f2a:	4b39      	ldr	r3, [pc, #228]	@ (8008010 <USBD_CDC_Init+0x1e8>)
 8007f2c:	7819      	ldrb	r1, [r3, #0]
 8007f2e:	2340      	movs	r3, #64	@ 0x40
 8007f30:	2202      	movs	r2, #2
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f002 faa3 	bl	800a47e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f38:	4b35      	ldr	r3, [pc, #212]	@ (8008010 <USBD_CDC_Init+0x1e8>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007f50:	2201      	movs	r2, #1
 8007f52:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f54:	4b2f      	ldr	r3, [pc, #188]	@ (8008014 <USBD_CDC_Init+0x1ec>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f003 020f 	and.w	r2, r3, #15
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	440b      	add	r3, r1
 8007f68:	331c      	adds	r3, #28
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f6e:	4b29      	ldr	r3, [pc, #164]	@ (8008014 <USBD_CDC_Init+0x1ec>)
 8007f70:	7819      	ldrb	r1, [r3, #0]
 8007f72:	2308      	movs	r3, #8
 8007f74:	2203      	movs	r2, #3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f002 fa81 	bl	800a47e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007f7c:	4b25      	ldr	r3, [pc, #148]	@ (8008014 <USBD_CDC_Init+0x1ec>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 020f 	and.w	r2, r3, #15
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	3323      	adds	r3, #35	@ 0x23
 8007f92:	2201      	movs	r2, #1
 8007f94:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	33b0      	adds	r3, #176	@ 0xb0
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e018      	b.n	8008002 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7c1b      	ldrb	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8008010 <USBD_CDC_Init+0x1e8>)
 8007fda:	7819      	ldrb	r1, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f002 fb38 	bl	800a65c <USBD_LL_PrepareReceive>
 8007fec:	e008      	b.n	8008000 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fee:	4b08      	ldr	r3, [pc, #32]	@ (8008010 <USBD_CDC_Init+0x1e8>)
 8007ff0:	7819      	ldrb	r1, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ff8:	2340      	movs	r3, #64	@ 0x40
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f002 fb2e 	bl	800a65c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200000a7 	.word	0x200000a7
 8008010:	200000a8 	.word	0x200000a8
 8008014:	200000a9 	.word	0x200000a9

08008018 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008024:	4b3a      	ldr	r3, [pc, #232]	@ (8008110 <USBD_CDC_DeInit+0xf8>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f002 fa4d 	bl	800a4ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008030:	4b37      	ldr	r3, [pc, #220]	@ (8008110 <USBD_CDC_DeInit+0xf8>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 020f 	and.w	r2, r3, #15
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	3323      	adds	r3, #35	@ 0x23
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800804a:	4b32      	ldr	r3, [pc, #200]	@ (8008114 <USBD_CDC_DeInit+0xfc>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f002 fa3a 	bl	800a4ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008056:	4b2f      	ldr	r3, [pc, #188]	@ (8008114 <USBD_CDC_DeInit+0xfc>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	f003 020f 	and.w	r2, r3, #15
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008072:	4b29      	ldr	r3, [pc, #164]	@ (8008118 <USBD_CDC_DeInit+0x100>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f002 fa26 	bl	800a4ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800807e:	4b26      	ldr	r3, [pc, #152]	@ (8008118 <USBD_CDC_DeInit+0x100>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	f003 020f 	and.w	r2, r3, #15
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	3323      	adds	r3, #35	@ 0x23
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008098:	4b1f      	ldr	r3, [pc, #124]	@ (8008118 <USBD_CDC_DeInit+0x100>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 020f 	and.w	r2, r3, #15
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	331c      	adds	r3, #28
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	32b0      	adds	r2, #176	@ 0xb0
 80080bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01f      	beq.n	8008104 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	33b0      	adds	r3, #176	@ 0xb0
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32b0      	adds	r2, #176	@ 0xb0
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f002 fafa 	bl	800a6e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	32b0      	adds	r2, #176	@ 0xb0
 80080f6:	2100      	movs	r1, #0
 80080f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	200000a7 	.word	0x200000a7
 8008114:	200000a8 	.word	0x200000a8
 8008118:	200000a9 	.word	0x200000a9

0800811c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	32b0      	adds	r2, #176	@ 0xb0
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	e0bf      	b.n	80082cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008154:	2b00      	cmp	r3, #0
 8008156:	d050      	beq.n	80081fa <USBD_CDC_Setup+0xde>
 8008158:	2b20      	cmp	r3, #32
 800815a:	f040 80af 	bne.w	80082bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	88db      	ldrh	r3, [r3, #6]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d03a      	beq.n	80081dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b25b      	sxtb	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	da1b      	bge.n	80081a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	33b0      	adds	r3, #176	@ 0xb0
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008186:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	88d2      	ldrh	r2, [r2, #6]
 800818c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	88db      	ldrh	r3, [r3, #6]
 8008192:	2b07      	cmp	r3, #7
 8008194:	bf28      	it	cs
 8008196:	2307      	movcs	r3, #7
 8008198:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	89fa      	ldrh	r2, [r7, #14]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fd67 	bl	8009c74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80081a6:	e090      	b.n	80082ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	785a      	ldrb	r2, [r3, #1]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88db      	ldrh	r3, [r3, #6]
 80081b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80081b8:	d803      	bhi.n	80081c2 <USBD_CDC_Setup+0xa6>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	88db      	ldrh	r3, [r3, #6]
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	e000      	b.n	80081c4 <USBD_CDC_Setup+0xa8>
 80081c2:	2240      	movs	r2, #64	@ 0x40
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80081ca:	6939      	ldr	r1, [r7, #16]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80081d2:	461a      	mov	r2, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 fd7c 	bl	8009cd2 <USBD_CtlPrepareRx>
      break;
 80081da:	e076      	b.n	80082ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	33b0      	adds	r3, #176	@ 0xb0
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	7850      	ldrb	r0, [r2, #1]
 80081f2:	2200      	movs	r2, #0
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	4798      	blx	r3
      break;
 80081f8:	e067      	b.n	80082ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b0b      	cmp	r3, #11
 8008200:	d851      	bhi.n	80082a6 <USBD_CDC_Setup+0x18a>
 8008202:	a201      	add	r2, pc, #4	@ (adr r2, 8008208 <USBD_CDC_Setup+0xec>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008239 	.word	0x08008239
 800820c:	080082b5 	.word	0x080082b5
 8008210:	080082a7 	.word	0x080082a7
 8008214:	080082a7 	.word	0x080082a7
 8008218:	080082a7 	.word	0x080082a7
 800821c:	080082a7 	.word	0x080082a7
 8008220:	080082a7 	.word	0x080082a7
 8008224:	080082a7 	.word	0x080082a7
 8008228:	080082a7 	.word	0x080082a7
 800822c:	080082a7 	.word	0x080082a7
 8008230:	08008263 	.word	0x08008263
 8008234:	0800828d 	.word	0x0800828d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b03      	cmp	r3, #3
 8008242:	d107      	bne.n	8008254 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008244:	f107 030a 	add.w	r3, r7, #10
 8008248:	2202      	movs	r2, #2
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 fd11 	bl	8009c74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008252:	e032      	b.n	80082ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fc8f 	bl	8009b7a <USBD_CtlError>
            ret = USBD_FAIL;
 800825c:	2303      	movs	r3, #3
 800825e:	75fb      	strb	r3, [r7, #23]
          break;
 8008260:	e02b      	b.n	80082ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b03      	cmp	r3, #3
 800826c:	d107      	bne.n	800827e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800826e:	f107 030d 	add.w	r3, r7, #13
 8008272:	2201      	movs	r2, #1
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fcfc 	bl	8009c74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800827c:	e01d      	b.n	80082ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 fc7a 	bl	8009b7a <USBD_CtlError>
            ret = USBD_FAIL;
 8008286:	2303      	movs	r3, #3
 8008288:	75fb      	strb	r3, [r7, #23]
          break;
 800828a:	e016      	b.n	80082ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b03      	cmp	r3, #3
 8008296:	d00f      	beq.n	80082b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 fc6d 	bl	8009b7a <USBD_CtlError>
            ret = USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082a4:	e008      	b.n	80082b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fc66 	bl	8009b7a <USBD_CtlError>
          ret = USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	75fb      	strb	r3, [r7, #23]
          break;
 80082b2:	e002      	b.n	80082ba <USBD_CDC_Setup+0x19e>
          break;
 80082b4:	bf00      	nop
 80082b6:	e008      	b.n	80082ca <USBD_CDC_Setup+0x1ae>
          break;
 80082b8:	bf00      	nop
      }
      break;
 80082ba:	e006      	b.n	80082ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fc5b 	bl	8009b7a <USBD_CtlError>
      ret = USBD_FAIL;
 80082c4:	2303      	movs	r3, #3
 80082c6:	75fb      	strb	r3, [r7, #23]
      break;
 80082c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	32b0      	adds	r2, #176	@ 0xb0
 80082f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e065      	b.n	80083ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	32b0      	adds	r2, #176	@ 0xb0
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	f003 020f 	and.w	r2, r3, #15
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	440b      	add	r3, r1
 8008320:	3314      	adds	r3, #20
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d02f      	beq.n	8008388 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	f003 020f 	and.w	r2, r3, #15
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	3314      	adds	r3, #20
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	f003 010f 	and.w	r1, r3, #15
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	460b      	mov	r3, r1
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	440b      	add	r3, r1
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4403      	add	r3, r0
 8008350:	331c      	adds	r3, #28
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	fbb2 f1f3 	udiv	r1, r2, r3
 8008358:	fb01 f303 	mul.w	r3, r1, r3
 800835c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800835e:	2b00      	cmp	r3, #0
 8008360:	d112      	bne.n	8008388 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	f003 020f 	and.w	r2, r3, #15
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	3314      	adds	r3, #20
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800837a:	78f9      	ldrb	r1, [r7, #3]
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f002 f94a 	bl	800a61a <USBD_LL_Transmit>
 8008386:	e01f      	b.n	80083c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	33b0      	adds	r3, #176	@ 0xb0
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d010      	beq.n	80083c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	33b0      	adds	r3, #176	@ 0xb0
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	460b      	mov	r3, r1
 80083dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	32b0      	adds	r2, #176	@ 0xb0
 80083e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	32b0      	adds	r2, #176	@ 0xb0
 80083f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008400:	2303      	movs	r3, #3
 8008402:	e01a      	b.n	800843a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f002 f948 	bl	800a69e <USBD_LL_GetRxDataSize>
 800840e:	4602      	mov	r2, r0
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	33b0      	adds	r3, #176	@ 0xb0
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008434:	4611      	mov	r1, r2
 8008436:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	32b0      	adds	r2, #176	@ 0xb0
 8008454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008458:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008460:	2303      	movs	r3, #3
 8008462:	e024      	b.n	80084ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	33b0      	adds	r3, #176	@ 0xb0
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d019      	beq.n	80084ac <USBD_CDC_EP0_RxReady+0x6a>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800847e:	2bff      	cmp	r3, #255	@ 0xff
 8008480:	d014      	beq.n	80084ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	33b0      	adds	r3, #176	@ 0xb0
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800849a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	22ff      	movs	r2, #255	@ 0xff
 80084a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084c0:	2182      	movs	r1, #130	@ 0x82
 80084c2:	4818      	ldr	r0, [pc, #96]	@ (8008524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084c4:	f000 fd22 	bl	8008f0c <USBD_GetEpDesc>
 80084c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084ca:	2101      	movs	r1, #1
 80084cc:	4815      	ldr	r0, [pc, #84]	@ (8008524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084ce:	f000 fd1d 	bl	8008f0c <USBD_GetEpDesc>
 80084d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084d4:	2181      	movs	r1, #129	@ 0x81
 80084d6:	4813      	ldr	r0, [pc, #76]	@ (8008524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084d8:	f000 fd18 	bl	8008f0c <USBD_GetEpDesc>
 80084dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2210      	movs	r2, #16
 80084e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d006      	beq.n	80084fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084f8:	711a      	strb	r2, [r3, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d006      	beq.n	8008512 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800850c:	711a      	strb	r2, [r3, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2243      	movs	r2, #67	@ 0x43
 8008516:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008518:	4b02      	ldr	r3, [pc, #8]	@ (8008524 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000064 	.word	0x20000064

08008528 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008530:	2182      	movs	r1, #130	@ 0x82
 8008532:	4818      	ldr	r0, [pc, #96]	@ (8008594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008534:	f000 fcea 	bl	8008f0c <USBD_GetEpDesc>
 8008538:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800853a:	2101      	movs	r1, #1
 800853c:	4815      	ldr	r0, [pc, #84]	@ (8008594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800853e:	f000 fce5 	bl	8008f0c <USBD_GetEpDesc>
 8008542:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008544:	2181      	movs	r1, #129	@ 0x81
 8008546:	4813      	ldr	r0, [pc, #76]	@ (8008594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008548:	f000 fce0 	bl	8008f0c <USBD_GetEpDesc>
 800854c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2210      	movs	r2, #16
 8008558:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	2200      	movs	r2, #0
 8008564:	711a      	strb	r2, [r3, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f042 0202 	orr.w	r2, r2, #2
 800856c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d006      	beq.n	8008582 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	711a      	strb	r2, [r3, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f042 0202 	orr.w	r2, r2, #2
 8008580:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2243      	movs	r2, #67	@ 0x43
 8008586:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008588:	4b02      	ldr	r3, [pc, #8]	@ (8008594 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000064 	.word	0x20000064

08008598 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085a0:	2182      	movs	r1, #130	@ 0x82
 80085a2:	4818      	ldr	r0, [pc, #96]	@ (8008604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085a4:	f000 fcb2 	bl	8008f0c <USBD_GetEpDesc>
 80085a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085aa:	2101      	movs	r1, #1
 80085ac:	4815      	ldr	r0, [pc, #84]	@ (8008604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085ae:	f000 fcad 	bl	8008f0c <USBD_GetEpDesc>
 80085b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085b4:	2181      	movs	r1, #129	@ 0x81
 80085b6:	4813      	ldr	r0, [pc, #76]	@ (8008604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085b8:	f000 fca8 	bl	8008f0c <USBD_GetEpDesc>
 80085bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2210      	movs	r2, #16
 80085c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085d8:	711a      	strb	r2, [r3, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d006      	beq.n	80085f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085ec:	711a      	strb	r2, [r3, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2243      	movs	r2, #67	@ 0x43
 80085f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085f8:	4b02      	ldr	r3, [pc, #8]	@ (8008604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000064 	.word	0x20000064

08008608 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	220a      	movs	r2, #10
 8008614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008616:	4b03      	ldr	r3, [pc, #12]	@ (8008624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20000020 	.word	0x20000020

08008628 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008638:	2303      	movs	r3, #3
 800863a:	e009      	b.n	8008650 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	33b0      	adds	r3, #176	@ 0xb0
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	32b0      	adds	r2, #176	@ 0xb0
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	e008      	b.n	8008694 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	371c      	adds	r7, #28
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	32b0      	adds	r2, #176	@ 0xb0
 80086b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e004      	b.n	80086ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	32b0      	adds	r2, #176	@ 0xb0
 80086ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	32b0      	adds	r2, #176	@ 0xb0
 80086fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008706:	2303      	movs	r3, #3
 8008708:	e018      	b.n	800873c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7c1b      	ldrb	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008712:	4b0c      	ldr	r3, [pc, #48]	@ (8008744 <USBD_CDC_ReceivePacket+0x68>)
 8008714:	7819      	ldrb	r1, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800871c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 ff9b 	bl	800a65c <USBD_LL_PrepareReceive>
 8008726:	e008      	b.n	800873a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008728:	4b06      	ldr	r3, [pc, #24]	@ (8008744 <USBD_CDC_ReceivePacket+0x68>)
 800872a:	7819      	ldrb	r1, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008732:	2340      	movs	r3, #64	@ 0x40
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 ff91 	bl	800a65c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	200000a8 	.word	0x200000a8

08008748 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e01f      	b.n	80087a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	79fa      	ldrb	r2, [r7, #7]
 8008792:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f001 fe0b 	bl	800a3b0 <USBD_LL_Init>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	e025      	b.n	800880c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	32ae      	adds	r2, #174	@ 0xae
 80087d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00f      	beq.n	80087fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	32ae      	adds	r2, #174	@ 0xae
 80087e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ec:	f107 020e 	add.w	r2, r7, #14
 80087f0:	4610      	mov	r0, r2
 80087f2:	4798      	blx	r3
 80087f4:	4602      	mov	r2, r0
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fe13 	bl	800a448 <USBD_LL_Start>
 8008822:	4603      	mov	r3, r0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008858:	2b00      	cmp	r3, #0
 800885a:	d009      	beq.n	8008870 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	4611      	mov	r1, r2
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	4798      	blx	r3
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	78fa      	ldrb	r2, [r7, #3]
 8008894:	4611      	mov	r1, r2
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f920 	bl	8009b06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80088d4:	461a      	mov	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d01a      	beq.n	8008920 <USBD_LL_SetupStage+0x72>
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d822      	bhi.n	8008934 <USBD_LL_SetupStage+0x86>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <USBD_LL_SetupStage+0x4a>
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d00a      	beq.n	800890c <USBD_LL_SetupStage+0x5e>
 80088f6:	e01d      	b.n	8008934 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fb75 	bl	8008ff0 <USBD_StdDevReq>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
      break;
 800890a:	e020      	b.n	800894e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fbdd 	bl	80090d4 <USBD_StdItfReq>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]
      break;
 800891e:	e016      	b.n	800894e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fc3f 	bl	80091ac <USBD_StdEPReq>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
      break;
 8008932:	e00c      	b.n	800894e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800893a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800893e:	b2db      	uxtb	r3, r3
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fde0 	bl	800a508 <USBD_LL_StallEP>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
      break;
 800894c:	bf00      	nop
  }

  return ret;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	460b      	mov	r3, r1
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800896a:	7afb      	ldrb	r3, [r7, #11]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d177      	bne.n	8008a60 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008976:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800897e:	2b03      	cmp	r3, #3
 8008980:	f040 80a1 	bne.w	8008ac6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	8992      	ldrh	r2, [r2, #12]
 800898c:	4293      	cmp	r3, r2
 800898e:	d91c      	bls.n	80089ca <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	8992      	ldrh	r2, [r2, #12]
 8008998:	1a9a      	subs	r2, r3, r2
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	8992      	ldrh	r2, [r2, #12]
 80089a6:	441a      	add	r2, r3
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6919      	ldr	r1, [r3, #16]
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	899b      	ldrh	r3, [r3, #12]
 80089b4:	461a      	mov	r2, r3
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	4293      	cmp	r3, r2
 80089bc:	bf38      	it	cc
 80089be:	4613      	movcc	r3, r2
 80089c0:	461a      	mov	r2, r3
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f001 f9a6 	bl	8009d14 <USBD_CtlContinueRx>
 80089c8:	e07d      	b.n	8008ac6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089d0:	f003 031f 	and.w	r3, r3, #31
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d014      	beq.n	8008a02 <USBD_LL_DataOutStage+0xaa>
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d81d      	bhi.n	8008a18 <USBD_LL_DataOutStage+0xc0>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <USBD_LL_DataOutStage+0x8e>
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d003      	beq.n	80089ec <USBD_LL_DataOutStage+0x94>
 80089e4:	e018      	b.n	8008a18 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75bb      	strb	r3, [r7, #22]
            break;
 80089ea:	e018      	b.n	8008a1e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	4619      	mov	r1, r3
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 fa6e 	bl	8008ed8 <USBD_CoreFindIF>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75bb      	strb	r3, [r7, #22]
            break;
 8008a00:	e00d      	b.n	8008a1e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fa70 	bl	8008ef2 <USBD_CoreFindEP>
 8008a12:	4603      	mov	r3, r0
 8008a14:	75bb      	strb	r3, [r7, #22]
            break;
 8008a16:	e002      	b.n	8008a1e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75bb      	strb	r3, [r7, #22]
            break;
 8008a1c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a1e:	7dbb      	ldrb	r3, [r7, #22]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d119      	bne.n	8008a58 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d113      	bne.n	8008a58 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a30:	7dba      	ldrb	r2, [r7, #22]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	32ae      	adds	r2, #174	@ 0xae
 8008a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008a40:	7dba      	ldrb	r2, [r7, #22]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a48:	7dba      	ldrb	r2, [r7, #22]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	32ae      	adds	r2, #174	@ 0xae
 8008a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f001 f96c 	bl	8009d36 <USBD_CtlSendStatus>
 8008a5e:	e032      	b.n	8008ac6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	4619      	mov	r1, r3
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 fa41 	bl	8008ef2 <USBD_CoreFindEP>
 8008a70:	4603      	mov	r3, r0
 8008a72:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a74:	7dbb      	ldrb	r3, [r7, #22]
 8008a76:	2bff      	cmp	r3, #255	@ 0xff
 8008a78:	d025      	beq.n	8008ac6 <USBD_LL_DataOutStage+0x16e>
 8008a7a:	7dbb      	ldrb	r3, [r7, #22]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d122      	bne.n	8008ac6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d117      	bne.n	8008abc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a8c:	7dba      	ldrb	r2, [r7, #22]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	32ae      	adds	r2, #174	@ 0xae
 8008a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00f      	beq.n	8008abc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008a9c:	7dba      	ldrb	r2, [r7, #22]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008aa4:	7dba      	ldrb	r2, [r7, #22]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	32ae      	adds	r2, #174	@ 0xae
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	7afa      	ldrb	r2, [r7, #11]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	4798      	blx	r3
 8008ab8:	4603      	mov	r3, r0
 8008aba:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
 8008ac4:	e000      	b.n	8008ac8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d178      	bne.n	8008bd6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d163      	bne.n	8008bbc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	8992      	ldrh	r2, [r2, #12]
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d91c      	bls.n	8008b3a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	8992      	ldrh	r2, [r2, #12]
 8008b08:	1a9a      	subs	r2, r3, r2
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	8992      	ldrh	r2, [r2, #12]
 8008b16:	441a      	add	r2, r3
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	6919      	ldr	r1, [r3, #16]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	461a      	mov	r2, r3
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f001 f8c2 	bl	8009cb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2100      	movs	r1, #0
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f001 fd92 	bl	800a65c <USBD_LL_PrepareReceive>
 8008b38:	e040      	b.n	8008bbc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	899b      	ldrh	r3, [r3, #12]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d11c      	bne.n	8008b82 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d316      	bcc.n	8008b82 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d20f      	bcs.n	8008b82 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b62:	2200      	movs	r2, #0
 8008b64:	2100      	movs	r1, #0
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f001 f8a2 	bl	8009cb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b74:	2300      	movs	r3, #0
 8008b76:	2200      	movs	r2, #0
 8008b78:	2100      	movs	r1, #0
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f001 fd6e 	bl	800a65c <USBD_LL_PrepareReceive>
 8008b80:	e01c      	b.n	8008bbc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d10f      	bne.n	8008bae <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d009      	beq.n	8008bae <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bae:	2180      	movs	r1, #128	@ 0x80
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f001 fca9 	bl	800a508 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f001 f8d0 	bl	8009d5c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d03a      	beq.n	8008c3c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff fe30 	bl	800882c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008bd4:	e032      	b.n	8008c3c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008bd6:	7afb      	ldrb	r3, [r7, #11]
 8008bd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	4619      	mov	r1, r3
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f986 	bl	8008ef2 <USBD_CoreFindEP>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	2bff      	cmp	r3, #255	@ 0xff
 8008bee:	d025      	beq.n	8008c3c <USBD_LL_DataInStage+0x16c>
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d122      	bne.n	8008c3c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d11c      	bne.n	8008c3c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c02:	7dfa      	ldrb	r2, [r7, #23]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	32ae      	adds	r2, #174	@ 0xae
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d014      	beq.n	8008c3c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008c12:	7dfa      	ldrb	r2, [r7, #23]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c1a:	7dfa      	ldrb	r2, [r7, #23]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	32ae      	adds	r2, #174	@ 0xae
 8008c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	7afa      	ldrb	r2, [r7, #11]
 8008c28:	4611      	mov	r1, r2
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	4798      	blx	r3
 8008c2e:	4603      	mov	r3, r0
 8008c30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c32:	7dbb      	ldrb	r3, [r7, #22]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008c38:	7dbb      	ldrb	r3, [r7, #22]
 8008c3a:	e000      	b.n	8008c3e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d014      	beq.n	8008cac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00e      	beq.n	8008cac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6852      	ldr	r2, [r2, #4]
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	4798      	blx	r3
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cac:	2340      	movs	r3, #64	@ 0x40
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f001 fbe3 	bl	800a47e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2240      	movs	r2, #64	@ 0x40
 8008cc4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cc8:	2340      	movs	r3, #64	@ 0x40
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2180      	movs	r1, #128	@ 0x80
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fbd5 	bl	800a47e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2240      	movs	r2, #64	@ 0x40
 8008ce0:	841a      	strh	r2, [r3, #32]

  return ret;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d006      	beq.n	8008d2e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2204      	movs	r2, #4
 8008d32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d106      	bne.n	8008d66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d110      	bne.n	8008daa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	32ae      	adds	r2, #174	@ 0xae
 8008dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e01c      	b.n	8008e10 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d115      	bne.n	8008e0e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	32ae      	adds	r2, #174	@ 0xae
 8008dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32ae      	adds	r2, #174	@ 0xae
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	4611      	mov	r1, r2
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	32ae      	adds	r2, #174	@ 0xae
 8008e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e01c      	b.n	8008e74 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d115      	bne.n	8008e72 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	32ae      	adds	r2, #174	@ 0xae
 8008e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00b      	beq.n	8008e72 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	32ae      	adds	r2, #174	@ 0xae
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6852      	ldr	r2, [r2, #4]
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4798      	blx	r3
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ee4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008efe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	885b      	ldrh	r3, [r3, #2]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	7812      	ldrb	r2, [r2, #0]
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d91f      	bls.n	8008f72 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f38:	e013      	b.n	8008f62 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f3a:	f107 030a 	add.w	r3, r7, #10
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6978      	ldr	r0, [r7, #20]
 8008f42:	f000 f81b 	bl	8008f7c <USBD_GetNextDesc>
 8008f46:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	785b      	ldrb	r3, [r3, #1]
 8008f4c:	2b05      	cmp	r3, #5
 8008f4e:	d108      	bne.n	8008f62 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	789b      	ldrb	r3, [r3, #2]
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d008      	beq.n	8008f70 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	885b      	ldrh	r3, [r3, #2]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	897b      	ldrh	r3, [r7, #10]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d8e5      	bhi.n	8008f3a <USBD_GetEpDesc+0x2e>
 8008f6e:	e000      	b.n	8008f72 <USBD_GetEpDesc+0x66>
          break;
 8008f70:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f72:	693b      	ldr	r3, [r7, #16]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	7812      	ldrb	r2, [r2, #0]
 8008f92:	4413      	add	r3, r2
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fd2:	8a3b      	ldrh	r3, [r7, #16]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	b21a      	sxth	r2, r3
 8008fd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	b21b      	sxth	r3, r3
 8008fe0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fe2:	89fb      	ldrh	r3, [r7, #14]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	371c      	adds	r7, #28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009006:	2b40      	cmp	r3, #64	@ 0x40
 8009008:	d005      	beq.n	8009016 <USBD_StdDevReq+0x26>
 800900a:	2b40      	cmp	r3, #64	@ 0x40
 800900c:	d857      	bhi.n	80090be <USBD_StdDevReq+0xce>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00f      	beq.n	8009032 <USBD_StdDevReq+0x42>
 8009012:	2b20      	cmp	r3, #32
 8009014:	d153      	bne.n	80090be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	32ae      	adds	r2, #174	@ 0xae
 8009020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	4798      	blx	r3
 800902c:	4603      	mov	r3, r0
 800902e:	73fb      	strb	r3, [r7, #15]
      break;
 8009030:	e04a      	b.n	80090c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	2b09      	cmp	r3, #9
 8009038:	d83b      	bhi.n	80090b2 <USBD_StdDevReq+0xc2>
 800903a:	a201      	add	r2, pc, #4	@ (adr r2, 8009040 <USBD_StdDevReq+0x50>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	08009095 	.word	0x08009095
 8009044:	080090a9 	.word	0x080090a9
 8009048:	080090b3 	.word	0x080090b3
 800904c:	0800909f 	.word	0x0800909f
 8009050:	080090b3 	.word	0x080090b3
 8009054:	08009073 	.word	0x08009073
 8009058:	08009069 	.word	0x08009069
 800905c:	080090b3 	.word	0x080090b3
 8009060:	0800908b 	.word	0x0800908b
 8009064:	0800907d 	.word	0x0800907d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa3e 	bl	80094ec <USBD_GetDescriptor>
          break;
 8009070:	e024      	b.n	80090bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fba3 	bl	80097c0 <USBD_SetAddress>
          break;
 800907a:	e01f      	b.n	80090bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fbe2 	bl	8009848 <USBD_SetConfig>
 8009084:	4603      	mov	r3, r0
 8009086:	73fb      	strb	r3, [r7, #15]
          break;
 8009088:	e018      	b.n	80090bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fc85 	bl	800999c <USBD_GetConfig>
          break;
 8009092:	e013      	b.n	80090bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fcb6 	bl	8009a08 <USBD_GetStatus>
          break;
 800909c:	e00e      	b.n	80090bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fce5 	bl	8009a70 <USBD_SetFeature>
          break;
 80090a6:	e009      	b.n	80090bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fd09 	bl	8009ac2 <USBD_ClrFeature>
          break;
 80090b0:	e004      	b.n	80090bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fd60 	bl	8009b7a <USBD_CtlError>
          break;
 80090ba:	bf00      	nop
      }
      break;
 80090bc:	e004      	b.n	80090c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fd5a 	bl	8009b7a <USBD_CtlError>
      break;
 80090c6:	bf00      	nop
  }

  return ret;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop

080090d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090ea:	2b40      	cmp	r3, #64	@ 0x40
 80090ec:	d005      	beq.n	80090fa <USBD_StdItfReq+0x26>
 80090ee:	2b40      	cmp	r3, #64	@ 0x40
 80090f0:	d852      	bhi.n	8009198 <USBD_StdItfReq+0xc4>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <USBD_StdItfReq+0x26>
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d14e      	bne.n	8009198 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009100:	b2db      	uxtb	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	2b02      	cmp	r3, #2
 8009106:	d840      	bhi.n	800918a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	889b      	ldrh	r3, [r3, #4]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b01      	cmp	r3, #1
 8009110:	d836      	bhi.n	8009180 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	889b      	ldrh	r3, [r3, #4]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fedc 	bl	8008ed8 <USBD_CoreFindIF>
 8009120:	4603      	mov	r3, r0
 8009122:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	2bff      	cmp	r3, #255	@ 0xff
 8009128:	d01d      	beq.n	8009166 <USBD_StdItfReq+0x92>
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d11a      	bne.n	8009166 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009130:	7bba      	ldrb	r2, [r7, #14]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	32ae      	adds	r2, #174	@ 0xae
 8009136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00f      	beq.n	8009160 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009140:	7bba      	ldrb	r2, [r7, #14]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009148:	7bba      	ldrb	r2, [r7, #14]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	32ae      	adds	r2, #174	@ 0xae
 800914e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800915e:	e004      	b.n	800916a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009160:	2303      	movs	r3, #3
 8009162:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009164:	e001      	b.n	800916a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009166:	2303      	movs	r3, #3
 8009168:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	88db      	ldrh	r3, [r3, #6]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d110      	bne.n	8009194 <USBD_StdItfReq+0xc0>
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10d      	bne.n	8009194 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fddc 	bl	8009d36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800917e:	e009      	b.n	8009194 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fcf9 	bl	8009b7a <USBD_CtlError>
          break;
 8009188:	e004      	b.n	8009194 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fcf4 	bl	8009b7a <USBD_CtlError>
          break;
 8009192:	e000      	b.n	8009196 <USBD_StdItfReq+0xc2>
          break;
 8009194:	bf00      	nop
      }
      break;
 8009196:	e004      	b.n	80091a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fced 	bl	8009b7a <USBD_CtlError>
      break;
 80091a0:	bf00      	nop
  }

  return ret;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	889b      	ldrh	r3, [r3, #4]
 80091be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091c8:	2b40      	cmp	r3, #64	@ 0x40
 80091ca:	d007      	beq.n	80091dc <USBD_StdEPReq+0x30>
 80091cc:	2b40      	cmp	r3, #64	@ 0x40
 80091ce:	f200 8181 	bhi.w	80094d4 <USBD_StdEPReq+0x328>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d02a      	beq.n	800922c <USBD_StdEPReq+0x80>
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	f040 817c 	bne.w	80094d4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff fe86 	bl	8008ef2 <USBD_CoreFindEP>
 80091e6:	4603      	mov	r3, r0
 80091e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091ea:	7b7b      	ldrb	r3, [r7, #13]
 80091ec:	2bff      	cmp	r3, #255	@ 0xff
 80091ee:	f000 8176 	beq.w	80094de <USBD_StdEPReq+0x332>
 80091f2:	7b7b      	ldrb	r3, [r7, #13]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 8172 	bne.w	80094de <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80091fa:	7b7a      	ldrb	r2, [r7, #13]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009202:	7b7a      	ldrb	r2, [r7, #13]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	32ae      	adds	r2, #174	@ 0xae
 8009208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 8165 	beq.w	80094de <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009214:	7b7a      	ldrb	r2, [r7, #13]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32ae      	adds	r2, #174	@ 0xae
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	4798      	blx	r3
 8009226:	4603      	mov	r3, r0
 8009228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800922a:	e158      	b.n	80094de <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d008      	beq.n	8009246 <USBD_StdEPReq+0x9a>
 8009234:	2b03      	cmp	r3, #3
 8009236:	f300 8147 	bgt.w	80094c8 <USBD_StdEPReq+0x31c>
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 809b 	beq.w	8009376 <USBD_StdEPReq+0x1ca>
 8009240:	2b01      	cmp	r3, #1
 8009242:	d03c      	beq.n	80092be <USBD_StdEPReq+0x112>
 8009244:	e140      	b.n	80094c8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d002      	beq.n	8009258 <USBD_StdEPReq+0xac>
 8009252:	2b03      	cmp	r3, #3
 8009254:	d016      	beq.n	8009284 <USBD_StdEPReq+0xd8>
 8009256:	e02c      	b.n	80092b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00d      	beq.n	800927a <USBD_StdEPReq+0xce>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b80      	cmp	r3, #128	@ 0x80
 8009262:	d00a      	beq.n	800927a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 f94d 	bl	800a508 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800926e:	2180      	movs	r1, #128	@ 0x80
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f949 	bl	800a508 <USBD_LL_StallEP>
 8009276:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009278:	e020      	b.n	80092bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fc7c 	bl	8009b7a <USBD_CtlError>
              break;
 8009282:	e01b      	b.n	80092bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	885b      	ldrh	r3, [r3, #2]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10e      	bne.n	80092aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00b      	beq.n	80092aa <USBD_StdEPReq+0xfe>
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b80      	cmp	r3, #128	@ 0x80
 8009296:	d008      	beq.n	80092aa <USBD_StdEPReq+0xfe>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	88db      	ldrh	r3, [r3, #6]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d104      	bne.n	80092aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 f92f 	bl	800a508 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fd43 	bl	8009d36 <USBD_CtlSendStatus>

              break;
 80092b0:	e004      	b.n	80092bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fc60 	bl	8009b7a <USBD_CtlError>
              break;
 80092ba:	bf00      	nop
          }
          break;
 80092bc:	e109      	b.n	80094d2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d002      	beq.n	80092d0 <USBD_StdEPReq+0x124>
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d016      	beq.n	80092fc <USBD_StdEPReq+0x150>
 80092ce:	e04b      	b.n	8009368 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00d      	beq.n	80092f2 <USBD_StdEPReq+0x146>
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b80      	cmp	r3, #128	@ 0x80
 80092da:	d00a      	beq.n	80092f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 f911 	bl	800a508 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e6:	2180      	movs	r1, #128	@ 0x80
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 f90d 	bl	800a508 <USBD_LL_StallEP>
 80092ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092f0:	e040      	b.n	8009374 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fc40 	bl	8009b7a <USBD_CtlError>
              break;
 80092fa:	e03b      	b.n	8009374 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	885b      	ldrh	r3, [r3, #2]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d136      	bne.n	8009372 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800930a:	2b00      	cmp	r3, #0
 800930c:	d004      	beq.n	8009318 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 f917 	bl	800a546 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fd0c 	bl	8009d36 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800931e:	7bbb      	ldrb	r3, [r7, #14]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff fde5 	bl	8008ef2 <USBD_CoreFindEP>
 8009328:	4603      	mov	r3, r0
 800932a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800932c:	7b7b      	ldrb	r3, [r7, #13]
 800932e:	2bff      	cmp	r3, #255	@ 0xff
 8009330:	d01f      	beq.n	8009372 <USBD_StdEPReq+0x1c6>
 8009332:	7b7b      	ldrb	r3, [r7, #13]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d11c      	bne.n	8009372 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009338:	7b7a      	ldrb	r2, [r7, #13]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009340:	7b7a      	ldrb	r2, [r7, #13]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	32ae      	adds	r2, #174	@ 0xae
 8009346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d010      	beq.n	8009372 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009350:	7b7a      	ldrb	r2, [r7, #13]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	32ae      	adds	r2, #174	@ 0xae
 8009356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	4798      	blx	r3
 8009362:	4603      	mov	r3, r0
 8009364:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009366:	e004      	b.n	8009372 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fc05 	bl	8009b7a <USBD_CtlError>
              break;
 8009370:	e000      	b.n	8009374 <USBD_StdEPReq+0x1c8>
              break;
 8009372:	bf00      	nop
          }
          break;
 8009374:	e0ad      	b.n	80094d2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d002      	beq.n	8009388 <USBD_StdEPReq+0x1dc>
 8009382:	2b03      	cmp	r3, #3
 8009384:	d033      	beq.n	80093ee <USBD_StdEPReq+0x242>
 8009386:	e099      	b.n	80094bc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <USBD_StdEPReq+0x1f2>
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b80      	cmp	r3, #128	@ 0x80
 8009392:	d004      	beq.n	800939e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fbef 	bl	8009b7a <USBD_CtlError>
                break;
 800939c:	e093      	b.n	80094c6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800939e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	da0b      	bge.n	80093be <USBD_StdEPReq+0x212>
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	3310      	adds	r3, #16
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	4413      	add	r3, r2
 80093ba:	3304      	adds	r3, #4
 80093bc:	e00b      	b.n	80093d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093be:	7bbb      	ldrb	r3, [r7, #14]
 80093c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	4413      	add	r3, r2
 80093d4:	3304      	adds	r3, #4
 80093d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2200      	movs	r2, #0
 80093dc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	330e      	adds	r3, #14
 80093e2:	2202      	movs	r2, #2
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fc44 	bl	8009c74 <USBD_CtlSendData>
              break;
 80093ec:	e06b      	b.n	80094c6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da11      	bge.n	800941a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	f003 020f 	and.w	r2, r3, #15
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	3323      	adds	r3, #35	@ 0x23
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d117      	bne.n	8009440 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fbb1 	bl	8009b7a <USBD_CtlError>
                  break;
 8009418:	e055      	b.n	80094c6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	f003 020f 	and.w	r2, r3, #15
 8009420:	6879      	ldr	r1, [r7, #4]
 8009422:	4613      	mov	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	440b      	add	r3, r1
 800942c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fb9e 	bl	8009b7a <USBD_CtlError>
                  break;
 800943e:	e042      	b.n	80094c6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009444:	2b00      	cmp	r3, #0
 8009446:	da0b      	bge.n	8009460 <USBD_StdEPReq+0x2b4>
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	3310      	adds	r3, #16
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	4413      	add	r3, r2
 800945c:	3304      	adds	r3, #4
 800945e:	e00b      	b.n	8009478 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	4413      	add	r3, r2
 8009476:	3304      	adds	r3, #4
 8009478:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <USBD_StdEPReq+0x2da>
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b80      	cmp	r3, #128	@ 0x80
 8009484:	d103      	bne.n	800948e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2200      	movs	r2, #0
 800948a:	739a      	strb	r2, [r3, #14]
 800948c:	e00e      	b.n	80094ac <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 f876 	bl	800a584 <USBD_LL_IsStallEP>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2201      	movs	r2, #1
 80094a2:	739a      	strb	r2, [r3, #14]
 80094a4:	e002      	b.n	80094ac <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2200      	movs	r2, #0
 80094aa:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	330e      	adds	r3, #14
 80094b0:	2202      	movs	r2, #2
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fbdd 	bl	8009c74 <USBD_CtlSendData>
              break;
 80094ba:	e004      	b.n	80094c6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fb5b 	bl	8009b7a <USBD_CtlError>
              break;
 80094c4:	bf00      	nop
          }
          break;
 80094c6:	e004      	b.n	80094d2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fb55 	bl	8009b7a <USBD_CtlError>
          break;
 80094d0:	bf00      	nop
      }
      break;
 80094d2:	e005      	b.n	80094e0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fb4f 	bl	8009b7a <USBD_CtlError>
      break;
 80094dc:	e000      	b.n	80094e0 <USBD_StdEPReq+0x334>
      break;
 80094de:	bf00      	nop
  }

  return ret;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094fe:	2300      	movs	r3, #0
 8009500:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	885b      	ldrh	r3, [r3, #2]
 8009506:	0a1b      	lsrs	r3, r3, #8
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	2b06      	cmp	r3, #6
 800950e:	f200 8128 	bhi.w	8009762 <USBD_GetDescriptor+0x276>
 8009512:	a201      	add	r2, pc, #4	@ (adr r2, 8009518 <USBD_GetDescriptor+0x2c>)
 8009514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009518:	08009535 	.word	0x08009535
 800951c:	0800954d 	.word	0x0800954d
 8009520:	0800958d 	.word	0x0800958d
 8009524:	08009763 	.word	0x08009763
 8009528:	08009763 	.word	0x08009763
 800952c:	08009703 	.word	0x08009703
 8009530:	0800972f 	.word	0x0800972f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	7c12      	ldrb	r2, [r2, #16]
 8009540:	f107 0108 	add.w	r1, r7, #8
 8009544:	4610      	mov	r0, r2
 8009546:	4798      	blx	r3
 8009548:	60f8      	str	r0, [r7, #12]
      break;
 800954a:	e112      	b.n	8009772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7c1b      	ldrb	r3, [r3, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10d      	bne.n	8009570 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800955a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955c:	f107 0208 	add.w	r2, r7, #8
 8009560:	4610      	mov	r0, r2
 8009562:	4798      	blx	r3
 8009564:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3301      	adds	r3, #1
 800956a:	2202      	movs	r2, #2
 800956c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800956e:	e100      	b.n	8009772 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	f107 0208 	add.w	r2, r7, #8
 800957c:	4610      	mov	r0, r2
 800957e:	4798      	blx	r3
 8009580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	2202      	movs	r2, #2
 8009588:	701a      	strb	r2, [r3, #0]
      break;
 800958a:	e0f2      	b.n	8009772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	885b      	ldrh	r3, [r3, #2]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b05      	cmp	r3, #5
 8009594:	f200 80ac 	bhi.w	80096f0 <USBD_GetDescriptor+0x204>
 8009598:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <USBD_GetDescriptor+0xb4>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	080095b9 	.word	0x080095b9
 80095a4:	080095ed 	.word	0x080095ed
 80095a8:	08009621 	.word	0x08009621
 80095ac:	08009655 	.word	0x08009655
 80095b0:	08009689 	.word	0x08009689
 80095b4:	080096bd 	.word	0x080096bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	7c12      	ldrb	r2, [r2, #16]
 80095d0:	f107 0108 	add.w	r1, r7, #8
 80095d4:	4610      	mov	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095da:	e091      	b.n	8009700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 facb 	bl	8009b7a <USBD_CtlError>
            err++;
 80095e4:	7afb      	ldrb	r3, [r7, #11]
 80095e6:	3301      	adds	r3, #1
 80095e8:	72fb      	strb	r3, [r7, #11]
          break;
 80095ea:	e089      	b.n	8009700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	7c12      	ldrb	r2, [r2, #16]
 8009604:	f107 0108 	add.w	r1, r7, #8
 8009608:	4610      	mov	r0, r2
 800960a:	4798      	blx	r3
 800960c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800960e:	e077      	b.n	8009700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fab1 	bl	8009b7a <USBD_CtlError>
            err++;
 8009618:	7afb      	ldrb	r3, [r7, #11]
 800961a:	3301      	adds	r3, #1
 800961c:	72fb      	strb	r3, [r7, #11]
          break;
 800961e:	e06f      	b.n	8009700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	7c12      	ldrb	r2, [r2, #16]
 8009638:	f107 0108 	add.w	r1, r7, #8
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
 8009640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009642:	e05d      	b.n	8009700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fa97 	bl	8009b7a <USBD_CtlError>
            err++;
 800964c:	7afb      	ldrb	r3, [r7, #11]
 800964e:	3301      	adds	r3, #1
 8009650:	72fb      	strb	r3, [r7, #11]
          break;
 8009652:	e055      	b.n	8009700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00b      	beq.n	8009678 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	7c12      	ldrb	r2, [r2, #16]
 800966c:	f107 0108 	add.w	r1, r7, #8
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009676:	e043      	b.n	8009700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fa7d 	bl	8009b7a <USBD_CtlError>
            err++;
 8009680:	7afb      	ldrb	r3, [r7, #11]
 8009682:	3301      	adds	r3, #1
 8009684:	72fb      	strb	r3, [r7, #11]
          break;
 8009686:	e03b      	b.n	8009700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	7c12      	ldrb	r2, [r2, #16]
 80096a0:	f107 0108 	add.w	r1, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096aa:	e029      	b.n	8009700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fa63 	bl	8009b7a <USBD_CtlError>
            err++;
 80096b4:	7afb      	ldrb	r3, [r7, #11]
 80096b6:	3301      	adds	r3, #1
 80096b8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ba:	e021      	b.n	8009700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 0108 	add.w	r1, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096de:	e00f      	b.n	8009700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fa49 	bl	8009b7a <USBD_CtlError>
            err++;
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	3301      	adds	r3, #1
 80096ec:	72fb      	strb	r3, [r7, #11]
          break;
 80096ee:	e007      	b.n	8009700 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fa41 	bl	8009b7a <USBD_CtlError>
          err++;
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	3301      	adds	r3, #1
 80096fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80096fe:	bf00      	nop
      }
      break;
 8009700:	e037      	b.n	8009772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	7c1b      	ldrb	r3, [r3, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009712:	f107 0208 	add.w	r2, r7, #8
 8009716:	4610      	mov	r0, r2
 8009718:	4798      	blx	r3
 800971a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800971c:	e029      	b.n	8009772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fa2a 	bl	8009b7a <USBD_CtlError>
        err++;
 8009726:	7afb      	ldrb	r3, [r7, #11]
 8009728:	3301      	adds	r3, #1
 800972a:	72fb      	strb	r3, [r7, #11]
      break;
 800972c:	e021      	b.n	8009772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	7c1b      	ldrb	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10d      	bne.n	8009752 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800973c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800973e:	f107 0208 	add.w	r2, r7, #8
 8009742:	4610      	mov	r0, r2
 8009744:	4798      	blx	r3
 8009746:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3301      	adds	r3, #1
 800974c:	2207      	movs	r2, #7
 800974e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009750:	e00f      	b.n	8009772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fa10 	bl	8009b7a <USBD_CtlError>
        err++;
 800975a:	7afb      	ldrb	r3, [r7, #11]
 800975c:	3301      	adds	r3, #1
 800975e:	72fb      	strb	r3, [r7, #11]
      break;
 8009760:	e007      	b.n	8009772 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa08 	bl	8009b7a <USBD_CtlError>
      err++;
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	3301      	adds	r3, #1
 800976e:	72fb      	strb	r3, [r7, #11]
      break;
 8009770:	bf00      	nop
  }

  if (err != 0U)
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d11e      	bne.n	80097b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	88db      	ldrh	r3, [r3, #6]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d016      	beq.n	80097ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009780:	893b      	ldrh	r3, [r7, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00e      	beq.n	80097a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	88da      	ldrh	r2, [r3, #6]
 800978a:	893b      	ldrh	r3, [r7, #8]
 800978c:	4293      	cmp	r3, r2
 800978e:	bf28      	it	cs
 8009790:	4613      	movcs	r3, r2
 8009792:	b29b      	uxth	r3, r3
 8009794:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009796:	893b      	ldrh	r3, [r7, #8]
 8009798:	461a      	mov	r2, r3
 800979a:	68f9      	ldr	r1, [r7, #12]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fa69 	bl	8009c74 <USBD_CtlSendData>
 80097a2:	e009      	b.n	80097b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f9e7 	bl	8009b7a <USBD_CtlError>
 80097ac:	e004      	b.n	80097b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fac1 	bl	8009d36 <USBD_CtlSendStatus>
 80097b4:	e000      	b.n	80097b8 <USBD_GetDescriptor+0x2cc>
    return;
 80097b6:	bf00      	nop
  }
}
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop

080097c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	889b      	ldrh	r3, [r3, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d131      	bne.n	8009836 <USBD_SetAddress+0x76>
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	88db      	ldrh	r3, [r3, #6]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d12d      	bne.n	8009836 <USBD_SetAddress+0x76>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	885b      	ldrh	r3, [r3, #2]
 80097de:	2b7f      	cmp	r3, #127	@ 0x7f
 80097e0:	d829      	bhi.n	8009836 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	885b      	ldrh	r3, [r3, #2]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d104      	bne.n	8009804 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f9bc 	bl	8009b7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009802:	e01d      	b.n	8009840 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	7bfa      	ldrb	r2, [r7, #15]
 8009808:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fee3 	bl	800a5dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa8d 	bl	8009d36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d004      	beq.n	800982c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2202      	movs	r2, #2
 8009826:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982a:	e009      	b.n	8009840 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009834:	e004      	b.n	8009840 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f99e 	bl	8009b7a <USBD_CtlError>
  }
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	885b      	ldrh	r3, [r3, #2]
 800985a:	b2da      	uxtb	r2, r3
 800985c:	4b4e      	ldr	r3, [pc, #312]	@ (8009998 <USBD_SetConfig+0x150>)
 800985e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009860:	4b4d      	ldr	r3, [pc, #308]	@ (8009998 <USBD_SetConfig+0x150>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d905      	bls.n	8009874 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f985 	bl	8009b7a <USBD_CtlError>
    return USBD_FAIL;
 8009870:	2303      	movs	r3, #3
 8009872:	e08c      	b.n	800998e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b02      	cmp	r3, #2
 800987e:	d002      	beq.n	8009886 <USBD_SetConfig+0x3e>
 8009880:	2b03      	cmp	r3, #3
 8009882:	d029      	beq.n	80098d8 <USBD_SetConfig+0x90>
 8009884:	e075      	b.n	8009972 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009886:	4b44      	ldr	r3, [pc, #272]	@ (8009998 <USBD_SetConfig+0x150>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d020      	beq.n	80098d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800988e:	4b42      	ldr	r3, [pc, #264]	@ (8009998 <USBD_SetConfig+0x150>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009898:	4b3f      	ldr	r3, [pc, #252]	@ (8009998 <USBD_SetConfig+0x150>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7fe ffcf 	bl	8008842 <USBD_SetClassConfig>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d008      	beq.n	80098c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f962 	bl	8009b7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2202      	movs	r2, #2
 80098ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098be:	e065      	b.n	800998c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fa38 	bl	8009d36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2203      	movs	r2, #3
 80098ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80098ce:	e05d      	b.n	800998c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fa30 	bl	8009d36 <USBD_CtlSendStatus>
      break;
 80098d6:	e059      	b.n	800998c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098d8:	4b2f      	ldr	r3, [pc, #188]	@ (8009998 <USBD_SetConfig+0x150>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d112      	bne.n	8009906 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80098e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009998 <USBD_SetConfig+0x150>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098f2:	4b29      	ldr	r3, [pc, #164]	@ (8009998 <USBD_SetConfig+0x150>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7fe ffbe 	bl	800887a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fa19 	bl	8009d36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009904:	e042      	b.n	800998c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009906:	4b24      	ldr	r3, [pc, #144]	@ (8009998 <USBD_SetConfig+0x150>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d02a      	beq.n	800996a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7fe ffac 	bl	800887a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009922:	4b1d      	ldr	r3, [pc, #116]	@ (8009998 <USBD_SetConfig+0x150>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800992c:	4b1a      	ldr	r3, [pc, #104]	@ (8009998 <USBD_SetConfig+0x150>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7fe ff85 	bl	8008842 <USBD_SetClassConfig>
 8009938:	4603      	mov	r3, r0
 800993a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00f      	beq.n	8009962 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f918 	bl	8009b7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	b2db      	uxtb	r3, r3
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7fe ff91 	bl	800887a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009960:	e014      	b.n	800998c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f9e7 	bl	8009d36 <USBD_CtlSendStatus>
      break;
 8009968:	e010      	b.n	800998c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f9e3 	bl	8009d36 <USBD_CtlSendStatus>
      break;
 8009970:	e00c      	b.n	800998c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f900 	bl	8009b7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800997a:	4b07      	ldr	r3, [pc, #28]	@ (8009998 <USBD_SetConfig+0x150>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fe ff7a 	bl	800887a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009986:	2303      	movs	r3, #3
 8009988:	73fb      	strb	r3, [r7, #15]
      break;
 800998a:	bf00      	nop
  }

  return ret;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	200004e4 	.word	0x200004e4

0800999c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	88db      	ldrh	r3, [r3, #6]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d004      	beq.n	80099b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f8e2 	bl	8009b7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099b6:	e023      	b.n	8009a00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	dc02      	bgt.n	80099ca <USBD_GetConfig+0x2e>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	dc03      	bgt.n	80099d0 <USBD_GetConfig+0x34>
 80099c8:	e015      	b.n	80099f6 <USBD_GetConfig+0x5a>
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d00b      	beq.n	80099e6 <USBD_GetConfig+0x4a>
 80099ce:	e012      	b.n	80099f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3308      	adds	r3, #8
 80099da:	2201      	movs	r2, #1
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f948 	bl	8009c74 <USBD_CtlSendData>
        break;
 80099e4:	e00c      	b.n	8009a00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3304      	adds	r3, #4
 80099ea:	2201      	movs	r2, #1
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f940 	bl	8009c74 <USBD_CtlSendData>
        break;
 80099f4:	e004      	b.n	8009a00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f8be 	bl	8009b7a <USBD_CtlError>
        break;
 80099fe:	bf00      	nop
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d81e      	bhi.n	8009a5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	88db      	ldrh	r3, [r3, #6]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d004      	beq.n	8009a32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f8a5 	bl	8009b7a <USBD_CtlError>
        break;
 8009a30:	e01a      	b.n	8009a68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d005      	beq.n	8009a4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f043 0202 	orr.w	r2, r3, #2
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	330c      	adds	r3, #12
 8009a52:	2202      	movs	r2, #2
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f90c 	bl	8009c74 <USBD_CtlSendData>
      break;
 8009a5c:	e004      	b.n	8009a68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f88a 	bl	8009b7a <USBD_CtlError>
      break;
 8009a66:	bf00      	nop
  }
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d107      	bne.n	8009a92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f953 	bl	8009d36 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009a90:	e013      	b.n	8009aba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	885b      	ldrh	r3, [r3, #2]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d10b      	bne.n	8009ab2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	889b      	ldrh	r3, [r3, #4]
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f943 	bl	8009d36 <USBD_CtlSendStatus>
}
 8009ab0:	e003      	b.n	8009aba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f860 	bl	8009b7a <USBD_CtlError>
}
 8009aba:	bf00      	nop
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d80b      	bhi.n	8009af2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d10c      	bne.n	8009afc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f923 	bl	8009d36 <USBD_CtlSendStatus>
      }
      break;
 8009af0:	e004      	b.n	8009afc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f840 	bl	8009b7a <USBD_CtlError>
      break;
 8009afa:	e000      	b.n	8009afe <USBD_ClrFeature+0x3c>
      break;
 8009afc:	bf00      	nop
  }
}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	781a      	ldrb	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	781a      	ldrb	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f7ff fa3f 	bl	8008fb4 <SWAPBYTE>
 8009b36:	4603      	mov	r3, r0
 8009b38:	461a      	mov	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3301      	adds	r3, #1
 8009b42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7ff fa32 	bl	8008fb4 <SWAPBYTE>
 8009b50:	4603      	mov	r3, r0
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3301      	adds	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fa25 	bl	8008fb4 <SWAPBYTE>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	80da      	strh	r2, [r3, #6]
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b84:	2180      	movs	r1, #128	@ 0x80
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fcbe 	bl	800a508 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fcba 	bl	800a508 <USBD_LL_StallEP>
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d042      	beq.n	8009c38 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009bb6:	6938      	ldr	r0, [r7, #16]
 8009bb8:	f000 f842 	bl	8009c40 <USBD_GetLen>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bc6:	d808      	bhi.n	8009bda <USBD_GetString+0x3e>
 8009bc8:	6938      	ldr	r0, [r7, #16]
 8009bca:	f000 f839 	bl	8009c40 <USBD_GetLen>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	e001      	b.n	8009bde <USBD_GetString+0x42>
 8009bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	4413      	add	r3, r2
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7812      	ldrb	r2, [r2, #0]
 8009bec:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	2203      	movs	r2, #3
 8009bfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	3301      	adds	r3, #1
 8009c02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c04:	e013      	b.n	8009c2e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	7812      	ldrb	r2, [r2, #0]
 8009c10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	3301      	adds	r3, #1
 8009c16:	613b      	str	r3, [r7, #16]
    idx++;
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4413      	add	r3, r2
 8009c24:	2200      	movs	r2, #0
 8009c26:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e7      	bne.n	8009c06 <USBD_GetString+0x6a>
 8009c36:	e000      	b.n	8009c3a <USBD_GetString+0x9e>
    return;
 8009c38:	bf00      	nop
  }
}
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c50:	e005      	b.n	8009c5e <USBD_GetLen+0x1e>
  {
    len++;
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	3301      	adds	r3, #1
 8009c56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1f5      	bne.n	8009c52 <USBD_GetLen+0x12>
  }

  return len;
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fcba 	bl	800a61a <USBD_LL_Transmit>

  return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 fca9 	bl	800a61a <USBD_LL_Transmit>

  return USBD_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2203      	movs	r2, #3
 8009ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	2100      	movs	r1, #0
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 fca9 	bl	800a65c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	2100      	movs	r1, #0
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fc98 	bl	800a65c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2204      	movs	r2, #4
 8009d42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d46:	2300      	movs	r3, #0
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fc64 	bl	800a61a <USBD_LL_Transmit>

  return USBD_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2205      	movs	r2, #5
 8009d68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2100      	movs	r1, #0
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fc72 	bl	800a65c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4912      	ldr	r1, [pc, #72]	@ (8009dd4 <MX_USB_DEVICE_Init+0x50>)
 8009d8c:	4812      	ldr	r0, [pc, #72]	@ (8009dd8 <MX_USB_DEVICE_Init+0x54>)
 8009d8e:	f7fe fcdb 	bl	8008748 <USBD_Init>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d98:	f7f8 faf8 	bl	800238c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d9c:	490f      	ldr	r1, [pc, #60]	@ (8009ddc <MX_USB_DEVICE_Init+0x58>)
 8009d9e:	480e      	ldr	r0, [pc, #56]	@ (8009dd8 <MX_USB_DEVICE_Init+0x54>)
 8009da0:	f7fe fd02 	bl	80087a8 <USBD_RegisterClass>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009daa:	f7f8 faef 	bl	800238c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009dae:	490c      	ldr	r1, [pc, #48]	@ (8009de0 <MX_USB_DEVICE_Init+0x5c>)
 8009db0:	4809      	ldr	r0, [pc, #36]	@ (8009dd8 <MX_USB_DEVICE_Init+0x54>)
 8009db2:	f7fe fc39 	bl	8008628 <USBD_CDC_RegisterInterface>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009dbc:	f7f8 fae6 	bl	800238c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009dc0:	4805      	ldr	r0, [pc, #20]	@ (8009dd8 <MX_USB_DEVICE_Init+0x54>)
 8009dc2:	f7fe fd27 	bl	8008814 <USBD_Start>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009dcc:	f7f8 fade 	bl	800238c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009dd0:	bf00      	nop
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	200000c0 	.word	0x200000c0
 8009dd8:	200004e8 	.word	0x200004e8
 8009ddc:	2000002c 	.word	0x2000002c
 8009de0:	200000ac 	.word	0x200000ac

08009de4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009de8:	2200      	movs	r2, #0
 8009dea:	4905      	ldr	r1, [pc, #20]	@ (8009e00 <CDC_Init_FS+0x1c>)
 8009dec:	4805      	ldr	r0, [pc, #20]	@ (8009e04 <CDC_Init_FS+0x20>)
 8009dee:	f7fe fc35 	bl	800865c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009df2:	4905      	ldr	r1, [pc, #20]	@ (8009e08 <CDC_Init_FS+0x24>)
 8009df4:	4803      	ldr	r0, [pc, #12]	@ (8009e04 <CDC_Init_FS+0x20>)
 8009df6:	f7fe fc53 	bl	80086a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009dfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20000fc4 	.word	0x20000fc4
 8009e04:	200004e8 	.word	0x200004e8
 8009e08:	200007c4 	.word	0x200007c4

08009e0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b23      	cmp	r3, #35	@ 0x23
 8009e30:	d84a      	bhi.n	8009ec8 <CDC_Control_FS+0xac>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <CDC_Control_FS+0x1c>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009ec9 	.word	0x08009ec9
 8009e3c:	08009ec9 	.word	0x08009ec9
 8009e40:	08009ec9 	.word	0x08009ec9
 8009e44:	08009ec9 	.word	0x08009ec9
 8009e48:	08009ec9 	.word	0x08009ec9
 8009e4c:	08009ec9 	.word	0x08009ec9
 8009e50:	08009ec9 	.word	0x08009ec9
 8009e54:	08009ec9 	.word	0x08009ec9
 8009e58:	08009ec9 	.word	0x08009ec9
 8009e5c:	08009ec9 	.word	0x08009ec9
 8009e60:	08009ec9 	.word	0x08009ec9
 8009e64:	08009ec9 	.word	0x08009ec9
 8009e68:	08009ec9 	.word	0x08009ec9
 8009e6c:	08009ec9 	.word	0x08009ec9
 8009e70:	08009ec9 	.word	0x08009ec9
 8009e74:	08009ec9 	.word	0x08009ec9
 8009e78:	08009ec9 	.word	0x08009ec9
 8009e7c:	08009ec9 	.word	0x08009ec9
 8009e80:	08009ec9 	.word	0x08009ec9
 8009e84:	08009ec9 	.word	0x08009ec9
 8009e88:	08009ec9 	.word	0x08009ec9
 8009e8c:	08009ec9 	.word	0x08009ec9
 8009e90:	08009ec9 	.word	0x08009ec9
 8009e94:	08009ec9 	.word	0x08009ec9
 8009e98:	08009ec9 	.word	0x08009ec9
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	08009ec9 	.word	0x08009ec9
 8009ea4:	08009ec9 	.word	0x08009ec9
 8009ea8:	08009ec9 	.word	0x08009ec9
 8009eac:	08009ec9 	.word	0x08009ec9
 8009eb0:	08009ec9 	.word	0x08009ec9
 8009eb4:	08009ec9 	.word	0x08009ec9
 8009eb8:	08009ec9 	.word	0x08009ec9
 8009ebc:	08009ec9 	.word	0x08009ec9
 8009ec0:	08009ec9 	.word	0x08009ec9
 8009ec4:	08009ec9 	.word	0x08009ec9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ec8:	bf00      	nop
  }

  return (USBD_OK);
 8009eca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	4805      	ldr	r0, [pc, #20]	@ (8009efc <CDC_Receive_FS+0x24>)
 8009ee6:	f7fe fbdb 	bl	80086a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009eea:	4804      	ldr	r0, [pc, #16]	@ (8009efc <CDC_Receive_FS+0x24>)
 8009eec:	f7fe fbf6 	bl	80086dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ef0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	200004e8 	.word	0x200004e8

08009f00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	371c      	adds	r7, #28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
	...

08009f24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	6039      	str	r1, [r7, #0]
 8009f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2212      	movs	r2, #18
 8009f34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f36:	4b03      	ldr	r3, [pc, #12]	@ (8009f44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	200000dc 	.word	0x200000dc

08009f48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2204      	movs	r2, #4
 8009f58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f5a:	4b03      	ldr	r3, [pc, #12]	@ (8009f68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	200000f0 	.word	0x200000f0

08009f6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	6039      	str	r1, [r7, #0]
 8009f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d105      	bne.n	8009f8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	4907      	ldr	r1, [pc, #28]	@ (8009fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f82:	4808      	ldr	r0, [pc, #32]	@ (8009fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f84:	f7ff fe0a 	bl	8009b9c <USBD_GetString>
 8009f88:	e004      	b.n	8009f94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	4904      	ldr	r1, [pc, #16]	@ (8009fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f8e:	4805      	ldr	r0, [pc, #20]	@ (8009fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f90:	f7ff fe04 	bl	8009b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f94:	4b02      	ldr	r3, [pc, #8]	@ (8009fa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	200017c4 	.word	0x200017c4
 8009fa4:	0800db60 	.word	0x0800db60

08009fa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	6039      	str	r1, [r7, #0]
 8009fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	4904      	ldr	r1, [pc, #16]	@ (8009fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009fb8:	4804      	ldr	r0, [pc, #16]	@ (8009fcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009fba:	f7ff fdef 	bl	8009b9c <USBD_GetString>
  return USBD_StrDesc;
 8009fbe:	4b02      	ldr	r3, [pc, #8]	@ (8009fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	200017c4 	.word	0x200017c4
 8009fcc:	0800db78 	.word	0x0800db78

08009fd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	221a      	movs	r2, #26
 8009fe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009fe2:	f000 f843 	bl	800a06c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009fe6:	4b02      	ldr	r3, [pc, #8]	@ (8009ff0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	200000f4 	.word	0x200000f4

08009ff4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	6039      	str	r1, [r7, #0]
 8009ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a000:	79fb      	ldrb	r3, [r7, #7]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d105      	bne.n	800a012 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	4907      	ldr	r1, [pc, #28]	@ (800a028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a00a:	4808      	ldr	r0, [pc, #32]	@ (800a02c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a00c:	f7ff fdc6 	bl	8009b9c <USBD_GetString>
 800a010:	e004      	b.n	800a01c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	4904      	ldr	r1, [pc, #16]	@ (800a028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a016:	4805      	ldr	r0, [pc, #20]	@ (800a02c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a018:	f7ff fdc0 	bl	8009b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a01c:	4b02      	ldr	r3, [pc, #8]	@ (800a028 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	200017c4 	.word	0x200017c4
 800a02c:	0800db8c 	.word	0x0800db8c

0800a030 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d105      	bne.n	800a04e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	4907      	ldr	r1, [pc, #28]	@ (800a064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a046:	4808      	ldr	r0, [pc, #32]	@ (800a068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a048:	f7ff fda8 	bl	8009b9c <USBD_GetString>
 800a04c:	e004      	b.n	800a058 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	4904      	ldr	r1, [pc, #16]	@ (800a064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a052:	4805      	ldr	r0, [pc, #20]	@ (800a068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a054:	f7ff fda2 	bl	8009b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a058:	4b02      	ldr	r3, [pc, #8]	@ (800a064 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200017c4 	.word	0x200017c4
 800a068:	0800db98 	.word	0x0800db98

0800a06c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4413      	add	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d009      	beq.n	800a094 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a080:	2208      	movs	r2, #8
 800a082:	4906      	ldr	r1, [pc, #24]	@ (800a09c <Get_SerialNum+0x30>)
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f80d 	bl	800a0a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a08a:	2204      	movs	r2, #4
 800a08c:	4904      	ldr	r1, [pc, #16]	@ (800a0a0 <Get_SerialNum+0x34>)
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f808 	bl	800a0a4 <IntToUnicode>
  }
}
 800a094:	bf00      	nop
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	200000f6 	.word	0x200000f6
 800a0a0:	20000106 	.word	0x20000106

0800a0a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75fb      	strb	r3, [r7, #23]
 800a0ba:	e027      	b.n	800a10c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	0f1b      	lsrs	r3, r3, #28
 800a0c0:	2b09      	cmp	r3, #9
 800a0c2:	d80b      	bhi.n	800a0dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	0f1b      	lsrs	r3, r3, #28
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	440b      	add	r3, r1
 800a0d4:	3230      	adds	r2, #48	@ 0x30
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	e00a      	b.n	800a0f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	0f1b      	lsrs	r3, r3, #28
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	440b      	add	r3, r1
 800a0ec:	3237      	adds	r2, #55	@ 0x37
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	011b      	lsls	r3, r3, #4
 800a0f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	4413      	add	r3, r2
 800a102:	2200      	movs	r2, #0
 800a104:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	3301      	adds	r3, #1
 800a10a:	75fb      	strb	r3, [r7, #23]
 800a10c:	7dfa      	ldrb	r2, [r7, #23]
 800a10e:	79fb      	ldrb	r3, [r7, #7]
 800a110:	429a      	cmp	r2, r3
 800a112:	d3d3      	bcc.n	800a0bc <IntToUnicode+0x18>
  }
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	@ 0x28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a12c:	f107 0314 	add.w	r3, r7, #20
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	605a      	str	r2, [r3, #4]
 800a136:	609a      	str	r2, [r3, #8]
 800a138:	60da      	str	r2, [r3, #12]
 800a13a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a144:	d13a      	bne.n	800a1bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a146:	2300      	movs	r3, #0
 800a148:	613b      	str	r3, [r7, #16]
 800a14a:	4b1e      	ldr	r3, [pc, #120]	@ (800a1c4 <HAL_PCD_MspInit+0xa0>)
 800a14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a14e:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c4 <HAL_PCD_MspInit+0xa0>)
 800a150:	f043 0301 	orr.w	r3, r3, #1
 800a154:	6313      	str	r3, [r2, #48]	@ 0x30
 800a156:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c4 <HAL_PCD_MspInit+0xa0>)
 800a158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	613b      	str	r3, [r7, #16]
 800a160:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a162:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a168:	2302      	movs	r3, #2
 800a16a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a16c:	2300      	movs	r3, #0
 800a16e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a170:	2303      	movs	r3, #3
 800a172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a174:	230a      	movs	r3, #10
 800a176:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a178:	f107 0314 	add.w	r3, r7, #20
 800a17c:	4619      	mov	r1, r3
 800a17e:	4812      	ldr	r0, [pc, #72]	@ (800a1c8 <HAL_PCD_MspInit+0xa4>)
 800a180:	f7f9 f8a0 	bl	80032c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a184:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c4 <HAL_PCD_MspInit+0xa0>)
 800a186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a188:	4a0e      	ldr	r2, [pc, #56]	@ (800a1c4 <HAL_PCD_MspInit+0xa0>)
 800a18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a18e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c4 <HAL_PCD_MspInit+0xa0>)
 800a196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a198:	4a0a      	ldr	r2, [pc, #40]	@ (800a1c4 <HAL_PCD_MspInit+0xa0>)
 800a19a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a19e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1a0:	4b08      	ldr	r3, [pc, #32]	@ (800a1c4 <HAL_PCD_MspInit+0xa0>)
 800a1a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1a8:	60fb      	str	r3, [r7, #12]
 800a1aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	2043      	movs	r0, #67	@ 0x43
 800a1b2:	f7f9 f850 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a1b6:	2043      	movs	r0, #67	@ 0x43
 800a1b8:	f7f9 f869 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a1bc:	bf00      	nop
 800a1be:	3728      	adds	r7, #40	@ 0x28
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	40023800 	.word	0x40023800
 800a1c8:	40020000 	.word	0x40020000

0800a1cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	f7fe fb63 	bl	80088ae <USBD_LL_SetupStage>
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a202:	78fa      	ldrb	r2, [r7, #3]
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	4613      	mov	r3, r2
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	440b      	add	r3, r1
 800a210:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	78fb      	ldrb	r3, [r7, #3]
 800a218:	4619      	mov	r1, r3
 800a21a:	f7fe fb9d 	bl	8008958 <USBD_LL_DataOutStage>
}
 800a21e:	bf00      	nop
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	4613      	mov	r3, r2
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	4413      	add	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	440b      	add	r3, r1
 800a246:	3320      	adds	r3, #32
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	78fb      	ldrb	r3, [r7, #3]
 800a24c:	4619      	mov	r1, r3
 800a24e:	f7fe fc3f 	bl	8008ad0 <USBD_LL_DataInStage>
}
 800a252:	bf00      	nop
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe fd83 	bl	8008d74 <USBD_LL_SOF>
}
 800a26e:	bf00      	nop
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a27e:	2301      	movs	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	79db      	ldrb	r3, [r3, #7]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d102      	bne.n	800a290 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a28a:	2300      	movs	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]
 800a28e:	e008      	b.n	800a2a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	79db      	ldrb	r3, [r3, #7]
 800a294:	2b02      	cmp	r3, #2
 800a296:	d102      	bne.n	800a29e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a298:	2301      	movs	r3, #1
 800a29a:	73fb      	strb	r3, [r7, #15]
 800a29c:	e001      	b.n	800a2a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a29e:	f7f8 f875 	bl	800238c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2a8:	7bfa      	ldrb	r2, [r7, #15]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe fd1d 	bl	8008cec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe fcc4 	bl	8008c46 <USBD_LL_Reset>
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe fd18 	bl	8008d0c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	6812      	ldr	r2, [r2, #0]
 800a2ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a2ee:	f043 0301 	orr.w	r3, r3, #1
 800a2f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7adb      	ldrb	r3, [r3, #11]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2fc:	4b04      	ldr	r3, [pc, #16]	@ (800a310 <HAL_PCD_SuspendCallback+0x48>)
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	4a03      	ldr	r2, [pc, #12]	@ (800a310 <HAL_PCD_SuspendCallback+0x48>)
 800a302:	f043 0306 	orr.w	r3, r3, #6
 800a306:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	e000ed00 	.word	0xe000ed00

0800a314 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe fd0e 	bl	8008d44 <USBD_LL_Resume>
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a342:	78fa      	ldrb	r2, [r7, #3]
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe fd66 	bl	8008e18 <USBD_LL_IsoOUTIncomplete>
}
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a366:	78fa      	ldrb	r2, [r7, #3]
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe fd22 	bl	8008db4 <USBD_LL_IsoINIncomplete>
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fd78 	bl	8008e7c <USBD_LL_DevConnected>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe fd75 	bl	8008e92 <USBD_LL_DevDisconnected>
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d13c      	bne.n	800a43a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a3c0:	4a20      	ldr	r2, [pc, #128]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3cc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a3d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a3d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3da:	2204      	movs	r2, #4
 800a3dc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a3de:	4b19      	ldr	r3, [pc, #100]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3e4:	4b17      	ldr	r3, [pc, #92]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a3ea:	4b16      	ldr	r3, [pc, #88]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a3f0:	4b14      	ldr	r3, [pc, #80]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a3f6:	4b13      	ldr	r3, [pc, #76]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a3fc:	4b11      	ldr	r3, [pc, #68]	@ (800a444 <USBD_LL_Init+0x94>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a402:	4b10      	ldr	r3, [pc, #64]	@ (800a444 <USBD_LL_Init+0x94>)
 800a404:	2200      	movs	r2, #0
 800a406:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a408:	4b0e      	ldr	r3, [pc, #56]	@ (800a444 <USBD_LL_Init+0x94>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a40e:	480d      	ldr	r0, [pc, #52]	@ (800a444 <USBD_LL_Init+0x94>)
 800a410:	f7f9 f90d 	bl	800362e <HAL_PCD_Init>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a41a:	f7f7 ffb7 	bl	800238c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a41e:	2180      	movs	r1, #128	@ 0x80
 800a420:	4808      	ldr	r0, [pc, #32]	@ (800a444 <USBD_LL_Init+0x94>)
 800a422:	f7fa fb3a 	bl	8004a9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a426:	2240      	movs	r2, #64	@ 0x40
 800a428:	2100      	movs	r1, #0
 800a42a:	4806      	ldr	r0, [pc, #24]	@ (800a444 <USBD_LL_Init+0x94>)
 800a42c:	f7fa faee 	bl	8004a0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a430:	2280      	movs	r2, #128	@ 0x80
 800a432:	2101      	movs	r1, #1
 800a434:	4803      	ldr	r0, [pc, #12]	@ (800a444 <USBD_LL_Init+0x94>)
 800a436:	f7fa fae9 	bl	8004a0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	200019c4 	.word	0x200019c4

0800a448 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a45e:	4618      	mov	r0, r3
 800a460:	f7f9 f9f4 	bl	800384c <HAL_PCD_Start>
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 f942 	bl	800a6f4 <USBD_Get_USB_Status>
 800a470:	4603      	mov	r3, r0
 800a472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a474:	7bbb      	ldrb	r3, [r7, #14]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	4608      	mov	r0, r1
 800a488:	4611      	mov	r1, r2
 800a48a:	461a      	mov	r2, r3
 800a48c:	4603      	mov	r3, r0
 800a48e:	70fb      	strb	r3, [r7, #3]
 800a490:	460b      	mov	r3, r1
 800a492:	70bb      	strb	r3, [r7, #2]
 800a494:	4613      	mov	r3, r2
 800a496:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a4a6:	78bb      	ldrb	r3, [r7, #2]
 800a4a8:	883a      	ldrh	r2, [r7, #0]
 800a4aa:	78f9      	ldrb	r1, [r7, #3]
 800a4ac:	f7f9 fec8 	bl	8004240 <HAL_PCD_EP_Open>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 f91c 	bl	800a6f4 <USBD_Get_USB_Status>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f9 ff13 	bl	8004314 <HAL_PCD_EP_Close>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 f8fd 	bl	800a6f4 <USBD_Get_USB_Status>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f7f9 ffcb 	bl	80044c2 <HAL_PCD_EP_SetStall>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a530:	7bfb      	ldrb	r3, [r7, #15]
 800a532:	4618      	mov	r0, r3
 800a534:	f000 f8de 	bl	800a6f4 <USBD_Get_USB_Status>
 800a538:	4603      	mov	r3, r0
 800a53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	460b      	mov	r3, r1
 800a550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a560:	78fa      	ldrb	r2, [r7, #3]
 800a562:	4611      	mov	r1, r2
 800a564:	4618      	mov	r0, r3
 800a566:	f7fa f80f 	bl	8004588 <HAL_PCD_EP_ClrStall>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f8bf 	bl	800a6f4 <USBD_Get_USB_Status>
 800a576:	4603      	mov	r3, r0
 800a578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a596:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	da0b      	bge.n	800a5b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5a6:	68f9      	ldr	r1, [r7, #12]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	4413      	add	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	440b      	add	r3, r1
 800a5b2:	3316      	adds	r3, #22
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	e00b      	b.n	800a5d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5be:	68f9      	ldr	r1, [r7, #12]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	00db      	lsls	r3, r3, #3
 800a5c4:	4413      	add	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	440b      	add	r3, r1
 800a5ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a5ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5f6:	78fa      	ldrb	r2, [r7, #3]
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7f9 fdfc 	bl	80041f8 <HAL_PCD_SetAddress>
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	4618      	mov	r0, r3
 800a608:	f000 f874 	bl	800a6f4 <USBD_Get_USB_Status>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a610:	7bbb      	ldrb	r3, [r7, #14]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b086      	sub	sp, #24
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
 800a626:	460b      	mov	r3, r1
 800a628:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a638:	7af9      	ldrb	r1, [r7, #11]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	f7f9 ff06 	bl	800444e <HAL_PCD_EP_Transmit>
 800a642:	4603      	mov	r3, r0
 800a644:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a646:	7dfb      	ldrb	r3, [r7, #23]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f853 	bl	800a6f4 <USBD_Get_USB_Status>
 800a64e:	4603      	mov	r3, r0
 800a650:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a652:	7dbb      	ldrb	r3, [r7, #22]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	607a      	str	r2, [r7, #4]
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	460b      	mov	r3, r1
 800a66a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a67a:	7af9      	ldrb	r1, [r7, #11]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	f7f9 fe92 	bl	80043a8 <HAL_PCD_EP_Receive>
 800a684:	4603      	mov	r3, r0
 800a686:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a688:	7dfb      	ldrb	r3, [r7, #23]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 f832 	bl	800a6f4 <USBD_Get_USB_Status>
 800a690:	4603      	mov	r3, r0
 800a692:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a694:	7dbb      	ldrb	r3, [r7, #22]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6b0:	78fa      	ldrb	r2, [r7, #3]
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7f9 feb2 	bl	800441e <HAL_PCD_EP_GetRxCount>
 800a6ba:	4603      	mov	r3, r0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a6cc:	4b03      	ldr	r3, [pc, #12]	@ (800a6dc <USBD_static_malloc+0x18>)
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	20001ea8 	.word	0x20001ea8

0800a6e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]

}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a702:	79fb      	ldrb	r3, [r7, #7]
 800a704:	2b03      	cmp	r3, #3
 800a706:	d817      	bhi.n	800a738 <USBD_Get_USB_Status+0x44>
 800a708:	a201      	add	r2, pc, #4	@ (adr r2, 800a710 <USBD_Get_USB_Status+0x1c>)
 800a70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70e:	bf00      	nop
 800a710:	0800a721 	.word	0x0800a721
 800a714:	0800a727 	.word	0x0800a727
 800a718:	0800a72d 	.word	0x0800a72d
 800a71c:	0800a733 	.word	0x0800a733
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
    break;
 800a724:	e00b      	b.n	800a73e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a726:	2303      	movs	r3, #3
 800a728:	73fb      	strb	r3, [r7, #15]
    break;
 800a72a:	e008      	b.n	800a73e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a72c:	2301      	movs	r3, #1
 800a72e:	73fb      	strb	r3, [r7, #15]
    break;
 800a730:	e005      	b.n	800a73e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a732:	2303      	movs	r3, #3
 800a734:	73fb      	strb	r3, [r7, #15]
    break;
 800a736:	e002      	b.n	800a73e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a738:	2303      	movs	r3, #3
 800a73a:	73fb      	strb	r3, [r7, #15]
    break;
 800a73c:	bf00      	nop
  }
  return usb_status;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <__cvt>:
 800a74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a750:	ec57 6b10 	vmov	r6, r7, d0
 800a754:	2f00      	cmp	r7, #0
 800a756:	460c      	mov	r4, r1
 800a758:	4619      	mov	r1, r3
 800a75a:	463b      	mov	r3, r7
 800a75c:	bfbb      	ittet	lt
 800a75e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a762:	461f      	movlt	r7, r3
 800a764:	2300      	movge	r3, #0
 800a766:	232d      	movlt	r3, #45	@ 0x2d
 800a768:	700b      	strb	r3, [r1, #0]
 800a76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a76c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a770:	4691      	mov	r9, r2
 800a772:	f023 0820 	bic.w	r8, r3, #32
 800a776:	bfbc      	itt	lt
 800a778:	4632      	movlt	r2, r6
 800a77a:	4616      	movlt	r6, r2
 800a77c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a780:	d005      	beq.n	800a78e <__cvt+0x42>
 800a782:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a786:	d100      	bne.n	800a78a <__cvt+0x3e>
 800a788:	3401      	adds	r4, #1
 800a78a:	2102      	movs	r1, #2
 800a78c:	e000      	b.n	800a790 <__cvt+0x44>
 800a78e:	2103      	movs	r1, #3
 800a790:	ab03      	add	r3, sp, #12
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	ab02      	add	r3, sp, #8
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	ec47 6b10 	vmov	d0, r6, r7
 800a79c:	4653      	mov	r3, sl
 800a79e:	4622      	mov	r2, r4
 800a7a0:	f000 fe4a 	bl	800b438 <_dtoa_r>
 800a7a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	d119      	bne.n	800a7e0 <__cvt+0x94>
 800a7ac:	f019 0f01 	tst.w	r9, #1
 800a7b0:	d00e      	beq.n	800a7d0 <__cvt+0x84>
 800a7b2:	eb00 0904 	add.w	r9, r0, r4
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f6 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c2:	b108      	cbz	r0, 800a7c8 <__cvt+0x7c>
 800a7c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7c8:	2230      	movs	r2, #48	@ 0x30
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	454b      	cmp	r3, r9
 800a7ce:	d31e      	bcc.n	800a80e <__cvt+0xc2>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7d4:	1b5b      	subs	r3, r3, r5
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	b004      	add	sp, #16
 800a7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7e4:	eb00 0904 	add.w	r9, r0, r4
 800a7e8:	d1e5      	bne.n	800a7b6 <__cvt+0x6a>
 800a7ea:	7803      	ldrb	r3, [r0, #0]
 800a7ec:	2b30      	cmp	r3, #48	@ 0x30
 800a7ee:	d10a      	bne.n	800a806 <__cvt+0xba>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	f7f6 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7fc:	b918      	cbnz	r0, 800a806 <__cvt+0xba>
 800a7fe:	f1c4 0401 	rsb	r4, r4, #1
 800a802:	f8ca 4000 	str.w	r4, [sl]
 800a806:	f8da 3000 	ldr.w	r3, [sl]
 800a80a:	4499      	add	r9, r3
 800a80c:	e7d3      	b.n	800a7b6 <__cvt+0x6a>
 800a80e:	1c59      	adds	r1, r3, #1
 800a810:	9103      	str	r1, [sp, #12]
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	e7d9      	b.n	800a7ca <__cvt+0x7e>

0800a816 <__exponent>:
 800a816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a818:	2900      	cmp	r1, #0
 800a81a:	bfba      	itte	lt
 800a81c:	4249      	neglt	r1, r1
 800a81e:	232d      	movlt	r3, #45	@ 0x2d
 800a820:	232b      	movge	r3, #43	@ 0x2b
 800a822:	2909      	cmp	r1, #9
 800a824:	7002      	strb	r2, [r0, #0]
 800a826:	7043      	strb	r3, [r0, #1]
 800a828:	dd29      	ble.n	800a87e <__exponent+0x68>
 800a82a:	f10d 0307 	add.w	r3, sp, #7
 800a82e:	461d      	mov	r5, r3
 800a830:	270a      	movs	r7, #10
 800a832:	461a      	mov	r2, r3
 800a834:	fbb1 f6f7 	udiv	r6, r1, r7
 800a838:	fb07 1416 	mls	r4, r7, r6, r1
 800a83c:	3430      	adds	r4, #48	@ 0x30
 800a83e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a842:	460c      	mov	r4, r1
 800a844:	2c63      	cmp	r4, #99	@ 0x63
 800a846:	f103 33ff 	add.w	r3, r3, #4294967295
 800a84a:	4631      	mov	r1, r6
 800a84c:	dcf1      	bgt.n	800a832 <__exponent+0x1c>
 800a84e:	3130      	adds	r1, #48	@ 0x30
 800a850:	1e94      	subs	r4, r2, #2
 800a852:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a856:	1c41      	adds	r1, r0, #1
 800a858:	4623      	mov	r3, r4
 800a85a:	42ab      	cmp	r3, r5
 800a85c:	d30a      	bcc.n	800a874 <__exponent+0x5e>
 800a85e:	f10d 0309 	add.w	r3, sp, #9
 800a862:	1a9b      	subs	r3, r3, r2
 800a864:	42ac      	cmp	r4, r5
 800a866:	bf88      	it	hi
 800a868:	2300      	movhi	r3, #0
 800a86a:	3302      	adds	r3, #2
 800a86c:	4403      	add	r3, r0
 800a86e:	1a18      	subs	r0, r3, r0
 800a870:	b003      	add	sp, #12
 800a872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a874:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a878:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a87c:	e7ed      	b.n	800a85a <__exponent+0x44>
 800a87e:	2330      	movs	r3, #48	@ 0x30
 800a880:	3130      	adds	r1, #48	@ 0x30
 800a882:	7083      	strb	r3, [r0, #2]
 800a884:	70c1      	strb	r1, [r0, #3]
 800a886:	1d03      	adds	r3, r0, #4
 800a888:	e7f1      	b.n	800a86e <__exponent+0x58>
	...

0800a88c <_printf_float>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	b08d      	sub	sp, #52	@ 0x34
 800a892:	460c      	mov	r4, r1
 800a894:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a898:	4616      	mov	r6, r2
 800a89a:	461f      	mov	r7, r3
 800a89c:	4605      	mov	r5, r0
 800a89e:	f000 fcbb 	bl	800b218 <_localeconv_r>
 800a8a2:	6803      	ldr	r3, [r0, #0]
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f5 fce2 	bl	8000270 <strlen>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a8b4:	9005      	str	r0, [sp, #20]
 800a8b6:	3307      	adds	r3, #7
 800a8b8:	f023 0307 	bic.w	r3, r3, #7
 800a8bc:	f103 0208 	add.w	r2, r3, #8
 800a8c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a8c4:	f8d4 b000 	ldr.w	fp, [r4]
 800a8c8:	f8c8 2000 	str.w	r2, [r8]
 800a8cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a8d4:	9307      	str	r3, [sp, #28]
 800a8d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a8de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8e2:	4b9c      	ldr	r3, [pc, #624]	@ (800ab54 <_printf_float+0x2c8>)
 800a8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e8:	f7f6 f920 	bl	8000b2c <__aeabi_dcmpun>
 800a8ec:	bb70      	cbnz	r0, 800a94c <_printf_float+0xc0>
 800a8ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8f2:	4b98      	ldr	r3, [pc, #608]	@ (800ab54 <_printf_float+0x2c8>)
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f8:	f7f6 f8fa 	bl	8000af0 <__aeabi_dcmple>
 800a8fc:	bb30      	cbnz	r0, 800a94c <_printf_float+0xc0>
 800a8fe:	2200      	movs	r2, #0
 800a900:	2300      	movs	r3, #0
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f6 f8e9 	bl	8000adc <__aeabi_dcmplt>
 800a90a:	b110      	cbz	r0, 800a912 <_printf_float+0x86>
 800a90c:	232d      	movs	r3, #45	@ 0x2d
 800a90e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a912:	4a91      	ldr	r2, [pc, #580]	@ (800ab58 <_printf_float+0x2cc>)
 800a914:	4b91      	ldr	r3, [pc, #580]	@ (800ab5c <_printf_float+0x2d0>)
 800a916:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a91a:	bf94      	ite	ls
 800a91c:	4690      	movls	r8, r2
 800a91e:	4698      	movhi	r8, r3
 800a920:	2303      	movs	r3, #3
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	f02b 0304 	bic.w	r3, fp, #4
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	f04f 0900 	mov.w	r9, #0
 800a92e:	9700      	str	r7, [sp, #0]
 800a930:	4633      	mov	r3, r6
 800a932:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a934:	4621      	mov	r1, r4
 800a936:	4628      	mov	r0, r5
 800a938:	f000 f9d2 	bl	800ace0 <_printf_common>
 800a93c:	3001      	adds	r0, #1
 800a93e:	f040 808d 	bne.w	800aa5c <_printf_float+0x1d0>
 800a942:	f04f 30ff 	mov.w	r0, #4294967295
 800a946:	b00d      	add	sp, #52	@ 0x34
 800a948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94c:	4642      	mov	r2, r8
 800a94e:	464b      	mov	r3, r9
 800a950:	4640      	mov	r0, r8
 800a952:	4649      	mov	r1, r9
 800a954:	f7f6 f8ea 	bl	8000b2c <__aeabi_dcmpun>
 800a958:	b140      	cbz	r0, 800a96c <_printf_float+0xe0>
 800a95a:	464b      	mov	r3, r9
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	bfbc      	itt	lt
 800a960:	232d      	movlt	r3, #45	@ 0x2d
 800a962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a966:	4a7e      	ldr	r2, [pc, #504]	@ (800ab60 <_printf_float+0x2d4>)
 800a968:	4b7e      	ldr	r3, [pc, #504]	@ (800ab64 <_printf_float+0x2d8>)
 800a96a:	e7d4      	b.n	800a916 <_printf_float+0x8a>
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a972:	9206      	str	r2, [sp, #24]
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	d13b      	bne.n	800a9f0 <_printf_float+0x164>
 800a978:	2306      	movs	r3, #6
 800a97a:	6063      	str	r3, [r4, #4]
 800a97c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a980:	2300      	movs	r3, #0
 800a982:	6022      	str	r2, [r4, #0]
 800a984:	9303      	str	r3, [sp, #12]
 800a986:	ab0a      	add	r3, sp, #40	@ 0x28
 800a988:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a98c:	ab09      	add	r3, sp, #36	@ 0x24
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	6861      	ldr	r1, [r4, #4]
 800a992:	ec49 8b10 	vmov	d0, r8, r9
 800a996:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a99a:	4628      	mov	r0, r5
 800a99c:	f7ff fed6 	bl	800a74c <__cvt>
 800a9a0:	9b06      	ldr	r3, [sp, #24]
 800a9a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9a4:	2b47      	cmp	r3, #71	@ 0x47
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	d129      	bne.n	800a9fe <_printf_float+0x172>
 800a9aa:	1cc8      	adds	r0, r1, #3
 800a9ac:	db02      	blt.n	800a9b4 <_printf_float+0x128>
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	dd41      	ble.n	800aa38 <_printf_float+0x1ac>
 800a9b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a9b8:	fa5f fa8a 	uxtb.w	sl, sl
 800a9bc:	3901      	subs	r1, #1
 800a9be:	4652      	mov	r2, sl
 800a9c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a9c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9c6:	f7ff ff26 	bl	800a816 <__exponent>
 800a9ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9cc:	1813      	adds	r3, r2, r0
 800a9ce:	2a01      	cmp	r2, #1
 800a9d0:	4681      	mov	r9, r0
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	dc02      	bgt.n	800a9dc <_printf_float+0x150>
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	07d2      	lsls	r2, r2, #31
 800a9da:	d501      	bpl.n	800a9e0 <_printf_float+0x154>
 800a9dc:	3301      	adds	r3, #1
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0a2      	beq.n	800a92e <_printf_float+0xa2>
 800a9e8:	232d      	movs	r3, #45	@ 0x2d
 800a9ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9ee:	e79e      	b.n	800a92e <_printf_float+0xa2>
 800a9f0:	9a06      	ldr	r2, [sp, #24]
 800a9f2:	2a47      	cmp	r2, #71	@ 0x47
 800a9f4:	d1c2      	bne.n	800a97c <_printf_float+0xf0>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1c0      	bne.n	800a97c <_printf_float+0xf0>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e7bd      	b.n	800a97a <_printf_float+0xee>
 800a9fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa02:	d9db      	bls.n	800a9bc <_printf_float+0x130>
 800aa04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa08:	d118      	bne.n	800aa3c <_printf_float+0x1b0>
 800aa0a:	2900      	cmp	r1, #0
 800aa0c:	6863      	ldr	r3, [r4, #4]
 800aa0e:	dd0b      	ble.n	800aa28 <_printf_float+0x19c>
 800aa10:	6121      	str	r1, [r4, #16]
 800aa12:	b913      	cbnz	r3, 800aa1a <_printf_float+0x18e>
 800aa14:	6822      	ldr	r2, [r4, #0]
 800aa16:	07d0      	lsls	r0, r2, #31
 800aa18:	d502      	bpl.n	800aa20 <_printf_float+0x194>
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	440b      	add	r3, r1
 800aa1e:	6123      	str	r3, [r4, #16]
 800aa20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa22:	f04f 0900 	mov.w	r9, #0
 800aa26:	e7db      	b.n	800a9e0 <_printf_float+0x154>
 800aa28:	b913      	cbnz	r3, 800aa30 <_printf_float+0x1a4>
 800aa2a:	6822      	ldr	r2, [r4, #0]
 800aa2c:	07d2      	lsls	r2, r2, #31
 800aa2e:	d501      	bpl.n	800aa34 <_printf_float+0x1a8>
 800aa30:	3302      	adds	r3, #2
 800aa32:	e7f4      	b.n	800aa1e <_printf_float+0x192>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e7f2      	b.n	800aa1e <_printf_float+0x192>
 800aa38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa3e:	4299      	cmp	r1, r3
 800aa40:	db05      	blt.n	800aa4e <_printf_float+0x1c2>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	6121      	str	r1, [r4, #16]
 800aa46:	07d8      	lsls	r0, r3, #31
 800aa48:	d5ea      	bpl.n	800aa20 <_printf_float+0x194>
 800aa4a:	1c4b      	adds	r3, r1, #1
 800aa4c:	e7e7      	b.n	800aa1e <_printf_float+0x192>
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	bfd4      	ite	le
 800aa52:	f1c1 0202 	rsble	r2, r1, #2
 800aa56:	2201      	movgt	r2, #1
 800aa58:	4413      	add	r3, r2
 800aa5a:	e7e0      	b.n	800aa1e <_printf_float+0x192>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	055a      	lsls	r2, r3, #21
 800aa60:	d407      	bmi.n	800aa72 <_printf_float+0x1e6>
 800aa62:	6923      	ldr	r3, [r4, #16]
 800aa64:	4642      	mov	r2, r8
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	47b8      	blx	r7
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d12b      	bne.n	800aac8 <_printf_float+0x23c>
 800aa70:	e767      	b.n	800a942 <_printf_float+0xb6>
 800aa72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa76:	f240 80dd 	bls.w	800ac34 <_printf_float+0x3a8>
 800aa7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2300      	movs	r3, #0
 800aa82:	f7f6 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d033      	beq.n	800aaf2 <_printf_float+0x266>
 800aa8a:	4a37      	ldr	r2, [pc, #220]	@ (800ab68 <_printf_float+0x2dc>)
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f af54 	beq.w	800a942 <_printf_float+0xb6>
 800aa9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa9e:	4543      	cmp	r3, r8
 800aaa0:	db02      	blt.n	800aaa8 <_printf_float+0x21c>
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	07d8      	lsls	r0, r3, #31
 800aaa6:	d50f      	bpl.n	800aac8 <_printf_float+0x23c>
 800aaa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	47b8      	blx	r7
 800aab2:	3001      	adds	r0, #1
 800aab4:	f43f af45 	beq.w	800a942 <_printf_float+0xb6>
 800aab8:	f04f 0900 	mov.w	r9, #0
 800aabc:	f108 38ff 	add.w	r8, r8, #4294967295
 800aac0:	f104 0a1a 	add.w	sl, r4, #26
 800aac4:	45c8      	cmp	r8, r9
 800aac6:	dc09      	bgt.n	800aadc <_printf_float+0x250>
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	079b      	lsls	r3, r3, #30
 800aacc:	f100 8103 	bmi.w	800acd6 <_printf_float+0x44a>
 800aad0:	68e0      	ldr	r0, [r4, #12]
 800aad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad4:	4298      	cmp	r0, r3
 800aad6:	bfb8      	it	lt
 800aad8:	4618      	movlt	r0, r3
 800aada:	e734      	b.n	800a946 <_printf_float+0xba>
 800aadc:	2301      	movs	r3, #1
 800aade:	4652      	mov	r2, sl
 800aae0:	4631      	mov	r1, r6
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	f43f af2b 	beq.w	800a942 <_printf_float+0xb6>
 800aaec:	f109 0901 	add.w	r9, r9, #1
 800aaf0:	e7e8      	b.n	800aac4 <_printf_float+0x238>
 800aaf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	dc39      	bgt.n	800ab6c <_printf_float+0x2e0>
 800aaf8:	4a1b      	ldr	r2, [pc, #108]	@ (800ab68 <_printf_float+0x2dc>)
 800aafa:	2301      	movs	r3, #1
 800aafc:	4631      	mov	r1, r6
 800aafe:	4628      	mov	r0, r5
 800ab00:	47b8      	blx	r7
 800ab02:	3001      	adds	r0, #1
 800ab04:	f43f af1d 	beq.w	800a942 <_printf_float+0xb6>
 800ab08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab0c:	ea59 0303 	orrs.w	r3, r9, r3
 800ab10:	d102      	bne.n	800ab18 <_printf_float+0x28c>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	07d9      	lsls	r1, r3, #31
 800ab16:	d5d7      	bpl.n	800aac8 <_printf_float+0x23c>
 800ab18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b8      	blx	r7
 800ab22:	3001      	adds	r0, #1
 800ab24:	f43f af0d 	beq.w	800a942 <_printf_float+0xb6>
 800ab28:	f04f 0a00 	mov.w	sl, #0
 800ab2c:	f104 0b1a 	add.w	fp, r4, #26
 800ab30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab32:	425b      	negs	r3, r3
 800ab34:	4553      	cmp	r3, sl
 800ab36:	dc01      	bgt.n	800ab3c <_printf_float+0x2b0>
 800ab38:	464b      	mov	r3, r9
 800ab3a:	e793      	b.n	800aa64 <_printf_float+0x1d8>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	465a      	mov	r2, fp
 800ab40:	4631      	mov	r1, r6
 800ab42:	4628      	mov	r0, r5
 800ab44:	47b8      	blx	r7
 800ab46:	3001      	adds	r0, #1
 800ab48:	f43f aefb 	beq.w	800a942 <_printf_float+0xb6>
 800ab4c:	f10a 0a01 	add.w	sl, sl, #1
 800ab50:	e7ee      	b.n	800ab30 <_printf_float+0x2a4>
 800ab52:	bf00      	nop
 800ab54:	7fefffff 	.word	0x7fefffff
 800ab58:	0800dbb8 	.word	0x0800dbb8
 800ab5c:	0800dbbc 	.word	0x0800dbbc
 800ab60:	0800dbc0 	.word	0x0800dbc0
 800ab64:	0800dbc4 	.word	0x0800dbc4
 800ab68:	0800dbc8 	.word	0x0800dbc8
 800ab6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab72:	4553      	cmp	r3, sl
 800ab74:	bfa8      	it	ge
 800ab76:	4653      	movge	r3, sl
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	4699      	mov	r9, r3
 800ab7c:	dc36      	bgt.n	800abec <_printf_float+0x360>
 800ab7e:	f04f 0b00 	mov.w	fp, #0
 800ab82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab86:	f104 021a 	add.w	r2, r4, #26
 800ab8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab8c:	9306      	str	r3, [sp, #24]
 800ab8e:	eba3 0309 	sub.w	r3, r3, r9
 800ab92:	455b      	cmp	r3, fp
 800ab94:	dc31      	bgt.n	800abfa <_printf_float+0x36e>
 800ab96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab98:	459a      	cmp	sl, r3
 800ab9a:	dc3a      	bgt.n	800ac12 <_printf_float+0x386>
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	07da      	lsls	r2, r3, #31
 800aba0:	d437      	bmi.n	800ac12 <_printf_float+0x386>
 800aba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba4:	ebaa 0903 	sub.w	r9, sl, r3
 800aba8:	9b06      	ldr	r3, [sp, #24]
 800abaa:	ebaa 0303 	sub.w	r3, sl, r3
 800abae:	4599      	cmp	r9, r3
 800abb0:	bfa8      	it	ge
 800abb2:	4699      	movge	r9, r3
 800abb4:	f1b9 0f00 	cmp.w	r9, #0
 800abb8:	dc33      	bgt.n	800ac22 <_printf_float+0x396>
 800abba:	f04f 0800 	mov.w	r8, #0
 800abbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abc2:	f104 0b1a 	add.w	fp, r4, #26
 800abc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc8:	ebaa 0303 	sub.w	r3, sl, r3
 800abcc:	eba3 0309 	sub.w	r3, r3, r9
 800abd0:	4543      	cmp	r3, r8
 800abd2:	f77f af79 	ble.w	800aac8 <_printf_float+0x23c>
 800abd6:	2301      	movs	r3, #1
 800abd8:	465a      	mov	r2, fp
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	f43f aeae 	beq.w	800a942 <_printf_float+0xb6>
 800abe6:	f108 0801 	add.w	r8, r8, #1
 800abea:	e7ec      	b.n	800abc6 <_printf_float+0x33a>
 800abec:	4642      	mov	r2, r8
 800abee:	4631      	mov	r1, r6
 800abf0:	4628      	mov	r0, r5
 800abf2:	47b8      	blx	r7
 800abf4:	3001      	adds	r0, #1
 800abf6:	d1c2      	bne.n	800ab7e <_printf_float+0x2f2>
 800abf8:	e6a3      	b.n	800a942 <_printf_float+0xb6>
 800abfa:	2301      	movs	r3, #1
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	9206      	str	r2, [sp, #24]
 800ac02:	47b8      	blx	r7
 800ac04:	3001      	adds	r0, #1
 800ac06:	f43f ae9c 	beq.w	800a942 <_printf_float+0xb6>
 800ac0a:	9a06      	ldr	r2, [sp, #24]
 800ac0c:	f10b 0b01 	add.w	fp, fp, #1
 800ac10:	e7bb      	b.n	800ab8a <_printf_float+0x2fe>
 800ac12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac16:	4631      	mov	r1, r6
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d1c0      	bne.n	800aba2 <_printf_float+0x316>
 800ac20:	e68f      	b.n	800a942 <_printf_float+0xb6>
 800ac22:	9a06      	ldr	r2, [sp, #24]
 800ac24:	464b      	mov	r3, r9
 800ac26:	4442      	add	r2, r8
 800ac28:	4631      	mov	r1, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b8      	blx	r7
 800ac2e:	3001      	adds	r0, #1
 800ac30:	d1c3      	bne.n	800abba <_printf_float+0x32e>
 800ac32:	e686      	b.n	800a942 <_printf_float+0xb6>
 800ac34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac38:	f1ba 0f01 	cmp.w	sl, #1
 800ac3c:	dc01      	bgt.n	800ac42 <_printf_float+0x3b6>
 800ac3e:	07db      	lsls	r3, r3, #31
 800ac40:	d536      	bpl.n	800acb0 <_printf_float+0x424>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4642      	mov	r2, r8
 800ac46:	4631      	mov	r1, r6
 800ac48:	4628      	mov	r0, r5
 800ac4a:	47b8      	blx	r7
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	f43f ae78 	beq.w	800a942 <_printf_float+0xb6>
 800ac52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac56:	4631      	mov	r1, r6
 800ac58:	4628      	mov	r0, r5
 800ac5a:	47b8      	blx	r7
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	f43f ae70 	beq.w	800a942 <_printf_float+0xb6>
 800ac62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac66:	2200      	movs	r2, #0
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac6e:	f7f5 ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac72:	b9c0      	cbnz	r0, 800aca6 <_printf_float+0x41a>
 800ac74:	4653      	mov	r3, sl
 800ac76:	f108 0201 	add.w	r2, r8, #1
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b8      	blx	r7
 800ac80:	3001      	adds	r0, #1
 800ac82:	d10c      	bne.n	800ac9e <_printf_float+0x412>
 800ac84:	e65d      	b.n	800a942 <_printf_float+0xb6>
 800ac86:	2301      	movs	r3, #1
 800ac88:	465a      	mov	r2, fp
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	47b8      	blx	r7
 800ac90:	3001      	adds	r0, #1
 800ac92:	f43f ae56 	beq.w	800a942 <_printf_float+0xb6>
 800ac96:	f108 0801 	add.w	r8, r8, #1
 800ac9a:	45d0      	cmp	r8, sl
 800ac9c:	dbf3      	blt.n	800ac86 <_printf_float+0x3fa>
 800ac9e:	464b      	mov	r3, r9
 800aca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aca4:	e6df      	b.n	800aa66 <_printf_float+0x1da>
 800aca6:	f04f 0800 	mov.w	r8, #0
 800acaa:	f104 0b1a 	add.w	fp, r4, #26
 800acae:	e7f4      	b.n	800ac9a <_printf_float+0x40e>
 800acb0:	2301      	movs	r3, #1
 800acb2:	4642      	mov	r2, r8
 800acb4:	e7e1      	b.n	800ac7a <_printf_float+0x3ee>
 800acb6:	2301      	movs	r3, #1
 800acb8:	464a      	mov	r2, r9
 800acba:	4631      	mov	r1, r6
 800acbc:	4628      	mov	r0, r5
 800acbe:	47b8      	blx	r7
 800acc0:	3001      	adds	r0, #1
 800acc2:	f43f ae3e 	beq.w	800a942 <_printf_float+0xb6>
 800acc6:	f108 0801 	add.w	r8, r8, #1
 800acca:	68e3      	ldr	r3, [r4, #12]
 800accc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acce:	1a5b      	subs	r3, r3, r1
 800acd0:	4543      	cmp	r3, r8
 800acd2:	dcf0      	bgt.n	800acb6 <_printf_float+0x42a>
 800acd4:	e6fc      	b.n	800aad0 <_printf_float+0x244>
 800acd6:	f04f 0800 	mov.w	r8, #0
 800acda:	f104 0919 	add.w	r9, r4, #25
 800acde:	e7f4      	b.n	800acca <_printf_float+0x43e>

0800ace0 <_printf_common>:
 800ace0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace4:	4616      	mov	r6, r2
 800ace6:	4698      	mov	r8, r3
 800ace8:	688a      	ldr	r2, [r1, #8]
 800acea:	690b      	ldr	r3, [r1, #16]
 800acec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acf0:	4293      	cmp	r3, r2
 800acf2:	bfb8      	it	lt
 800acf4:	4613      	movlt	r3, r2
 800acf6:	6033      	str	r3, [r6, #0]
 800acf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800acfc:	4607      	mov	r7, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	b10a      	cbz	r2, 800ad06 <_printf_common+0x26>
 800ad02:	3301      	adds	r3, #1
 800ad04:	6033      	str	r3, [r6, #0]
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	0699      	lsls	r1, r3, #26
 800ad0a:	bf42      	ittt	mi
 800ad0c:	6833      	ldrmi	r3, [r6, #0]
 800ad0e:	3302      	addmi	r3, #2
 800ad10:	6033      	strmi	r3, [r6, #0]
 800ad12:	6825      	ldr	r5, [r4, #0]
 800ad14:	f015 0506 	ands.w	r5, r5, #6
 800ad18:	d106      	bne.n	800ad28 <_printf_common+0x48>
 800ad1a:	f104 0a19 	add.w	sl, r4, #25
 800ad1e:	68e3      	ldr	r3, [r4, #12]
 800ad20:	6832      	ldr	r2, [r6, #0]
 800ad22:	1a9b      	subs	r3, r3, r2
 800ad24:	42ab      	cmp	r3, r5
 800ad26:	dc26      	bgt.n	800ad76 <_printf_common+0x96>
 800ad28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad2c:	6822      	ldr	r2, [r4, #0]
 800ad2e:	3b00      	subs	r3, #0
 800ad30:	bf18      	it	ne
 800ad32:	2301      	movne	r3, #1
 800ad34:	0692      	lsls	r2, r2, #26
 800ad36:	d42b      	bmi.n	800ad90 <_printf_common+0xb0>
 800ad38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	4638      	mov	r0, r7
 800ad40:	47c8      	blx	r9
 800ad42:	3001      	adds	r0, #1
 800ad44:	d01e      	beq.n	800ad84 <_printf_common+0xa4>
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	6922      	ldr	r2, [r4, #16]
 800ad4a:	f003 0306 	and.w	r3, r3, #6
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	bf02      	ittt	eq
 800ad52:	68e5      	ldreq	r5, [r4, #12]
 800ad54:	6833      	ldreq	r3, [r6, #0]
 800ad56:	1aed      	subeq	r5, r5, r3
 800ad58:	68a3      	ldr	r3, [r4, #8]
 800ad5a:	bf0c      	ite	eq
 800ad5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad60:	2500      	movne	r5, #0
 800ad62:	4293      	cmp	r3, r2
 800ad64:	bfc4      	itt	gt
 800ad66:	1a9b      	subgt	r3, r3, r2
 800ad68:	18ed      	addgt	r5, r5, r3
 800ad6a:	2600      	movs	r6, #0
 800ad6c:	341a      	adds	r4, #26
 800ad6e:	42b5      	cmp	r5, r6
 800ad70:	d11a      	bne.n	800ada8 <_printf_common+0xc8>
 800ad72:	2000      	movs	r0, #0
 800ad74:	e008      	b.n	800ad88 <_printf_common+0xa8>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4652      	mov	r2, sl
 800ad7a:	4641      	mov	r1, r8
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	47c8      	blx	r9
 800ad80:	3001      	adds	r0, #1
 800ad82:	d103      	bne.n	800ad8c <_printf_common+0xac>
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295
 800ad88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	e7c6      	b.n	800ad1e <_printf_common+0x3e>
 800ad90:	18e1      	adds	r1, r4, r3
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	2030      	movs	r0, #48	@ 0x30
 800ad96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad9a:	4422      	add	r2, r4
 800ad9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ada0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ada4:	3302      	adds	r3, #2
 800ada6:	e7c7      	b.n	800ad38 <_printf_common+0x58>
 800ada8:	2301      	movs	r3, #1
 800adaa:	4622      	mov	r2, r4
 800adac:	4641      	mov	r1, r8
 800adae:	4638      	mov	r0, r7
 800adb0:	47c8      	blx	r9
 800adb2:	3001      	adds	r0, #1
 800adb4:	d0e6      	beq.n	800ad84 <_printf_common+0xa4>
 800adb6:	3601      	adds	r6, #1
 800adb8:	e7d9      	b.n	800ad6e <_printf_common+0x8e>
	...

0800adbc <_printf_i>:
 800adbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc0:	7e0f      	ldrb	r7, [r1, #24]
 800adc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adc4:	2f78      	cmp	r7, #120	@ 0x78
 800adc6:	4691      	mov	r9, r2
 800adc8:	4680      	mov	r8, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	469a      	mov	sl, r3
 800adce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800add2:	d807      	bhi.n	800ade4 <_printf_i+0x28>
 800add4:	2f62      	cmp	r7, #98	@ 0x62
 800add6:	d80a      	bhi.n	800adee <_printf_i+0x32>
 800add8:	2f00      	cmp	r7, #0
 800adda:	f000 80d2 	beq.w	800af82 <_printf_i+0x1c6>
 800adde:	2f58      	cmp	r7, #88	@ 0x58
 800ade0:	f000 80b9 	beq.w	800af56 <_printf_i+0x19a>
 800ade4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ade8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adec:	e03a      	b.n	800ae64 <_printf_i+0xa8>
 800adee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adf2:	2b15      	cmp	r3, #21
 800adf4:	d8f6      	bhi.n	800ade4 <_printf_i+0x28>
 800adf6:	a101      	add	r1, pc, #4	@ (adr r1, 800adfc <_printf_i+0x40>)
 800adf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adfc:	0800ae55 	.word	0x0800ae55
 800ae00:	0800ae69 	.word	0x0800ae69
 800ae04:	0800ade5 	.word	0x0800ade5
 800ae08:	0800ade5 	.word	0x0800ade5
 800ae0c:	0800ade5 	.word	0x0800ade5
 800ae10:	0800ade5 	.word	0x0800ade5
 800ae14:	0800ae69 	.word	0x0800ae69
 800ae18:	0800ade5 	.word	0x0800ade5
 800ae1c:	0800ade5 	.word	0x0800ade5
 800ae20:	0800ade5 	.word	0x0800ade5
 800ae24:	0800ade5 	.word	0x0800ade5
 800ae28:	0800af69 	.word	0x0800af69
 800ae2c:	0800ae93 	.word	0x0800ae93
 800ae30:	0800af23 	.word	0x0800af23
 800ae34:	0800ade5 	.word	0x0800ade5
 800ae38:	0800ade5 	.word	0x0800ade5
 800ae3c:	0800af8b 	.word	0x0800af8b
 800ae40:	0800ade5 	.word	0x0800ade5
 800ae44:	0800ae93 	.word	0x0800ae93
 800ae48:	0800ade5 	.word	0x0800ade5
 800ae4c:	0800ade5 	.word	0x0800ade5
 800ae50:	0800af2b 	.word	0x0800af2b
 800ae54:	6833      	ldr	r3, [r6, #0]
 800ae56:	1d1a      	adds	r2, r3, #4
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6032      	str	r2, [r6, #0]
 800ae5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae64:	2301      	movs	r3, #1
 800ae66:	e09d      	b.n	800afa4 <_printf_i+0x1e8>
 800ae68:	6833      	ldr	r3, [r6, #0]
 800ae6a:	6820      	ldr	r0, [r4, #0]
 800ae6c:	1d19      	adds	r1, r3, #4
 800ae6e:	6031      	str	r1, [r6, #0]
 800ae70:	0606      	lsls	r6, r0, #24
 800ae72:	d501      	bpl.n	800ae78 <_printf_i+0xbc>
 800ae74:	681d      	ldr	r5, [r3, #0]
 800ae76:	e003      	b.n	800ae80 <_printf_i+0xc4>
 800ae78:	0645      	lsls	r5, r0, #25
 800ae7a:	d5fb      	bpl.n	800ae74 <_printf_i+0xb8>
 800ae7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae80:	2d00      	cmp	r5, #0
 800ae82:	da03      	bge.n	800ae8c <_printf_i+0xd0>
 800ae84:	232d      	movs	r3, #45	@ 0x2d
 800ae86:	426d      	negs	r5, r5
 800ae88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae8c:	4859      	ldr	r0, [pc, #356]	@ (800aff4 <_printf_i+0x238>)
 800ae8e:	230a      	movs	r3, #10
 800ae90:	e011      	b.n	800aeb6 <_printf_i+0xfa>
 800ae92:	6821      	ldr	r1, [r4, #0]
 800ae94:	6833      	ldr	r3, [r6, #0]
 800ae96:	0608      	lsls	r0, r1, #24
 800ae98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae9c:	d402      	bmi.n	800aea4 <_printf_i+0xe8>
 800ae9e:	0649      	lsls	r1, r1, #25
 800aea0:	bf48      	it	mi
 800aea2:	b2ad      	uxthmi	r5, r5
 800aea4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aea6:	4853      	ldr	r0, [pc, #332]	@ (800aff4 <_printf_i+0x238>)
 800aea8:	6033      	str	r3, [r6, #0]
 800aeaa:	bf14      	ite	ne
 800aeac:	230a      	movne	r3, #10
 800aeae:	2308      	moveq	r3, #8
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeb6:	6866      	ldr	r6, [r4, #4]
 800aeb8:	60a6      	str	r6, [r4, #8]
 800aeba:	2e00      	cmp	r6, #0
 800aebc:	bfa2      	ittt	ge
 800aebe:	6821      	ldrge	r1, [r4, #0]
 800aec0:	f021 0104 	bicge.w	r1, r1, #4
 800aec4:	6021      	strge	r1, [r4, #0]
 800aec6:	b90d      	cbnz	r5, 800aecc <_printf_i+0x110>
 800aec8:	2e00      	cmp	r6, #0
 800aeca:	d04b      	beq.n	800af64 <_printf_i+0x1a8>
 800aecc:	4616      	mov	r6, r2
 800aece:	fbb5 f1f3 	udiv	r1, r5, r3
 800aed2:	fb03 5711 	mls	r7, r3, r1, r5
 800aed6:	5dc7      	ldrb	r7, [r0, r7]
 800aed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aedc:	462f      	mov	r7, r5
 800aede:	42bb      	cmp	r3, r7
 800aee0:	460d      	mov	r5, r1
 800aee2:	d9f4      	bls.n	800aece <_printf_i+0x112>
 800aee4:	2b08      	cmp	r3, #8
 800aee6:	d10b      	bne.n	800af00 <_printf_i+0x144>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	07df      	lsls	r7, r3, #31
 800aeec:	d508      	bpl.n	800af00 <_printf_i+0x144>
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	6861      	ldr	r1, [r4, #4]
 800aef2:	4299      	cmp	r1, r3
 800aef4:	bfde      	ittt	le
 800aef6:	2330      	movle	r3, #48	@ 0x30
 800aef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aefc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af00:	1b92      	subs	r2, r2, r6
 800af02:	6122      	str	r2, [r4, #16]
 800af04:	f8cd a000 	str.w	sl, [sp]
 800af08:	464b      	mov	r3, r9
 800af0a:	aa03      	add	r2, sp, #12
 800af0c:	4621      	mov	r1, r4
 800af0e:	4640      	mov	r0, r8
 800af10:	f7ff fee6 	bl	800ace0 <_printf_common>
 800af14:	3001      	adds	r0, #1
 800af16:	d14a      	bne.n	800afae <_printf_i+0x1f2>
 800af18:	f04f 30ff 	mov.w	r0, #4294967295
 800af1c:	b004      	add	sp, #16
 800af1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	f043 0320 	orr.w	r3, r3, #32
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	4833      	ldr	r0, [pc, #204]	@ (800aff8 <_printf_i+0x23c>)
 800af2c:	2778      	movs	r7, #120	@ 0x78
 800af2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	6831      	ldr	r1, [r6, #0]
 800af36:	061f      	lsls	r7, r3, #24
 800af38:	f851 5b04 	ldr.w	r5, [r1], #4
 800af3c:	d402      	bmi.n	800af44 <_printf_i+0x188>
 800af3e:	065f      	lsls	r7, r3, #25
 800af40:	bf48      	it	mi
 800af42:	b2ad      	uxthmi	r5, r5
 800af44:	6031      	str	r1, [r6, #0]
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	bf44      	itt	mi
 800af4a:	f043 0320 	orrmi.w	r3, r3, #32
 800af4e:	6023      	strmi	r3, [r4, #0]
 800af50:	b11d      	cbz	r5, 800af5a <_printf_i+0x19e>
 800af52:	2310      	movs	r3, #16
 800af54:	e7ac      	b.n	800aeb0 <_printf_i+0xf4>
 800af56:	4827      	ldr	r0, [pc, #156]	@ (800aff4 <_printf_i+0x238>)
 800af58:	e7e9      	b.n	800af2e <_printf_i+0x172>
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	f023 0320 	bic.w	r3, r3, #32
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	e7f6      	b.n	800af52 <_printf_i+0x196>
 800af64:	4616      	mov	r6, r2
 800af66:	e7bd      	b.n	800aee4 <_printf_i+0x128>
 800af68:	6833      	ldr	r3, [r6, #0]
 800af6a:	6825      	ldr	r5, [r4, #0]
 800af6c:	6961      	ldr	r1, [r4, #20]
 800af6e:	1d18      	adds	r0, r3, #4
 800af70:	6030      	str	r0, [r6, #0]
 800af72:	062e      	lsls	r6, r5, #24
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	d501      	bpl.n	800af7c <_printf_i+0x1c0>
 800af78:	6019      	str	r1, [r3, #0]
 800af7a:	e002      	b.n	800af82 <_printf_i+0x1c6>
 800af7c:	0668      	lsls	r0, r5, #25
 800af7e:	d5fb      	bpl.n	800af78 <_printf_i+0x1bc>
 800af80:	8019      	strh	r1, [r3, #0]
 800af82:	2300      	movs	r3, #0
 800af84:	6123      	str	r3, [r4, #16]
 800af86:	4616      	mov	r6, r2
 800af88:	e7bc      	b.n	800af04 <_printf_i+0x148>
 800af8a:	6833      	ldr	r3, [r6, #0]
 800af8c:	1d1a      	adds	r2, r3, #4
 800af8e:	6032      	str	r2, [r6, #0]
 800af90:	681e      	ldr	r6, [r3, #0]
 800af92:	6862      	ldr	r2, [r4, #4]
 800af94:	2100      	movs	r1, #0
 800af96:	4630      	mov	r0, r6
 800af98:	f7f5 f91a 	bl	80001d0 <memchr>
 800af9c:	b108      	cbz	r0, 800afa2 <_printf_i+0x1e6>
 800af9e:	1b80      	subs	r0, r0, r6
 800afa0:	6060      	str	r0, [r4, #4]
 800afa2:	6863      	ldr	r3, [r4, #4]
 800afa4:	6123      	str	r3, [r4, #16]
 800afa6:	2300      	movs	r3, #0
 800afa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afac:	e7aa      	b.n	800af04 <_printf_i+0x148>
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	4632      	mov	r2, r6
 800afb2:	4649      	mov	r1, r9
 800afb4:	4640      	mov	r0, r8
 800afb6:	47d0      	blx	sl
 800afb8:	3001      	adds	r0, #1
 800afba:	d0ad      	beq.n	800af18 <_printf_i+0x15c>
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	079b      	lsls	r3, r3, #30
 800afc0:	d413      	bmi.n	800afea <_printf_i+0x22e>
 800afc2:	68e0      	ldr	r0, [r4, #12]
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	4298      	cmp	r0, r3
 800afc8:	bfb8      	it	lt
 800afca:	4618      	movlt	r0, r3
 800afcc:	e7a6      	b.n	800af1c <_printf_i+0x160>
 800afce:	2301      	movs	r3, #1
 800afd0:	4632      	mov	r2, r6
 800afd2:	4649      	mov	r1, r9
 800afd4:	4640      	mov	r0, r8
 800afd6:	47d0      	blx	sl
 800afd8:	3001      	adds	r0, #1
 800afda:	d09d      	beq.n	800af18 <_printf_i+0x15c>
 800afdc:	3501      	adds	r5, #1
 800afde:	68e3      	ldr	r3, [r4, #12]
 800afe0:	9903      	ldr	r1, [sp, #12]
 800afe2:	1a5b      	subs	r3, r3, r1
 800afe4:	42ab      	cmp	r3, r5
 800afe6:	dcf2      	bgt.n	800afce <_printf_i+0x212>
 800afe8:	e7eb      	b.n	800afc2 <_printf_i+0x206>
 800afea:	2500      	movs	r5, #0
 800afec:	f104 0619 	add.w	r6, r4, #25
 800aff0:	e7f5      	b.n	800afde <_printf_i+0x222>
 800aff2:	bf00      	nop
 800aff4:	0800dbca 	.word	0x0800dbca
 800aff8:	0800dbdb 	.word	0x0800dbdb

0800affc <std>:
 800affc:	2300      	movs	r3, #0
 800affe:	b510      	push	{r4, lr}
 800b000:	4604      	mov	r4, r0
 800b002:	e9c0 3300 	strd	r3, r3, [r0]
 800b006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b00a:	6083      	str	r3, [r0, #8]
 800b00c:	8181      	strh	r1, [r0, #12]
 800b00e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b010:	81c2      	strh	r2, [r0, #14]
 800b012:	6183      	str	r3, [r0, #24]
 800b014:	4619      	mov	r1, r3
 800b016:	2208      	movs	r2, #8
 800b018:	305c      	adds	r0, #92	@ 0x5c
 800b01a:	f000 f8f4 	bl	800b206 <memset>
 800b01e:	4b0d      	ldr	r3, [pc, #52]	@ (800b054 <std+0x58>)
 800b020:	6263      	str	r3, [r4, #36]	@ 0x24
 800b022:	4b0d      	ldr	r3, [pc, #52]	@ (800b058 <std+0x5c>)
 800b024:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b026:	4b0d      	ldr	r3, [pc, #52]	@ (800b05c <std+0x60>)
 800b028:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b02a:	4b0d      	ldr	r3, [pc, #52]	@ (800b060 <std+0x64>)
 800b02c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b02e:	4b0d      	ldr	r3, [pc, #52]	@ (800b064 <std+0x68>)
 800b030:	6224      	str	r4, [r4, #32]
 800b032:	429c      	cmp	r4, r3
 800b034:	d006      	beq.n	800b044 <std+0x48>
 800b036:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b03a:	4294      	cmp	r4, r2
 800b03c:	d002      	beq.n	800b044 <std+0x48>
 800b03e:	33d0      	adds	r3, #208	@ 0xd0
 800b040:	429c      	cmp	r4, r3
 800b042:	d105      	bne.n	800b050 <std+0x54>
 800b044:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b04c:	f000 b958 	b.w	800b300 <__retarget_lock_init_recursive>
 800b050:	bd10      	pop	{r4, pc}
 800b052:	bf00      	nop
 800b054:	0800b181 	.word	0x0800b181
 800b058:	0800b1a3 	.word	0x0800b1a3
 800b05c:	0800b1db 	.word	0x0800b1db
 800b060:	0800b1ff 	.word	0x0800b1ff
 800b064:	200020c8 	.word	0x200020c8

0800b068 <stdio_exit_handler>:
 800b068:	4a02      	ldr	r2, [pc, #8]	@ (800b074 <stdio_exit_handler+0xc>)
 800b06a:	4903      	ldr	r1, [pc, #12]	@ (800b078 <stdio_exit_handler+0x10>)
 800b06c:	4803      	ldr	r0, [pc, #12]	@ (800b07c <stdio_exit_handler+0x14>)
 800b06e:	f000 b869 	b.w	800b144 <_fwalk_sglue>
 800b072:	bf00      	nop
 800b074:	20000110 	.word	0x20000110
 800b078:	0800c9cd 	.word	0x0800c9cd
 800b07c:	20000120 	.word	0x20000120

0800b080 <cleanup_stdio>:
 800b080:	6841      	ldr	r1, [r0, #4]
 800b082:	4b0c      	ldr	r3, [pc, #48]	@ (800b0b4 <cleanup_stdio+0x34>)
 800b084:	4299      	cmp	r1, r3
 800b086:	b510      	push	{r4, lr}
 800b088:	4604      	mov	r4, r0
 800b08a:	d001      	beq.n	800b090 <cleanup_stdio+0x10>
 800b08c:	f001 fc9e 	bl	800c9cc <_fflush_r>
 800b090:	68a1      	ldr	r1, [r4, #8]
 800b092:	4b09      	ldr	r3, [pc, #36]	@ (800b0b8 <cleanup_stdio+0x38>)
 800b094:	4299      	cmp	r1, r3
 800b096:	d002      	beq.n	800b09e <cleanup_stdio+0x1e>
 800b098:	4620      	mov	r0, r4
 800b09a:	f001 fc97 	bl	800c9cc <_fflush_r>
 800b09e:	68e1      	ldr	r1, [r4, #12]
 800b0a0:	4b06      	ldr	r3, [pc, #24]	@ (800b0bc <cleanup_stdio+0x3c>)
 800b0a2:	4299      	cmp	r1, r3
 800b0a4:	d004      	beq.n	800b0b0 <cleanup_stdio+0x30>
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ac:	f001 bc8e 	b.w	800c9cc <_fflush_r>
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	bf00      	nop
 800b0b4:	200020c8 	.word	0x200020c8
 800b0b8:	20002130 	.word	0x20002130
 800b0bc:	20002198 	.word	0x20002198

0800b0c0 <global_stdio_init.part.0>:
 800b0c0:	b510      	push	{r4, lr}
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f0 <global_stdio_init.part.0+0x30>)
 800b0c4:	4c0b      	ldr	r4, [pc, #44]	@ (800b0f4 <global_stdio_init.part.0+0x34>)
 800b0c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b0f8 <global_stdio_init.part.0+0x38>)
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	f7ff ff94 	bl	800affc <std>
 800b0d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b0d8:	2201      	movs	r2, #1
 800b0da:	2109      	movs	r1, #9
 800b0dc:	f7ff ff8e 	bl	800affc <std>
 800b0e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ea:	2112      	movs	r1, #18
 800b0ec:	f7ff bf86 	b.w	800affc <std>
 800b0f0:	20002200 	.word	0x20002200
 800b0f4:	200020c8 	.word	0x200020c8
 800b0f8:	0800b069 	.word	0x0800b069

0800b0fc <__sfp_lock_acquire>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	@ (800b104 <__sfp_lock_acquire+0x8>)
 800b0fe:	f000 b900 	b.w	800b302 <__retarget_lock_acquire_recursive>
 800b102:	bf00      	nop
 800b104:	20002209 	.word	0x20002209

0800b108 <__sfp_lock_release>:
 800b108:	4801      	ldr	r0, [pc, #4]	@ (800b110 <__sfp_lock_release+0x8>)
 800b10a:	f000 b8fb 	b.w	800b304 <__retarget_lock_release_recursive>
 800b10e:	bf00      	nop
 800b110:	20002209 	.word	0x20002209

0800b114 <__sinit>:
 800b114:	b510      	push	{r4, lr}
 800b116:	4604      	mov	r4, r0
 800b118:	f7ff fff0 	bl	800b0fc <__sfp_lock_acquire>
 800b11c:	6a23      	ldr	r3, [r4, #32]
 800b11e:	b11b      	cbz	r3, 800b128 <__sinit+0x14>
 800b120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b124:	f7ff bff0 	b.w	800b108 <__sfp_lock_release>
 800b128:	4b04      	ldr	r3, [pc, #16]	@ (800b13c <__sinit+0x28>)
 800b12a:	6223      	str	r3, [r4, #32]
 800b12c:	4b04      	ldr	r3, [pc, #16]	@ (800b140 <__sinit+0x2c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1f5      	bne.n	800b120 <__sinit+0xc>
 800b134:	f7ff ffc4 	bl	800b0c0 <global_stdio_init.part.0>
 800b138:	e7f2      	b.n	800b120 <__sinit+0xc>
 800b13a:	bf00      	nop
 800b13c:	0800b081 	.word	0x0800b081
 800b140:	20002200 	.word	0x20002200

0800b144 <_fwalk_sglue>:
 800b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b148:	4607      	mov	r7, r0
 800b14a:	4688      	mov	r8, r1
 800b14c:	4614      	mov	r4, r2
 800b14e:	2600      	movs	r6, #0
 800b150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b154:	f1b9 0901 	subs.w	r9, r9, #1
 800b158:	d505      	bpl.n	800b166 <_fwalk_sglue+0x22>
 800b15a:	6824      	ldr	r4, [r4, #0]
 800b15c:	2c00      	cmp	r4, #0
 800b15e:	d1f7      	bne.n	800b150 <_fwalk_sglue+0xc>
 800b160:	4630      	mov	r0, r6
 800b162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b166:	89ab      	ldrh	r3, [r5, #12]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d907      	bls.n	800b17c <_fwalk_sglue+0x38>
 800b16c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b170:	3301      	adds	r3, #1
 800b172:	d003      	beq.n	800b17c <_fwalk_sglue+0x38>
 800b174:	4629      	mov	r1, r5
 800b176:	4638      	mov	r0, r7
 800b178:	47c0      	blx	r8
 800b17a:	4306      	orrs	r6, r0
 800b17c:	3568      	adds	r5, #104	@ 0x68
 800b17e:	e7e9      	b.n	800b154 <_fwalk_sglue+0x10>

0800b180 <__sread>:
 800b180:	b510      	push	{r4, lr}
 800b182:	460c      	mov	r4, r1
 800b184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b188:	f000 f86c 	bl	800b264 <_read_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	bfab      	itete	ge
 800b190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b192:	89a3      	ldrhlt	r3, [r4, #12]
 800b194:	181b      	addge	r3, r3, r0
 800b196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b19a:	bfac      	ite	ge
 800b19c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b19e:	81a3      	strhlt	r3, [r4, #12]
 800b1a0:	bd10      	pop	{r4, pc}

0800b1a2 <__swrite>:
 800b1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	05db      	lsls	r3, r3, #23
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	d505      	bpl.n	800b1c0 <__swrite+0x1e>
 800b1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f000 f840 	bl	800b240 <_lseek_r>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d6:	f000 b857 	b.w	800b288 <_write_r>

0800b1da <__sseek>:
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e2:	f000 f82d 	bl	800b240 <_lseek_r>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	bf15      	itete	ne
 800b1ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1f6:	81a3      	strheq	r3, [r4, #12]
 800b1f8:	bf18      	it	ne
 800b1fa:	81a3      	strhne	r3, [r4, #12]
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <__sclose>:
 800b1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b202:	f000 b80d 	b.w	800b220 <_close_r>

0800b206 <memset>:
 800b206:	4402      	add	r2, r0
 800b208:	4603      	mov	r3, r0
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d100      	bne.n	800b210 <memset+0xa>
 800b20e:	4770      	bx	lr
 800b210:	f803 1b01 	strb.w	r1, [r3], #1
 800b214:	e7f9      	b.n	800b20a <memset+0x4>
	...

0800b218 <_localeconv_r>:
 800b218:	4800      	ldr	r0, [pc, #0]	@ (800b21c <_localeconv_r+0x4>)
 800b21a:	4770      	bx	lr
 800b21c:	2000025c 	.word	0x2000025c

0800b220 <_close_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	@ (800b23c <_close_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f7 faba 	bl	80027a4 <_close>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_close_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_close_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20002204 	.word	0x20002204

0800b240 <_lseek_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d07      	ldr	r5, [pc, #28]	@ (800b260 <_lseek_r+0x20>)
 800b244:	4604      	mov	r4, r0
 800b246:	4608      	mov	r0, r1
 800b248:	4611      	mov	r1, r2
 800b24a:	2200      	movs	r2, #0
 800b24c:	602a      	str	r2, [r5, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	f7f7 facf 	bl	80027f2 <_lseek>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d102      	bne.n	800b25e <_lseek_r+0x1e>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	b103      	cbz	r3, 800b25e <_lseek_r+0x1e>
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	20002204 	.word	0x20002204

0800b264 <_read_r>:
 800b264:	b538      	push	{r3, r4, r5, lr}
 800b266:	4d07      	ldr	r5, [pc, #28]	@ (800b284 <_read_r+0x20>)
 800b268:	4604      	mov	r4, r0
 800b26a:	4608      	mov	r0, r1
 800b26c:	4611      	mov	r1, r2
 800b26e:	2200      	movs	r2, #0
 800b270:	602a      	str	r2, [r5, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	f7f7 fa5d 	bl	8002732 <_read>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_read_r+0x1e>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_read_r+0x1e>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	20002204 	.word	0x20002204

0800b288 <_write_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d07      	ldr	r5, [pc, #28]	@ (800b2a8 <_write_r+0x20>)
 800b28c:	4604      	mov	r4, r0
 800b28e:	4608      	mov	r0, r1
 800b290:	4611      	mov	r1, r2
 800b292:	2200      	movs	r2, #0
 800b294:	602a      	str	r2, [r5, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	f7f7 fa68 	bl	800276c <_write>
 800b29c:	1c43      	adds	r3, r0, #1
 800b29e:	d102      	bne.n	800b2a6 <_write_r+0x1e>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	b103      	cbz	r3, 800b2a6 <_write_r+0x1e>
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	bd38      	pop	{r3, r4, r5, pc}
 800b2a8:	20002204 	.word	0x20002204

0800b2ac <__errno>:
 800b2ac:	4b01      	ldr	r3, [pc, #4]	@ (800b2b4 <__errno+0x8>)
 800b2ae:	6818      	ldr	r0, [r3, #0]
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	2000011c 	.word	0x2000011c

0800b2b8 <__libc_init_array>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	4d0d      	ldr	r5, [pc, #52]	@ (800b2f0 <__libc_init_array+0x38>)
 800b2bc:	4c0d      	ldr	r4, [pc, #52]	@ (800b2f4 <__libc_init_array+0x3c>)
 800b2be:	1b64      	subs	r4, r4, r5
 800b2c0:	10a4      	asrs	r4, r4, #2
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	42a6      	cmp	r6, r4
 800b2c6:	d109      	bne.n	800b2dc <__libc_init_array+0x24>
 800b2c8:	4d0b      	ldr	r5, [pc, #44]	@ (800b2f8 <__libc_init_array+0x40>)
 800b2ca:	4c0c      	ldr	r4, [pc, #48]	@ (800b2fc <__libc_init_array+0x44>)
 800b2cc:	f002 fc3c 	bl	800db48 <_init>
 800b2d0:	1b64      	subs	r4, r4, r5
 800b2d2:	10a4      	asrs	r4, r4, #2
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	42a6      	cmp	r6, r4
 800b2d8:	d105      	bne.n	800b2e6 <__libc_init_array+0x2e>
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e0:	4798      	blx	r3
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	e7ee      	b.n	800b2c4 <__libc_init_array+0xc>
 800b2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ea:	4798      	blx	r3
 800b2ec:	3601      	adds	r6, #1
 800b2ee:	e7f2      	b.n	800b2d6 <__libc_init_array+0x1e>
 800b2f0:	0800e300 	.word	0x0800e300
 800b2f4:	0800e300 	.word	0x0800e300
 800b2f8:	0800e300 	.word	0x0800e300
 800b2fc:	0800e304 	.word	0x0800e304

0800b300 <__retarget_lock_init_recursive>:
 800b300:	4770      	bx	lr

0800b302 <__retarget_lock_acquire_recursive>:
 800b302:	4770      	bx	lr

0800b304 <__retarget_lock_release_recursive>:
 800b304:	4770      	bx	lr

0800b306 <memcpy>:
 800b306:	440a      	add	r2, r1
 800b308:	4291      	cmp	r1, r2
 800b30a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b30e:	d100      	bne.n	800b312 <memcpy+0xc>
 800b310:	4770      	bx	lr
 800b312:	b510      	push	{r4, lr}
 800b314:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b318:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b31c:	4291      	cmp	r1, r2
 800b31e:	d1f9      	bne.n	800b314 <memcpy+0xe>
 800b320:	bd10      	pop	{r4, pc}

0800b322 <quorem>:
 800b322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b326:	6903      	ldr	r3, [r0, #16]
 800b328:	690c      	ldr	r4, [r1, #16]
 800b32a:	42a3      	cmp	r3, r4
 800b32c:	4607      	mov	r7, r0
 800b32e:	db7e      	blt.n	800b42e <quorem+0x10c>
 800b330:	3c01      	subs	r4, #1
 800b332:	f101 0814 	add.w	r8, r1, #20
 800b336:	00a3      	lsls	r3, r4, #2
 800b338:	f100 0514 	add.w	r5, r0, #20
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b34c:	3301      	adds	r3, #1
 800b34e:	429a      	cmp	r2, r3
 800b350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b354:	fbb2 f6f3 	udiv	r6, r2, r3
 800b358:	d32e      	bcc.n	800b3b8 <quorem+0x96>
 800b35a:	f04f 0a00 	mov.w	sl, #0
 800b35e:	46c4      	mov	ip, r8
 800b360:	46ae      	mov	lr, r5
 800b362:	46d3      	mov	fp, sl
 800b364:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b368:	b298      	uxth	r0, r3
 800b36a:	fb06 a000 	mla	r0, r6, r0, sl
 800b36e:	0c02      	lsrs	r2, r0, #16
 800b370:	0c1b      	lsrs	r3, r3, #16
 800b372:	fb06 2303 	mla	r3, r6, r3, r2
 800b376:	f8de 2000 	ldr.w	r2, [lr]
 800b37a:	b280      	uxth	r0, r0
 800b37c:	b292      	uxth	r2, r2
 800b37e:	1a12      	subs	r2, r2, r0
 800b380:	445a      	add	r2, fp
 800b382:	f8de 0000 	ldr.w	r0, [lr]
 800b386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b390:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b394:	b292      	uxth	r2, r2
 800b396:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b39a:	45e1      	cmp	r9, ip
 800b39c:	f84e 2b04 	str.w	r2, [lr], #4
 800b3a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b3a4:	d2de      	bcs.n	800b364 <quorem+0x42>
 800b3a6:	9b00      	ldr	r3, [sp, #0]
 800b3a8:	58eb      	ldr	r3, [r5, r3]
 800b3aa:	b92b      	cbnz	r3, 800b3b8 <quorem+0x96>
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	3b04      	subs	r3, #4
 800b3b0:	429d      	cmp	r5, r3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	d32f      	bcc.n	800b416 <quorem+0xf4>
 800b3b6:	613c      	str	r4, [r7, #16]
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f001 f97b 	bl	800c6b4 <__mcmp>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	db25      	blt.n	800b40e <quorem+0xec>
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3ca:	f8d1 c000 	ldr.w	ip, [r1]
 800b3ce:	fa1f fe82 	uxth.w	lr, r2
 800b3d2:	fa1f f38c 	uxth.w	r3, ip
 800b3d6:	eba3 030e 	sub.w	r3, r3, lr
 800b3da:	4403      	add	r3, r0
 800b3dc:	0c12      	lsrs	r2, r2, #16
 800b3de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b3e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3ec:	45c1      	cmp	r9, r8
 800b3ee:	f841 3b04 	str.w	r3, [r1], #4
 800b3f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3f6:	d2e6      	bcs.n	800b3c6 <quorem+0xa4>
 800b3f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b400:	b922      	cbnz	r2, 800b40c <quorem+0xea>
 800b402:	3b04      	subs	r3, #4
 800b404:	429d      	cmp	r5, r3
 800b406:	461a      	mov	r2, r3
 800b408:	d30b      	bcc.n	800b422 <quorem+0x100>
 800b40a:	613c      	str	r4, [r7, #16]
 800b40c:	3601      	adds	r6, #1
 800b40e:	4630      	mov	r0, r6
 800b410:	b003      	add	sp, #12
 800b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b416:	6812      	ldr	r2, [r2, #0]
 800b418:	3b04      	subs	r3, #4
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	d1cb      	bne.n	800b3b6 <quorem+0x94>
 800b41e:	3c01      	subs	r4, #1
 800b420:	e7c6      	b.n	800b3b0 <quorem+0x8e>
 800b422:	6812      	ldr	r2, [r2, #0]
 800b424:	3b04      	subs	r3, #4
 800b426:	2a00      	cmp	r2, #0
 800b428:	d1ef      	bne.n	800b40a <quorem+0xe8>
 800b42a:	3c01      	subs	r4, #1
 800b42c:	e7ea      	b.n	800b404 <quorem+0xe2>
 800b42e:	2000      	movs	r0, #0
 800b430:	e7ee      	b.n	800b410 <quorem+0xee>
 800b432:	0000      	movs	r0, r0
 800b434:	0000      	movs	r0, r0
	...

0800b438 <_dtoa_r>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	69c7      	ldr	r7, [r0, #28]
 800b43e:	b099      	sub	sp, #100	@ 0x64
 800b440:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b444:	ec55 4b10 	vmov	r4, r5, d0
 800b448:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b44a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b44c:	4683      	mov	fp, r0
 800b44e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b450:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b452:	b97f      	cbnz	r7, 800b474 <_dtoa_r+0x3c>
 800b454:	2010      	movs	r0, #16
 800b456:	f000 fdfd 	bl	800c054 <malloc>
 800b45a:	4602      	mov	r2, r0
 800b45c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b460:	b920      	cbnz	r0, 800b46c <_dtoa_r+0x34>
 800b462:	4ba7      	ldr	r3, [pc, #668]	@ (800b700 <_dtoa_r+0x2c8>)
 800b464:	21ef      	movs	r1, #239	@ 0xef
 800b466:	48a7      	ldr	r0, [pc, #668]	@ (800b704 <_dtoa_r+0x2cc>)
 800b468:	f001 fae8 	bl	800ca3c <__assert_func>
 800b46c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b470:	6007      	str	r7, [r0, #0]
 800b472:	60c7      	str	r7, [r0, #12]
 800b474:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b478:	6819      	ldr	r1, [r3, #0]
 800b47a:	b159      	cbz	r1, 800b494 <_dtoa_r+0x5c>
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	604a      	str	r2, [r1, #4]
 800b480:	2301      	movs	r3, #1
 800b482:	4093      	lsls	r3, r2
 800b484:	608b      	str	r3, [r1, #8]
 800b486:	4658      	mov	r0, fp
 800b488:	f000 feda 	bl	800c240 <_Bfree>
 800b48c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	1e2b      	subs	r3, r5, #0
 800b496:	bfb9      	ittee	lt
 800b498:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b49c:	9303      	strlt	r3, [sp, #12]
 800b49e:	2300      	movge	r3, #0
 800b4a0:	6033      	strge	r3, [r6, #0]
 800b4a2:	9f03      	ldr	r7, [sp, #12]
 800b4a4:	4b98      	ldr	r3, [pc, #608]	@ (800b708 <_dtoa_r+0x2d0>)
 800b4a6:	bfbc      	itt	lt
 800b4a8:	2201      	movlt	r2, #1
 800b4aa:	6032      	strlt	r2, [r6, #0]
 800b4ac:	43bb      	bics	r3, r7
 800b4ae:	d112      	bne.n	800b4d6 <_dtoa_r+0x9e>
 800b4b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b4b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4bc:	4323      	orrs	r3, r4
 800b4be:	f000 854d 	beq.w	800bf5c <_dtoa_r+0xb24>
 800b4c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b71c <_dtoa_r+0x2e4>
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 854f 	beq.w	800bf6c <_dtoa_r+0xb34>
 800b4ce:	f10a 0303 	add.w	r3, sl, #3
 800b4d2:	f000 bd49 	b.w	800bf68 <_dtoa_r+0xb30>
 800b4d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	ec51 0b17 	vmov	r0, r1, d7
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b4e6:	f7f5 faef 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	b158      	cbz	r0, 800b506 <_dtoa_r+0xce>
 800b4ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4f6:	b113      	cbz	r3, 800b4fe <_dtoa_r+0xc6>
 800b4f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4fa:	4b84      	ldr	r3, [pc, #528]	@ (800b70c <_dtoa_r+0x2d4>)
 800b4fc:	6013      	str	r3, [r2, #0]
 800b4fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b720 <_dtoa_r+0x2e8>
 800b502:	f000 bd33 	b.w	800bf6c <_dtoa_r+0xb34>
 800b506:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b50a:	aa16      	add	r2, sp, #88	@ 0x58
 800b50c:	a917      	add	r1, sp, #92	@ 0x5c
 800b50e:	4658      	mov	r0, fp
 800b510:	f001 f980 	bl	800c814 <__d2b>
 800b514:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b518:	4681      	mov	r9, r0
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	d077      	beq.n	800b60e <_dtoa_r+0x1d6>
 800b51e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b520:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b52c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b530:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b534:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b538:	4619      	mov	r1, r3
 800b53a:	2200      	movs	r2, #0
 800b53c:	4b74      	ldr	r3, [pc, #464]	@ (800b710 <_dtoa_r+0x2d8>)
 800b53e:	f7f4 fea3 	bl	8000288 <__aeabi_dsub>
 800b542:	a369      	add	r3, pc, #420	@ (adr r3, 800b6e8 <_dtoa_r+0x2b0>)
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	f7f5 f856 	bl	80005f8 <__aeabi_dmul>
 800b54c:	a368      	add	r3, pc, #416	@ (adr r3, 800b6f0 <_dtoa_r+0x2b8>)
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	f7f4 fe9b 	bl	800028c <__adddf3>
 800b556:	4604      	mov	r4, r0
 800b558:	4630      	mov	r0, r6
 800b55a:	460d      	mov	r5, r1
 800b55c:	f7f4 ffe2 	bl	8000524 <__aeabi_i2d>
 800b560:	a365      	add	r3, pc, #404	@ (adr r3, 800b6f8 <_dtoa_r+0x2c0>)
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	f7f5 f847 	bl	80005f8 <__aeabi_dmul>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f4 fe8b 	bl	800028c <__adddf3>
 800b576:	4604      	mov	r4, r0
 800b578:	460d      	mov	r5, r1
 800b57a:	f7f5 faed 	bl	8000b58 <__aeabi_d2iz>
 800b57e:	2200      	movs	r2, #0
 800b580:	4607      	mov	r7, r0
 800b582:	2300      	movs	r3, #0
 800b584:	4620      	mov	r0, r4
 800b586:	4629      	mov	r1, r5
 800b588:	f7f5 faa8 	bl	8000adc <__aeabi_dcmplt>
 800b58c:	b140      	cbz	r0, 800b5a0 <_dtoa_r+0x168>
 800b58e:	4638      	mov	r0, r7
 800b590:	f7f4 ffc8 	bl	8000524 <__aeabi_i2d>
 800b594:	4622      	mov	r2, r4
 800b596:	462b      	mov	r3, r5
 800b598:	f7f5 fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800b59c:	b900      	cbnz	r0, 800b5a0 <_dtoa_r+0x168>
 800b59e:	3f01      	subs	r7, #1
 800b5a0:	2f16      	cmp	r7, #22
 800b5a2:	d851      	bhi.n	800b648 <_dtoa_r+0x210>
 800b5a4:	4b5b      	ldr	r3, [pc, #364]	@ (800b714 <_dtoa_r+0x2dc>)
 800b5a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5b2:	f7f5 fa93 	bl	8000adc <__aeabi_dcmplt>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d048      	beq.n	800b64c <_dtoa_r+0x214>
 800b5ba:	3f01      	subs	r7, #1
 800b5bc:	2300      	movs	r3, #0
 800b5be:	9312      	str	r3, [sp, #72]	@ 0x48
 800b5c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b5c2:	1b9b      	subs	r3, r3, r6
 800b5c4:	1e5a      	subs	r2, r3, #1
 800b5c6:	bf44      	itt	mi
 800b5c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b5cc:	2300      	movmi	r3, #0
 800b5ce:	9208      	str	r2, [sp, #32]
 800b5d0:	bf54      	ite	pl
 800b5d2:	f04f 0800 	movpl.w	r8, #0
 800b5d6:	9308      	strmi	r3, [sp, #32]
 800b5d8:	2f00      	cmp	r7, #0
 800b5da:	db39      	blt.n	800b650 <_dtoa_r+0x218>
 800b5dc:	9b08      	ldr	r3, [sp, #32]
 800b5de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b5e0:	443b      	add	r3, r7
 800b5e2:	9308      	str	r3, [sp, #32]
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ea:	2b09      	cmp	r3, #9
 800b5ec:	d864      	bhi.n	800b6b8 <_dtoa_r+0x280>
 800b5ee:	2b05      	cmp	r3, #5
 800b5f0:	bfc4      	itt	gt
 800b5f2:	3b04      	subgt	r3, #4
 800b5f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5f8:	f1a3 0302 	sub.w	r3, r3, #2
 800b5fc:	bfcc      	ite	gt
 800b5fe:	2400      	movgt	r4, #0
 800b600:	2401      	movle	r4, #1
 800b602:	2b03      	cmp	r3, #3
 800b604:	d863      	bhi.n	800b6ce <_dtoa_r+0x296>
 800b606:	e8df f003 	tbb	[pc, r3]
 800b60a:	372a      	.short	0x372a
 800b60c:	5535      	.short	0x5535
 800b60e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b612:	441e      	add	r6, r3
 800b614:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b618:	2b20      	cmp	r3, #32
 800b61a:	bfc1      	itttt	gt
 800b61c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b620:	409f      	lslgt	r7, r3
 800b622:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b626:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b62a:	bfd6      	itet	le
 800b62c:	f1c3 0320 	rsble	r3, r3, #32
 800b630:	ea47 0003 	orrgt.w	r0, r7, r3
 800b634:	fa04 f003 	lslle.w	r0, r4, r3
 800b638:	f7f4 ff64 	bl	8000504 <__aeabi_ui2d>
 800b63c:	2201      	movs	r2, #1
 800b63e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b642:	3e01      	subs	r6, #1
 800b644:	9214      	str	r2, [sp, #80]	@ 0x50
 800b646:	e777      	b.n	800b538 <_dtoa_r+0x100>
 800b648:	2301      	movs	r3, #1
 800b64a:	e7b8      	b.n	800b5be <_dtoa_r+0x186>
 800b64c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b64e:	e7b7      	b.n	800b5c0 <_dtoa_r+0x188>
 800b650:	427b      	negs	r3, r7
 800b652:	930a      	str	r3, [sp, #40]	@ 0x28
 800b654:	2300      	movs	r3, #0
 800b656:	eba8 0807 	sub.w	r8, r8, r7
 800b65a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b65c:	e7c4      	b.n	800b5e8 <_dtoa_r+0x1b0>
 800b65e:	2300      	movs	r3, #0
 800b660:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b664:	2b00      	cmp	r3, #0
 800b666:	dc35      	bgt.n	800b6d4 <_dtoa_r+0x29c>
 800b668:	2301      	movs	r3, #1
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	9307      	str	r3, [sp, #28]
 800b66e:	461a      	mov	r2, r3
 800b670:	920e      	str	r2, [sp, #56]	@ 0x38
 800b672:	e00b      	b.n	800b68c <_dtoa_r+0x254>
 800b674:	2301      	movs	r3, #1
 800b676:	e7f3      	b.n	800b660 <_dtoa_r+0x228>
 800b678:	2300      	movs	r3, #0
 800b67a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b67e:	18fb      	adds	r3, r7, r3
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	3301      	adds	r3, #1
 800b684:	2b01      	cmp	r3, #1
 800b686:	9307      	str	r3, [sp, #28]
 800b688:	bfb8      	it	lt
 800b68a:	2301      	movlt	r3, #1
 800b68c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b690:	2100      	movs	r1, #0
 800b692:	2204      	movs	r2, #4
 800b694:	f102 0514 	add.w	r5, r2, #20
 800b698:	429d      	cmp	r5, r3
 800b69a:	d91f      	bls.n	800b6dc <_dtoa_r+0x2a4>
 800b69c:	6041      	str	r1, [r0, #4]
 800b69e:	4658      	mov	r0, fp
 800b6a0:	f000 fd8e 	bl	800c1c0 <_Balloc>
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d13c      	bne.n	800b724 <_dtoa_r+0x2ec>
 800b6aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b718 <_dtoa_r+0x2e0>)
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800b6b2:	e6d8      	b.n	800b466 <_dtoa_r+0x2e>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e7e0      	b.n	800b67a <_dtoa_r+0x242>
 800b6b8:	2401      	movs	r4, #1
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	9307      	str	r3, [sp, #28]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2312      	movs	r3, #18
 800b6cc:	e7d0      	b.n	800b670 <_dtoa_r+0x238>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6d2:	e7f5      	b.n	800b6c0 <_dtoa_r+0x288>
 800b6d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	9307      	str	r3, [sp, #28]
 800b6da:	e7d7      	b.n	800b68c <_dtoa_r+0x254>
 800b6dc:	3101      	adds	r1, #1
 800b6de:	0052      	lsls	r2, r2, #1
 800b6e0:	e7d8      	b.n	800b694 <_dtoa_r+0x25c>
 800b6e2:	bf00      	nop
 800b6e4:	f3af 8000 	nop.w
 800b6e8:	636f4361 	.word	0x636f4361
 800b6ec:	3fd287a7 	.word	0x3fd287a7
 800b6f0:	8b60c8b3 	.word	0x8b60c8b3
 800b6f4:	3fc68a28 	.word	0x3fc68a28
 800b6f8:	509f79fb 	.word	0x509f79fb
 800b6fc:	3fd34413 	.word	0x3fd34413
 800b700:	0800dbf9 	.word	0x0800dbf9
 800b704:	0800dc10 	.word	0x0800dc10
 800b708:	7ff00000 	.word	0x7ff00000
 800b70c:	0800dbc9 	.word	0x0800dbc9
 800b710:	3ff80000 	.word	0x3ff80000
 800b714:	0800dd08 	.word	0x0800dd08
 800b718:	0800dc68 	.word	0x0800dc68
 800b71c:	0800dbf5 	.word	0x0800dbf5
 800b720:	0800dbc8 	.word	0x0800dbc8
 800b724:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b728:	6018      	str	r0, [r3, #0]
 800b72a:	9b07      	ldr	r3, [sp, #28]
 800b72c:	2b0e      	cmp	r3, #14
 800b72e:	f200 80a4 	bhi.w	800b87a <_dtoa_r+0x442>
 800b732:	2c00      	cmp	r4, #0
 800b734:	f000 80a1 	beq.w	800b87a <_dtoa_r+0x442>
 800b738:	2f00      	cmp	r7, #0
 800b73a:	dd33      	ble.n	800b7a4 <_dtoa_r+0x36c>
 800b73c:	4bad      	ldr	r3, [pc, #692]	@ (800b9f4 <_dtoa_r+0x5bc>)
 800b73e:	f007 020f 	and.w	r2, r7, #15
 800b742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b746:	ed93 7b00 	vldr	d7, [r3]
 800b74a:	05f8      	lsls	r0, r7, #23
 800b74c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b750:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b754:	d516      	bpl.n	800b784 <_dtoa_r+0x34c>
 800b756:	4ba8      	ldr	r3, [pc, #672]	@ (800b9f8 <_dtoa_r+0x5c0>)
 800b758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b75c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b760:	f7f5 f874 	bl	800084c <__aeabi_ddiv>
 800b764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b768:	f004 040f 	and.w	r4, r4, #15
 800b76c:	2603      	movs	r6, #3
 800b76e:	4da2      	ldr	r5, [pc, #648]	@ (800b9f8 <_dtoa_r+0x5c0>)
 800b770:	b954      	cbnz	r4, 800b788 <_dtoa_r+0x350>
 800b772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b77a:	f7f5 f867 	bl	800084c <__aeabi_ddiv>
 800b77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b782:	e028      	b.n	800b7d6 <_dtoa_r+0x39e>
 800b784:	2602      	movs	r6, #2
 800b786:	e7f2      	b.n	800b76e <_dtoa_r+0x336>
 800b788:	07e1      	lsls	r1, r4, #31
 800b78a:	d508      	bpl.n	800b79e <_dtoa_r+0x366>
 800b78c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b790:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b794:	f7f4 ff30 	bl	80005f8 <__aeabi_dmul>
 800b798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b79c:	3601      	adds	r6, #1
 800b79e:	1064      	asrs	r4, r4, #1
 800b7a0:	3508      	adds	r5, #8
 800b7a2:	e7e5      	b.n	800b770 <_dtoa_r+0x338>
 800b7a4:	f000 80d2 	beq.w	800b94c <_dtoa_r+0x514>
 800b7a8:	427c      	negs	r4, r7
 800b7aa:	4b92      	ldr	r3, [pc, #584]	@ (800b9f4 <_dtoa_r+0x5bc>)
 800b7ac:	4d92      	ldr	r5, [pc, #584]	@ (800b9f8 <_dtoa_r+0x5c0>)
 800b7ae:	f004 020f 	and.w	r2, r4, #15
 800b7b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7be:	f7f4 ff1b 	bl	80005f8 <__aeabi_dmul>
 800b7c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c6:	1124      	asrs	r4, r4, #4
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	2602      	movs	r6, #2
 800b7cc:	2c00      	cmp	r4, #0
 800b7ce:	f040 80b2 	bne.w	800b936 <_dtoa_r+0x4fe>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1d3      	bne.n	800b77e <_dtoa_r+0x346>
 800b7d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 80b7 	beq.w	800b950 <_dtoa_r+0x518>
 800b7e2:	4b86      	ldr	r3, [pc, #536]	@ (800b9fc <_dtoa_r+0x5c4>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7f5 f977 	bl	8000adc <__aeabi_dcmplt>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f000 80ae 	beq.w	800b950 <_dtoa_r+0x518>
 800b7f4:	9b07      	ldr	r3, [sp, #28]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f000 80aa 	beq.w	800b950 <_dtoa_r+0x518>
 800b7fc:	9b00      	ldr	r3, [sp, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dd37      	ble.n	800b872 <_dtoa_r+0x43a>
 800b802:	1e7b      	subs	r3, r7, #1
 800b804:	9304      	str	r3, [sp, #16]
 800b806:	4620      	mov	r0, r4
 800b808:	4b7d      	ldr	r3, [pc, #500]	@ (800ba00 <_dtoa_r+0x5c8>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	4629      	mov	r1, r5
 800b80e:	f7f4 fef3 	bl	80005f8 <__aeabi_dmul>
 800b812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b816:	9c00      	ldr	r4, [sp, #0]
 800b818:	3601      	adds	r6, #1
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7f4 fe82 	bl	8000524 <__aeabi_i2d>
 800b820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b824:	f7f4 fee8 	bl	80005f8 <__aeabi_dmul>
 800b828:	4b76      	ldr	r3, [pc, #472]	@ (800ba04 <_dtoa_r+0x5cc>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	f7f4 fd2e 	bl	800028c <__adddf3>
 800b830:	4605      	mov	r5, r0
 800b832:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b836:	2c00      	cmp	r4, #0
 800b838:	f040 808d 	bne.w	800b956 <_dtoa_r+0x51e>
 800b83c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b840:	4b71      	ldr	r3, [pc, #452]	@ (800ba08 <_dtoa_r+0x5d0>)
 800b842:	2200      	movs	r2, #0
 800b844:	f7f4 fd20 	bl	8000288 <__aeabi_dsub>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b850:	462a      	mov	r2, r5
 800b852:	4633      	mov	r3, r6
 800b854:	f7f5 f960 	bl	8000b18 <__aeabi_dcmpgt>
 800b858:	2800      	cmp	r0, #0
 800b85a:	f040 828b 	bne.w	800bd74 <_dtoa_r+0x93c>
 800b85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b862:	462a      	mov	r2, r5
 800b864:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b868:	f7f5 f938 	bl	8000adc <__aeabi_dcmplt>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	f040 8128 	bne.w	800bac2 <_dtoa_r+0x68a>
 800b872:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b87a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f2c0 815a 	blt.w	800bb36 <_dtoa_r+0x6fe>
 800b882:	2f0e      	cmp	r7, #14
 800b884:	f300 8157 	bgt.w	800bb36 <_dtoa_r+0x6fe>
 800b888:	4b5a      	ldr	r3, [pc, #360]	@ (800b9f4 <_dtoa_r+0x5bc>)
 800b88a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b88e:	ed93 7b00 	vldr	d7, [r3]
 800b892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b894:	2b00      	cmp	r3, #0
 800b896:	ed8d 7b00 	vstr	d7, [sp]
 800b89a:	da03      	bge.n	800b8a4 <_dtoa_r+0x46c>
 800b89c:	9b07      	ldr	r3, [sp, #28]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f340 8101 	ble.w	800baa6 <_dtoa_r+0x66e>
 800b8a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b8a8:	4656      	mov	r6, sl
 800b8aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 ffcb 	bl	800084c <__aeabi_ddiv>
 800b8b6:	f7f5 f94f 	bl	8000b58 <__aeabi_d2iz>
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	f7f4 fe32 	bl	8000524 <__aeabi_i2d>
 800b8c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8c4:	f7f4 fe98 	bl	80005f8 <__aeabi_dmul>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b8d4:	f7f4 fcd8 	bl	8000288 <__aeabi_dsub>
 800b8d8:	f806 4b01 	strb.w	r4, [r6], #1
 800b8dc:	9d07      	ldr	r5, [sp, #28]
 800b8de:	eba6 040a 	sub.w	r4, r6, sl
 800b8e2:	42a5      	cmp	r5, r4
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	f040 8117 	bne.w	800bb1a <_dtoa_r+0x6e2>
 800b8ec:	f7f4 fcce 	bl	800028c <__adddf3>
 800b8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	f7f5 f90e 	bl	8000b18 <__aeabi_dcmpgt>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	f040 80f9 	bne.w	800baf4 <_dtoa_r+0x6bc>
 800b902:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b906:	4620      	mov	r0, r4
 800b908:	4629      	mov	r1, r5
 800b90a:	f7f5 f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b90e:	b118      	cbz	r0, 800b918 <_dtoa_r+0x4e0>
 800b910:	f018 0f01 	tst.w	r8, #1
 800b914:	f040 80ee 	bne.w	800baf4 <_dtoa_r+0x6bc>
 800b918:	4649      	mov	r1, r9
 800b91a:	4658      	mov	r0, fp
 800b91c:	f000 fc90 	bl	800c240 <_Bfree>
 800b920:	2300      	movs	r3, #0
 800b922:	7033      	strb	r3, [r6, #0]
 800b924:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b926:	3701      	adds	r7, #1
 800b928:	601f      	str	r7, [r3, #0]
 800b92a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f000 831d 	beq.w	800bf6c <_dtoa_r+0xb34>
 800b932:	601e      	str	r6, [r3, #0]
 800b934:	e31a      	b.n	800bf6c <_dtoa_r+0xb34>
 800b936:	07e2      	lsls	r2, r4, #31
 800b938:	d505      	bpl.n	800b946 <_dtoa_r+0x50e>
 800b93a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b93e:	f7f4 fe5b 	bl	80005f8 <__aeabi_dmul>
 800b942:	3601      	adds	r6, #1
 800b944:	2301      	movs	r3, #1
 800b946:	1064      	asrs	r4, r4, #1
 800b948:	3508      	adds	r5, #8
 800b94a:	e73f      	b.n	800b7cc <_dtoa_r+0x394>
 800b94c:	2602      	movs	r6, #2
 800b94e:	e742      	b.n	800b7d6 <_dtoa_r+0x39e>
 800b950:	9c07      	ldr	r4, [sp, #28]
 800b952:	9704      	str	r7, [sp, #16]
 800b954:	e761      	b.n	800b81a <_dtoa_r+0x3e2>
 800b956:	4b27      	ldr	r3, [pc, #156]	@ (800b9f4 <_dtoa_r+0x5bc>)
 800b958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b95a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b95e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b962:	4454      	add	r4, sl
 800b964:	2900      	cmp	r1, #0
 800b966:	d053      	beq.n	800ba10 <_dtoa_r+0x5d8>
 800b968:	4928      	ldr	r1, [pc, #160]	@ (800ba0c <_dtoa_r+0x5d4>)
 800b96a:	2000      	movs	r0, #0
 800b96c:	f7f4 ff6e 	bl	800084c <__aeabi_ddiv>
 800b970:	4633      	mov	r3, r6
 800b972:	462a      	mov	r2, r5
 800b974:	f7f4 fc88 	bl	8000288 <__aeabi_dsub>
 800b978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b97c:	4656      	mov	r6, sl
 800b97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b982:	f7f5 f8e9 	bl	8000b58 <__aeabi_d2iz>
 800b986:	4605      	mov	r5, r0
 800b988:	f7f4 fdcc 	bl	8000524 <__aeabi_i2d>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b994:	f7f4 fc78 	bl	8000288 <__aeabi_dsub>
 800b998:	3530      	adds	r5, #48	@ 0x30
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9a2:	f806 5b01 	strb.w	r5, [r6], #1
 800b9a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9aa:	f7f5 f897 	bl	8000adc <__aeabi_dcmplt>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d171      	bne.n	800ba96 <_dtoa_r+0x65e>
 800b9b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9b6:	4911      	ldr	r1, [pc, #68]	@ (800b9fc <_dtoa_r+0x5c4>)
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f7f4 fc65 	bl	8000288 <__aeabi_dsub>
 800b9be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9c2:	f7f5 f88b 	bl	8000adc <__aeabi_dcmplt>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f040 8095 	bne.w	800baf6 <_dtoa_r+0x6be>
 800b9cc:	42a6      	cmp	r6, r4
 800b9ce:	f43f af50 	beq.w	800b872 <_dtoa_r+0x43a>
 800b9d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9d6:	4b0a      	ldr	r3, [pc, #40]	@ (800ba00 <_dtoa_r+0x5c8>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f7f4 fe0d 	bl	80005f8 <__aeabi_dmul>
 800b9de:	4b08      	ldr	r3, [pc, #32]	@ (800ba00 <_dtoa_r+0x5c8>)
 800b9e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ea:	f7f4 fe05 	bl	80005f8 <__aeabi_dmul>
 800b9ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9f2:	e7c4      	b.n	800b97e <_dtoa_r+0x546>
 800b9f4:	0800dd08 	.word	0x0800dd08
 800b9f8:	0800dce0 	.word	0x0800dce0
 800b9fc:	3ff00000 	.word	0x3ff00000
 800ba00:	40240000 	.word	0x40240000
 800ba04:	401c0000 	.word	0x401c0000
 800ba08:	40140000 	.word	0x40140000
 800ba0c:	3fe00000 	.word	0x3fe00000
 800ba10:	4631      	mov	r1, r6
 800ba12:	4628      	mov	r0, r5
 800ba14:	f7f4 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ba18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba1c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ba1e:	4656      	mov	r6, sl
 800ba20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba24:	f7f5 f898 	bl	8000b58 <__aeabi_d2iz>
 800ba28:	4605      	mov	r5, r0
 800ba2a:	f7f4 fd7b 	bl	8000524 <__aeabi_i2d>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba36:	f7f4 fc27 	bl	8000288 <__aeabi_dsub>
 800ba3a:	3530      	adds	r5, #48	@ 0x30
 800ba3c:	f806 5b01 	strb.w	r5, [r6], #1
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	42a6      	cmp	r6, r4
 800ba46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba4a:	f04f 0200 	mov.w	r2, #0
 800ba4e:	d124      	bne.n	800ba9a <_dtoa_r+0x662>
 800ba50:	4bac      	ldr	r3, [pc, #688]	@ (800bd04 <_dtoa_r+0x8cc>)
 800ba52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba56:	f7f4 fc19 	bl	800028c <__adddf3>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba62:	f7f5 f859 	bl	8000b18 <__aeabi_dcmpgt>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d145      	bne.n	800baf6 <_dtoa_r+0x6be>
 800ba6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba6e:	49a5      	ldr	r1, [pc, #660]	@ (800bd04 <_dtoa_r+0x8cc>)
 800ba70:	2000      	movs	r0, #0
 800ba72:	f7f4 fc09 	bl	8000288 <__aeabi_dsub>
 800ba76:	4602      	mov	r2, r0
 800ba78:	460b      	mov	r3, r1
 800ba7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba7e:	f7f5 f82d 	bl	8000adc <__aeabi_dcmplt>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f43f aef5 	beq.w	800b872 <_dtoa_r+0x43a>
 800ba88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ba8a:	1e73      	subs	r3, r6, #1
 800ba8c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba92:	2b30      	cmp	r3, #48	@ 0x30
 800ba94:	d0f8      	beq.n	800ba88 <_dtoa_r+0x650>
 800ba96:	9f04      	ldr	r7, [sp, #16]
 800ba98:	e73e      	b.n	800b918 <_dtoa_r+0x4e0>
 800ba9a:	4b9b      	ldr	r3, [pc, #620]	@ (800bd08 <_dtoa_r+0x8d0>)
 800ba9c:	f7f4 fdac 	bl	80005f8 <__aeabi_dmul>
 800baa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa4:	e7bc      	b.n	800ba20 <_dtoa_r+0x5e8>
 800baa6:	d10c      	bne.n	800bac2 <_dtoa_r+0x68a>
 800baa8:	4b98      	ldr	r3, [pc, #608]	@ (800bd0c <_dtoa_r+0x8d4>)
 800baaa:	2200      	movs	r2, #0
 800baac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bab0:	f7f4 fda2 	bl	80005f8 <__aeabi_dmul>
 800bab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bab8:	f7f5 f824 	bl	8000b04 <__aeabi_dcmpge>
 800babc:	2800      	cmp	r0, #0
 800babe:	f000 8157 	beq.w	800bd70 <_dtoa_r+0x938>
 800bac2:	2400      	movs	r4, #0
 800bac4:	4625      	mov	r5, r4
 800bac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bac8:	43db      	mvns	r3, r3
 800baca:	9304      	str	r3, [sp, #16]
 800bacc:	4656      	mov	r6, sl
 800bace:	2700      	movs	r7, #0
 800bad0:	4621      	mov	r1, r4
 800bad2:	4658      	mov	r0, fp
 800bad4:	f000 fbb4 	bl	800c240 <_Bfree>
 800bad8:	2d00      	cmp	r5, #0
 800bada:	d0dc      	beq.n	800ba96 <_dtoa_r+0x65e>
 800badc:	b12f      	cbz	r7, 800baea <_dtoa_r+0x6b2>
 800bade:	42af      	cmp	r7, r5
 800bae0:	d003      	beq.n	800baea <_dtoa_r+0x6b2>
 800bae2:	4639      	mov	r1, r7
 800bae4:	4658      	mov	r0, fp
 800bae6:	f000 fbab 	bl	800c240 <_Bfree>
 800baea:	4629      	mov	r1, r5
 800baec:	4658      	mov	r0, fp
 800baee:	f000 fba7 	bl	800c240 <_Bfree>
 800baf2:	e7d0      	b.n	800ba96 <_dtoa_r+0x65e>
 800baf4:	9704      	str	r7, [sp, #16]
 800baf6:	4633      	mov	r3, r6
 800baf8:	461e      	mov	r6, r3
 800bafa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bafe:	2a39      	cmp	r2, #57	@ 0x39
 800bb00:	d107      	bne.n	800bb12 <_dtoa_r+0x6da>
 800bb02:	459a      	cmp	sl, r3
 800bb04:	d1f8      	bne.n	800baf8 <_dtoa_r+0x6c0>
 800bb06:	9a04      	ldr	r2, [sp, #16]
 800bb08:	3201      	adds	r2, #1
 800bb0a:	9204      	str	r2, [sp, #16]
 800bb0c:	2230      	movs	r2, #48	@ 0x30
 800bb0e:	f88a 2000 	strb.w	r2, [sl]
 800bb12:	781a      	ldrb	r2, [r3, #0]
 800bb14:	3201      	adds	r2, #1
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	e7bd      	b.n	800ba96 <_dtoa_r+0x65e>
 800bb1a:	4b7b      	ldr	r3, [pc, #492]	@ (800bd08 <_dtoa_r+0x8d0>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f7f4 fd6b 	bl	80005f8 <__aeabi_dmul>
 800bb22:	2200      	movs	r2, #0
 800bb24:	2300      	movs	r3, #0
 800bb26:	4604      	mov	r4, r0
 800bb28:	460d      	mov	r5, r1
 800bb2a:	f7f4 ffcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f43f aebb 	beq.w	800b8aa <_dtoa_r+0x472>
 800bb34:	e6f0      	b.n	800b918 <_dtoa_r+0x4e0>
 800bb36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb38:	2a00      	cmp	r2, #0
 800bb3a:	f000 80db 	beq.w	800bcf4 <_dtoa_r+0x8bc>
 800bb3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb40:	2a01      	cmp	r2, #1
 800bb42:	f300 80bf 	bgt.w	800bcc4 <_dtoa_r+0x88c>
 800bb46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bb48:	2a00      	cmp	r2, #0
 800bb4a:	f000 80b7 	beq.w	800bcbc <_dtoa_r+0x884>
 800bb4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb54:	4646      	mov	r6, r8
 800bb56:	9a08      	ldr	r2, [sp, #32]
 800bb58:	2101      	movs	r1, #1
 800bb5a:	441a      	add	r2, r3
 800bb5c:	4658      	mov	r0, fp
 800bb5e:	4498      	add	r8, r3
 800bb60:	9208      	str	r2, [sp, #32]
 800bb62:	f000 fc21 	bl	800c3a8 <__i2b>
 800bb66:	4605      	mov	r5, r0
 800bb68:	b15e      	cbz	r6, 800bb82 <_dtoa_r+0x74a>
 800bb6a:	9b08      	ldr	r3, [sp, #32]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	dd08      	ble.n	800bb82 <_dtoa_r+0x74a>
 800bb70:	42b3      	cmp	r3, r6
 800bb72:	9a08      	ldr	r2, [sp, #32]
 800bb74:	bfa8      	it	ge
 800bb76:	4633      	movge	r3, r6
 800bb78:	eba8 0803 	sub.w	r8, r8, r3
 800bb7c:	1af6      	subs	r6, r6, r3
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	9308      	str	r3, [sp, #32]
 800bb82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb84:	b1f3      	cbz	r3, 800bbc4 <_dtoa_r+0x78c>
 800bb86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 80b7 	beq.w	800bcfc <_dtoa_r+0x8c4>
 800bb8e:	b18c      	cbz	r4, 800bbb4 <_dtoa_r+0x77c>
 800bb90:	4629      	mov	r1, r5
 800bb92:	4622      	mov	r2, r4
 800bb94:	4658      	mov	r0, fp
 800bb96:	f000 fcc7 	bl	800c528 <__pow5mult>
 800bb9a:	464a      	mov	r2, r9
 800bb9c:	4601      	mov	r1, r0
 800bb9e:	4605      	mov	r5, r0
 800bba0:	4658      	mov	r0, fp
 800bba2:	f000 fc17 	bl	800c3d4 <__multiply>
 800bba6:	4649      	mov	r1, r9
 800bba8:	9004      	str	r0, [sp, #16]
 800bbaa:	4658      	mov	r0, fp
 800bbac:	f000 fb48 	bl	800c240 <_Bfree>
 800bbb0:	9b04      	ldr	r3, [sp, #16]
 800bbb2:	4699      	mov	r9, r3
 800bbb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbb6:	1b1a      	subs	r2, r3, r4
 800bbb8:	d004      	beq.n	800bbc4 <_dtoa_r+0x78c>
 800bbba:	4649      	mov	r1, r9
 800bbbc:	4658      	mov	r0, fp
 800bbbe:	f000 fcb3 	bl	800c528 <__pow5mult>
 800bbc2:	4681      	mov	r9, r0
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	4658      	mov	r0, fp
 800bbc8:	f000 fbee 	bl	800c3a8 <__i2b>
 800bbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbce:	4604      	mov	r4, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f000 81cf 	beq.w	800bf74 <_dtoa_r+0xb3c>
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	4601      	mov	r1, r0
 800bbda:	4658      	mov	r0, fp
 800bbdc:	f000 fca4 	bl	800c528 <__pow5mult>
 800bbe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	f300 8095 	bgt.w	800bd14 <_dtoa_r+0x8dc>
 800bbea:	9b02      	ldr	r3, [sp, #8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f040 8087 	bne.w	800bd00 <_dtoa_r+0x8c8>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f040 8089 	bne.w	800bd10 <_dtoa_r+0x8d8>
 800bbfe:	9b03      	ldr	r3, [sp, #12]
 800bc00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc04:	0d1b      	lsrs	r3, r3, #20
 800bc06:	051b      	lsls	r3, r3, #20
 800bc08:	b12b      	cbz	r3, 800bc16 <_dtoa_r+0x7de>
 800bc0a:	9b08      	ldr	r3, [sp, #32]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	9308      	str	r3, [sp, #32]
 800bc10:	f108 0801 	add.w	r8, r8, #1
 800bc14:	2301      	movs	r3, #1
 800bc16:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 81b0 	beq.w	800bf80 <_dtoa_r+0xb48>
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc26:	6918      	ldr	r0, [r3, #16]
 800bc28:	f000 fb72 	bl	800c310 <__hi0bits>
 800bc2c:	f1c0 0020 	rsb	r0, r0, #32
 800bc30:	9b08      	ldr	r3, [sp, #32]
 800bc32:	4418      	add	r0, r3
 800bc34:	f010 001f 	ands.w	r0, r0, #31
 800bc38:	d077      	beq.n	800bd2a <_dtoa_r+0x8f2>
 800bc3a:	f1c0 0320 	rsb	r3, r0, #32
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	dd6b      	ble.n	800bd1a <_dtoa_r+0x8e2>
 800bc42:	9b08      	ldr	r3, [sp, #32]
 800bc44:	f1c0 001c 	rsb	r0, r0, #28
 800bc48:	4403      	add	r3, r0
 800bc4a:	4480      	add	r8, r0
 800bc4c:	4406      	add	r6, r0
 800bc4e:	9308      	str	r3, [sp, #32]
 800bc50:	f1b8 0f00 	cmp.w	r8, #0
 800bc54:	dd05      	ble.n	800bc62 <_dtoa_r+0x82a>
 800bc56:	4649      	mov	r1, r9
 800bc58:	4642      	mov	r2, r8
 800bc5a:	4658      	mov	r0, fp
 800bc5c:	f000 fcbe 	bl	800c5dc <__lshift>
 800bc60:	4681      	mov	r9, r0
 800bc62:	9b08      	ldr	r3, [sp, #32]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	dd05      	ble.n	800bc74 <_dtoa_r+0x83c>
 800bc68:	4621      	mov	r1, r4
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	4658      	mov	r0, fp
 800bc6e:	f000 fcb5 	bl	800c5dc <__lshift>
 800bc72:	4604      	mov	r4, r0
 800bc74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d059      	beq.n	800bd2e <_dtoa_r+0x8f6>
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4648      	mov	r0, r9
 800bc7e:	f000 fd19 	bl	800c6b4 <__mcmp>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	da53      	bge.n	800bd2e <_dtoa_r+0x8f6>
 800bc86:	1e7b      	subs	r3, r7, #1
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	220a      	movs	r2, #10
 800bc90:	4658      	mov	r0, fp
 800bc92:	f000 faf7 	bl	800c284 <__multadd>
 800bc96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc98:	4681      	mov	r9, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 8172 	beq.w	800bf84 <_dtoa_r+0xb4c>
 800bca0:	2300      	movs	r3, #0
 800bca2:	4629      	mov	r1, r5
 800bca4:	220a      	movs	r2, #10
 800bca6:	4658      	mov	r0, fp
 800bca8:	f000 faec 	bl	800c284 <__multadd>
 800bcac:	9b00      	ldr	r3, [sp, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	dc67      	bgt.n	800bd84 <_dtoa_r+0x94c>
 800bcb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	dc41      	bgt.n	800bd3e <_dtoa_r+0x906>
 800bcba:	e063      	b.n	800bd84 <_dtoa_r+0x94c>
 800bcbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bcbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bcc2:	e746      	b.n	800bb52 <_dtoa_r+0x71a>
 800bcc4:	9b07      	ldr	r3, [sp, #28]
 800bcc6:	1e5c      	subs	r4, r3, #1
 800bcc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcca:	42a3      	cmp	r3, r4
 800bccc:	bfbf      	itttt	lt
 800bcce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bcd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bcd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bcd4:	1ae3      	sublt	r3, r4, r3
 800bcd6:	bfb4      	ite	lt
 800bcd8:	18d2      	addlt	r2, r2, r3
 800bcda:	1b1c      	subge	r4, r3, r4
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	bfbc      	itt	lt
 800bce0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bce2:	2400      	movlt	r4, #0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	bfb5      	itete	lt
 800bce8:	eba8 0603 	sublt.w	r6, r8, r3
 800bcec:	9b07      	ldrge	r3, [sp, #28]
 800bcee:	2300      	movlt	r3, #0
 800bcf0:	4646      	movge	r6, r8
 800bcf2:	e730      	b.n	800bb56 <_dtoa_r+0x71e>
 800bcf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bcf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bcf8:	4646      	mov	r6, r8
 800bcfa:	e735      	b.n	800bb68 <_dtoa_r+0x730>
 800bcfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcfe:	e75c      	b.n	800bbba <_dtoa_r+0x782>
 800bd00:	2300      	movs	r3, #0
 800bd02:	e788      	b.n	800bc16 <_dtoa_r+0x7de>
 800bd04:	3fe00000 	.word	0x3fe00000
 800bd08:	40240000 	.word	0x40240000
 800bd0c:	40140000 	.word	0x40140000
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	e780      	b.n	800bc16 <_dtoa_r+0x7de>
 800bd14:	2300      	movs	r3, #0
 800bd16:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd18:	e782      	b.n	800bc20 <_dtoa_r+0x7e8>
 800bd1a:	d099      	beq.n	800bc50 <_dtoa_r+0x818>
 800bd1c:	9a08      	ldr	r2, [sp, #32]
 800bd1e:	331c      	adds	r3, #28
 800bd20:	441a      	add	r2, r3
 800bd22:	4498      	add	r8, r3
 800bd24:	441e      	add	r6, r3
 800bd26:	9208      	str	r2, [sp, #32]
 800bd28:	e792      	b.n	800bc50 <_dtoa_r+0x818>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	e7f6      	b.n	800bd1c <_dtoa_r+0x8e4>
 800bd2e:	9b07      	ldr	r3, [sp, #28]
 800bd30:	9704      	str	r7, [sp, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	dc20      	bgt.n	800bd78 <_dtoa_r+0x940>
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	dd1e      	ble.n	800bd7c <_dtoa_r+0x944>
 800bd3e:	9b00      	ldr	r3, [sp, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f47f aec0 	bne.w	800bac6 <_dtoa_r+0x68e>
 800bd46:	4621      	mov	r1, r4
 800bd48:	2205      	movs	r2, #5
 800bd4a:	4658      	mov	r0, fp
 800bd4c:	f000 fa9a 	bl	800c284 <__multadd>
 800bd50:	4601      	mov	r1, r0
 800bd52:	4604      	mov	r4, r0
 800bd54:	4648      	mov	r0, r9
 800bd56:	f000 fcad 	bl	800c6b4 <__mcmp>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f77f aeb3 	ble.w	800bac6 <_dtoa_r+0x68e>
 800bd60:	4656      	mov	r6, sl
 800bd62:	2331      	movs	r3, #49	@ 0x31
 800bd64:	f806 3b01 	strb.w	r3, [r6], #1
 800bd68:	9b04      	ldr	r3, [sp, #16]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	9304      	str	r3, [sp, #16]
 800bd6e:	e6ae      	b.n	800bace <_dtoa_r+0x696>
 800bd70:	9c07      	ldr	r4, [sp, #28]
 800bd72:	9704      	str	r7, [sp, #16]
 800bd74:	4625      	mov	r5, r4
 800bd76:	e7f3      	b.n	800bd60 <_dtoa_r+0x928>
 800bd78:	9b07      	ldr	r3, [sp, #28]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 8104 	beq.w	800bf8c <_dtoa_r+0xb54>
 800bd84:	2e00      	cmp	r6, #0
 800bd86:	dd05      	ble.n	800bd94 <_dtoa_r+0x95c>
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4632      	mov	r2, r6
 800bd8c:	4658      	mov	r0, fp
 800bd8e:	f000 fc25 	bl	800c5dc <__lshift>
 800bd92:	4605      	mov	r5, r0
 800bd94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d05a      	beq.n	800be50 <_dtoa_r+0xa18>
 800bd9a:	6869      	ldr	r1, [r5, #4]
 800bd9c:	4658      	mov	r0, fp
 800bd9e:	f000 fa0f 	bl	800c1c0 <_Balloc>
 800bda2:	4606      	mov	r6, r0
 800bda4:	b928      	cbnz	r0, 800bdb2 <_dtoa_r+0x97a>
 800bda6:	4b84      	ldr	r3, [pc, #528]	@ (800bfb8 <_dtoa_r+0xb80>)
 800bda8:	4602      	mov	r2, r0
 800bdaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bdae:	f7ff bb5a 	b.w	800b466 <_dtoa_r+0x2e>
 800bdb2:	692a      	ldr	r2, [r5, #16]
 800bdb4:	3202      	adds	r2, #2
 800bdb6:	0092      	lsls	r2, r2, #2
 800bdb8:	f105 010c 	add.w	r1, r5, #12
 800bdbc:	300c      	adds	r0, #12
 800bdbe:	f7ff faa2 	bl	800b306 <memcpy>
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	4658      	mov	r0, fp
 800bdc8:	f000 fc08 	bl	800c5dc <__lshift>
 800bdcc:	f10a 0301 	add.w	r3, sl, #1
 800bdd0:	9307      	str	r3, [sp, #28]
 800bdd2:	9b00      	ldr	r3, [sp, #0]
 800bdd4:	4453      	add	r3, sl
 800bdd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdd8:	9b02      	ldr	r3, [sp, #8]
 800bdda:	f003 0301 	and.w	r3, r3, #1
 800bdde:	462f      	mov	r7, r5
 800bde0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bde2:	4605      	mov	r5, r0
 800bde4:	9b07      	ldr	r3, [sp, #28]
 800bde6:	4621      	mov	r1, r4
 800bde8:	3b01      	subs	r3, #1
 800bdea:	4648      	mov	r0, r9
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	f7ff fa98 	bl	800b322 <quorem>
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	9002      	str	r0, [sp, #8]
 800bdf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bdfa:	4648      	mov	r0, r9
 800bdfc:	f000 fc5a 	bl	800c6b4 <__mcmp>
 800be00:	462a      	mov	r2, r5
 800be02:	9008      	str	r0, [sp, #32]
 800be04:	4621      	mov	r1, r4
 800be06:	4658      	mov	r0, fp
 800be08:	f000 fc70 	bl	800c6ec <__mdiff>
 800be0c:	68c2      	ldr	r2, [r0, #12]
 800be0e:	4606      	mov	r6, r0
 800be10:	bb02      	cbnz	r2, 800be54 <_dtoa_r+0xa1c>
 800be12:	4601      	mov	r1, r0
 800be14:	4648      	mov	r0, r9
 800be16:	f000 fc4d 	bl	800c6b4 <__mcmp>
 800be1a:	4602      	mov	r2, r0
 800be1c:	4631      	mov	r1, r6
 800be1e:	4658      	mov	r0, fp
 800be20:	920e      	str	r2, [sp, #56]	@ 0x38
 800be22:	f000 fa0d 	bl	800c240 <_Bfree>
 800be26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be2a:	9e07      	ldr	r6, [sp, #28]
 800be2c:	ea43 0102 	orr.w	r1, r3, r2
 800be30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be32:	4319      	orrs	r1, r3
 800be34:	d110      	bne.n	800be58 <_dtoa_r+0xa20>
 800be36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be3a:	d029      	beq.n	800be90 <_dtoa_r+0xa58>
 800be3c:	9b08      	ldr	r3, [sp, #32]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	dd02      	ble.n	800be48 <_dtoa_r+0xa10>
 800be42:	9b02      	ldr	r3, [sp, #8]
 800be44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800be48:	9b00      	ldr	r3, [sp, #0]
 800be4a:	f883 8000 	strb.w	r8, [r3]
 800be4e:	e63f      	b.n	800bad0 <_dtoa_r+0x698>
 800be50:	4628      	mov	r0, r5
 800be52:	e7bb      	b.n	800bdcc <_dtoa_r+0x994>
 800be54:	2201      	movs	r2, #1
 800be56:	e7e1      	b.n	800be1c <_dtoa_r+0x9e4>
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	db04      	blt.n	800be68 <_dtoa_r+0xa30>
 800be5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be60:	430b      	orrs	r3, r1
 800be62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be64:	430b      	orrs	r3, r1
 800be66:	d120      	bne.n	800beaa <_dtoa_r+0xa72>
 800be68:	2a00      	cmp	r2, #0
 800be6a:	dded      	ble.n	800be48 <_dtoa_r+0xa10>
 800be6c:	4649      	mov	r1, r9
 800be6e:	2201      	movs	r2, #1
 800be70:	4658      	mov	r0, fp
 800be72:	f000 fbb3 	bl	800c5dc <__lshift>
 800be76:	4621      	mov	r1, r4
 800be78:	4681      	mov	r9, r0
 800be7a:	f000 fc1b 	bl	800c6b4 <__mcmp>
 800be7e:	2800      	cmp	r0, #0
 800be80:	dc03      	bgt.n	800be8a <_dtoa_r+0xa52>
 800be82:	d1e1      	bne.n	800be48 <_dtoa_r+0xa10>
 800be84:	f018 0f01 	tst.w	r8, #1
 800be88:	d0de      	beq.n	800be48 <_dtoa_r+0xa10>
 800be8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be8e:	d1d8      	bne.n	800be42 <_dtoa_r+0xa0a>
 800be90:	9a00      	ldr	r2, [sp, #0]
 800be92:	2339      	movs	r3, #57	@ 0x39
 800be94:	7013      	strb	r3, [r2, #0]
 800be96:	4633      	mov	r3, r6
 800be98:	461e      	mov	r6, r3
 800be9a:	3b01      	subs	r3, #1
 800be9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bea0:	2a39      	cmp	r2, #57	@ 0x39
 800bea2:	d052      	beq.n	800bf4a <_dtoa_r+0xb12>
 800bea4:	3201      	adds	r2, #1
 800bea6:	701a      	strb	r2, [r3, #0]
 800bea8:	e612      	b.n	800bad0 <_dtoa_r+0x698>
 800beaa:	2a00      	cmp	r2, #0
 800beac:	dd07      	ble.n	800bebe <_dtoa_r+0xa86>
 800beae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800beb2:	d0ed      	beq.n	800be90 <_dtoa_r+0xa58>
 800beb4:	9a00      	ldr	r2, [sp, #0]
 800beb6:	f108 0301 	add.w	r3, r8, #1
 800beba:	7013      	strb	r3, [r2, #0]
 800bebc:	e608      	b.n	800bad0 <_dtoa_r+0x698>
 800bebe:	9b07      	ldr	r3, [sp, #28]
 800bec0:	9a07      	ldr	r2, [sp, #28]
 800bec2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bec8:	4293      	cmp	r3, r2
 800beca:	d028      	beq.n	800bf1e <_dtoa_r+0xae6>
 800becc:	4649      	mov	r1, r9
 800bece:	2300      	movs	r3, #0
 800bed0:	220a      	movs	r2, #10
 800bed2:	4658      	mov	r0, fp
 800bed4:	f000 f9d6 	bl	800c284 <__multadd>
 800bed8:	42af      	cmp	r7, r5
 800beda:	4681      	mov	r9, r0
 800bedc:	f04f 0300 	mov.w	r3, #0
 800bee0:	f04f 020a 	mov.w	r2, #10
 800bee4:	4639      	mov	r1, r7
 800bee6:	4658      	mov	r0, fp
 800bee8:	d107      	bne.n	800befa <_dtoa_r+0xac2>
 800beea:	f000 f9cb 	bl	800c284 <__multadd>
 800beee:	4607      	mov	r7, r0
 800bef0:	4605      	mov	r5, r0
 800bef2:	9b07      	ldr	r3, [sp, #28]
 800bef4:	3301      	adds	r3, #1
 800bef6:	9307      	str	r3, [sp, #28]
 800bef8:	e774      	b.n	800bde4 <_dtoa_r+0x9ac>
 800befa:	f000 f9c3 	bl	800c284 <__multadd>
 800befe:	4629      	mov	r1, r5
 800bf00:	4607      	mov	r7, r0
 800bf02:	2300      	movs	r3, #0
 800bf04:	220a      	movs	r2, #10
 800bf06:	4658      	mov	r0, fp
 800bf08:	f000 f9bc 	bl	800c284 <__multadd>
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	e7f0      	b.n	800bef2 <_dtoa_r+0xaba>
 800bf10:	9b00      	ldr	r3, [sp, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	bfcc      	ite	gt
 800bf16:	461e      	movgt	r6, r3
 800bf18:	2601      	movle	r6, #1
 800bf1a:	4456      	add	r6, sl
 800bf1c:	2700      	movs	r7, #0
 800bf1e:	4649      	mov	r1, r9
 800bf20:	2201      	movs	r2, #1
 800bf22:	4658      	mov	r0, fp
 800bf24:	f000 fb5a 	bl	800c5dc <__lshift>
 800bf28:	4621      	mov	r1, r4
 800bf2a:	4681      	mov	r9, r0
 800bf2c:	f000 fbc2 	bl	800c6b4 <__mcmp>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	dcb0      	bgt.n	800be96 <_dtoa_r+0xa5e>
 800bf34:	d102      	bne.n	800bf3c <_dtoa_r+0xb04>
 800bf36:	f018 0f01 	tst.w	r8, #1
 800bf3a:	d1ac      	bne.n	800be96 <_dtoa_r+0xa5e>
 800bf3c:	4633      	mov	r3, r6
 800bf3e:	461e      	mov	r6, r3
 800bf40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf44:	2a30      	cmp	r2, #48	@ 0x30
 800bf46:	d0fa      	beq.n	800bf3e <_dtoa_r+0xb06>
 800bf48:	e5c2      	b.n	800bad0 <_dtoa_r+0x698>
 800bf4a:	459a      	cmp	sl, r3
 800bf4c:	d1a4      	bne.n	800be98 <_dtoa_r+0xa60>
 800bf4e:	9b04      	ldr	r3, [sp, #16]
 800bf50:	3301      	adds	r3, #1
 800bf52:	9304      	str	r3, [sp, #16]
 800bf54:	2331      	movs	r3, #49	@ 0x31
 800bf56:	f88a 3000 	strb.w	r3, [sl]
 800bf5a:	e5b9      	b.n	800bad0 <_dtoa_r+0x698>
 800bf5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bfbc <_dtoa_r+0xb84>
 800bf62:	b11b      	cbz	r3, 800bf6c <_dtoa_r+0xb34>
 800bf64:	f10a 0308 	add.w	r3, sl, #8
 800bf68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf6a:	6013      	str	r3, [r2, #0]
 800bf6c:	4650      	mov	r0, sl
 800bf6e:	b019      	add	sp, #100	@ 0x64
 800bf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	f77f ae37 	ble.w	800bbea <_dtoa_r+0x7b2>
 800bf7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf80:	2001      	movs	r0, #1
 800bf82:	e655      	b.n	800bc30 <_dtoa_r+0x7f8>
 800bf84:	9b00      	ldr	r3, [sp, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f77f aed6 	ble.w	800bd38 <_dtoa_r+0x900>
 800bf8c:	4656      	mov	r6, sl
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4648      	mov	r0, r9
 800bf92:	f7ff f9c6 	bl	800b322 <quorem>
 800bf96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf9a:	f806 8b01 	strb.w	r8, [r6], #1
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	eba6 020a 	sub.w	r2, r6, sl
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	ddb3      	ble.n	800bf10 <_dtoa_r+0xad8>
 800bfa8:	4649      	mov	r1, r9
 800bfaa:	2300      	movs	r3, #0
 800bfac:	220a      	movs	r2, #10
 800bfae:	4658      	mov	r0, fp
 800bfb0:	f000 f968 	bl	800c284 <__multadd>
 800bfb4:	4681      	mov	r9, r0
 800bfb6:	e7ea      	b.n	800bf8e <_dtoa_r+0xb56>
 800bfb8:	0800dc68 	.word	0x0800dc68
 800bfbc:	0800dbec 	.word	0x0800dbec

0800bfc0 <_free_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	2900      	cmp	r1, #0
 800bfc6:	d041      	beq.n	800c04c <_free_r+0x8c>
 800bfc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfcc:	1f0c      	subs	r4, r1, #4
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	bfb8      	it	lt
 800bfd2:	18e4      	addlt	r4, r4, r3
 800bfd4:	f000 f8e8 	bl	800c1a8 <__malloc_lock>
 800bfd8:	4a1d      	ldr	r2, [pc, #116]	@ (800c050 <_free_r+0x90>)
 800bfda:	6813      	ldr	r3, [r2, #0]
 800bfdc:	b933      	cbnz	r3, 800bfec <_free_r+0x2c>
 800bfde:	6063      	str	r3, [r4, #4]
 800bfe0:	6014      	str	r4, [r2, #0]
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfe8:	f000 b8e4 	b.w	800c1b4 <__malloc_unlock>
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	d908      	bls.n	800c002 <_free_r+0x42>
 800bff0:	6820      	ldr	r0, [r4, #0]
 800bff2:	1821      	adds	r1, r4, r0
 800bff4:	428b      	cmp	r3, r1
 800bff6:	bf01      	itttt	eq
 800bff8:	6819      	ldreq	r1, [r3, #0]
 800bffa:	685b      	ldreq	r3, [r3, #4]
 800bffc:	1809      	addeq	r1, r1, r0
 800bffe:	6021      	streq	r1, [r4, #0]
 800c000:	e7ed      	b.n	800bfde <_free_r+0x1e>
 800c002:	461a      	mov	r2, r3
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	b10b      	cbz	r3, 800c00c <_free_r+0x4c>
 800c008:	42a3      	cmp	r3, r4
 800c00a:	d9fa      	bls.n	800c002 <_free_r+0x42>
 800c00c:	6811      	ldr	r1, [r2, #0]
 800c00e:	1850      	adds	r0, r2, r1
 800c010:	42a0      	cmp	r0, r4
 800c012:	d10b      	bne.n	800c02c <_free_r+0x6c>
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	4401      	add	r1, r0
 800c018:	1850      	adds	r0, r2, r1
 800c01a:	4283      	cmp	r3, r0
 800c01c:	6011      	str	r1, [r2, #0]
 800c01e:	d1e0      	bne.n	800bfe2 <_free_r+0x22>
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	6053      	str	r3, [r2, #4]
 800c026:	4408      	add	r0, r1
 800c028:	6010      	str	r0, [r2, #0]
 800c02a:	e7da      	b.n	800bfe2 <_free_r+0x22>
 800c02c:	d902      	bls.n	800c034 <_free_r+0x74>
 800c02e:	230c      	movs	r3, #12
 800c030:	602b      	str	r3, [r5, #0]
 800c032:	e7d6      	b.n	800bfe2 <_free_r+0x22>
 800c034:	6820      	ldr	r0, [r4, #0]
 800c036:	1821      	adds	r1, r4, r0
 800c038:	428b      	cmp	r3, r1
 800c03a:	bf04      	itt	eq
 800c03c:	6819      	ldreq	r1, [r3, #0]
 800c03e:	685b      	ldreq	r3, [r3, #4]
 800c040:	6063      	str	r3, [r4, #4]
 800c042:	bf04      	itt	eq
 800c044:	1809      	addeq	r1, r1, r0
 800c046:	6021      	streq	r1, [r4, #0]
 800c048:	6054      	str	r4, [r2, #4]
 800c04a:	e7ca      	b.n	800bfe2 <_free_r+0x22>
 800c04c:	bd38      	pop	{r3, r4, r5, pc}
 800c04e:	bf00      	nop
 800c050:	20002210 	.word	0x20002210

0800c054 <malloc>:
 800c054:	4b02      	ldr	r3, [pc, #8]	@ (800c060 <malloc+0xc>)
 800c056:	4601      	mov	r1, r0
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f000 b825 	b.w	800c0a8 <_malloc_r>
 800c05e:	bf00      	nop
 800c060:	2000011c 	.word	0x2000011c

0800c064 <sbrk_aligned>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	4e0f      	ldr	r6, [pc, #60]	@ (800c0a4 <sbrk_aligned+0x40>)
 800c068:	460c      	mov	r4, r1
 800c06a:	6831      	ldr	r1, [r6, #0]
 800c06c:	4605      	mov	r5, r0
 800c06e:	b911      	cbnz	r1, 800c076 <sbrk_aligned+0x12>
 800c070:	f000 fcd4 	bl	800ca1c <_sbrk_r>
 800c074:	6030      	str	r0, [r6, #0]
 800c076:	4621      	mov	r1, r4
 800c078:	4628      	mov	r0, r5
 800c07a:	f000 fccf 	bl	800ca1c <_sbrk_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	d103      	bne.n	800c08a <sbrk_aligned+0x26>
 800c082:	f04f 34ff 	mov.w	r4, #4294967295
 800c086:	4620      	mov	r0, r4
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	1cc4      	adds	r4, r0, #3
 800c08c:	f024 0403 	bic.w	r4, r4, #3
 800c090:	42a0      	cmp	r0, r4
 800c092:	d0f8      	beq.n	800c086 <sbrk_aligned+0x22>
 800c094:	1a21      	subs	r1, r4, r0
 800c096:	4628      	mov	r0, r5
 800c098:	f000 fcc0 	bl	800ca1c <_sbrk_r>
 800c09c:	3001      	adds	r0, #1
 800c09e:	d1f2      	bne.n	800c086 <sbrk_aligned+0x22>
 800c0a0:	e7ef      	b.n	800c082 <sbrk_aligned+0x1e>
 800c0a2:	bf00      	nop
 800c0a4:	2000220c 	.word	0x2000220c

0800c0a8 <_malloc_r>:
 800c0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ac:	1ccd      	adds	r5, r1, #3
 800c0ae:	f025 0503 	bic.w	r5, r5, #3
 800c0b2:	3508      	adds	r5, #8
 800c0b4:	2d0c      	cmp	r5, #12
 800c0b6:	bf38      	it	cc
 800c0b8:	250c      	movcc	r5, #12
 800c0ba:	2d00      	cmp	r5, #0
 800c0bc:	4606      	mov	r6, r0
 800c0be:	db01      	blt.n	800c0c4 <_malloc_r+0x1c>
 800c0c0:	42a9      	cmp	r1, r5
 800c0c2:	d904      	bls.n	800c0ce <_malloc_r+0x26>
 800c0c4:	230c      	movs	r3, #12
 800c0c6:	6033      	str	r3, [r6, #0]
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1a4 <_malloc_r+0xfc>
 800c0d2:	f000 f869 	bl	800c1a8 <__malloc_lock>
 800c0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0da:	461c      	mov	r4, r3
 800c0dc:	bb44      	cbnz	r4, 800c130 <_malloc_r+0x88>
 800c0de:	4629      	mov	r1, r5
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff ffbf 	bl	800c064 <sbrk_aligned>
 800c0e6:	1c43      	adds	r3, r0, #1
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	d158      	bne.n	800c19e <_malloc_r+0xf6>
 800c0ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c0f0:	4627      	mov	r7, r4
 800c0f2:	2f00      	cmp	r7, #0
 800c0f4:	d143      	bne.n	800c17e <_malloc_r+0xd6>
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	d04b      	beq.n	800c192 <_malloc_r+0xea>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4630      	mov	r0, r6
 800c100:	eb04 0903 	add.w	r9, r4, r3
 800c104:	f000 fc8a 	bl	800ca1c <_sbrk_r>
 800c108:	4581      	cmp	r9, r0
 800c10a:	d142      	bne.n	800c192 <_malloc_r+0xea>
 800c10c:	6821      	ldr	r1, [r4, #0]
 800c10e:	1a6d      	subs	r5, r5, r1
 800c110:	4629      	mov	r1, r5
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff ffa6 	bl	800c064 <sbrk_aligned>
 800c118:	3001      	adds	r0, #1
 800c11a:	d03a      	beq.n	800c192 <_malloc_r+0xea>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	442b      	add	r3, r5
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	f8d8 3000 	ldr.w	r3, [r8]
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	bb62      	cbnz	r2, 800c184 <_malloc_r+0xdc>
 800c12a:	f8c8 7000 	str.w	r7, [r8]
 800c12e:	e00f      	b.n	800c150 <_malloc_r+0xa8>
 800c130:	6822      	ldr	r2, [r4, #0]
 800c132:	1b52      	subs	r2, r2, r5
 800c134:	d420      	bmi.n	800c178 <_malloc_r+0xd0>
 800c136:	2a0b      	cmp	r2, #11
 800c138:	d917      	bls.n	800c16a <_malloc_r+0xc2>
 800c13a:	1961      	adds	r1, r4, r5
 800c13c:	42a3      	cmp	r3, r4
 800c13e:	6025      	str	r5, [r4, #0]
 800c140:	bf18      	it	ne
 800c142:	6059      	strne	r1, [r3, #4]
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	bf08      	it	eq
 800c148:	f8c8 1000 	streq.w	r1, [r8]
 800c14c:	5162      	str	r2, [r4, r5]
 800c14e:	604b      	str	r3, [r1, #4]
 800c150:	4630      	mov	r0, r6
 800c152:	f000 f82f 	bl	800c1b4 <__malloc_unlock>
 800c156:	f104 000b 	add.w	r0, r4, #11
 800c15a:	1d23      	adds	r3, r4, #4
 800c15c:	f020 0007 	bic.w	r0, r0, #7
 800c160:	1ac2      	subs	r2, r0, r3
 800c162:	bf1c      	itt	ne
 800c164:	1a1b      	subne	r3, r3, r0
 800c166:	50a3      	strne	r3, [r4, r2]
 800c168:	e7af      	b.n	800c0ca <_malloc_r+0x22>
 800c16a:	6862      	ldr	r2, [r4, #4]
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	bf0c      	ite	eq
 800c170:	f8c8 2000 	streq.w	r2, [r8]
 800c174:	605a      	strne	r2, [r3, #4]
 800c176:	e7eb      	b.n	800c150 <_malloc_r+0xa8>
 800c178:	4623      	mov	r3, r4
 800c17a:	6864      	ldr	r4, [r4, #4]
 800c17c:	e7ae      	b.n	800c0dc <_malloc_r+0x34>
 800c17e:	463c      	mov	r4, r7
 800c180:	687f      	ldr	r7, [r7, #4]
 800c182:	e7b6      	b.n	800c0f2 <_malloc_r+0x4a>
 800c184:	461a      	mov	r2, r3
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	42a3      	cmp	r3, r4
 800c18a:	d1fb      	bne.n	800c184 <_malloc_r+0xdc>
 800c18c:	2300      	movs	r3, #0
 800c18e:	6053      	str	r3, [r2, #4]
 800c190:	e7de      	b.n	800c150 <_malloc_r+0xa8>
 800c192:	230c      	movs	r3, #12
 800c194:	6033      	str	r3, [r6, #0]
 800c196:	4630      	mov	r0, r6
 800c198:	f000 f80c 	bl	800c1b4 <__malloc_unlock>
 800c19c:	e794      	b.n	800c0c8 <_malloc_r+0x20>
 800c19e:	6005      	str	r5, [r0, #0]
 800c1a0:	e7d6      	b.n	800c150 <_malloc_r+0xa8>
 800c1a2:	bf00      	nop
 800c1a4:	20002210 	.word	0x20002210

0800c1a8 <__malloc_lock>:
 800c1a8:	4801      	ldr	r0, [pc, #4]	@ (800c1b0 <__malloc_lock+0x8>)
 800c1aa:	f7ff b8aa 	b.w	800b302 <__retarget_lock_acquire_recursive>
 800c1ae:	bf00      	nop
 800c1b0:	20002208 	.word	0x20002208

0800c1b4 <__malloc_unlock>:
 800c1b4:	4801      	ldr	r0, [pc, #4]	@ (800c1bc <__malloc_unlock+0x8>)
 800c1b6:	f7ff b8a5 	b.w	800b304 <__retarget_lock_release_recursive>
 800c1ba:	bf00      	nop
 800c1bc:	20002208 	.word	0x20002208

0800c1c0 <_Balloc>:
 800c1c0:	b570      	push	{r4, r5, r6, lr}
 800c1c2:	69c6      	ldr	r6, [r0, #28]
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	460d      	mov	r5, r1
 800c1c8:	b976      	cbnz	r6, 800c1e8 <_Balloc+0x28>
 800c1ca:	2010      	movs	r0, #16
 800c1cc:	f7ff ff42 	bl	800c054 <malloc>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	61e0      	str	r0, [r4, #28]
 800c1d4:	b920      	cbnz	r0, 800c1e0 <_Balloc+0x20>
 800c1d6:	4b18      	ldr	r3, [pc, #96]	@ (800c238 <_Balloc+0x78>)
 800c1d8:	4818      	ldr	r0, [pc, #96]	@ (800c23c <_Balloc+0x7c>)
 800c1da:	216b      	movs	r1, #107	@ 0x6b
 800c1dc:	f000 fc2e 	bl	800ca3c <__assert_func>
 800c1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1e4:	6006      	str	r6, [r0, #0]
 800c1e6:	60c6      	str	r6, [r0, #12]
 800c1e8:	69e6      	ldr	r6, [r4, #28]
 800c1ea:	68f3      	ldr	r3, [r6, #12]
 800c1ec:	b183      	cbz	r3, 800c210 <_Balloc+0x50>
 800c1ee:	69e3      	ldr	r3, [r4, #28]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1f6:	b9b8      	cbnz	r0, 800c228 <_Balloc+0x68>
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	fa01 f605 	lsl.w	r6, r1, r5
 800c1fe:	1d72      	adds	r2, r6, #5
 800c200:	0092      	lsls	r2, r2, #2
 800c202:	4620      	mov	r0, r4
 800c204:	f000 fc38 	bl	800ca78 <_calloc_r>
 800c208:	b160      	cbz	r0, 800c224 <_Balloc+0x64>
 800c20a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c20e:	e00e      	b.n	800c22e <_Balloc+0x6e>
 800c210:	2221      	movs	r2, #33	@ 0x21
 800c212:	2104      	movs	r1, #4
 800c214:	4620      	mov	r0, r4
 800c216:	f000 fc2f 	bl	800ca78 <_calloc_r>
 800c21a:	69e3      	ldr	r3, [r4, #28]
 800c21c:	60f0      	str	r0, [r6, #12]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1e4      	bne.n	800c1ee <_Balloc+0x2e>
 800c224:	2000      	movs	r0, #0
 800c226:	bd70      	pop	{r4, r5, r6, pc}
 800c228:	6802      	ldr	r2, [r0, #0]
 800c22a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c22e:	2300      	movs	r3, #0
 800c230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c234:	e7f7      	b.n	800c226 <_Balloc+0x66>
 800c236:	bf00      	nop
 800c238:	0800dbf9 	.word	0x0800dbf9
 800c23c:	0800dc79 	.word	0x0800dc79

0800c240 <_Bfree>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	69c6      	ldr	r6, [r0, #28]
 800c244:	4605      	mov	r5, r0
 800c246:	460c      	mov	r4, r1
 800c248:	b976      	cbnz	r6, 800c268 <_Bfree+0x28>
 800c24a:	2010      	movs	r0, #16
 800c24c:	f7ff ff02 	bl	800c054 <malloc>
 800c250:	4602      	mov	r2, r0
 800c252:	61e8      	str	r0, [r5, #28]
 800c254:	b920      	cbnz	r0, 800c260 <_Bfree+0x20>
 800c256:	4b09      	ldr	r3, [pc, #36]	@ (800c27c <_Bfree+0x3c>)
 800c258:	4809      	ldr	r0, [pc, #36]	@ (800c280 <_Bfree+0x40>)
 800c25a:	218f      	movs	r1, #143	@ 0x8f
 800c25c:	f000 fbee 	bl	800ca3c <__assert_func>
 800c260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c264:	6006      	str	r6, [r0, #0]
 800c266:	60c6      	str	r6, [r0, #12]
 800c268:	b13c      	cbz	r4, 800c27a <_Bfree+0x3a>
 800c26a:	69eb      	ldr	r3, [r5, #28]
 800c26c:	6862      	ldr	r2, [r4, #4]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c274:	6021      	str	r1, [r4, #0]
 800c276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	0800dbf9 	.word	0x0800dbf9
 800c280:	0800dc79 	.word	0x0800dc79

0800c284 <__multadd>:
 800c284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c288:	690d      	ldr	r5, [r1, #16]
 800c28a:	4607      	mov	r7, r0
 800c28c:	460c      	mov	r4, r1
 800c28e:	461e      	mov	r6, r3
 800c290:	f101 0c14 	add.w	ip, r1, #20
 800c294:	2000      	movs	r0, #0
 800c296:	f8dc 3000 	ldr.w	r3, [ip]
 800c29a:	b299      	uxth	r1, r3
 800c29c:	fb02 6101 	mla	r1, r2, r1, r6
 800c2a0:	0c1e      	lsrs	r6, r3, #16
 800c2a2:	0c0b      	lsrs	r3, r1, #16
 800c2a4:	fb02 3306 	mla	r3, r2, r6, r3
 800c2a8:	b289      	uxth	r1, r1
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2b0:	4285      	cmp	r5, r0
 800c2b2:	f84c 1b04 	str.w	r1, [ip], #4
 800c2b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2ba:	dcec      	bgt.n	800c296 <__multadd+0x12>
 800c2bc:	b30e      	cbz	r6, 800c302 <__multadd+0x7e>
 800c2be:	68a3      	ldr	r3, [r4, #8]
 800c2c0:	42ab      	cmp	r3, r5
 800c2c2:	dc19      	bgt.n	800c2f8 <__multadd+0x74>
 800c2c4:	6861      	ldr	r1, [r4, #4]
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	3101      	adds	r1, #1
 800c2ca:	f7ff ff79 	bl	800c1c0 <_Balloc>
 800c2ce:	4680      	mov	r8, r0
 800c2d0:	b928      	cbnz	r0, 800c2de <__multadd+0x5a>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c308 <__multadd+0x84>)
 800c2d6:	480d      	ldr	r0, [pc, #52]	@ (800c30c <__multadd+0x88>)
 800c2d8:	21ba      	movs	r1, #186	@ 0xba
 800c2da:	f000 fbaf 	bl	800ca3c <__assert_func>
 800c2de:	6922      	ldr	r2, [r4, #16]
 800c2e0:	3202      	adds	r2, #2
 800c2e2:	f104 010c 	add.w	r1, r4, #12
 800c2e6:	0092      	lsls	r2, r2, #2
 800c2e8:	300c      	adds	r0, #12
 800c2ea:	f7ff f80c 	bl	800b306 <memcpy>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	f7ff ffa5 	bl	800c240 <_Bfree>
 800c2f6:	4644      	mov	r4, r8
 800c2f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2fc:	3501      	adds	r5, #1
 800c2fe:	615e      	str	r6, [r3, #20]
 800c300:	6125      	str	r5, [r4, #16]
 800c302:	4620      	mov	r0, r4
 800c304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c308:	0800dc68 	.word	0x0800dc68
 800c30c:	0800dc79 	.word	0x0800dc79

0800c310 <__hi0bits>:
 800c310:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c314:	4603      	mov	r3, r0
 800c316:	bf36      	itet	cc
 800c318:	0403      	lslcc	r3, r0, #16
 800c31a:	2000      	movcs	r0, #0
 800c31c:	2010      	movcc	r0, #16
 800c31e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c322:	bf3c      	itt	cc
 800c324:	021b      	lslcc	r3, r3, #8
 800c326:	3008      	addcc	r0, #8
 800c328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c32c:	bf3c      	itt	cc
 800c32e:	011b      	lslcc	r3, r3, #4
 800c330:	3004      	addcc	r0, #4
 800c332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c336:	bf3c      	itt	cc
 800c338:	009b      	lslcc	r3, r3, #2
 800c33a:	3002      	addcc	r0, #2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	db05      	blt.n	800c34c <__hi0bits+0x3c>
 800c340:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c344:	f100 0001 	add.w	r0, r0, #1
 800c348:	bf08      	it	eq
 800c34a:	2020      	moveq	r0, #32
 800c34c:	4770      	bx	lr

0800c34e <__lo0bits>:
 800c34e:	6803      	ldr	r3, [r0, #0]
 800c350:	4602      	mov	r2, r0
 800c352:	f013 0007 	ands.w	r0, r3, #7
 800c356:	d00b      	beq.n	800c370 <__lo0bits+0x22>
 800c358:	07d9      	lsls	r1, r3, #31
 800c35a:	d421      	bmi.n	800c3a0 <__lo0bits+0x52>
 800c35c:	0798      	lsls	r0, r3, #30
 800c35e:	bf49      	itett	mi
 800c360:	085b      	lsrmi	r3, r3, #1
 800c362:	089b      	lsrpl	r3, r3, #2
 800c364:	2001      	movmi	r0, #1
 800c366:	6013      	strmi	r3, [r2, #0]
 800c368:	bf5c      	itt	pl
 800c36a:	6013      	strpl	r3, [r2, #0]
 800c36c:	2002      	movpl	r0, #2
 800c36e:	4770      	bx	lr
 800c370:	b299      	uxth	r1, r3
 800c372:	b909      	cbnz	r1, 800c378 <__lo0bits+0x2a>
 800c374:	0c1b      	lsrs	r3, r3, #16
 800c376:	2010      	movs	r0, #16
 800c378:	b2d9      	uxtb	r1, r3
 800c37a:	b909      	cbnz	r1, 800c380 <__lo0bits+0x32>
 800c37c:	3008      	adds	r0, #8
 800c37e:	0a1b      	lsrs	r3, r3, #8
 800c380:	0719      	lsls	r1, r3, #28
 800c382:	bf04      	itt	eq
 800c384:	091b      	lsreq	r3, r3, #4
 800c386:	3004      	addeq	r0, #4
 800c388:	0799      	lsls	r1, r3, #30
 800c38a:	bf04      	itt	eq
 800c38c:	089b      	lsreq	r3, r3, #2
 800c38e:	3002      	addeq	r0, #2
 800c390:	07d9      	lsls	r1, r3, #31
 800c392:	d403      	bmi.n	800c39c <__lo0bits+0x4e>
 800c394:	085b      	lsrs	r3, r3, #1
 800c396:	f100 0001 	add.w	r0, r0, #1
 800c39a:	d003      	beq.n	800c3a4 <__lo0bits+0x56>
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	4770      	bx	lr
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	4770      	bx	lr
 800c3a4:	2020      	movs	r0, #32
 800c3a6:	4770      	bx	lr

0800c3a8 <__i2b>:
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	f7ff ff07 	bl	800c1c0 <_Balloc>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	b928      	cbnz	r0, 800c3c2 <__i2b+0x1a>
 800c3b6:	4b05      	ldr	r3, [pc, #20]	@ (800c3cc <__i2b+0x24>)
 800c3b8:	4805      	ldr	r0, [pc, #20]	@ (800c3d0 <__i2b+0x28>)
 800c3ba:	f240 1145 	movw	r1, #325	@ 0x145
 800c3be:	f000 fb3d 	bl	800ca3c <__assert_func>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	6144      	str	r4, [r0, #20]
 800c3c6:	6103      	str	r3, [r0, #16]
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	bf00      	nop
 800c3cc:	0800dc68 	.word	0x0800dc68
 800c3d0:	0800dc79 	.word	0x0800dc79

0800c3d4 <__multiply>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	4614      	mov	r4, r2
 800c3da:	690a      	ldr	r2, [r1, #16]
 800c3dc:	6923      	ldr	r3, [r4, #16]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	bfa8      	it	ge
 800c3e2:	4623      	movge	r3, r4
 800c3e4:	460f      	mov	r7, r1
 800c3e6:	bfa4      	itt	ge
 800c3e8:	460c      	movge	r4, r1
 800c3ea:	461f      	movge	r7, r3
 800c3ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3f4:	68a3      	ldr	r3, [r4, #8]
 800c3f6:	6861      	ldr	r1, [r4, #4]
 800c3f8:	eb0a 0609 	add.w	r6, sl, r9
 800c3fc:	42b3      	cmp	r3, r6
 800c3fe:	b085      	sub	sp, #20
 800c400:	bfb8      	it	lt
 800c402:	3101      	addlt	r1, #1
 800c404:	f7ff fedc 	bl	800c1c0 <_Balloc>
 800c408:	b930      	cbnz	r0, 800c418 <__multiply+0x44>
 800c40a:	4602      	mov	r2, r0
 800c40c:	4b44      	ldr	r3, [pc, #272]	@ (800c520 <__multiply+0x14c>)
 800c40e:	4845      	ldr	r0, [pc, #276]	@ (800c524 <__multiply+0x150>)
 800c410:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c414:	f000 fb12 	bl	800ca3c <__assert_func>
 800c418:	f100 0514 	add.w	r5, r0, #20
 800c41c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c420:	462b      	mov	r3, r5
 800c422:	2200      	movs	r2, #0
 800c424:	4543      	cmp	r3, r8
 800c426:	d321      	bcc.n	800c46c <__multiply+0x98>
 800c428:	f107 0114 	add.w	r1, r7, #20
 800c42c:	f104 0214 	add.w	r2, r4, #20
 800c430:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c434:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c438:	9302      	str	r3, [sp, #8]
 800c43a:	1b13      	subs	r3, r2, r4
 800c43c:	3b15      	subs	r3, #21
 800c43e:	f023 0303 	bic.w	r3, r3, #3
 800c442:	3304      	adds	r3, #4
 800c444:	f104 0715 	add.w	r7, r4, #21
 800c448:	42ba      	cmp	r2, r7
 800c44a:	bf38      	it	cc
 800c44c:	2304      	movcc	r3, #4
 800c44e:	9301      	str	r3, [sp, #4]
 800c450:	9b02      	ldr	r3, [sp, #8]
 800c452:	9103      	str	r1, [sp, #12]
 800c454:	428b      	cmp	r3, r1
 800c456:	d80c      	bhi.n	800c472 <__multiply+0x9e>
 800c458:	2e00      	cmp	r6, #0
 800c45a:	dd03      	ble.n	800c464 <__multiply+0x90>
 800c45c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c460:	2b00      	cmp	r3, #0
 800c462:	d05b      	beq.n	800c51c <__multiply+0x148>
 800c464:	6106      	str	r6, [r0, #16]
 800c466:	b005      	add	sp, #20
 800c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46c:	f843 2b04 	str.w	r2, [r3], #4
 800c470:	e7d8      	b.n	800c424 <__multiply+0x50>
 800c472:	f8b1 a000 	ldrh.w	sl, [r1]
 800c476:	f1ba 0f00 	cmp.w	sl, #0
 800c47a:	d024      	beq.n	800c4c6 <__multiply+0xf2>
 800c47c:	f104 0e14 	add.w	lr, r4, #20
 800c480:	46a9      	mov	r9, r5
 800c482:	f04f 0c00 	mov.w	ip, #0
 800c486:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c48a:	f8d9 3000 	ldr.w	r3, [r9]
 800c48e:	fa1f fb87 	uxth.w	fp, r7
 800c492:	b29b      	uxth	r3, r3
 800c494:	fb0a 330b 	mla	r3, sl, fp, r3
 800c498:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c49c:	f8d9 7000 	ldr.w	r7, [r9]
 800c4a0:	4463      	add	r3, ip
 800c4a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c4a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c4aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4b4:	4572      	cmp	r2, lr
 800c4b6:	f849 3b04 	str.w	r3, [r9], #4
 800c4ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c4be:	d8e2      	bhi.n	800c486 <__multiply+0xb2>
 800c4c0:	9b01      	ldr	r3, [sp, #4]
 800c4c2:	f845 c003 	str.w	ip, [r5, r3]
 800c4c6:	9b03      	ldr	r3, [sp, #12]
 800c4c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4cc:	3104      	adds	r1, #4
 800c4ce:	f1b9 0f00 	cmp.w	r9, #0
 800c4d2:	d021      	beq.n	800c518 <__multiply+0x144>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	f104 0c14 	add.w	ip, r4, #20
 800c4da:	46ae      	mov	lr, r5
 800c4dc:	f04f 0a00 	mov.w	sl, #0
 800c4e0:	f8bc b000 	ldrh.w	fp, [ip]
 800c4e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4e8:	fb09 770b 	mla	r7, r9, fp, r7
 800c4ec:	4457      	add	r7, sl
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4f4:	f84e 3b04 	str.w	r3, [lr], #4
 800c4f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c500:	f8be 3000 	ldrh.w	r3, [lr]
 800c504:	fb09 330a 	mla	r3, r9, sl, r3
 800c508:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c50c:	4562      	cmp	r2, ip
 800c50e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c512:	d8e5      	bhi.n	800c4e0 <__multiply+0x10c>
 800c514:	9f01      	ldr	r7, [sp, #4]
 800c516:	51eb      	str	r3, [r5, r7]
 800c518:	3504      	adds	r5, #4
 800c51a:	e799      	b.n	800c450 <__multiply+0x7c>
 800c51c:	3e01      	subs	r6, #1
 800c51e:	e79b      	b.n	800c458 <__multiply+0x84>
 800c520:	0800dc68 	.word	0x0800dc68
 800c524:	0800dc79 	.word	0x0800dc79

0800c528 <__pow5mult>:
 800c528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c52c:	4615      	mov	r5, r2
 800c52e:	f012 0203 	ands.w	r2, r2, #3
 800c532:	4607      	mov	r7, r0
 800c534:	460e      	mov	r6, r1
 800c536:	d007      	beq.n	800c548 <__pow5mult+0x20>
 800c538:	4c25      	ldr	r4, [pc, #148]	@ (800c5d0 <__pow5mult+0xa8>)
 800c53a:	3a01      	subs	r2, #1
 800c53c:	2300      	movs	r3, #0
 800c53e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c542:	f7ff fe9f 	bl	800c284 <__multadd>
 800c546:	4606      	mov	r6, r0
 800c548:	10ad      	asrs	r5, r5, #2
 800c54a:	d03d      	beq.n	800c5c8 <__pow5mult+0xa0>
 800c54c:	69fc      	ldr	r4, [r7, #28]
 800c54e:	b97c      	cbnz	r4, 800c570 <__pow5mult+0x48>
 800c550:	2010      	movs	r0, #16
 800c552:	f7ff fd7f 	bl	800c054 <malloc>
 800c556:	4602      	mov	r2, r0
 800c558:	61f8      	str	r0, [r7, #28]
 800c55a:	b928      	cbnz	r0, 800c568 <__pow5mult+0x40>
 800c55c:	4b1d      	ldr	r3, [pc, #116]	@ (800c5d4 <__pow5mult+0xac>)
 800c55e:	481e      	ldr	r0, [pc, #120]	@ (800c5d8 <__pow5mult+0xb0>)
 800c560:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c564:	f000 fa6a 	bl	800ca3c <__assert_func>
 800c568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c56c:	6004      	str	r4, [r0, #0]
 800c56e:	60c4      	str	r4, [r0, #12]
 800c570:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c578:	b94c      	cbnz	r4, 800c58e <__pow5mult+0x66>
 800c57a:	f240 2171 	movw	r1, #625	@ 0x271
 800c57e:	4638      	mov	r0, r7
 800c580:	f7ff ff12 	bl	800c3a8 <__i2b>
 800c584:	2300      	movs	r3, #0
 800c586:	f8c8 0008 	str.w	r0, [r8, #8]
 800c58a:	4604      	mov	r4, r0
 800c58c:	6003      	str	r3, [r0, #0]
 800c58e:	f04f 0900 	mov.w	r9, #0
 800c592:	07eb      	lsls	r3, r5, #31
 800c594:	d50a      	bpl.n	800c5ac <__pow5mult+0x84>
 800c596:	4631      	mov	r1, r6
 800c598:	4622      	mov	r2, r4
 800c59a:	4638      	mov	r0, r7
 800c59c:	f7ff ff1a 	bl	800c3d4 <__multiply>
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7ff fe4b 	bl	800c240 <_Bfree>
 800c5aa:	4646      	mov	r6, r8
 800c5ac:	106d      	asrs	r5, r5, #1
 800c5ae:	d00b      	beq.n	800c5c8 <__pow5mult+0xa0>
 800c5b0:	6820      	ldr	r0, [r4, #0]
 800c5b2:	b938      	cbnz	r0, 800c5c4 <__pow5mult+0x9c>
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4638      	mov	r0, r7
 800c5ba:	f7ff ff0b 	bl	800c3d4 <__multiply>
 800c5be:	6020      	str	r0, [r4, #0]
 800c5c0:	f8c0 9000 	str.w	r9, [r0]
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	e7e4      	b.n	800c592 <__pow5mult+0x6a>
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ce:	bf00      	nop
 800c5d0:	0800dcd4 	.word	0x0800dcd4
 800c5d4:	0800dbf9 	.word	0x0800dbf9
 800c5d8:	0800dc79 	.word	0x0800dc79

0800c5dc <__lshift>:
 800c5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	6849      	ldr	r1, [r1, #4]
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5ea:	68a3      	ldr	r3, [r4, #8]
 800c5ec:	4607      	mov	r7, r0
 800c5ee:	4691      	mov	r9, r2
 800c5f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5f4:	f108 0601 	add.w	r6, r8, #1
 800c5f8:	42b3      	cmp	r3, r6
 800c5fa:	db0b      	blt.n	800c614 <__lshift+0x38>
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	f7ff fddf 	bl	800c1c0 <_Balloc>
 800c602:	4605      	mov	r5, r0
 800c604:	b948      	cbnz	r0, 800c61a <__lshift+0x3e>
 800c606:	4602      	mov	r2, r0
 800c608:	4b28      	ldr	r3, [pc, #160]	@ (800c6ac <__lshift+0xd0>)
 800c60a:	4829      	ldr	r0, [pc, #164]	@ (800c6b0 <__lshift+0xd4>)
 800c60c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c610:	f000 fa14 	bl	800ca3c <__assert_func>
 800c614:	3101      	adds	r1, #1
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	e7ee      	b.n	800c5f8 <__lshift+0x1c>
 800c61a:	2300      	movs	r3, #0
 800c61c:	f100 0114 	add.w	r1, r0, #20
 800c620:	f100 0210 	add.w	r2, r0, #16
 800c624:	4618      	mov	r0, r3
 800c626:	4553      	cmp	r3, sl
 800c628:	db33      	blt.n	800c692 <__lshift+0xb6>
 800c62a:	6920      	ldr	r0, [r4, #16]
 800c62c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c630:	f104 0314 	add.w	r3, r4, #20
 800c634:	f019 091f 	ands.w	r9, r9, #31
 800c638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c63c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c640:	d02b      	beq.n	800c69a <__lshift+0xbe>
 800c642:	f1c9 0e20 	rsb	lr, r9, #32
 800c646:	468a      	mov	sl, r1
 800c648:	2200      	movs	r2, #0
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	fa00 f009 	lsl.w	r0, r0, r9
 800c650:	4310      	orrs	r0, r2
 800c652:	f84a 0b04 	str.w	r0, [sl], #4
 800c656:	f853 2b04 	ldr.w	r2, [r3], #4
 800c65a:	459c      	cmp	ip, r3
 800c65c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c660:	d8f3      	bhi.n	800c64a <__lshift+0x6e>
 800c662:	ebac 0304 	sub.w	r3, ip, r4
 800c666:	3b15      	subs	r3, #21
 800c668:	f023 0303 	bic.w	r3, r3, #3
 800c66c:	3304      	adds	r3, #4
 800c66e:	f104 0015 	add.w	r0, r4, #21
 800c672:	4584      	cmp	ip, r0
 800c674:	bf38      	it	cc
 800c676:	2304      	movcc	r3, #4
 800c678:	50ca      	str	r2, [r1, r3]
 800c67a:	b10a      	cbz	r2, 800c680 <__lshift+0xa4>
 800c67c:	f108 0602 	add.w	r6, r8, #2
 800c680:	3e01      	subs	r6, #1
 800c682:	4638      	mov	r0, r7
 800c684:	612e      	str	r6, [r5, #16]
 800c686:	4621      	mov	r1, r4
 800c688:	f7ff fdda 	bl	800c240 <_Bfree>
 800c68c:	4628      	mov	r0, r5
 800c68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c692:	f842 0f04 	str.w	r0, [r2, #4]!
 800c696:	3301      	adds	r3, #1
 800c698:	e7c5      	b.n	800c626 <__lshift+0x4a>
 800c69a:	3904      	subs	r1, #4
 800c69c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6a4:	459c      	cmp	ip, r3
 800c6a6:	d8f9      	bhi.n	800c69c <__lshift+0xc0>
 800c6a8:	e7ea      	b.n	800c680 <__lshift+0xa4>
 800c6aa:	bf00      	nop
 800c6ac:	0800dc68 	.word	0x0800dc68
 800c6b0:	0800dc79 	.word	0x0800dc79

0800c6b4 <__mcmp>:
 800c6b4:	690a      	ldr	r2, [r1, #16]
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	6900      	ldr	r0, [r0, #16]
 800c6ba:	1a80      	subs	r0, r0, r2
 800c6bc:	b530      	push	{r4, r5, lr}
 800c6be:	d10e      	bne.n	800c6de <__mcmp+0x2a>
 800c6c0:	3314      	adds	r3, #20
 800c6c2:	3114      	adds	r1, #20
 800c6c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6d4:	4295      	cmp	r5, r2
 800c6d6:	d003      	beq.n	800c6e0 <__mcmp+0x2c>
 800c6d8:	d205      	bcs.n	800c6e6 <__mcmp+0x32>
 800c6da:	f04f 30ff 	mov.w	r0, #4294967295
 800c6de:	bd30      	pop	{r4, r5, pc}
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d3f3      	bcc.n	800c6cc <__mcmp+0x18>
 800c6e4:	e7fb      	b.n	800c6de <__mcmp+0x2a>
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	e7f9      	b.n	800c6de <__mcmp+0x2a>
	...

0800c6ec <__mdiff>:
 800c6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	4689      	mov	r9, r1
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	4648      	mov	r0, r9
 800c6f8:	4614      	mov	r4, r2
 800c6fa:	f7ff ffdb 	bl	800c6b4 <__mcmp>
 800c6fe:	1e05      	subs	r5, r0, #0
 800c700:	d112      	bne.n	800c728 <__mdiff+0x3c>
 800c702:	4629      	mov	r1, r5
 800c704:	4630      	mov	r0, r6
 800c706:	f7ff fd5b 	bl	800c1c0 <_Balloc>
 800c70a:	4602      	mov	r2, r0
 800c70c:	b928      	cbnz	r0, 800c71a <__mdiff+0x2e>
 800c70e:	4b3f      	ldr	r3, [pc, #252]	@ (800c80c <__mdiff+0x120>)
 800c710:	f240 2137 	movw	r1, #567	@ 0x237
 800c714:	483e      	ldr	r0, [pc, #248]	@ (800c810 <__mdiff+0x124>)
 800c716:	f000 f991 	bl	800ca3c <__assert_func>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c720:	4610      	mov	r0, r2
 800c722:	b003      	add	sp, #12
 800c724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c728:	bfbc      	itt	lt
 800c72a:	464b      	movlt	r3, r9
 800c72c:	46a1      	movlt	r9, r4
 800c72e:	4630      	mov	r0, r6
 800c730:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c734:	bfba      	itte	lt
 800c736:	461c      	movlt	r4, r3
 800c738:	2501      	movlt	r5, #1
 800c73a:	2500      	movge	r5, #0
 800c73c:	f7ff fd40 	bl	800c1c0 <_Balloc>
 800c740:	4602      	mov	r2, r0
 800c742:	b918      	cbnz	r0, 800c74c <__mdiff+0x60>
 800c744:	4b31      	ldr	r3, [pc, #196]	@ (800c80c <__mdiff+0x120>)
 800c746:	f240 2145 	movw	r1, #581	@ 0x245
 800c74a:	e7e3      	b.n	800c714 <__mdiff+0x28>
 800c74c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c750:	6926      	ldr	r6, [r4, #16]
 800c752:	60c5      	str	r5, [r0, #12]
 800c754:	f109 0310 	add.w	r3, r9, #16
 800c758:	f109 0514 	add.w	r5, r9, #20
 800c75c:	f104 0e14 	add.w	lr, r4, #20
 800c760:	f100 0b14 	add.w	fp, r0, #20
 800c764:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c768:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	46d9      	mov	r9, fp
 800c770:	f04f 0c00 	mov.w	ip, #0
 800c774:	9b01      	ldr	r3, [sp, #4]
 800c776:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c77a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	fa1f f38a 	uxth.w	r3, sl
 800c784:	4619      	mov	r1, r3
 800c786:	b283      	uxth	r3, r0
 800c788:	1acb      	subs	r3, r1, r3
 800c78a:	0c00      	lsrs	r0, r0, #16
 800c78c:	4463      	add	r3, ip
 800c78e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c792:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c796:	b29b      	uxth	r3, r3
 800c798:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c79c:	4576      	cmp	r6, lr
 800c79e:	f849 3b04 	str.w	r3, [r9], #4
 800c7a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7a6:	d8e5      	bhi.n	800c774 <__mdiff+0x88>
 800c7a8:	1b33      	subs	r3, r6, r4
 800c7aa:	3b15      	subs	r3, #21
 800c7ac:	f023 0303 	bic.w	r3, r3, #3
 800c7b0:	3415      	adds	r4, #21
 800c7b2:	3304      	adds	r3, #4
 800c7b4:	42a6      	cmp	r6, r4
 800c7b6:	bf38      	it	cc
 800c7b8:	2304      	movcc	r3, #4
 800c7ba:	441d      	add	r5, r3
 800c7bc:	445b      	add	r3, fp
 800c7be:	461e      	mov	r6, r3
 800c7c0:	462c      	mov	r4, r5
 800c7c2:	4544      	cmp	r4, r8
 800c7c4:	d30e      	bcc.n	800c7e4 <__mdiff+0xf8>
 800c7c6:	f108 0103 	add.w	r1, r8, #3
 800c7ca:	1b49      	subs	r1, r1, r5
 800c7cc:	f021 0103 	bic.w	r1, r1, #3
 800c7d0:	3d03      	subs	r5, #3
 800c7d2:	45a8      	cmp	r8, r5
 800c7d4:	bf38      	it	cc
 800c7d6:	2100      	movcc	r1, #0
 800c7d8:	440b      	add	r3, r1
 800c7da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7de:	b191      	cbz	r1, 800c806 <__mdiff+0x11a>
 800c7e0:	6117      	str	r7, [r2, #16]
 800c7e2:	e79d      	b.n	800c720 <__mdiff+0x34>
 800c7e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7e8:	46e6      	mov	lr, ip
 800c7ea:	0c08      	lsrs	r0, r1, #16
 800c7ec:	fa1c fc81 	uxtah	ip, ip, r1
 800c7f0:	4471      	add	r1, lr
 800c7f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7f6:	b289      	uxth	r1, r1
 800c7f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7fc:	f846 1b04 	str.w	r1, [r6], #4
 800c800:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c804:	e7dd      	b.n	800c7c2 <__mdiff+0xd6>
 800c806:	3f01      	subs	r7, #1
 800c808:	e7e7      	b.n	800c7da <__mdiff+0xee>
 800c80a:	bf00      	nop
 800c80c:	0800dc68 	.word	0x0800dc68
 800c810:	0800dc79 	.word	0x0800dc79

0800c814 <__d2b>:
 800c814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c818:	460f      	mov	r7, r1
 800c81a:	2101      	movs	r1, #1
 800c81c:	ec59 8b10 	vmov	r8, r9, d0
 800c820:	4616      	mov	r6, r2
 800c822:	f7ff fccd 	bl	800c1c0 <_Balloc>
 800c826:	4604      	mov	r4, r0
 800c828:	b930      	cbnz	r0, 800c838 <__d2b+0x24>
 800c82a:	4602      	mov	r2, r0
 800c82c:	4b23      	ldr	r3, [pc, #140]	@ (800c8bc <__d2b+0xa8>)
 800c82e:	4824      	ldr	r0, [pc, #144]	@ (800c8c0 <__d2b+0xac>)
 800c830:	f240 310f 	movw	r1, #783	@ 0x30f
 800c834:	f000 f902 	bl	800ca3c <__assert_func>
 800c838:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c83c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c840:	b10d      	cbz	r5, 800c846 <__d2b+0x32>
 800c842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	f1b8 0300 	subs.w	r3, r8, #0
 800c84c:	d023      	beq.n	800c896 <__d2b+0x82>
 800c84e:	4668      	mov	r0, sp
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	f7ff fd7c 	bl	800c34e <__lo0bits>
 800c856:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c85a:	b1d0      	cbz	r0, 800c892 <__d2b+0x7e>
 800c85c:	f1c0 0320 	rsb	r3, r0, #32
 800c860:	fa02 f303 	lsl.w	r3, r2, r3
 800c864:	430b      	orrs	r3, r1
 800c866:	40c2      	lsrs	r2, r0
 800c868:	6163      	str	r3, [r4, #20]
 800c86a:	9201      	str	r2, [sp, #4]
 800c86c:	9b01      	ldr	r3, [sp, #4]
 800c86e:	61a3      	str	r3, [r4, #24]
 800c870:	2b00      	cmp	r3, #0
 800c872:	bf0c      	ite	eq
 800c874:	2201      	moveq	r2, #1
 800c876:	2202      	movne	r2, #2
 800c878:	6122      	str	r2, [r4, #16]
 800c87a:	b1a5      	cbz	r5, 800c8a6 <__d2b+0x92>
 800c87c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c880:	4405      	add	r5, r0
 800c882:	603d      	str	r5, [r7, #0]
 800c884:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c888:	6030      	str	r0, [r6, #0]
 800c88a:	4620      	mov	r0, r4
 800c88c:	b003      	add	sp, #12
 800c88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c892:	6161      	str	r1, [r4, #20]
 800c894:	e7ea      	b.n	800c86c <__d2b+0x58>
 800c896:	a801      	add	r0, sp, #4
 800c898:	f7ff fd59 	bl	800c34e <__lo0bits>
 800c89c:	9b01      	ldr	r3, [sp, #4]
 800c89e:	6163      	str	r3, [r4, #20]
 800c8a0:	3020      	adds	r0, #32
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	e7e8      	b.n	800c878 <__d2b+0x64>
 800c8a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8ae:	6038      	str	r0, [r7, #0]
 800c8b0:	6918      	ldr	r0, [r3, #16]
 800c8b2:	f7ff fd2d 	bl	800c310 <__hi0bits>
 800c8b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8ba:	e7e5      	b.n	800c888 <__d2b+0x74>
 800c8bc:	0800dc68 	.word	0x0800dc68
 800c8c0:	0800dc79 	.word	0x0800dc79

0800c8c4 <__sflush_r>:
 800c8c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8cc:	0716      	lsls	r6, r2, #28
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	d454      	bmi.n	800c97e <__sflush_r+0xba>
 800c8d4:	684b      	ldr	r3, [r1, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	dc02      	bgt.n	800c8e0 <__sflush_r+0x1c>
 800c8da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	dd48      	ble.n	800c972 <__sflush_r+0xae>
 800c8e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8e2:	2e00      	cmp	r6, #0
 800c8e4:	d045      	beq.n	800c972 <__sflush_r+0xae>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8ec:	682f      	ldr	r7, [r5, #0]
 800c8ee:	6a21      	ldr	r1, [r4, #32]
 800c8f0:	602b      	str	r3, [r5, #0]
 800c8f2:	d030      	beq.n	800c956 <__sflush_r+0x92>
 800c8f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	0759      	lsls	r1, r3, #29
 800c8fa:	d505      	bpl.n	800c908 <__sflush_r+0x44>
 800c8fc:	6863      	ldr	r3, [r4, #4]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c902:	b10b      	cbz	r3, 800c908 <__sflush_r+0x44>
 800c904:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c906:	1ad2      	subs	r2, r2, r3
 800c908:	2300      	movs	r3, #0
 800c90a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c90c:	6a21      	ldr	r1, [r4, #32]
 800c90e:	4628      	mov	r0, r5
 800c910:	47b0      	blx	r6
 800c912:	1c43      	adds	r3, r0, #1
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	d106      	bne.n	800c926 <__sflush_r+0x62>
 800c918:	6829      	ldr	r1, [r5, #0]
 800c91a:	291d      	cmp	r1, #29
 800c91c:	d82b      	bhi.n	800c976 <__sflush_r+0xb2>
 800c91e:	4a2a      	ldr	r2, [pc, #168]	@ (800c9c8 <__sflush_r+0x104>)
 800c920:	410a      	asrs	r2, r1
 800c922:	07d6      	lsls	r6, r2, #31
 800c924:	d427      	bmi.n	800c976 <__sflush_r+0xb2>
 800c926:	2200      	movs	r2, #0
 800c928:	6062      	str	r2, [r4, #4]
 800c92a:	04d9      	lsls	r1, r3, #19
 800c92c:	6922      	ldr	r2, [r4, #16]
 800c92e:	6022      	str	r2, [r4, #0]
 800c930:	d504      	bpl.n	800c93c <__sflush_r+0x78>
 800c932:	1c42      	adds	r2, r0, #1
 800c934:	d101      	bne.n	800c93a <__sflush_r+0x76>
 800c936:	682b      	ldr	r3, [r5, #0]
 800c938:	b903      	cbnz	r3, 800c93c <__sflush_r+0x78>
 800c93a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c93c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c93e:	602f      	str	r7, [r5, #0]
 800c940:	b1b9      	cbz	r1, 800c972 <__sflush_r+0xae>
 800c942:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c946:	4299      	cmp	r1, r3
 800c948:	d002      	beq.n	800c950 <__sflush_r+0x8c>
 800c94a:	4628      	mov	r0, r5
 800c94c:	f7ff fb38 	bl	800bfc0 <_free_r>
 800c950:	2300      	movs	r3, #0
 800c952:	6363      	str	r3, [r4, #52]	@ 0x34
 800c954:	e00d      	b.n	800c972 <__sflush_r+0xae>
 800c956:	2301      	movs	r3, #1
 800c958:	4628      	mov	r0, r5
 800c95a:	47b0      	blx	r6
 800c95c:	4602      	mov	r2, r0
 800c95e:	1c50      	adds	r0, r2, #1
 800c960:	d1c9      	bne.n	800c8f6 <__sflush_r+0x32>
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d0c6      	beq.n	800c8f6 <__sflush_r+0x32>
 800c968:	2b1d      	cmp	r3, #29
 800c96a:	d001      	beq.n	800c970 <__sflush_r+0xac>
 800c96c:	2b16      	cmp	r3, #22
 800c96e:	d11e      	bne.n	800c9ae <__sflush_r+0xea>
 800c970:	602f      	str	r7, [r5, #0]
 800c972:	2000      	movs	r0, #0
 800c974:	e022      	b.n	800c9bc <__sflush_r+0xf8>
 800c976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c97a:	b21b      	sxth	r3, r3
 800c97c:	e01b      	b.n	800c9b6 <__sflush_r+0xf2>
 800c97e:	690f      	ldr	r7, [r1, #16]
 800c980:	2f00      	cmp	r7, #0
 800c982:	d0f6      	beq.n	800c972 <__sflush_r+0xae>
 800c984:	0793      	lsls	r3, r2, #30
 800c986:	680e      	ldr	r6, [r1, #0]
 800c988:	bf08      	it	eq
 800c98a:	694b      	ldreq	r3, [r1, #20]
 800c98c:	600f      	str	r7, [r1, #0]
 800c98e:	bf18      	it	ne
 800c990:	2300      	movne	r3, #0
 800c992:	eba6 0807 	sub.w	r8, r6, r7
 800c996:	608b      	str	r3, [r1, #8]
 800c998:	f1b8 0f00 	cmp.w	r8, #0
 800c99c:	dde9      	ble.n	800c972 <__sflush_r+0xae>
 800c99e:	6a21      	ldr	r1, [r4, #32]
 800c9a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c9a2:	4643      	mov	r3, r8
 800c9a4:	463a      	mov	r2, r7
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	47b0      	blx	r6
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	dc08      	bgt.n	800c9c0 <__sflush_r+0xfc>
 800c9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9b6:	81a3      	strh	r3, [r4, #12]
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c0:	4407      	add	r7, r0
 800c9c2:	eba8 0800 	sub.w	r8, r8, r0
 800c9c6:	e7e7      	b.n	800c998 <__sflush_r+0xd4>
 800c9c8:	dfbffffe 	.word	0xdfbffffe

0800c9cc <_fflush_r>:
 800c9cc:	b538      	push	{r3, r4, r5, lr}
 800c9ce:	690b      	ldr	r3, [r1, #16]
 800c9d0:	4605      	mov	r5, r0
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	b913      	cbnz	r3, 800c9dc <_fflush_r+0x10>
 800c9d6:	2500      	movs	r5, #0
 800c9d8:	4628      	mov	r0, r5
 800c9da:	bd38      	pop	{r3, r4, r5, pc}
 800c9dc:	b118      	cbz	r0, 800c9e6 <_fflush_r+0x1a>
 800c9de:	6a03      	ldr	r3, [r0, #32]
 800c9e0:	b90b      	cbnz	r3, 800c9e6 <_fflush_r+0x1a>
 800c9e2:	f7fe fb97 	bl	800b114 <__sinit>
 800c9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0f3      	beq.n	800c9d6 <_fflush_r+0xa>
 800c9ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9f0:	07d0      	lsls	r0, r2, #31
 800c9f2:	d404      	bmi.n	800c9fe <_fflush_r+0x32>
 800c9f4:	0599      	lsls	r1, r3, #22
 800c9f6:	d402      	bmi.n	800c9fe <_fflush_r+0x32>
 800c9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9fa:	f7fe fc82 	bl	800b302 <__retarget_lock_acquire_recursive>
 800c9fe:	4628      	mov	r0, r5
 800ca00:	4621      	mov	r1, r4
 800ca02:	f7ff ff5f 	bl	800c8c4 <__sflush_r>
 800ca06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca08:	07da      	lsls	r2, r3, #31
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	d4e4      	bmi.n	800c9d8 <_fflush_r+0xc>
 800ca0e:	89a3      	ldrh	r3, [r4, #12]
 800ca10:	059b      	lsls	r3, r3, #22
 800ca12:	d4e1      	bmi.n	800c9d8 <_fflush_r+0xc>
 800ca14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca16:	f7fe fc75 	bl	800b304 <__retarget_lock_release_recursive>
 800ca1a:	e7dd      	b.n	800c9d8 <_fflush_r+0xc>

0800ca1c <_sbrk_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d06      	ldr	r5, [pc, #24]	@ (800ca38 <_sbrk_r+0x1c>)
 800ca20:	2300      	movs	r3, #0
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	602b      	str	r3, [r5, #0]
 800ca28:	f7f5 fef0 	bl	800280c <_sbrk>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_sbrk_r+0x1a>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_sbrk_r+0x1a>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	20002204 	.word	0x20002204

0800ca3c <__assert_func>:
 800ca3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca3e:	4614      	mov	r4, r2
 800ca40:	461a      	mov	r2, r3
 800ca42:	4b09      	ldr	r3, [pc, #36]	@ (800ca68 <__assert_func+0x2c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4605      	mov	r5, r0
 800ca48:	68d8      	ldr	r0, [r3, #12]
 800ca4a:	b954      	cbnz	r4, 800ca62 <__assert_func+0x26>
 800ca4c:	4b07      	ldr	r3, [pc, #28]	@ (800ca6c <__assert_func+0x30>)
 800ca4e:	461c      	mov	r4, r3
 800ca50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca54:	9100      	str	r1, [sp, #0]
 800ca56:	462b      	mov	r3, r5
 800ca58:	4905      	ldr	r1, [pc, #20]	@ (800ca70 <__assert_func+0x34>)
 800ca5a:	f000 f841 	bl	800cae0 <fiprintf>
 800ca5e:	f000 f851 	bl	800cb04 <abort>
 800ca62:	4b04      	ldr	r3, [pc, #16]	@ (800ca74 <__assert_func+0x38>)
 800ca64:	e7f4      	b.n	800ca50 <__assert_func+0x14>
 800ca66:	bf00      	nop
 800ca68:	2000011c 	.word	0x2000011c
 800ca6c:	0800de15 	.word	0x0800de15
 800ca70:	0800dde7 	.word	0x0800dde7
 800ca74:	0800ddda 	.word	0x0800ddda

0800ca78 <_calloc_r>:
 800ca78:	b570      	push	{r4, r5, r6, lr}
 800ca7a:	fba1 5402 	umull	r5, r4, r1, r2
 800ca7e:	b93c      	cbnz	r4, 800ca90 <_calloc_r+0x18>
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7ff fb11 	bl	800c0a8 <_malloc_r>
 800ca86:	4606      	mov	r6, r0
 800ca88:	b928      	cbnz	r0, 800ca96 <_calloc_r+0x1e>
 800ca8a:	2600      	movs	r6, #0
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	220c      	movs	r2, #12
 800ca92:	6002      	str	r2, [r0, #0]
 800ca94:	e7f9      	b.n	800ca8a <_calloc_r+0x12>
 800ca96:	462a      	mov	r2, r5
 800ca98:	4621      	mov	r1, r4
 800ca9a:	f7fe fbb4 	bl	800b206 <memset>
 800ca9e:	e7f5      	b.n	800ca8c <_calloc_r+0x14>

0800caa0 <__ascii_mbtowc>:
 800caa0:	b082      	sub	sp, #8
 800caa2:	b901      	cbnz	r1, 800caa6 <__ascii_mbtowc+0x6>
 800caa4:	a901      	add	r1, sp, #4
 800caa6:	b142      	cbz	r2, 800caba <__ascii_mbtowc+0x1a>
 800caa8:	b14b      	cbz	r3, 800cabe <__ascii_mbtowc+0x1e>
 800caaa:	7813      	ldrb	r3, [r2, #0]
 800caac:	600b      	str	r3, [r1, #0]
 800caae:	7812      	ldrb	r2, [r2, #0]
 800cab0:	1e10      	subs	r0, r2, #0
 800cab2:	bf18      	it	ne
 800cab4:	2001      	movne	r0, #1
 800cab6:	b002      	add	sp, #8
 800cab8:	4770      	bx	lr
 800caba:	4610      	mov	r0, r2
 800cabc:	e7fb      	b.n	800cab6 <__ascii_mbtowc+0x16>
 800cabe:	f06f 0001 	mvn.w	r0, #1
 800cac2:	e7f8      	b.n	800cab6 <__ascii_mbtowc+0x16>

0800cac4 <__ascii_wctomb>:
 800cac4:	4603      	mov	r3, r0
 800cac6:	4608      	mov	r0, r1
 800cac8:	b141      	cbz	r1, 800cadc <__ascii_wctomb+0x18>
 800caca:	2aff      	cmp	r2, #255	@ 0xff
 800cacc:	d904      	bls.n	800cad8 <__ascii_wctomb+0x14>
 800cace:	228a      	movs	r2, #138	@ 0x8a
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295
 800cad6:	4770      	bx	lr
 800cad8:	700a      	strb	r2, [r1, #0]
 800cada:	2001      	movs	r0, #1
 800cadc:	4770      	bx	lr
	...

0800cae0 <fiprintf>:
 800cae0:	b40e      	push	{r1, r2, r3}
 800cae2:	b503      	push	{r0, r1, lr}
 800cae4:	4601      	mov	r1, r0
 800cae6:	ab03      	add	r3, sp, #12
 800cae8:	4805      	ldr	r0, [pc, #20]	@ (800cb00 <fiprintf+0x20>)
 800caea:	f853 2b04 	ldr.w	r2, [r3], #4
 800caee:	6800      	ldr	r0, [r0, #0]
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	f000 f837 	bl	800cb64 <_vfiprintf_r>
 800caf6:	b002      	add	sp, #8
 800caf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cafc:	b003      	add	sp, #12
 800cafe:	4770      	bx	lr
 800cb00:	2000011c 	.word	0x2000011c

0800cb04 <abort>:
 800cb04:	b508      	push	{r3, lr}
 800cb06:	2006      	movs	r0, #6
 800cb08:	f000 fa00 	bl	800cf0c <raise>
 800cb0c:	2001      	movs	r0, #1
 800cb0e:	f7f5 fe05 	bl	800271c <_exit>

0800cb12 <__sfputc_r>:
 800cb12:	6893      	ldr	r3, [r2, #8]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	b410      	push	{r4}
 800cb1a:	6093      	str	r3, [r2, #8]
 800cb1c:	da08      	bge.n	800cb30 <__sfputc_r+0x1e>
 800cb1e:	6994      	ldr	r4, [r2, #24]
 800cb20:	42a3      	cmp	r3, r4
 800cb22:	db01      	blt.n	800cb28 <__sfputc_r+0x16>
 800cb24:	290a      	cmp	r1, #10
 800cb26:	d103      	bne.n	800cb30 <__sfputc_r+0x1e>
 800cb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb2c:	f000 b932 	b.w	800cd94 <__swbuf_r>
 800cb30:	6813      	ldr	r3, [r2, #0]
 800cb32:	1c58      	adds	r0, r3, #1
 800cb34:	6010      	str	r0, [r2, #0]
 800cb36:	7019      	strb	r1, [r3, #0]
 800cb38:	4608      	mov	r0, r1
 800cb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <__sfputs_r>:
 800cb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb42:	4606      	mov	r6, r0
 800cb44:	460f      	mov	r7, r1
 800cb46:	4614      	mov	r4, r2
 800cb48:	18d5      	adds	r5, r2, r3
 800cb4a:	42ac      	cmp	r4, r5
 800cb4c:	d101      	bne.n	800cb52 <__sfputs_r+0x12>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	e007      	b.n	800cb62 <__sfputs_r+0x22>
 800cb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb56:	463a      	mov	r2, r7
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f7ff ffda 	bl	800cb12 <__sfputc_r>
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	d1f3      	bne.n	800cb4a <__sfputs_r+0xa>
 800cb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb64 <_vfiprintf_r>:
 800cb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb68:	460d      	mov	r5, r1
 800cb6a:	b09d      	sub	sp, #116	@ 0x74
 800cb6c:	4614      	mov	r4, r2
 800cb6e:	4698      	mov	r8, r3
 800cb70:	4606      	mov	r6, r0
 800cb72:	b118      	cbz	r0, 800cb7c <_vfiprintf_r+0x18>
 800cb74:	6a03      	ldr	r3, [r0, #32]
 800cb76:	b90b      	cbnz	r3, 800cb7c <_vfiprintf_r+0x18>
 800cb78:	f7fe facc 	bl	800b114 <__sinit>
 800cb7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb7e:	07d9      	lsls	r1, r3, #31
 800cb80:	d405      	bmi.n	800cb8e <_vfiprintf_r+0x2a>
 800cb82:	89ab      	ldrh	r3, [r5, #12]
 800cb84:	059a      	lsls	r2, r3, #22
 800cb86:	d402      	bmi.n	800cb8e <_vfiprintf_r+0x2a>
 800cb88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb8a:	f7fe fbba 	bl	800b302 <__retarget_lock_acquire_recursive>
 800cb8e:	89ab      	ldrh	r3, [r5, #12]
 800cb90:	071b      	lsls	r3, r3, #28
 800cb92:	d501      	bpl.n	800cb98 <_vfiprintf_r+0x34>
 800cb94:	692b      	ldr	r3, [r5, #16]
 800cb96:	b99b      	cbnz	r3, 800cbc0 <_vfiprintf_r+0x5c>
 800cb98:	4629      	mov	r1, r5
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f000 f938 	bl	800ce10 <__swsetup_r>
 800cba0:	b170      	cbz	r0, 800cbc0 <_vfiprintf_r+0x5c>
 800cba2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cba4:	07dc      	lsls	r4, r3, #31
 800cba6:	d504      	bpl.n	800cbb2 <_vfiprintf_r+0x4e>
 800cba8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbac:	b01d      	add	sp, #116	@ 0x74
 800cbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb2:	89ab      	ldrh	r3, [r5, #12]
 800cbb4:	0598      	lsls	r0, r3, #22
 800cbb6:	d4f7      	bmi.n	800cba8 <_vfiprintf_r+0x44>
 800cbb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbba:	f7fe fba3 	bl	800b304 <__retarget_lock_release_recursive>
 800cbbe:	e7f3      	b.n	800cba8 <_vfiprintf_r+0x44>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc4:	2320      	movs	r3, #32
 800cbc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbca:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbce:	2330      	movs	r3, #48	@ 0x30
 800cbd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cd80 <_vfiprintf_r+0x21c>
 800cbd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbd8:	f04f 0901 	mov.w	r9, #1
 800cbdc:	4623      	mov	r3, r4
 800cbde:	469a      	mov	sl, r3
 800cbe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbe4:	b10a      	cbz	r2, 800cbea <_vfiprintf_r+0x86>
 800cbe6:	2a25      	cmp	r2, #37	@ 0x25
 800cbe8:	d1f9      	bne.n	800cbde <_vfiprintf_r+0x7a>
 800cbea:	ebba 0b04 	subs.w	fp, sl, r4
 800cbee:	d00b      	beq.n	800cc08 <_vfiprintf_r+0xa4>
 800cbf0:	465b      	mov	r3, fp
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7ff ffa2 	bl	800cb40 <__sfputs_r>
 800cbfc:	3001      	adds	r0, #1
 800cbfe:	f000 80a7 	beq.w	800cd50 <_vfiprintf_r+0x1ec>
 800cc02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc04:	445a      	add	r2, fp
 800cc06:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc08:	f89a 3000 	ldrb.w	r3, [sl]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 809f 	beq.w	800cd50 <_vfiprintf_r+0x1ec>
 800cc12:	2300      	movs	r3, #0
 800cc14:	f04f 32ff 	mov.w	r2, #4294967295
 800cc18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc1c:	f10a 0a01 	add.w	sl, sl, #1
 800cc20:	9304      	str	r3, [sp, #16]
 800cc22:	9307      	str	r3, [sp, #28]
 800cc24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc28:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc2a:	4654      	mov	r4, sl
 800cc2c:	2205      	movs	r2, #5
 800cc2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc32:	4853      	ldr	r0, [pc, #332]	@ (800cd80 <_vfiprintf_r+0x21c>)
 800cc34:	f7f3 facc 	bl	80001d0 <memchr>
 800cc38:	9a04      	ldr	r2, [sp, #16]
 800cc3a:	b9d8      	cbnz	r0, 800cc74 <_vfiprintf_r+0x110>
 800cc3c:	06d1      	lsls	r1, r2, #27
 800cc3e:	bf44      	itt	mi
 800cc40:	2320      	movmi	r3, #32
 800cc42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc46:	0713      	lsls	r3, r2, #28
 800cc48:	bf44      	itt	mi
 800cc4a:	232b      	movmi	r3, #43	@ 0x2b
 800cc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc50:	f89a 3000 	ldrb.w	r3, [sl]
 800cc54:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc56:	d015      	beq.n	800cc84 <_vfiprintf_r+0x120>
 800cc58:	9a07      	ldr	r2, [sp, #28]
 800cc5a:	4654      	mov	r4, sl
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	f04f 0c0a 	mov.w	ip, #10
 800cc62:	4621      	mov	r1, r4
 800cc64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc68:	3b30      	subs	r3, #48	@ 0x30
 800cc6a:	2b09      	cmp	r3, #9
 800cc6c:	d94b      	bls.n	800cd06 <_vfiprintf_r+0x1a2>
 800cc6e:	b1b0      	cbz	r0, 800cc9e <_vfiprintf_r+0x13a>
 800cc70:	9207      	str	r2, [sp, #28]
 800cc72:	e014      	b.n	800cc9e <_vfiprintf_r+0x13a>
 800cc74:	eba0 0308 	sub.w	r3, r0, r8
 800cc78:	fa09 f303 	lsl.w	r3, r9, r3
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	9304      	str	r3, [sp, #16]
 800cc80:	46a2      	mov	sl, r4
 800cc82:	e7d2      	b.n	800cc2a <_vfiprintf_r+0xc6>
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	1d19      	adds	r1, r3, #4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	9103      	str	r1, [sp, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	bfbb      	ittet	lt
 800cc90:	425b      	neglt	r3, r3
 800cc92:	f042 0202 	orrlt.w	r2, r2, #2
 800cc96:	9307      	strge	r3, [sp, #28]
 800cc98:	9307      	strlt	r3, [sp, #28]
 800cc9a:	bfb8      	it	lt
 800cc9c:	9204      	strlt	r2, [sp, #16]
 800cc9e:	7823      	ldrb	r3, [r4, #0]
 800cca0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cca2:	d10a      	bne.n	800ccba <_vfiprintf_r+0x156>
 800cca4:	7863      	ldrb	r3, [r4, #1]
 800cca6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cca8:	d132      	bne.n	800cd10 <_vfiprintf_r+0x1ac>
 800ccaa:	9b03      	ldr	r3, [sp, #12]
 800ccac:	1d1a      	adds	r2, r3, #4
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	9203      	str	r2, [sp, #12]
 800ccb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccb6:	3402      	adds	r4, #2
 800ccb8:	9305      	str	r3, [sp, #20]
 800ccba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cd90 <_vfiprintf_r+0x22c>
 800ccbe:	7821      	ldrb	r1, [r4, #0]
 800ccc0:	2203      	movs	r2, #3
 800ccc2:	4650      	mov	r0, sl
 800ccc4:	f7f3 fa84 	bl	80001d0 <memchr>
 800ccc8:	b138      	cbz	r0, 800ccda <_vfiprintf_r+0x176>
 800ccca:	9b04      	ldr	r3, [sp, #16]
 800cccc:	eba0 000a 	sub.w	r0, r0, sl
 800ccd0:	2240      	movs	r2, #64	@ 0x40
 800ccd2:	4082      	lsls	r2, r0
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	3401      	adds	r4, #1
 800ccd8:	9304      	str	r3, [sp, #16]
 800ccda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccde:	4829      	ldr	r0, [pc, #164]	@ (800cd84 <_vfiprintf_r+0x220>)
 800cce0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cce4:	2206      	movs	r2, #6
 800cce6:	f7f3 fa73 	bl	80001d0 <memchr>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d03f      	beq.n	800cd6e <_vfiprintf_r+0x20a>
 800ccee:	4b26      	ldr	r3, [pc, #152]	@ (800cd88 <_vfiprintf_r+0x224>)
 800ccf0:	bb1b      	cbnz	r3, 800cd3a <_vfiprintf_r+0x1d6>
 800ccf2:	9b03      	ldr	r3, [sp, #12]
 800ccf4:	3307      	adds	r3, #7
 800ccf6:	f023 0307 	bic.w	r3, r3, #7
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	9303      	str	r3, [sp, #12]
 800ccfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd00:	443b      	add	r3, r7
 800cd02:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd04:	e76a      	b.n	800cbdc <_vfiprintf_r+0x78>
 800cd06:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	2001      	movs	r0, #1
 800cd0e:	e7a8      	b.n	800cc62 <_vfiprintf_r+0xfe>
 800cd10:	2300      	movs	r3, #0
 800cd12:	3401      	adds	r4, #1
 800cd14:	9305      	str	r3, [sp, #20]
 800cd16:	4619      	mov	r1, r3
 800cd18:	f04f 0c0a 	mov.w	ip, #10
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd22:	3a30      	subs	r2, #48	@ 0x30
 800cd24:	2a09      	cmp	r2, #9
 800cd26:	d903      	bls.n	800cd30 <_vfiprintf_r+0x1cc>
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d0c6      	beq.n	800ccba <_vfiprintf_r+0x156>
 800cd2c:	9105      	str	r1, [sp, #20]
 800cd2e:	e7c4      	b.n	800ccba <_vfiprintf_r+0x156>
 800cd30:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd34:	4604      	mov	r4, r0
 800cd36:	2301      	movs	r3, #1
 800cd38:	e7f0      	b.n	800cd1c <_vfiprintf_r+0x1b8>
 800cd3a:	ab03      	add	r3, sp, #12
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	462a      	mov	r2, r5
 800cd40:	4b12      	ldr	r3, [pc, #72]	@ (800cd8c <_vfiprintf_r+0x228>)
 800cd42:	a904      	add	r1, sp, #16
 800cd44:	4630      	mov	r0, r6
 800cd46:	f7fd fda1 	bl	800a88c <_printf_float>
 800cd4a:	4607      	mov	r7, r0
 800cd4c:	1c78      	adds	r0, r7, #1
 800cd4e:	d1d6      	bne.n	800ccfe <_vfiprintf_r+0x19a>
 800cd50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd52:	07d9      	lsls	r1, r3, #31
 800cd54:	d405      	bmi.n	800cd62 <_vfiprintf_r+0x1fe>
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	059a      	lsls	r2, r3, #22
 800cd5a:	d402      	bmi.n	800cd62 <_vfiprintf_r+0x1fe>
 800cd5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd5e:	f7fe fad1 	bl	800b304 <__retarget_lock_release_recursive>
 800cd62:	89ab      	ldrh	r3, [r5, #12]
 800cd64:	065b      	lsls	r3, r3, #25
 800cd66:	f53f af1f 	bmi.w	800cba8 <_vfiprintf_r+0x44>
 800cd6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd6c:	e71e      	b.n	800cbac <_vfiprintf_r+0x48>
 800cd6e:	ab03      	add	r3, sp, #12
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	462a      	mov	r2, r5
 800cd74:	4b05      	ldr	r3, [pc, #20]	@ (800cd8c <_vfiprintf_r+0x228>)
 800cd76:	a904      	add	r1, sp, #16
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f7fe f81f 	bl	800adbc <_printf_i>
 800cd7e:	e7e4      	b.n	800cd4a <_vfiprintf_r+0x1e6>
 800cd80:	0800df17 	.word	0x0800df17
 800cd84:	0800df21 	.word	0x0800df21
 800cd88:	0800a88d 	.word	0x0800a88d
 800cd8c:	0800cb41 	.word	0x0800cb41
 800cd90:	0800df1d 	.word	0x0800df1d

0800cd94 <__swbuf_r>:
 800cd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd96:	460e      	mov	r6, r1
 800cd98:	4614      	mov	r4, r2
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	b118      	cbz	r0, 800cda6 <__swbuf_r+0x12>
 800cd9e:	6a03      	ldr	r3, [r0, #32]
 800cda0:	b90b      	cbnz	r3, 800cda6 <__swbuf_r+0x12>
 800cda2:	f7fe f9b7 	bl	800b114 <__sinit>
 800cda6:	69a3      	ldr	r3, [r4, #24]
 800cda8:	60a3      	str	r3, [r4, #8]
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	071a      	lsls	r2, r3, #28
 800cdae:	d501      	bpl.n	800cdb4 <__swbuf_r+0x20>
 800cdb0:	6923      	ldr	r3, [r4, #16]
 800cdb2:	b943      	cbnz	r3, 800cdc6 <__swbuf_r+0x32>
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f000 f82a 	bl	800ce10 <__swsetup_r>
 800cdbc:	b118      	cbz	r0, 800cdc6 <__swbuf_r+0x32>
 800cdbe:	f04f 37ff 	mov.w	r7, #4294967295
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	6922      	ldr	r2, [r4, #16]
 800cdca:	1a98      	subs	r0, r3, r2
 800cdcc:	6963      	ldr	r3, [r4, #20]
 800cdce:	b2f6      	uxtb	r6, r6
 800cdd0:	4283      	cmp	r3, r0
 800cdd2:	4637      	mov	r7, r6
 800cdd4:	dc05      	bgt.n	800cde2 <__swbuf_r+0x4e>
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f7ff fdf7 	bl	800c9cc <_fflush_r>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d1ed      	bne.n	800cdbe <__swbuf_r+0x2a>
 800cde2:	68a3      	ldr	r3, [r4, #8]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	60a3      	str	r3, [r4, #8]
 800cde8:	6823      	ldr	r3, [r4, #0]
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	6022      	str	r2, [r4, #0]
 800cdee:	701e      	strb	r6, [r3, #0]
 800cdf0:	6962      	ldr	r2, [r4, #20]
 800cdf2:	1c43      	adds	r3, r0, #1
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d004      	beq.n	800ce02 <__swbuf_r+0x6e>
 800cdf8:	89a3      	ldrh	r3, [r4, #12]
 800cdfa:	07db      	lsls	r3, r3, #31
 800cdfc:	d5e1      	bpl.n	800cdc2 <__swbuf_r+0x2e>
 800cdfe:	2e0a      	cmp	r6, #10
 800ce00:	d1df      	bne.n	800cdc2 <__swbuf_r+0x2e>
 800ce02:	4621      	mov	r1, r4
 800ce04:	4628      	mov	r0, r5
 800ce06:	f7ff fde1 	bl	800c9cc <_fflush_r>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d0d9      	beq.n	800cdc2 <__swbuf_r+0x2e>
 800ce0e:	e7d6      	b.n	800cdbe <__swbuf_r+0x2a>

0800ce10 <__swsetup_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4b29      	ldr	r3, [pc, #164]	@ (800ceb8 <__swsetup_r+0xa8>)
 800ce14:	4605      	mov	r5, r0
 800ce16:	6818      	ldr	r0, [r3, #0]
 800ce18:	460c      	mov	r4, r1
 800ce1a:	b118      	cbz	r0, 800ce24 <__swsetup_r+0x14>
 800ce1c:	6a03      	ldr	r3, [r0, #32]
 800ce1e:	b90b      	cbnz	r3, 800ce24 <__swsetup_r+0x14>
 800ce20:	f7fe f978 	bl	800b114 <__sinit>
 800ce24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce28:	0719      	lsls	r1, r3, #28
 800ce2a:	d422      	bmi.n	800ce72 <__swsetup_r+0x62>
 800ce2c:	06da      	lsls	r2, r3, #27
 800ce2e:	d407      	bmi.n	800ce40 <__swsetup_r+0x30>
 800ce30:	2209      	movs	r2, #9
 800ce32:	602a      	str	r2, [r5, #0]
 800ce34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3e:	e033      	b.n	800cea8 <__swsetup_r+0x98>
 800ce40:	0758      	lsls	r0, r3, #29
 800ce42:	d512      	bpl.n	800ce6a <__swsetup_r+0x5a>
 800ce44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce46:	b141      	cbz	r1, 800ce5a <__swsetup_r+0x4a>
 800ce48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce4c:	4299      	cmp	r1, r3
 800ce4e:	d002      	beq.n	800ce56 <__swsetup_r+0x46>
 800ce50:	4628      	mov	r0, r5
 800ce52:	f7ff f8b5 	bl	800bfc0 <_free_r>
 800ce56:	2300      	movs	r3, #0
 800ce58:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce60:	81a3      	strh	r3, [r4, #12]
 800ce62:	2300      	movs	r3, #0
 800ce64:	6063      	str	r3, [r4, #4]
 800ce66:	6923      	ldr	r3, [r4, #16]
 800ce68:	6023      	str	r3, [r4, #0]
 800ce6a:	89a3      	ldrh	r3, [r4, #12]
 800ce6c:	f043 0308 	orr.w	r3, r3, #8
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	6923      	ldr	r3, [r4, #16]
 800ce74:	b94b      	cbnz	r3, 800ce8a <__swsetup_r+0x7a>
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce80:	d003      	beq.n	800ce8a <__swsetup_r+0x7a>
 800ce82:	4621      	mov	r1, r4
 800ce84:	4628      	mov	r0, r5
 800ce86:	f000 f883 	bl	800cf90 <__smakebuf_r>
 800ce8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce8e:	f013 0201 	ands.w	r2, r3, #1
 800ce92:	d00a      	beq.n	800ceaa <__swsetup_r+0x9a>
 800ce94:	2200      	movs	r2, #0
 800ce96:	60a2      	str	r2, [r4, #8]
 800ce98:	6962      	ldr	r2, [r4, #20]
 800ce9a:	4252      	negs	r2, r2
 800ce9c:	61a2      	str	r2, [r4, #24]
 800ce9e:	6922      	ldr	r2, [r4, #16]
 800cea0:	b942      	cbnz	r2, 800ceb4 <__swsetup_r+0xa4>
 800cea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cea6:	d1c5      	bne.n	800ce34 <__swsetup_r+0x24>
 800cea8:	bd38      	pop	{r3, r4, r5, pc}
 800ceaa:	0799      	lsls	r1, r3, #30
 800ceac:	bf58      	it	pl
 800ceae:	6962      	ldrpl	r2, [r4, #20]
 800ceb0:	60a2      	str	r2, [r4, #8]
 800ceb2:	e7f4      	b.n	800ce9e <__swsetup_r+0x8e>
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	e7f7      	b.n	800cea8 <__swsetup_r+0x98>
 800ceb8:	2000011c 	.word	0x2000011c

0800cebc <_raise_r>:
 800cebc:	291f      	cmp	r1, #31
 800cebe:	b538      	push	{r3, r4, r5, lr}
 800cec0:	4605      	mov	r5, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	d904      	bls.n	800ced0 <_raise_r+0x14>
 800cec6:	2316      	movs	r3, #22
 800cec8:	6003      	str	r3, [r0, #0]
 800ceca:	f04f 30ff 	mov.w	r0, #4294967295
 800cece:	bd38      	pop	{r3, r4, r5, pc}
 800ced0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ced2:	b112      	cbz	r2, 800ceda <_raise_r+0x1e>
 800ced4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ced8:	b94b      	cbnz	r3, 800ceee <_raise_r+0x32>
 800ceda:	4628      	mov	r0, r5
 800cedc:	f000 f830 	bl	800cf40 <_getpid_r>
 800cee0:	4622      	mov	r2, r4
 800cee2:	4601      	mov	r1, r0
 800cee4:	4628      	mov	r0, r5
 800cee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceea:	f000 b817 	b.w	800cf1c <_kill_r>
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d00a      	beq.n	800cf08 <_raise_r+0x4c>
 800cef2:	1c59      	adds	r1, r3, #1
 800cef4:	d103      	bne.n	800cefe <_raise_r+0x42>
 800cef6:	2316      	movs	r3, #22
 800cef8:	6003      	str	r3, [r0, #0]
 800cefa:	2001      	movs	r0, #1
 800cefc:	e7e7      	b.n	800cece <_raise_r+0x12>
 800cefe:	2100      	movs	r1, #0
 800cf00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf04:	4620      	mov	r0, r4
 800cf06:	4798      	blx	r3
 800cf08:	2000      	movs	r0, #0
 800cf0a:	e7e0      	b.n	800cece <_raise_r+0x12>

0800cf0c <raise>:
 800cf0c:	4b02      	ldr	r3, [pc, #8]	@ (800cf18 <raise+0xc>)
 800cf0e:	4601      	mov	r1, r0
 800cf10:	6818      	ldr	r0, [r3, #0]
 800cf12:	f7ff bfd3 	b.w	800cebc <_raise_r>
 800cf16:	bf00      	nop
 800cf18:	2000011c 	.word	0x2000011c

0800cf1c <_kill_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4d07      	ldr	r5, [pc, #28]	@ (800cf3c <_kill_r+0x20>)
 800cf20:	2300      	movs	r3, #0
 800cf22:	4604      	mov	r4, r0
 800cf24:	4608      	mov	r0, r1
 800cf26:	4611      	mov	r1, r2
 800cf28:	602b      	str	r3, [r5, #0]
 800cf2a:	f7f5 fbe7 	bl	80026fc <_kill>
 800cf2e:	1c43      	adds	r3, r0, #1
 800cf30:	d102      	bne.n	800cf38 <_kill_r+0x1c>
 800cf32:	682b      	ldr	r3, [r5, #0]
 800cf34:	b103      	cbz	r3, 800cf38 <_kill_r+0x1c>
 800cf36:	6023      	str	r3, [r4, #0]
 800cf38:	bd38      	pop	{r3, r4, r5, pc}
 800cf3a:	bf00      	nop
 800cf3c:	20002204 	.word	0x20002204

0800cf40 <_getpid_r>:
 800cf40:	f7f5 bbd4 	b.w	80026ec <_getpid>

0800cf44 <__swhatbuf_r>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	460c      	mov	r4, r1
 800cf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf4c:	2900      	cmp	r1, #0
 800cf4e:	b096      	sub	sp, #88	@ 0x58
 800cf50:	4615      	mov	r5, r2
 800cf52:	461e      	mov	r6, r3
 800cf54:	da0d      	bge.n	800cf72 <__swhatbuf_r+0x2e>
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cf5c:	f04f 0100 	mov.w	r1, #0
 800cf60:	bf14      	ite	ne
 800cf62:	2340      	movne	r3, #64	@ 0x40
 800cf64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cf68:	2000      	movs	r0, #0
 800cf6a:	6031      	str	r1, [r6, #0]
 800cf6c:	602b      	str	r3, [r5, #0]
 800cf6e:	b016      	add	sp, #88	@ 0x58
 800cf70:	bd70      	pop	{r4, r5, r6, pc}
 800cf72:	466a      	mov	r2, sp
 800cf74:	f000 f848 	bl	800d008 <_fstat_r>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	dbec      	blt.n	800cf56 <__swhatbuf_r+0x12>
 800cf7c:	9901      	ldr	r1, [sp, #4]
 800cf7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf86:	4259      	negs	r1, r3
 800cf88:	4159      	adcs	r1, r3
 800cf8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf8e:	e7eb      	b.n	800cf68 <__swhatbuf_r+0x24>

0800cf90 <__smakebuf_r>:
 800cf90:	898b      	ldrh	r3, [r1, #12]
 800cf92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf94:	079d      	lsls	r5, r3, #30
 800cf96:	4606      	mov	r6, r0
 800cf98:	460c      	mov	r4, r1
 800cf9a:	d507      	bpl.n	800cfac <__smakebuf_r+0x1c>
 800cf9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	6123      	str	r3, [r4, #16]
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	6163      	str	r3, [r4, #20]
 800cfa8:	b003      	add	sp, #12
 800cfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfac:	ab01      	add	r3, sp, #4
 800cfae:	466a      	mov	r2, sp
 800cfb0:	f7ff ffc8 	bl	800cf44 <__swhatbuf_r>
 800cfb4:	9f00      	ldr	r7, [sp, #0]
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	4639      	mov	r1, r7
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff f874 	bl	800c0a8 <_malloc_r>
 800cfc0:	b948      	cbnz	r0, 800cfd6 <__smakebuf_r+0x46>
 800cfc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfc6:	059a      	lsls	r2, r3, #22
 800cfc8:	d4ee      	bmi.n	800cfa8 <__smakebuf_r+0x18>
 800cfca:	f023 0303 	bic.w	r3, r3, #3
 800cfce:	f043 0302 	orr.w	r3, r3, #2
 800cfd2:	81a3      	strh	r3, [r4, #12]
 800cfd4:	e7e2      	b.n	800cf9c <__smakebuf_r+0xc>
 800cfd6:	89a3      	ldrh	r3, [r4, #12]
 800cfd8:	6020      	str	r0, [r4, #0]
 800cfda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfde:	81a3      	strh	r3, [r4, #12]
 800cfe0:	9b01      	ldr	r3, [sp, #4]
 800cfe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cfe6:	b15b      	cbz	r3, 800d000 <__smakebuf_r+0x70>
 800cfe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfec:	4630      	mov	r0, r6
 800cfee:	f000 f81d 	bl	800d02c <_isatty_r>
 800cff2:	b128      	cbz	r0, 800d000 <__smakebuf_r+0x70>
 800cff4:	89a3      	ldrh	r3, [r4, #12]
 800cff6:	f023 0303 	bic.w	r3, r3, #3
 800cffa:	f043 0301 	orr.w	r3, r3, #1
 800cffe:	81a3      	strh	r3, [r4, #12]
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	431d      	orrs	r5, r3
 800d004:	81a5      	strh	r5, [r4, #12]
 800d006:	e7cf      	b.n	800cfa8 <__smakebuf_r+0x18>

0800d008 <_fstat_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4d07      	ldr	r5, [pc, #28]	@ (800d028 <_fstat_r+0x20>)
 800d00c:	2300      	movs	r3, #0
 800d00e:	4604      	mov	r4, r0
 800d010:	4608      	mov	r0, r1
 800d012:	4611      	mov	r1, r2
 800d014:	602b      	str	r3, [r5, #0]
 800d016:	f7f5 fbd1 	bl	80027bc <_fstat>
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	d102      	bne.n	800d024 <_fstat_r+0x1c>
 800d01e:	682b      	ldr	r3, [r5, #0]
 800d020:	b103      	cbz	r3, 800d024 <_fstat_r+0x1c>
 800d022:	6023      	str	r3, [r4, #0]
 800d024:	bd38      	pop	{r3, r4, r5, pc}
 800d026:	bf00      	nop
 800d028:	20002204 	.word	0x20002204

0800d02c <_isatty_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4d06      	ldr	r5, [pc, #24]	@ (800d048 <_isatty_r+0x1c>)
 800d030:	2300      	movs	r3, #0
 800d032:	4604      	mov	r4, r0
 800d034:	4608      	mov	r0, r1
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	f7f5 fbd0 	bl	80027dc <_isatty>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_isatty_r+0x1a>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_isatty_r+0x1a>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	20002204 	.word	0x20002204

0800d04c <cosf>:
 800d04c:	ee10 3a10 	vmov	r3, s0
 800d050:	b507      	push	{r0, r1, r2, lr}
 800d052:	4a1e      	ldr	r2, [pc, #120]	@ (800d0cc <cosf+0x80>)
 800d054:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d058:	4293      	cmp	r3, r2
 800d05a:	d806      	bhi.n	800d06a <cosf+0x1e>
 800d05c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d0d0 <cosf+0x84>
 800d060:	b003      	add	sp, #12
 800d062:	f85d eb04 	ldr.w	lr, [sp], #4
 800d066:	f000 b87b 	b.w	800d160 <__kernel_cosf>
 800d06a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d06e:	d304      	bcc.n	800d07a <cosf+0x2e>
 800d070:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d074:	b003      	add	sp, #12
 800d076:	f85d fb04 	ldr.w	pc, [sp], #4
 800d07a:	4668      	mov	r0, sp
 800d07c:	f000 f910 	bl	800d2a0 <__ieee754_rem_pio2f>
 800d080:	f000 0003 	and.w	r0, r0, #3
 800d084:	2801      	cmp	r0, #1
 800d086:	d009      	beq.n	800d09c <cosf+0x50>
 800d088:	2802      	cmp	r0, #2
 800d08a:	d010      	beq.n	800d0ae <cosf+0x62>
 800d08c:	b9b0      	cbnz	r0, 800d0bc <cosf+0x70>
 800d08e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d092:	ed9d 0a00 	vldr	s0, [sp]
 800d096:	f000 f863 	bl	800d160 <__kernel_cosf>
 800d09a:	e7eb      	b.n	800d074 <cosf+0x28>
 800d09c:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0a0:	ed9d 0a00 	vldr	s0, [sp]
 800d0a4:	f000 f8b4 	bl	800d210 <__kernel_sinf>
 800d0a8:	eeb1 0a40 	vneg.f32	s0, s0
 800d0ac:	e7e2      	b.n	800d074 <cosf+0x28>
 800d0ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0b2:	ed9d 0a00 	vldr	s0, [sp]
 800d0b6:	f000 f853 	bl	800d160 <__kernel_cosf>
 800d0ba:	e7f5      	b.n	800d0a8 <cosf+0x5c>
 800d0bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0c0:	ed9d 0a00 	vldr	s0, [sp]
 800d0c4:	2001      	movs	r0, #1
 800d0c6:	f000 f8a3 	bl	800d210 <__kernel_sinf>
 800d0ca:	e7d3      	b.n	800d074 <cosf+0x28>
 800d0cc:	3f490fd8 	.word	0x3f490fd8
 800d0d0:	00000000 	.word	0x00000000

0800d0d4 <sinf>:
 800d0d4:	ee10 3a10 	vmov	r3, s0
 800d0d8:	b507      	push	{r0, r1, r2, lr}
 800d0da:	4a1f      	ldr	r2, [pc, #124]	@ (800d158 <sinf+0x84>)
 800d0dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d807      	bhi.n	800d0f4 <sinf+0x20>
 800d0e4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d15c <sinf+0x88>
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	b003      	add	sp, #12
 800d0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0f0:	f000 b88e 	b.w	800d210 <__kernel_sinf>
 800d0f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d0f8:	d304      	bcc.n	800d104 <sinf+0x30>
 800d0fa:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d0fe:	b003      	add	sp, #12
 800d100:	f85d fb04 	ldr.w	pc, [sp], #4
 800d104:	4668      	mov	r0, sp
 800d106:	f000 f8cb 	bl	800d2a0 <__ieee754_rem_pio2f>
 800d10a:	f000 0003 	and.w	r0, r0, #3
 800d10e:	2801      	cmp	r0, #1
 800d110:	d00a      	beq.n	800d128 <sinf+0x54>
 800d112:	2802      	cmp	r0, #2
 800d114:	d00f      	beq.n	800d136 <sinf+0x62>
 800d116:	b9c0      	cbnz	r0, 800d14a <sinf+0x76>
 800d118:	eddd 0a01 	vldr	s1, [sp, #4]
 800d11c:	ed9d 0a00 	vldr	s0, [sp]
 800d120:	2001      	movs	r0, #1
 800d122:	f000 f875 	bl	800d210 <__kernel_sinf>
 800d126:	e7ea      	b.n	800d0fe <sinf+0x2a>
 800d128:	eddd 0a01 	vldr	s1, [sp, #4]
 800d12c:	ed9d 0a00 	vldr	s0, [sp]
 800d130:	f000 f816 	bl	800d160 <__kernel_cosf>
 800d134:	e7e3      	b.n	800d0fe <sinf+0x2a>
 800d136:	eddd 0a01 	vldr	s1, [sp, #4]
 800d13a:	ed9d 0a00 	vldr	s0, [sp]
 800d13e:	2001      	movs	r0, #1
 800d140:	f000 f866 	bl	800d210 <__kernel_sinf>
 800d144:	eeb1 0a40 	vneg.f32	s0, s0
 800d148:	e7d9      	b.n	800d0fe <sinf+0x2a>
 800d14a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d14e:	ed9d 0a00 	vldr	s0, [sp]
 800d152:	f000 f805 	bl	800d160 <__kernel_cosf>
 800d156:	e7f5      	b.n	800d144 <sinf+0x70>
 800d158:	3f490fd8 	.word	0x3f490fd8
 800d15c:	00000000 	.word	0x00000000

0800d160 <__kernel_cosf>:
 800d160:	ee10 3a10 	vmov	r3, s0
 800d164:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d168:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d16c:	eef0 6a40 	vmov.f32	s13, s0
 800d170:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d174:	d204      	bcs.n	800d180 <__kernel_cosf+0x20>
 800d176:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d17a:	ee17 2a90 	vmov	r2, s15
 800d17e:	b342      	cbz	r2, 800d1d2 <__kernel_cosf+0x72>
 800d180:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d184:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d1f0 <__kernel_cosf+0x90>
 800d188:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d1f4 <__kernel_cosf+0x94>
 800d18c:	4a1a      	ldr	r2, [pc, #104]	@ (800d1f8 <__kernel_cosf+0x98>)
 800d18e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d192:	4293      	cmp	r3, r2
 800d194:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d1fc <__kernel_cosf+0x9c>
 800d198:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d19c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d200 <__kernel_cosf+0xa0>
 800d1a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d1a4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d204 <__kernel_cosf+0xa4>
 800d1a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d1ac:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d208 <__kernel_cosf+0xa8>
 800d1b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d1b4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d1b8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d1bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d1c0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1c8:	d804      	bhi.n	800d1d4 <__kernel_cosf+0x74>
 800d1ca:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d1ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d1d2:	4770      	bx	lr
 800d1d4:	4a0d      	ldr	r2, [pc, #52]	@ (800d20c <__kernel_cosf+0xac>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	bf9a      	itte	ls
 800d1da:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d1de:	ee07 3a10 	vmovls	s14, r3
 800d1e2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d1e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d1ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1ee:	e7ec      	b.n	800d1ca <__kernel_cosf+0x6a>
 800d1f0:	ad47d74e 	.word	0xad47d74e
 800d1f4:	310f74f6 	.word	0x310f74f6
 800d1f8:	3e999999 	.word	0x3e999999
 800d1fc:	b493f27c 	.word	0xb493f27c
 800d200:	37d00d01 	.word	0x37d00d01
 800d204:	bab60b61 	.word	0xbab60b61
 800d208:	3d2aaaab 	.word	0x3d2aaaab
 800d20c:	3f480000 	.word	0x3f480000

0800d210 <__kernel_sinf>:
 800d210:	ee10 3a10 	vmov	r3, s0
 800d214:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d218:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d21c:	d204      	bcs.n	800d228 <__kernel_sinf+0x18>
 800d21e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d222:	ee17 3a90 	vmov	r3, s15
 800d226:	b35b      	cbz	r3, 800d280 <__kernel_sinf+0x70>
 800d228:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d22c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d284 <__kernel_sinf+0x74>
 800d230:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d288 <__kernel_sinf+0x78>
 800d234:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d238:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d28c <__kernel_sinf+0x7c>
 800d23c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d240:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d290 <__kernel_sinf+0x80>
 800d244:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d248:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d294 <__kernel_sinf+0x84>
 800d24c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d250:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d254:	b930      	cbnz	r0, 800d264 <__kernel_sinf+0x54>
 800d256:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d298 <__kernel_sinf+0x88>
 800d25a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d25e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d262:	4770      	bx	lr
 800d264:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d268:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d26c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d270:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d274:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d29c <__kernel_sinf+0x8c>
 800d278:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d27c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	2f2ec9d3 	.word	0x2f2ec9d3
 800d288:	b2d72f34 	.word	0xb2d72f34
 800d28c:	3638ef1b 	.word	0x3638ef1b
 800d290:	b9500d01 	.word	0xb9500d01
 800d294:	3c088889 	.word	0x3c088889
 800d298:	be2aaaab 	.word	0xbe2aaaab
 800d29c:	3e2aaaab 	.word	0x3e2aaaab

0800d2a0 <__ieee754_rem_pio2f>:
 800d2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2a2:	ee10 6a10 	vmov	r6, s0
 800d2a6:	4b88      	ldr	r3, [pc, #544]	@ (800d4c8 <__ieee754_rem_pio2f+0x228>)
 800d2a8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d2ac:	429d      	cmp	r5, r3
 800d2ae:	b087      	sub	sp, #28
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	d805      	bhi.n	800d2c0 <__ieee754_rem_pio2f+0x20>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	ed80 0a00 	vstr	s0, [r0]
 800d2ba:	6043      	str	r3, [r0, #4]
 800d2bc:	2000      	movs	r0, #0
 800d2be:	e022      	b.n	800d306 <__ieee754_rem_pio2f+0x66>
 800d2c0:	4b82      	ldr	r3, [pc, #520]	@ (800d4cc <__ieee754_rem_pio2f+0x22c>)
 800d2c2:	429d      	cmp	r5, r3
 800d2c4:	d83a      	bhi.n	800d33c <__ieee754_rem_pio2f+0x9c>
 800d2c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d2ca:	2e00      	cmp	r6, #0
 800d2cc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d4d0 <__ieee754_rem_pio2f+0x230>
 800d2d0:	4a80      	ldr	r2, [pc, #512]	@ (800d4d4 <__ieee754_rem_pio2f+0x234>)
 800d2d2:	f023 030f 	bic.w	r3, r3, #15
 800d2d6:	dd18      	ble.n	800d30a <__ieee754_rem_pio2f+0x6a>
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d2de:	bf09      	itett	eq
 800d2e0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d4d8 <__ieee754_rem_pio2f+0x238>
 800d2e4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d4dc <__ieee754_rem_pio2f+0x23c>
 800d2e8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d4e0 <__ieee754_rem_pio2f+0x240>
 800d2ec:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d2f0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d2f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2f8:	ed80 7a00 	vstr	s14, [r0]
 800d2fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d300:	edc0 7a01 	vstr	s15, [r0, #4]
 800d304:	2001      	movs	r0, #1
 800d306:	b007      	add	sp, #28
 800d308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30a:	4293      	cmp	r3, r2
 800d30c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d310:	bf09      	itett	eq
 800d312:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d4d8 <__ieee754_rem_pio2f+0x238>
 800d316:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d4dc <__ieee754_rem_pio2f+0x23c>
 800d31a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d4e0 <__ieee754_rem_pio2f+0x240>
 800d31e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d322:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d326:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d32a:	ed80 7a00 	vstr	s14, [r0]
 800d32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d332:	edc0 7a01 	vstr	s15, [r0, #4]
 800d336:	f04f 30ff 	mov.w	r0, #4294967295
 800d33a:	e7e4      	b.n	800d306 <__ieee754_rem_pio2f+0x66>
 800d33c:	4b69      	ldr	r3, [pc, #420]	@ (800d4e4 <__ieee754_rem_pio2f+0x244>)
 800d33e:	429d      	cmp	r5, r3
 800d340:	d873      	bhi.n	800d42a <__ieee754_rem_pio2f+0x18a>
 800d342:	f000 f8dd 	bl	800d500 <fabsf>
 800d346:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d4e8 <__ieee754_rem_pio2f+0x248>
 800d34a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d34e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d35a:	ee17 0a90 	vmov	r0, s15
 800d35e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d4d0 <__ieee754_rem_pio2f+0x230>
 800d362:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d366:	281f      	cmp	r0, #31
 800d368:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d4dc <__ieee754_rem_pio2f+0x23c>
 800d36c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d370:	eeb1 6a47 	vneg.f32	s12, s14
 800d374:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d378:	ee16 1a90 	vmov	r1, s13
 800d37c:	dc09      	bgt.n	800d392 <__ieee754_rem_pio2f+0xf2>
 800d37e:	4a5b      	ldr	r2, [pc, #364]	@ (800d4ec <__ieee754_rem_pio2f+0x24c>)
 800d380:	1e47      	subs	r7, r0, #1
 800d382:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d386:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d38a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d38e:	4293      	cmp	r3, r2
 800d390:	d107      	bne.n	800d3a2 <__ieee754_rem_pio2f+0x102>
 800d392:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d396:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d39a:	2a08      	cmp	r2, #8
 800d39c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d3a0:	dc14      	bgt.n	800d3cc <__ieee754_rem_pio2f+0x12c>
 800d3a2:	6021      	str	r1, [r4, #0]
 800d3a4:	ed94 7a00 	vldr	s14, [r4]
 800d3a8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d3ac:	2e00      	cmp	r6, #0
 800d3ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d3b2:	ed84 0a01 	vstr	s0, [r4, #4]
 800d3b6:	daa6      	bge.n	800d306 <__ieee754_rem_pio2f+0x66>
 800d3b8:	eeb1 7a47 	vneg.f32	s14, s14
 800d3bc:	eeb1 0a40 	vneg.f32	s0, s0
 800d3c0:	ed84 7a00 	vstr	s14, [r4]
 800d3c4:	ed84 0a01 	vstr	s0, [r4, #4]
 800d3c8:	4240      	negs	r0, r0
 800d3ca:	e79c      	b.n	800d306 <__ieee754_rem_pio2f+0x66>
 800d3cc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d4d8 <__ieee754_rem_pio2f+0x238>
 800d3d0:	eef0 6a40 	vmov.f32	s13, s0
 800d3d4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d3d8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d3dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d3e0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d4e0 <__ieee754_rem_pio2f+0x240>
 800d3e4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d3e8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d3ec:	ee15 2a90 	vmov	r2, s11
 800d3f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d3f4:	1a5b      	subs	r3, r3, r1
 800d3f6:	2b19      	cmp	r3, #25
 800d3f8:	dc04      	bgt.n	800d404 <__ieee754_rem_pio2f+0x164>
 800d3fa:	edc4 5a00 	vstr	s11, [r4]
 800d3fe:	eeb0 0a66 	vmov.f32	s0, s13
 800d402:	e7cf      	b.n	800d3a4 <__ieee754_rem_pio2f+0x104>
 800d404:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d4f0 <__ieee754_rem_pio2f+0x250>
 800d408:	eeb0 0a66 	vmov.f32	s0, s13
 800d40c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d410:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d414:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d4f4 <__ieee754_rem_pio2f+0x254>
 800d418:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d41c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d420:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d424:	ed84 7a00 	vstr	s14, [r4]
 800d428:	e7bc      	b.n	800d3a4 <__ieee754_rem_pio2f+0x104>
 800d42a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d42e:	d306      	bcc.n	800d43e <__ieee754_rem_pio2f+0x19e>
 800d430:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d434:	edc0 7a01 	vstr	s15, [r0, #4]
 800d438:	edc0 7a00 	vstr	s15, [r0]
 800d43c:	e73e      	b.n	800d2bc <__ieee754_rem_pio2f+0x1c>
 800d43e:	15ea      	asrs	r2, r5, #23
 800d440:	3a86      	subs	r2, #134	@ 0x86
 800d442:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d44e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d4f8 <__ieee754_rem_pio2f+0x258>
 800d452:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d45a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d45e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d462:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d466:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d46a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d46e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d472:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d476:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d47e:	edcd 7a05 	vstr	s15, [sp, #20]
 800d482:	d11e      	bne.n	800d4c2 <__ieee754_rem_pio2f+0x222>
 800d484:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48c:	bf0c      	ite	eq
 800d48e:	2301      	moveq	r3, #1
 800d490:	2302      	movne	r3, #2
 800d492:	491a      	ldr	r1, [pc, #104]	@ (800d4fc <__ieee754_rem_pio2f+0x25c>)
 800d494:	9101      	str	r1, [sp, #4]
 800d496:	2102      	movs	r1, #2
 800d498:	9100      	str	r1, [sp, #0]
 800d49a:	a803      	add	r0, sp, #12
 800d49c:	4621      	mov	r1, r4
 800d49e:	f000 f837 	bl	800d510 <__kernel_rem_pio2f>
 800d4a2:	2e00      	cmp	r6, #0
 800d4a4:	f6bf af2f 	bge.w	800d306 <__ieee754_rem_pio2f+0x66>
 800d4a8:	edd4 7a00 	vldr	s15, [r4]
 800d4ac:	eef1 7a67 	vneg.f32	s15, s15
 800d4b0:	edc4 7a00 	vstr	s15, [r4]
 800d4b4:	edd4 7a01 	vldr	s15, [r4, #4]
 800d4b8:	eef1 7a67 	vneg.f32	s15, s15
 800d4bc:	edc4 7a01 	vstr	s15, [r4, #4]
 800d4c0:	e782      	b.n	800d3c8 <__ieee754_rem_pio2f+0x128>
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	e7e5      	b.n	800d492 <__ieee754_rem_pio2f+0x1f2>
 800d4c6:	bf00      	nop
 800d4c8:	3f490fd8 	.word	0x3f490fd8
 800d4cc:	4016cbe3 	.word	0x4016cbe3
 800d4d0:	3fc90f80 	.word	0x3fc90f80
 800d4d4:	3fc90fd0 	.word	0x3fc90fd0
 800d4d8:	37354400 	.word	0x37354400
 800d4dc:	37354443 	.word	0x37354443
 800d4e0:	2e85a308 	.word	0x2e85a308
 800d4e4:	43490f80 	.word	0x43490f80
 800d4e8:	3f22f984 	.word	0x3f22f984
 800d4ec:	0800df28 	.word	0x0800df28
 800d4f0:	2e85a300 	.word	0x2e85a300
 800d4f4:	248d3132 	.word	0x248d3132
 800d4f8:	43800000 	.word	0x43800000
 800d4fc:	0800dfa8 	.word	0x0800dfa8

0800d500 <fabsf>:
 800d500:	ee10 3a10 	vmov	r3, s0
 800d504:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d508:	ee00 3a10 	vmov	s0, r3
 800d50c:	4770      	bx	lr
	...

0800d510 <__kernel_rem_pio2f>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	ed2d 8b04 	vpush	{d8-d9}
 800d518:	b0d9      	sub	sp, #356	@ 0x164
 800d51a:	4690      	mov	r8, r2
 800d51c:	9001      	str	r0, [sp, #4]
 800d51e:	4ab9      	ldr	r2, [pc, #740]	@ (800d804 <__kernel_rem_pio2f+0x2f4>)
 800d520:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d522:	f118 0f04 	cmn.w	r8, #4
 800d526:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d52a:	460f      	mov	r7, r1
 800d52c:	f103 3bff 	add.w	fp, r3, #4294967295
 800d530:	db27      	blt.n	800d582 <__kernel_rem_pio2f+0x72>
 800d532:	f1b8 0203 	subs.w	r2, r8, #3
 800d536:	bf48      	it	mi
 800d538:	f108 0204 	addmi.w	r2, r8, #4
 800d53c:	10d2      	asrs	r2, r2, #3
 800d53e:	1c55      	adds	r5, r2, #1
 800d540:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d542:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d814 <__kernel_rem_pio2f+0x304>
 800d546:	00e8      	lsls	r0, r5, #3
 800d548:	eba2 060b 	sub.w	r6, r2, fp
 800d54c:	9002      	str	r0, [sp, #8]
 800d54e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d552:	eb0a 0c0b 	add.w	ip, sl, fp
 800d556:	ac1c      	add	r4, sp, #112	@ 0x70
 800d558:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d55c:	2000      	movs	r0, #0
 800d55e:	4560      	cmp	r0, ip
 800d560:	dd11      	ble.n	800d586 <__kernel_rem_pio2f+0x76>
 800d562:	a91c      	add	r1, sp, #112	@ 0x70
 800d564:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d568:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d56c:	f04f 0c00 	mov.w	ip, #0
 800d570:	45d4      	cmp	ip, sl
 800d572:	dc27      	bgt.n	800d5c4 <__kernel_rem_pio2f+0xb4>
 800d574:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d578:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d814 <__kernel_rem_pio2f+0x304>
 800d57c:	4606      	mov	r6, r0
 800d57e:	2400      	movs	r4, #0
 800d580:	e016      	b.n	800d5b0 <__kernel_rem_pio2f+0xa0>
 800d582:	2200      	movs	r2, #0
 800d584:	e7db      	b.n	800d53e <__kernel_rem_pio2f+0x2e>
 800d586:	42c6      	cmn	r6, r0
 800d588:	bf5d      	ittte	pl
 800d58a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d58e:	ee07 1a90 	vmovpl	s15, r1
 800d592:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d596:	eef0 7a47 	vmovmi.f32	s15, s14
 800d59a:	ece4 7a01 	vstmia	r4!, {s15}
 800d59e:	3001      	adds	r0, #1
 800d5a0:	e7dd      	b.n	800d55e <__kernel_rem_pio2f+0x4e>
 800d5a2:	ecfe 6a01 	vldmia	lr!, {s13}
 800d5a6:	ed96 7a00 	vldr	s14, [r6]
 800d5aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d5ae:	3401      	adds	r4, #1
 800d5b0:	455c      	cmp	r4, fp
 800d5b2:	f1a6 0604 	sub.w	r6, r6, #4
 800d5b6:	ddf4      	ble.n	800d5a2 <__kernel_rem_pio2f+0x92>
 800d5b8:	ece9 7a01 	vstmia	r9!, {s15}
 800d5bc:	f10c 0c01 	add.w	ip, ip, #1
 800d5c0:	3004      	adds	r0, #4
 800d5c2:	e7d5      	b.n	800d570 <__kernel_rem_pio2f+0x60>
 800d5c4:	a908      	add	r1, sp, #32
 800d5c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5ca:	9104      	str	r1, [sp, #16]
 800d5cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d5ce:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d810 <__kernel_rem_pio2f+0x300>
 800d5d2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d80c <__kernel_rem_pio2f+0x2fc>
 800d5d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d5da:	9203      	str	r2, [sp, #12]
 800d5dc:	4654      	mov	r4, sl
 800d5de:	00a2      	lsls	r2, r4, #2
 800d5e0:	9205      	str	r2, [sp, #20]
 800d5e2:	aa58      	add	r2, sp, #352	@ 0x160
 800d5e4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d5e8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d5ec:	a944      	add	r1, sp, #272	@ 0x110
 800d5ee:	aa08      	add	r2, sp, #32
 800d5f0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d5f4:	4694      	mov	ip, r2
 800d5f6:	4626      	mov	r6, r4
 800d5f8:	2e00      	cmp	r6, #0
 800d5fa:	f1a0 0004 	sub.w	r0, r0, #4
 800d5fe:	dc4c      	bgt.n	800d69a <__kernel_rem_pio2f+0x18a>
 800d600:	4628      	mov	r0, r5
 800d602:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d606:	f000 f9f5 	bl	800d9f4 <scalbnf>
 800d60a:	eeb0 8a40 	vmov.f32	s16, s0
 800d60e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d612:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d616:	f000 fa53 	bl	800dac0 <floorf>
 800d61a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d61e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d622:	2d00      	cmp	r5, #0
 800d624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d628:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d62c:	ee17 9a90 	vmov	r9, s15
 800d630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d634:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d638:	dd41      	ble.n	800d6be <__kernel_rem_pio2f+0x1ae>
 800d63a:	f104 3cff 	add.w	ip, r4, #4294967295
 800d63e:	a908      	add	r1, sp, #32
 800d640:	f1c5 0e08 	rsb	lr, r5, #8
 800d644:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d648:	fa46 f00e 	asr.w	r0, r6, lr
 800d64c:	4481      	add	r9, r0
 800d64e:	fa00 f00e 	lsl.w	r0, r0, lr
 800d652:	1a36      	subs	r6, r6, r0
 800d654:	f1c5 0007 	rsb	r0, r5, #7
 800d658:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d65c:	4106      	asrs	r6, r0
 800d65e:	2e00      	cmp	r6, #0
 800d660:	dd3c      	ble.n	800d6dc <__kernel_rem_pio2f+0x1cc>
 800d662:	f04f 0e00 	mov.w	lr, #0
 800d666:	f109 0901 	add.w	r9, r9, #1
 800d66a:	4670      	mov	r0, lr
 800d66c:	4574      	cmp	r4, lr
 800d66e:	dc68      	bgt.n	800d742 <__kernel_rem_pio2f+0x232>
 800d670:	2d00      	cmp	r5, #0
 800d672:	dd03      	ble.n	800d67c <__kernel_rem_pio2f+0x16c>
 800d674:	2d01      	cmp	r5, #1
 800d676:	d074      	beq.n	800d762 <__kernel_rem_pio2f+0x252>
 800d678:	2d02      	cmp	r5, #2
 800d67a:	d07d      	beq.n	800d778 <__kernel_rem_pio2f+0x268>
 800d67c:	2e02      	cmp	r6, #2
 800d67e:	d12d      	bne.n	800d6dc <__kernel_rem_pio2f+0x1cc>
 800d680:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d684:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d688:	b340      	cbz	r0, 800d6dc <__kernel_rem_pio2f+0x1cc>
 800d68a:	4628      	mov	r0, r5
 800d68c:	9306      	str	r3, [sp, #24]
 800d68e:	f000 f9b1 	bl	800d9f4 <scalbnf>
 800d692:	9b06      	ldr	r3, [sp, #24]
 800d694:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d698:	e020      	b.n	800d6dc <__kernel_rem_pio2f+0x1cc>
 800d69a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d69e:	3e01      	subs	r6, #1
 800d6a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6a8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d6ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d6b0:	ecac 0a01 	vstmia	ip!, {s0}
 800d6b4:	ed90 0a00 	vldr	s0, [r0]
 800d6b8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d6bc:	e79c      	b.n	800d5f8 <__kernel_rem_pio2f+0xe8>
 800d6be:	d105      	bne.n	800d6cc <__kernel_rem_pio2f+0x1bc>
 800d6c0:	1e60      	subs	r0, r4, #1
 800d6c2:	a908      	add	r1, sp, #32
 800d6c4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d6c8:	11f6      	asrs	r6, r6, #7
 800d6ca:	e7c8      	b.n	800d65e <__kernel_rem_pio2f+0x14e>
 800d6cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d6d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d8:	da31      	bge.n	800d73e <__kernel_rem_pio2f+0x22e>
 800d6da:	2600      	movs	r6, #0
 800d6dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e4:	f040 8098 	bne.w	800d818 <__kernel_rem_pio2f+0x308>
 800d6e8:	1e60      	subs	r0, r4, #1
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	4550      	cmp	r0, sl
 800d6ee:	da4b      	bge.n	800d788 <__kernel_rem_pio2f+0x278>
 800d6f0:	2a00      	cmp	r2, #0
 800d6f2:	d065      	beq.n	800d7c0 <__kernel_rem_pio2f+0x2b0>
 800d6f4:	3c01      	subs	r4, #1
 800d6f6:	ab08      	add	r3, sp, #32
 800d6f8:	3d08      	subs	r5, #8
 800d6fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d0f8      	beq.n	800d6f4 <__kernel_rem_pio2f+0x1e4>
 800d702:	4628      	mov	r0, r5
 800d704:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d708:	f000 f974 	bl	800d9f4 <scalbnf>
 800d70c:	1c63      	adds	r3, r4, #1
 800d70e:	aa44      	add	r2, sp, #272	@ 0x110
 800d710:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d810 <__kernel_rem_pio2f+0x300>
 800d714:	0099      	lsls	r1, r3, #2
 800d716:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d71a:	4623      	mov	r3, r4
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f280 80a9 	bge.w	800d874 <__kernel_rem_pio2f+0x364>
 800d722:	4623      	mov	r3, r4
 800d724:	2b00      	cmp	r3, #0
 800d726:	f2c0 80c7 	blt.w	800d8b8 <__kernel_rem_pio2f+0x3a8>
 800d72a:	aa44      	add	r2, sp, #272	@ 0x110
 800d72c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d730:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d808 <__kernel_rem_pio2f+0x2f8>
 800d734:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d814 <__kernel_rem_pio2f+0x304>
 800d738:	2000      	movs	r0, #0
 800d73a:	1ae2      	subs	r2, r4, r3
 800d73c:	e0b1      	b.n	800d8a2 <__kernel_rem_pio2f+0x392>
 800d73e:	2602      	movs	r6, #2
 800d740:	e78f      	b.n	800d662 <__kernel_rem_pio2f+0x152>
 800d742:	f852 1b04 	ldr.w	r1, [r2], #4
 800d746:	b948      	cbnz	r0, 800d75c <__kernel_rem_pio2f+0x24c>
 800d748:	b121      	cbz	r1, 800d754 <__kernel_rem_pio2f+0x244>
 800d74a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d74e:	f842 1c04 	str.w	r1, [r2, #-4]
 800d752:	2101      	movs	r1, #1
 800d754:	f10e 0e01 	add.w	lr, lr, #1
 800d758:	4608      	mov	r0, r1
 800d75a:	e787      	b.n	800d66c <__kernel_rem_pio2f+0x15c>
 800d75c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d760:	e7f5      	b.n	800d74e <__kernel_rem_pio2f+0x23e>
 800d762:	f104 3cff 	add.w	ip, r4, #4294967295
 800d766:	aa08      	add	r2, sp, #32
 800d768:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d76c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d770:	a908      	add	r1, sp, #32
 800d772:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d776:	e781      	b.n	800d67c <__kernel_rem_pio2f+0x16c>
 800d778:	f104 3cff 	add.w	ip, r4, #4294967295
 800d77c:	aa08      	add	r2, sp, #32
 800d77e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d782:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d786:	e7f3      	b.n	800d770 <__kernel_rem_pio2f+0x260>
 800d788:	a908      	add	r1, sp, #32
 800d78a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d78e:	3801      	subs	r0, #1
 800d790:	430a      	orrs	r2, r1
 800d792:	e7ab      	b.n	800d6ec <__kernel_rem_pio2f+0x1dc>
 800d794:	3201      	adds	r2, #1
 800d796:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d79a:	2e00      	cmp	r6, #0
 800d79c:	d0fa      	beq.n	800d794 <__kernel_rem_pio2f+0x284>
 800d79e:	9905      	ldr	r1, [sp, #20]
 800d7a0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d7a4:	eb0d 0001 	add.w	r0, sp, r1
 800d7a8:	18e6      	adds	r6, r4, r3
 800d7aa:	a91c      	add	r1, sp, #112	@ 0x70
 800d7ac:	f104 0c01 	add.w	ip, r4, #1
 800d7b0:	384c      	subs	r0, #76	@ 0x4c
 800d7b2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d7b6:	4422      	add	r2, r4
 800d7b8:	4562      	cmp	r2, ip
 800d7ba:	da04      	bge.n	800d7c6 <__kernel_rem_pio2f+0x2b6>
 800d7bc:	4614      	mov	r4, r2
 800d7be:	e70e      	b.n	800d5de <__kernel_rem_pio2f+0xce>
 800d7c0:	9804      	ldr	r0, [sp, #16]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	e7e7      	b.n	800d796 <__kernel_rem_pio2f+0x286>
 800d7c6:	9903      	ldr	r1, [sp, #12]
 800d7c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d7cc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d7d0:	9105      	str	r1, [sp, #20]
 800d7d2:	ee07 1a90 	vmov	s15, r1
 800d7d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7da:	2400      	movs	r4, #0
 800d7dc:	ece6 7a01 	vstmia	r6!, {s15}
 800d7e0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d814 <__kernel_rem_pio2f+0x304>
 800d7e4:	46b1      	mov	r9, r6
 800d7e6:	455c      	cmp	r4, fp
 800d7e8:	dd04      	ble.n	800d7f4 <__kernel_rem_pio2f+0x2e4>
 800d7ea:	ece0 7a01 	vstmia	r0!, {s15}
 800d7ee:	f10c 0c01 	add.w	ip, ip, #1
 800d7f2:	e7e1      	b.n	800d7b8 <__kernel_rem_pio2f+0x2a8>
 800d7f4:	ecfe 6a01 	vldmia	lr!, {s13}
 800d7f8:	ed39 7a01 	vldmdb	r9!, {s14}
 800d7fc:	3401      	adds	r4, #1
 800d7fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d802:	e7f0      	b.n	800d7e6 <__kernel_rem_pio2f+0x2d6>
 800d804:	0800e2ec 	.word	0x0800e2ec
 800d808:	0800e2c0 	.word	0x0800e2c0
 800d80c:	43800000 	.word	0x43800000
 800d810:	3b800000 	.word	0x3b800000
 800d814:	00000000 	.word	0x00000000
 800d818:	9b02      	ldr	r3, [sp, #8]
 800d81a:	eeb0 0a48 	vmov.f32	s0, s16
 800d81e:	eba3 0008 	sub.w	r0, r3, r8
 800d822:	f000 f8e7 	bl	800d9f4 <scalbnf>
 800d826:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d80c <__kernel_rem_pio2f+0x2fc>
 800d82a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d832:	db19      	blt.n	800d868 <__kernel_rem_pio2f+0x358>
 800d834:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d810 <__kernel_rem_pio2f+0x300>
 800d838:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d83c:	aa08      	add	r2, sp, #32
 800d83e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d842:	3508      	adds	r5, #8
 800d844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d848:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d84c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d850:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d854:	ee10 3a10 	vmov	r3, s0
 800d858:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d85c:	ee17 3a90 	vmov	r3, s15
 800d860:	3401      	adds	r4, #1
 800d862:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d866:	e74c      	b.n	800d702 <__kernel_rem_pio2f+0x1f2>
 800d868:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d86c:	aa08      	add	r2, sp, #32
 800d86e:	ee10 3a10 	vmov	r3, s0
 800d872:	e7f6      	b.n	800d862 <__kernel_rem_pio2f+0x352>
 800d874:	a808      	add	r0, sp, #32
 800d876:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d87a:	9001      	str	r0, [sp, #4]
 800d87c:	ee07 0a90 	vmov	s15, r0
 800d880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d884:	3b01      	subs	r3, #1
 800d886:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d88a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d88e:	ed62 7a01 	vstmdb	r2!, {s15}
 800d892:	e743      	b.n	800d71c <__kernel_rem_pio2f+0x20c>
 800d894:	ecfc 6a01 	vldmia	ip!, {s13}
 800d898:	ecb5 7a01 	vldmia	r5!, {s14}
 800d89c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	4550      	cmp	r0, sl
 800d8a4:	dc01      	bgt.n	800d8aa <__kernel_rem_pio2f+0x39a>
 800d8a6:	4282      	cmp	r2, r0
 800d8a8:	daf4      	bge.n	800d894 <__kernel_rem_pio2f+0x384>
 800d8aa:	a858      	add	r0, sp, #352	@ 0x160
 800d8ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d8b0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	e735      	b.n	800d724 <__kernel_rem_pio2f+0x214>
 800d8b8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	dc09      	bgt.n	800d8d2 <__kernel_rem_pio2f+0x3c2>
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	dc2b      	bgt.n	800d91a <__kernel_rem_pio2f+0x40a>
 800d8c2:	d044      	beq.n	800d94e <__kernel_rem_pio2f+0x43e>
 800d8c4:	f009 0007 	and.w	r0, r9, #7
 800d8c8:	b059      	add	sp, #356	@ 0x164
 800d8ca:	ecbd 8b04 	vpop	{d8-d9}
 800d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	d1f5      	bne.n	800d8c4 <__kernel_rem_pio2f+0x3b4>
 800d8d8:	aa30      	add	r2, sp, #192	@ 0xc0
 800d8da:	1f0b      	subs	r3, r1, #4
 800d8dc:	4413      	add	r3, r2
 800d8de:	461a      	mov	r2, r3
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f1a2 0204 	sub.w	r2, r2, #4
 800d8e8:	dc52      	bgt.n	800d990 <__kernel_rem_pio2f+0x480>
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	2a01      	cmp	r2, #1
 800d8ee:	f1a3 0304 	sub.w	r3, r3, #4
 800d8f2:	dc5d      	bgt.n	800d9b0 <__kernel_rem_pio2f+0x4a0>
 800d8f4:	ab30      	add	r3, sp, #192	@ 0xc0
 800d8f6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d814 <__kernel_rem_pio2f+0x304>
 800d8fa:	440b      	add	r3, r1
 800d8fc:	2c01      	cmp	r4, #1
 800d8fe:	dc67      	bgt.n	800d9d0 <__kernel_rem_pio2f+0x4c0>
 800d900:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d904:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d908:	2e00      	cmp	r6, #0
 800d90a:	d167      	bne.n	800d9dc <__kernel_rem_pio2f+0x4cc>
 800d90c:	edc7 6a00 	vstr	s13, [r7]
 800d910:	ed87 7a01 	vstr	s14, [r7, #4]
 800d914:	edc7 7a02 	vstr	s15, [r7, #8]
 800d918:	e7d4      	b.n	800d8c4 <__kernel_rem_pio2f+0x3b4>
 800d91a:	ab30      	add	r3, sp, #192	@ 0xc0
 800d91c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d814 <__kernel_rem_pio2f+0x304>
 800d920:	440b      	add	r3, r1
 800d922:	4622      	mov	r2, r4
 800d924:	2a00      	cmp	r2, #0
 800d926:	da24      	bge.n	800d972 <__kernel_rem_pio2f+0x462>
 800d928:	b34e      	cbz	r6, 800d97e <__kernel_rem_pio2f+0x46e>
 800d92a:	eef1 7a47 	vneg.f32	s15, s14
 800d92e:	edc7 7a00 	vstr	s15, [r7]
 800d932:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d93a:	aa31      	add	r2, sp, #196	@ 0xc4
 800d93c:	2301      	movs	r3, #1
 800d93e:	429c      	cmp	r4, r3
 800d940:	da20      	bge.n	800d984 <__kernel_rem_pio2f+0x474>
 800d942:	b10e      	cbz	r6, 800d948 <__kernel_rem_pio2f+0x438>
 800d944:	eef1 7a67 	vneg.f32	s15, s15
 800d948:	edc7 7a01 	vstr	s15, [r7, #4]
 800d94c:	e7ba      	b.n	800d8c4 <__kernel_rem_pio2f+0x3b4>
 800d94e:	ab30      	add	r3, sp, #192	@ 0xc0
 800d950:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d814 <__kernel_rem_pio2f+0x304>
 800d954:	440b      	add	r3, r1
 800d956:	2c00      	cmp	r4, #0
 800d958:	da05      	bge.n	800d966 <__kernel_rem_pio2f+0x456>
 800d95a:	b10e      	cbz	r6, 800d960 <__kernel_rem_pio2f+0x450>
 800d95c:	eef1 7a67 	vneg.f32	s15, s15
 800d960:	edc7 7a00 	vstr	s15, [r7]
 800d964:	e7ae      	b.n	800d8c4 <__kernel_rem_pio2f+0x3b4>
 800d966:	ed33 7a01 	vldmdb	r3!, {s14}
 800d96a:	3c01      	subs	r4, #1
 800d96c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d970:	e7f1      	b.n	800d956 <__kernel_rem_pio2f+0x446>
 800d972:	ed73 7a01 	vldmdb	r3!, {s15}
 800d976:	3a01      	subs	r2, #1
 800d978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d97c:	e7d2      	b.n	800d924 <__kernel_rem_pio2f+0x414>
 800d97e:	eef0 7a47 	vmov.f32	s15, s14
 800d982:	e7d4      	b.n	800d92e <__kernel_rem_pio2f+0x41e>
 800d984:	ecb2 7a01 	vldmia	r2!, {s14}
 800d988:	3301      	adds	r3, #1
 800d98a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d98e:	e7d6      	b.n	800d93e <__kernel_rem_pio2f+0x42e>
 800d990:	edd2 7a00 	vldr	s15, [r2]
 800d994:	edd2 6a01 	vldr	s13, [r2, #4]
 800d998:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d99c:	3801      	subs	r0, #1
 800d99e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9a2:	ed82 7a00 	vstr	s14, [r2]
 800d9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9aa:	edc2 7a01 	vstr	s15, [r2, #4]
 800d9ae:	e798      	b.n	800d8e2 <__kernel_rem_pio2f+0x3d2>
 800d9b0:	edd3 7a00 	vldr	s15, [r3]
 800d9b4:	edd3 6a01 	vldr	s13, [r3, #4]
 800d9b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d9bc:	3a01      	subs	r2, #1
 800d9be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9c2:	ed83 7a00 	vstr	s14, [r3]
 800d9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ca:	edc3 7a01 	vstr	s15, [r3, #4]
 800d9ce:	e78d      	b.n	800d8ec <__kernel_rem_pio2f+0x3dc>
 800d9d0:	ed33 7a01 	vldmdb	r3!, {s14}
 800d9d4:	3c01      	subs	r4, #1
 800d9d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9da:	e78f      	b.n	800d8fc <__kernel_rem_pio2f+0x3ec>
 800d9dc:	eef1 6a66 	vneg.f32	s13, s13
 800d9e0:	eeb1 7a47 	vneg.f32	s14, s14
 800d9e4:	edc7 6a00 	vstr	s13, [r7]
 800d9e8:	ed87 7a01 	vstr	s14, [r7, #4]
 800d9ec:	eef1 7a67 	vneg.f32	s15, s15
 800d9f0:	e790      	b.n	800d914 <__kernel_rem_pio2f+0x404>
 800d9f2:	bf00      	nop

0800d9f4 <scalbnf>:
 800d9f4:	ee10 3a10 	vmov	r3, s0
 800d9f8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d9fc:	d02b      	beq.n	800da56 <scalbnf+0x62>
 800d9fe:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800da02:	d302      	bcc.n	800da0a <scalbnf+0x16>
 800da04:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da08:	4770      	bx	lr
 800da0a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800da0e:	d123      	bne.n	800da58 <scalbnf+0x64>
 800da10:	4b24      	ldr	r3, [pc, #144]	@ (800daa4 <scalbnf+0xb0>)
 800da12:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800daa8 <scalbnf+0xb4>
 800da16:	4298      	cmp	r0, r3
 800da18:	ee20 0a27 	vmul.f32	s0, s0, s15
 800da1c:	db17      	blt.n	800da4e <scalbnf+0x5a>
 800da1e:	ee10 3a10 	vmov	r3, s0
 800da22:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800da26:	3a19      	subs	r2, #25
 800da28:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800da2c:	4288      	cmp	r0, r1
 800da2e:	dd15      	ble.n	800da5c <scalbnf+0x68>
 800da30:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800daac <scalbnf+0xb8>
 800da34:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800dab0 <scalbnf+0xbc>
 800da38:	ee10 3a10 	vmov	r3, s0
 800da3c:	eeb0 7a67 	vmov.f32	s14, s15
 800da40:	2b00      	cmp	r3, #0
 800da42:	bfb8      	it	lt
 800da44:	eef0 7a66 	vmovlt.f32	s15, s13
 800da48:	ee27 0a87 	vmul.f32	s0, s15, s14
 800da4c:	4770      	bx	lr
 800da4e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800dab4 <scalbnf+0xc0>
 800da52:	ee27 0a80 	vmul.f32	s0, s15, s0
 800da56:	4770      	bx	lr
 800da58:	0dd2      	lsrs	r2, r2, #23
 800da5a:	e7e5      	b.n	800da28 <scalbnf+0x34>
 800da5c:	4410      	add	r0, r2
 800da5e:	28fe      	cmp	r0, #254	@ 0xfe
 800da60:	dce6      	bgt.n	800da30 <scalbnf+0x3c>
 800da62:	2800      	cmp	r0, #0
 800da64:	dd06      	ble.n	800da74 <scalbnf+0x80>
 800da66:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800da6a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800da6e:	ee00 3a10 	vmov	s0, r3
 800da72:	4770      	bx	lr
 800da74:	f110 0f16 	cmn.w	r0, #22
 800da78:	da09      	bge.n	800da8e <scalbnf+0x9a>
 800da7a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800dab4 <scalbnf+0xc0>
 800da7e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800dab8 <scalbnf+0xc4>
 800da82:	ee10 3a10 	vmov	r3, s0
 800da86:	eeb0 7a67 	vmov.f32	s14, s15
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	e7d9      	b.n	800da42 <scalbnf+0x4e>
 800da8e:	3019      	adds	r0, #25
 800da90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800da94:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800da98:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800dabc <scalbnf+0xc8>
 800da9c:	ee07 3a90 	vmov	s15, r3
 800daa0:	e7d7      	b.n	800da52 <scalbnf+0x5e>
 800daa2:	bf00      	nop
 800daa4:	ffff3cb0 	.word	0xffff3cb0
 800daa8:	4c000000 	.word	0x4c000000
 800daac:	7149f2ca 	.word	0x7149f2ca
 800dab0:	f149f2ca 	.word	0xf149f2ca
 800dab4:	0da24260 	.word	0x0da24260
 800dab8:	8da24260 	.word	0x8da24260
 800dabc:	33000000 	.word	0x33000000

0800dac0 <floorf>:
 800dac0:	ee10 3a10 	vmov	r3, s0
 800dac4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dac8:	3a7f      	subs	r2, #127	@ 0x7f
 800daca:	2a16      	cmp	r2, #22
 800dacc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dad0:	dc2b      	bgt.n	800db2a <floorf+0x6a>
 800dad2:	2a00      	cmp	r2, #0
 800dad4:	da12      	bge.n	800dafc <floorf+0x3c>
 800dad6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800db3c <floorf+0x7c>
 800dada:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dade:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae6:	dd06      	ble.n	800daf6 <floorf+0x36>
 800dae8:	2b00      	cmp	r3, #0
 800daea:	da24      	bge.n	800db36 <floorf+0x76>
 800daec:	2900      	cmp	r1, #0
 800daee:	4b14      	ldr	r3, [pc, #80]	@ (800db40 <floorf+0x80>)
 800daf0:	bf08      	it	eq
 800daf2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800daf6:	ee00 3a10 	vmov	s0, r3
 800dafa:	4770      	bx	lr
 800dafc:	4911      	ldr	r1, [pc, #68]	@ (800db44 <floorf+0x84>)
 800dafe:	4111      	asrs	r1, r2
 800db00:	420b      	tst	r3, r1
 800db02:	d0fa      	beq.n	800dafa <floorf+0x3a>
 800db04:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800db3c <floorf+0x7c>
 800db08:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800db10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db14:	ddef      	ble.n	800daf6 <floorf+0x36>
 800db16:	2b00      	cmp	r3, #0
 800db18:	bfbe      	ittt	lt
 800db1a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800db1e:	fa40 f202 	asrlt.w	r2, r0, r2
 800db22:	189b      	addlt	r3, r3, r2
 800db24:	ea23 0301 	bic.w	r3, r3, r1
 800db28:	e7e5      	b.n	800daf6 <floorf+0x36>
 800db2a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800db2e:	d3e4      	bcc.n	800dafa <floorf+0x3a>
 800db30:	ee30 0a00 	vadd.f32	s0, s0, s0
 800db34:	4770      	bx	lr
 800db36:	2300      	movs	r3, #0
 800db38:	e7dd      	b.n	800daf6 <floorf+0x36>
 800db3a:	bf00      	nop
 800db3c:	7149f2ca 	.word	0x7149f2ca
 800db40:	bf800000 	.word	0xbf800000
 800db44:	007fffff 	.word	0x007fffff

0800db48 <_init>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	bf00      	nop
 800db4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4e:	bc08      	pop	{r3}
 800db50:	469e      	mov	lr, r3
 800db52:	4770      	bx	lr

0800db54 <_fini>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	bf00      	nop
 800db58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5a:	bc08      	pop	{r3}
 800db5c:	469e      	mov	lr, r3
 800db5e:	4770      	bx	lr
