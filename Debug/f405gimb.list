
f405gimb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d75c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800d8f0  0800d8f0  0000e8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0a8  0800e0a8  000102c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0a8  0800e0a8  0000f0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0b0  0800e0b0  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0b0  0800e0b0  0000f0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e0b4  0800e0b4  0000f0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800e0b8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00001ef0  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021b4  200021b4  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019017  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d42  00000000  00000000  0002930b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0002d050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001216  00000000  00000000  0002e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250bf  00000000  00000000  0002f9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e7c1  00000000  00000000  00054a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d51e2  00000000  00000000  0007325e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148440  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007670  00000000  00000000  00148484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0014faf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8d4 	.word	0x0800d8d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800d8d4 	.word	0x0800d8d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <AS5048_Transfer>:


extern SPI_HandleTypeDef hspi1;

uint16_t AS5048_Transfer(uint16_t data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
    uint8_t tx[2] = { data >> 8, data & 0xFF };
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	733b      	strb	r3, [r7, #12]
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2];

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2110      	movs	r1, #16
 8000f56:	4816      	ldr	r0, [pc, #88]	@ (8000fb0 <AS5048_Transfer+0x78>)
 8000f58:	f001 fe90 	bl	8002c7c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, &tx[0], &rx[0], 1, HAL_MAX_DELAY);
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	f107 010c 	add.w	r1, r7, #12
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <AS5048_Transfer+0x7c>)
 8000f6e:	f003 ff42 	bl	8004df6 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &tx[1], &rx[1], 1, HAL_MAX_DELAY);
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <AS5048_Transfer+0x7c>)
 8000f88:	f003 ff35 	bl	8004df6 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <AS5048_Transfer+0x78>)
 8000f92:	f001 fe73 	bl	8002c7c <HAL_GPIO_WritePin>

    return ((uint16_t)rx[0] << 8) | rx[1];
 8000f96:	7a3b      	ldrb	r3, [r7, #8]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	7a7b      	ldrb	r3, [r7, #9]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	b29b      	uxth	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	200003dc 	.word	0x200003dc

08000fb8 <AS5048_ReadAngle>:


float AS5048_ReadAngle(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	uint16_t res = AS5048_Transfer(AS5048_CMD_ANGLE | 0x4000);
 8000fbe:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8000fc2:	f7ff ffb9 	bl	8000f38 <AS5048_Transfer>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
	uint16_t res_transfer = res & 0x3FFF;
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fd0:	80bb      	strh	r3, [r7, #4]
	//return ((res_transfer / 8192.0f)) * 360.0f;
	return ((res_transfer / 8192.0f) - 1.0f) * 360.0f;
 8000fd2:	88bb      	ldrh	r3, [r7, #4]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fdc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001000 <AS5048_ReadAngle+0x48>
 8000fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fec:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001004 <AS5048_ReadAngle+0x4c>
 8000ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	46000000 	.word	0x46000000
 8001004:	43b40000 	.word	0x43b40000

08001008 <foc_direct>:

	return current;
}

Phasa foc_direct(float id_ref, float iq_ref, float angle_electric_rad)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b090      	sub	sp, #64	@ 0x40
 8001010:	af00      	add	r7, sp, #0
 8001012:	ed87 0a07 	vstr	s0, [r7, #28]
 8001016:	edc7 0a06 	vstr	s1, [r7, #24]
 800101a:	ed87 1a05 	vstr	s2, [r7, #20]
	Phasa phasa;
	float alpha = (id_ref * cosf(angle_electric_rad)) - (iq_ref * sinf(angle_electric_rad));
 800101e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001022:	f00b fed9 	bl	800cdd8 <cosf>
 8001026:	eeb0 7a40 	vmov.f32	s14, s0
 800102a:	edd7 7a07 	vldr	s15, [r7, #28]
 800102e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001032:	ed97 0a05 	vldr	s0, [r7, #20]
 8001036:	f00b ff13 	bl	800ce60 <sinf>
 800103a:	eeb0 7a40 	vmov.f32	s14, s0
 800103e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001046:	ee78 7a67 	vsub.f32	s15, s16, s15
 800104a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	float betta = (id_ref * sinf(angle_electric_rad)) + (iq_ref * cosf(angle_electric_rad));
 800104e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001052:	f00b ff05 	bl	800ce60 <sinf>
 8001056:	eeb0 7a40 	vmov.f32	s14, s0
 800105a:	edd7 7a07 	vldr	s15, [r7, #28]
 800105e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001062:	ed97 0a05 	vldr	s0, [r7, #20]
 8001066:	f00b feb7 	bl	800cdd8 <cosf>
 800106a:	eeb0 7a40 	vmov.f32	s14, s0
 800106e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001076:	ee78 7a27 	vadd.f32	s15, s16, s15
 800107a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	phasa.phasa_A = alpha;
 800107e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001080:	623b      	str	r3, [r7, #32]
	phasa.phasa_B = (-0.5 * alpha) + (sqrt(3)/2 * betta);
 8001082:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001084:	f7ff fa60 	bl	8000548 <__aeabi_f2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b56      	ldr	r3, [pc, #344]	@ (80011e8 <foc_direct+0x1e0>)
 800108e:	f7ff fab3 	bl	80005f8 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4614      	mov	r4, r2
 8001098:	461d      	mov	r5, r3
 800109a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800109c:	f7ff fa54 	bl	8000548 <__aeabi_f2d>
 80010a0:	a34f      	add	r3, pc, #316	@ (adr r3, 80011e0 <foc_direct+0x1d8>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff faa7 	bl	80005f8 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	f7ff f8eb 	bl	800028c <__adddf3>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd73 	bl	8000ba8 <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
	phasa.phasa_C = (-0.5 * alpha) - (sqrt(3)/2 * betta);
 80010c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010c8:	f7ff fa3e 	bl	8000548 <__aeabi_f2d>
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b45      	ldr	r3, [pc, #276]	@ (80011e8 <foc_direct+0x1e0>)
 80010d2:	f7ff fa91 	bl	80005f8 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4614      	mov	r4, r2
 80010dc:	461d      	mov	r5, r3
 80010de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80010e0:	f7ff fa32 	bl	8000548 <__aeabi_f2d>
 80010e4:	a33e      	add	r3, pc, #248	@ (adr r3, 80011e0 <foc_direct+0x1d8>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fa85 	bl	80005f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8c7 	bl	8000288 <__aeabi_dsub>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd51 	bl	8000ba8 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28

	phasa.phasa_A = phasa.phasa_A * 0.5 + 0.5;
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b35      	ldr	r3, [pc, #212]	@ (80011ec <foc_direct+0x1e4>)
 8001118:	f7ff fa6e 	bl	80005f8 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <foc_direct+0x1e4>)
 800112a:	f7ff f8af 	bl	800028c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fd37 	bl	8000ba8 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	623b      	str	r3, [r7, #32]
	phasa.phasa_B = phasa.phasa_B * 0.5 + 0.5;
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <foc_direct+0x1e4>)
 800114c:	f7ff fa54 	bl	80005f8 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <foc_direct+0x1e4>)
 800115e:	f7ff f895 	bl	800028c <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fd1d 	bl	8000ba8 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
	phasa.phasa_C = phasa.phasa_C * 0.5 + 0.5;
 8001172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9e7 	bl	8000548 <__aeabi_f2d>
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <foc_direct+0x1e4>)
 8001180:	f7ff fa3a 	bl	80005f8 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <foc_direct+0x1e4>)
 8001192:	f7ff f87b 	bl	800028c <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fd03 	bl	8000ba8 <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	return phasa;
 80011a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011aa:	f107 0220 	add.w	r2, r7, #32
 80011ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ba:	ee06 1a90 	vmov	s13, r1
 80011be:	ee07 2a10 	vmov	s14, r2
 80011c2:	ee07 3a90 	vmov	s15, r3
	//TIM1->CCR1 = TIM1->ARR*phasa_A;
	//TIM1->CCR2 = TIM1->ARR*phasa_B;
	//TIM1->CCR3 = TIM1->ARR*phasa_C;
}
 80011c6:	eeb0 0a66 	vmov.f32	s0, s13
 80011ca:	eef0 0a47 	vmov.f32	s1, s14
 80011ce:	eeb0 1a67 	vmov.f32	s2, s15
 80011d2:	3740      	adds	r7, #64	@ 0x40
 80011d4:	46bd      	mov	sp, r7
 80011d6:	ecbd 8b02 	vpop	{d8}
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	f3af 8000 	nop.w
 80011e0:	e8584caa 	.word	0xe8584caa
 80011e4:	3febb67a 	.word	0x3febb67a
 80011e8:	bfe00000 	.word	0xbfe00000
 80011ec:	3fe00000 	.word	0x3fe00000

080011f0 <send_usb_message>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_usb_message(const char *msg)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff f839 	bl	8000270 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f008 fb54 	bl	80098b0 <CDC_Transmit_FS>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001214:	b09a      	sub	sp, #104	@ 0x68
 8001216:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001218:	f000 feb8 	bl	8001f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121c:	f000 f90c 	bl	8001438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f000 fb34 	bl	800188c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001224:	f000 fa44 	bl	80016b0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001228:	f008 fa84 	bl	8009734 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800122c:	f000 f96e 	bl	800150c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001230:	f000 f9be 	bl	80015b0 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001234:	f000 fa0e 	bl	8001654 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001238:	f000 fa70 	bl	800171c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800123c:	2100      	movs	r1, #0
 800123e:	4872      	ldr	r0, [pc, #456]	@ (8001408 <main+0x1f8>)
 8001240:	f004 f906 	bl	8005450 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001244:	2104      	movs	r1, #4
 8001246:	4870      	ldr	r0, [pc, #448]	@ (8001408 <main+0x1f8>)
 8001248:	f004 f902 	bl	8005450 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800124c:	2108      	movs	r1, #8
 800124e:	486e      	ldr	r0, [pc, #440]	@ (8001408 <main+0x1f8>)
 8001250:	f004 f8fe 	bl	8005450 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8001254:	486d      	ldr	r0, [pc, #436]	@ (800140c <main+0x1fc>)
 8001256:	f000 ff73 	bl	8002140 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800125a:	486d      	ldr	r0, [pc, #436]	@ (8001410 <main+0x200>)
 800125c:	f000 ff70 	bl	8002140 <HAL_ADC_Start>
  uint32_t last_tick = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t last_tick1 = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	653b      	str	r3, [r7, #80]	@ 0x50

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2104      	movs	r1, #4
 800126c:	4869      	ldr	r0, [pc, #420]	@ (8001414 <main+0x204>)
 800126e:	f001 fd05 	bl	8002c7c <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_tick >= 1)
 8001272:	f000 fef1 	bl	8002058 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800127a:	4293      	cmp	r3, r2
 800127c:	d032      	beq.n	80012e4 <main+0xd4>
	  {
		last_tick = HAL_GetTick();
 800127e:	f000 feeb 	bl	8002058 <HAL_GetTick>
 8001282:	6578      	str	r0, [r7, #84]	@ 0x54
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2104      	movs	r1, #4
 8001288:	4862      	ldr	r0, [pc, #392]	@ (8001414 <main+0x204>)
 800128a:	f001 fcf7 	bl	8002c7c <HAL_GPIO_WritePin>
		angle = AS5048_ReadAngle();
 800128e:	f7ff fe93 	bl	8000fb8 <AS5048_ReadAngle>
 8001292:	eef0 7a40 	vmov.f32	s15, s0
 8001296:	4b60      	ldr	r3, [pc, #384]	@ (8001418 <main+0x208>)
 8001298:	edc3 7a00 	vstr	s15, [r3]
		char buffer[64]; // буфер для строки
		int len = sprintf(buffer, "%.3f;%.3f;%.3f\r\n",
		                  phasa.phasa_A,
 800129c:	4b5f      	ldr	r3, [pc, #380]	@ (800141c <main+0x20c>)
 800129e:	681b      	ldr	r3, [r3, #0]
		int len = sprintf(buffer, "%.3f;%.3f;%.3f\r\n",
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f951 	bl	8000548 <__aeabi_f2d>
 80012a6:	4680      	mov	r8, r0
 80012a8:	4689      	mov	r9, r1
		                  phasa.phasa_B,
 80012aa:	4b5c      	ldr	r3, [pc, #368]	@ (800141c <main+0x20c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
		int len = sprintf(buffer, "%.3f;%.3f;%.3f\r\n",
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f94a 	bl	8000548 <__aeabi_f2d>
 80012b4:	4604      	mov	r4, r0
 80012b6:	460d      	mov	r5, r1
		                  phasa.phasa_C);
 80012b8:	4b58      	ldr	r3, [pc, #352]	@ (800141c <main+0x20c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
		int len = sprintf(buffer, "%.3f;%.3f;%.3f\r\n",
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f943 	bl	8000548 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	1d38      	adds	r0, r7, #4
 80012c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012cc:	e9cd 4500 	strd	r4, r5, [sp]
 80012d0:	4642      	mov	r2, r8
 80012d2:	464b      	mov	r3, r9
 80012d4:	4952      	ldr	r1, [pc, #328]	@ (8001420 <main+0x210>)
 80012d6:	f009 fc51 	bl	800ab7c <siprintf>
 80012da:	64f8      	str	r0, [r7, #76]	@ 0x4c
	    send_usb_message(buffer);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff86 	bl	80011f0 <send_usb_message>
	  }
	  if (HAL_GetTick() - last_tick1 >= 1)
 80012e4:	f000 feb8 	bl	8002058 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d0bb      	beq.n	8001268 <main+0x58>
	  {
		last_tick1 = HAL_GetTick();
 80012f0:	f000 feb2 	bl	8002058 <HAL_GetTick>
 80012f4:	6538      	str	r0, [r7, #80]	@ 0x50
		float id_ref = 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	64bb      	str	r3, [r7, #72]	@ 0x48
		float iq_ref = 0.3;
 80012fc:	4b49      	ldr	r3, [pc, #292]	@ (8001424 <main+0x214>)
 80012fe:	647b      	str	r3, [r7, #68]	@ 0x44
		angle_raw = AS5048_Transfer(AS5048_CMD_ANGLE | 0x4000) & 0x3FFF;
 8001300:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8001304:	f7ff fe18 	bl	8000f38 <AS5048_Transfer>
 8001308:	4603      	mov	r3, r0
 800130a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b45      	ldr	r3, [pc, #276]	@ (8001428 <main+0x218>)
 8001312:	801a      	strh	r2, [r3, #0]
		raw = AS5048_ReadAngle();
 8001314:	f7ff fe50 	bl	8000fb8 <AS5048_ReadAngle>
 8001318:	eef0 7a40 	vmov.f32	s15, s0
 800131c:	4b43      	ldr	r3, [pc, #268]	@ (800142c <main+0x21c>)
 800131e:	edc3 7a00 	vstr	s15, [r3]
		angle = AS5048_ReadAngle() * 7 * PI/180;
 8001322:	f7ff fe49 	bl	8000fb8 <AS5048_ReadAngle>
 8001326:	eef0 7a40 	vmov.f32	s15, s0
 800132a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	a331      	add	r3, pc, #196	@ (adr r3, 8001400 <main+0x1f0>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f95a 	bl	80005f8 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <main+0x220>)
 8001352:	f7ff fa7b 	bl	800084c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc23 	bl	8000ba8 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a2c      	ldr	r2, [pc, #176]	@ (8001418 <main+0x208>)
 8001366:	6013      	str	r3, [r2, #0]
		phasa = foc_direct(id_ref, iq_ref, angle);
 8001368:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <main+0x208>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eeb0 1a67 	vmov.f32	s2, s15
 8001372:	edd7 0a11 	vldr	s1, [r7, #68]	@ 0x44
 8001376:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 800137a:	f7ff fe45 	bl	8001008 <foc_direct>
 800137e:	eef0 6a40 	vmov.f32	s13, s0
 8001382:	eeb0 7a60 	vmov.f32	s14, s1
 8001386:	eef0 7a41 	vmov.f32	s15, s2
 800138a:	4b24      	ldr	r3, [pc, #144]	@ (800141c <main+0x20c>)
 800138c:	edc3 6a00 	vstr	s13, [r3]
 8001390:	ed83 7a01 	vstr	s14, [r3, #4]
 8001394:	edc3 7a02 	vstr	s15, [r3, #8]
		TIM1->CCR1 = TIM1->ARR*phasa.phasa_A;
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <main+0x224>)
 800139a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <main+0x20c>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <main+0x224>)
 80013b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b4:	ee17 2a90 	vmov	r2, s15
 80013b8:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = TIM1->ARR*phasa.phasa_B;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <main+0x224>)
 80013bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <main+0x20c>)
 80013c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <main+0x224>)
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = TIM1->ARR*phasa.phasa_C;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <main+0x224>)
 80013de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <main+0x20c>)
 80013ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <main+0x224>)
 80013f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f8:	ee17 2a90 	vmov	r2, s15
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80013fe:	e733      	b.n	8001268 <main+0x58>
 8001400:	54411744 	.word	0x54411744
 8001404:	400921fb 	.word	0x400921fb
 8001408:	20000434 	.word	0x20000434
 800140c:	200002f8 	.word	0x200002f8
 8001410:	20000340 	.word	0x20000340
 8001414:	40020400 	.word	0x40020400
 8001418:	200002e0 	.word	0x200002e0
 800141c:	200002ec 	.word	0x200002ec
 8001420:	0800d8f0 	.word	0x0800d8f0
 8001424:	3e99999a 	.word	0x3e99999a
 8001428:	200002e4 	.word	0x200002e4
 800142c:	200002e8 	.word	0x200002e8
 8001430:	40668000 	.word	0x40668000
 8001434:	40010000 	.word	0x40010000

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	@ 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	2230      	movs	r2, #48	@ 0x30
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f009 fbfb 	bl	800ac42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <SystemClock_Config+0xcc>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4a27      	ldr	r2, [pc, #156]	@ (8001504 <SystemClock_Config+0xcc>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	@ 0x40
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <SystemClock_Config+0xcc>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <SystemClock_Config+0xd0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <SystemClock_Config+0xd0>)
 8001482:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <SystemClock_Config+0xd0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	2301      	movs	r3, #1
 8001496:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001498:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a8:	2304      	movs	r3, #4
 80014aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014ac:	23a8      	movs	r3, #168	@ 0xa8
 80014ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014b4:	2307      	movs	r3, #7
 80014b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 ff8d 	bl	80043dc <HAL_RCC_OscConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c8:	f000 fa54 	bl	8001974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014cc:	230f      	movs	r3, #15
 80014ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d0:	2302      	movs	r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80014d4:	2390      	movs	r3, #144	@ 0x90
 80014d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 f9ee 	bl	80048cc <HAL_RCC_ClockConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014f6:	f000 fa3d 	bl	8001974 <Error_Handler>
  }
}
 80014fa:	bf00      	nop
 80014fc:	3750      	adds	r7, #80	@ 0x50
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000

0800150c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001520:	4a21      	ldr	r2, [pc, #132]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <MX_ADC1_Init+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154a:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <MX_ADC1_Init+0x98>)
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <MX_ADC1_Init+0xa0>)
 800154e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001558:	2201      	movs	r2, #1
 800155a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_ADC1_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001566:	2201      	movs	r2, #1
 8001568:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800156a:	480e      	ldr	r0, [pc, #56]	@ (80015a4 <MX_ADC1_Init+0x98>)
 800156c:	f000 fda4 	bl	80020b8 <HAL_ADC_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 f9fd 	bl	8001974 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800157e:	2301      	movs	r3, #1
 8001580:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	@ (80015a4 <MX_ADC1_Init+0x98>)
 800158c:	f000 feaa 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001596:	f000 f9ed 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200002f8 	.word	0x200002f8
 80015a8:	40012000 	.word	0x40012000
 80015ac:	0f000001 	.word	0x0f000001

080015b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015c4:	4a21      	ldr	r2, [pc, #132]	@ (800164c <MX_ADC2_Init+0x9c>)
 80015c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015da:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015e0:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <MX_ADC2_Init+0xa0>)
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80015fa:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <MX_ADC2_Init+0x98>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_ADC2_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_ADC2_Init+0x98>)
 800160a:	2201      	movs	r2, #1
 800160c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800160e:	480e      	ldr	r0, [pc, #56]	@ (8001648 <MX_ADC2_Init+0x98>)
 8001610:	f000 fd52 	bl	80020b8 <HAL_ADC_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800161a:	f000 f9ab 	bl	8001974 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800161e:	2301      	movs	r3, #1
 8001620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	@ (8001648 <MX_ADC2_Init+0x98>)
 8001630:	f000 fe58 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800163a:	f000 f99b 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000340 	.word	0x20000340
 800164c:	40012100 	.word	0x40012100
 8001650:	0f000001 	.word	0x0f000001

08001654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800165a:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <MX_I2C1_Init+0x54>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <MX_I2C1_Init+0x58>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001692:	f001 fb0d 	bl	8002cb0 <HAL_I2C_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800169c:	f000 f96a 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000388 	.word	0x20000388
 80016a8:	40005400 	.word	0x40005400
 80016ac:	000186a0 	.word	0x000186a0

080016b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016b6:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <MX_SPI1_Init+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ba:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016d0:	2202      	movs	r2, #2
 80016d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016fc:	220a      	movs	r2, #10
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	@ (8001714 <MX_SPI1_Init+0x64>)
 8001702:	f003 faef 	bl	8004ce4 <HAL_SPI_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800170c:	f000 f932 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200003dc 	.word	0x200003dc
 8001718:	40013000 	.word	0x40013000

0800171c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b096      	sub	sp, #88	@ 0x58
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001722:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	615a      	str	r2, [r3, #20]
 800174c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2220      	movs	r2, #32
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f009 fa74 	bl	800ac42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800175a:	4b4a      	ldr	r3, [pc, #296]	@ (8001884 <MX_TIM1_Init+0x168>)
 800175c:	4a4a      	ldr	r2, [pc, #296]	@ (8001888 <MX_TIM1_Init+0x16c>)
 800175e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001760:	4b48      	ldr	r3, [pc, #288]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001762:	2200      	movs	r2, #0
 8001764:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001766:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001768:	2220      	movs	r2, #32
 800176a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800176c:	4b45      	ldr	r3, [pc, #276]	@ (8001884 <MX_TIM1_Init+0x168>)
 800176e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001772:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800177a:	4b42      	ldr	r3, [pc, #264]	@ (8001884 <MX_TIM1_Init+0x168>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b40      	ldr	r3, [pc, #256]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001786:	483f      	ldr	r0, [pc, #252]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001788:	f003 fdba 	bl	8005300 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001792:	f000 f8ef 	bl	8001974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017a0:	4619      	mov	r1, r3
 80017a2:	4838      	ldr	r0, [pc, #224]	@ (8001884 <MX_TIM1_Init+0x168>)
 80017a4:	f003 ffde 	bl	8005764 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017ae:	f000 f8e1 	bl	8001974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017b2:	4834      	ldr	r0, [pc, #208]	@ (8001884 <MX_TIM1_Init+0x168>)
 80017b4:	f003 fdf3 	bl	800539e <HAL_TIM_PWM_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017be:	f000 f8d9 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017ce:	4619      	mov	r1, r3
 80017d0:	482c      	ldr	r0, [pc, #176]	@ (8001884 <MX_TIM1_Init+0x168>)
 80017d2:	f004 fba5 	bl	8005f20 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017dc:	f000 f8ca 	bl	8001974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	2360      	movs	r3, #96	@ 0x60
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ec:	2300      	movs	r3, #0
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001800:	2200      	movs	r2, #0
 8001802:	4619      	mov	r1, r3
 8001804:	481f      	ldr	r0, [pc, #124]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001806:	f003 feeb 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001810:	f000 f8b0 	bl	8001974 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001818:	2204      	movs	r2, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4819      	ldr	r0, [pc, #100]	@ (8001884 <MX_TIM1_Init+0x168>)
 800181e:	f003 fedf 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001828:	f000 f8a4 	bl	8001974 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800182c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001830:	2208      	movs	r2, #8
 8001832:	4619      	mov	r1, r3
 8001834:	4813      	ldr	r0, [pc, #76]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001836:	f003 fed3 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001840:	f000 f898 	bl	8001974 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001858:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800185c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4619      	mov	r1, r3
 8001866:	4807      	ldr	r0, [pc, #28]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001868:	f004 fbd6 	bl	8006018 <HAL_TIMEx_ConfigBreakDeadTime>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001872:	f000 f87f 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001876:	4803      	ldr	r0, [pc, #12]	@ (8001884 <MX_TIM1_Init+0x168>)
 8001878:	f000 f9f0 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 800187c:	bf00      	nop
 800187e:	3758      	adds	r7, #88	@ 0x58
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000434 	.word	0x20000434
 8001888:	40010000 	.word	0x40010000

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b30      	ldr	r3, [pc, #192]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a28      	ldr	r2, [pc, #160]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a21      	ldr	r2, [pc, #132]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <MX_GPIO_Init+0xdc>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <MX_GPIO_Init+0xdc>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <MX_GPIO_Init+0xdc>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2110      	movs	r1, #16
 8001916:	4815      	ldr	r0, [pc, #84]	@ (800196c <MX_GPIO_Init+0xe0>)
 8001918:	f001 f9b0 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2104      	movs	r1, #4
 8001920:	4813      	ldr	r0, [pc, #76]	@ (8001970 <MX_GPIO_Init+0xe4>)
 8001922:	f001 f9ab 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001926:	2310      	movs	r3, #16
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480b      	ldr	r0, [pc, #44]	@ (800196c <MX_GPIO_Init+0xe0>)
 800193e:	f001 f801 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001942:	2304      	movs	r3, #4
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	@ (8001970 <MX_GPIO_Init+0xe4>)
 800195a:	f000 fff3 	bl	8002944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	@ 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
}
 800197a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <Error_Handler+0x8>

08001980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <HAL_MspInit+0x4c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	4a0f      	ldr	r2, [pc, #60]	@ (80019cc <HAL_MspInit+0x4c>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001994:	6453      	str	r3, [r2, #68]	@ 0x44
 8001996:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_MspInit+0x4c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <HAL_MspInit+0x4c>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	@ 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa8 <HAL_ADC_MspInit+0xd8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d128      	bne.n	8001a44 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a2c      	ldr	r2, [pc, #176]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a25      	ldr	r2, [pc, #148]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	481c      	ldr	r0, [pc, #112]	@ (8001ab0 <HAL_ADC_MspInit+0xe0>)
 8001a3e:	f000 ff81 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a42:	e02c      	b.n	8001a9e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab4 <HAL_ADC_MspInit+0xe4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d127      	bne.n	8001a9e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a15      	ldr	r2, [pc, #84]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a0e      	ldr	r2, [pc, #56]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <HAL_ADC_MspInit+0xdc>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <HAL_ADC_MspInit+0xe0>)
 8001a9a:	f000 ff53 	bl	8002944 <HAL_GPIO_Init>
}
 8001a9e:	bf00      	nop
 8001aa0:	3730      	adds	r7, #48	@ 0x30
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40012100 	.word	0x40012100

08001ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	@ (8001b3c <HAL_I2C_MspInit+0x84>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12b      	bne.n	8001b32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_I2C_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_I2C_MspInit+0x88>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_I2C_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af6:	23c0      	movs	r3, #192	@ 0xc0
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afa:	2312      	movs	r3, #18
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b06:	2304      	movs	r3, #4
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <HAL_I2C_MspInit+0x8c>)
 8001b12:	f000 ff17 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_I2C_MspInit+0x88>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <HAL_I2C_MspInit+0x88>)
 8001b20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_I2C_MspInit+0x88>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	@ 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400

08001b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a28      	ldr	r2, [pc, #160]	@ (8001c08 <HAL_SPI_MspInit+0xc0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d149      	bne.n	8001bfe <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a26      	ldr	r2, [pc, #152]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a18      	ldr	r2, [pc, #96]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bce:	2305      	movs	r3, #5
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <HAL_SPI_MspInit+0xc8>)
 8001bda:	f000 feb3 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bde:	2308      	movs	r3, #8
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4806      	ldr	r0, [pc, #24]	@ (8001c14 <HAL_SPI_MspInit+0xcc>)
 8001bfa:	f000 fea3 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	@ 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40013000 	.word	0x40013000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <HAL_TIM_Base_MspInit+0x3c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10d      	bne.n	8001c46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_TIM_Base_MspInit+0x40>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a09      	ldr	r2, [pc, #36]	@ (8001c58 <HAL_TIM_Base_MspInit+0x40>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <HAL_TIM_Base_MspInit+0x40>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40010000 	.word	0x40010000
 8001c58:	40023800 	.word	0x40023800

08001c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a22      	ldr	r2, [pc, #136]	@ (8001d04 <HAL_TIM_MspPostInit+0xa8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d13d      	bne.n	8001cfa <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a20      	ldr	r2, [pc, #128]	@ (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001cb6:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <HAL_TIM_MspPostInit+0xb0>)
 8001cd4:	f000 fe36 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001cd8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <HAL_TIM_MspPostInit+0xb4>)
 8001cf6:	f000 fe25 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	@ 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40010000 	.word	0x40010000
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	40020000 	.word	0x40020000

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <NMI_Handler+0x4>

08001d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <HardFault_Handler+0x4>

08001d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <MemManage_Handler+0x4>

08001d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <BusFault_Handler+0x4>

08001d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <UsageFault_Handler+0x4>

08001d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6a:	f000 f961 	bl	8002030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <OTG_FS_IRQHandler+0x10>)
 8001d7a:	f001 fa21 	bl	80031c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20001964 	.word	0x20001964

08001d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return 1;
 8001d8c:	2301      	movs	r3, #1
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_kill>:

int _kill(int pid, int sig)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da2:	f008 ffa1 	bl	800ace8 <__errno>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2216      	movs	r2, #22
 8001daa:	601a      	str	r2, [r3, #0]
  return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_exit>:

void _exit (int status)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ffe7 	bl	8001d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dca:	bf00      	nop
 8001dcc:	e7fd      	b.n	8001dca <_exit+0x12>

08001dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e00a      	b.n	8001df6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de0:	f3af 8000 	nop.w
 8001de4:	4601      	mov	r1, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbf0      	blt.n	8001de0 <_read+0x12>
  }

  return len;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e009      	b.n	8001e2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	60ba      	str	r2, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbf1      	blt.n	8001e1a <_write+0x12>
  }
  return len;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_close>:

int _close(int file)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e68:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_isatty>:

int _isatty(int file)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb0:	4a14      	ldr	r2, [pc, #80]	@ (8001f04 <_sbrk+0x5c>)
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <_sbrk+0x60>)
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <_sbrk+0x64>)
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <_sbrk+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d207      	bcs.n	8001ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed8:	f008 ff06 	bl	800ace8 <__errno>
 8001edc:	4603      	mov	r3, r0
 8001ede:	220c      	movs	r2, #12
 8001ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	e009      	b.n	8001efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <_sbrk+0x64>)
 8001ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20020000 	.word	0x20020000
 8001f08:	00000400 	.word	0x00000400
 8001f0c:	2000047c 	.word	0x2000047c
 8001f10:	200021b8 	.word	0x200021b8

08001f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <SystemInit+0x20>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <SystemInit+0x20>)
 8001f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f3c:	f7ff ffea 	bl	8001f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f40:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f42:	490d      	ldr	r1, [pc, #52]	@ (8001f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f58:	4c0a      	ldr	r4, [pc, #40]	@ (8001f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f66:	f008 fec5 	bl	800acf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6a:	f7ff f951 	bl	8001210 <main>
  bx  lr    
 8001f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f78:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001f7c:	0800e0b8 	.word	0x0800e0b8
  ldr r2, =_sbss
 8001f80:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001f84:	200021b4 	.word	0x200021b4

08001f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC_IRQHandler>
	...

08001f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	@ (8001fcc <HAL_Init+0x40>)
 8001f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_Init+0x40>)
 8001fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a07      	ldr	r2, [pc, #28]	@ (8001fcc <HAL_Init+0x40>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f000 fc83 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fba:	200f      	movs	r0, #15
 8001fbc:	f000 f808 	bl	8001fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc0:	f7ff fcde 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023c00 	.word	0x40023c00

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_InitTick+0x54>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_InitTick+0x58>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fc9b 	bl	800292a <HAL_SYSTICK_Config>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00e      	b.n	800201c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0f      	cmp	r3, #15
 8002002:	d80a      	bhi.n	800201a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002004:	2200      	movs	r2, #0
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f000 fc63 	bl	80028d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002010:	4a06      	ldr	r2, [pc, #24]	@ (800202c <HAL_InitTick+0x5c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000000 	.word	0x20000000
 8002028:	20000008 	.word	0x20000008
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_IncTick+0x20>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_IncTick+0x24>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <HAL_IncTick+0x24>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000008 	.word	0x20000008
 8002054:	20000480 	.word	0x20000480

08002058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <HAL_GetTick+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000480 	.word	0x20000480

08002070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff ffee 	bl	8002058 <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d005      	beq.n	8002096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208a:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_Delay+0x44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002096:	bf00      	nop
 8002098:	f7ff ffde 	bl	8002058 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8f7      	bhi.n	8002098 <HAL_Delay+0x28>
  {
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e033      	b.n	8002136 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fc7a 	bl	80019d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020fe:	f023 0302 	bic.w	r3, r3, #2
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fa0c 	bl	8002528 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	@ 0x40
 8002126:	e001      	b.n	800212c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_ADC_Start+0x1a>
 8002156:	2302      	movs	r3, #2
 8002158:	e0b2      	b.n	80022c0 <HAL_ADC_Start+0x180>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d018      	beq.n	80021a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002180:	4b52      	ldr	r3, [pc, #328]	@ (80022cc <HAL_ADC_Start+0x18c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_ADC_Start+0x190>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9a      	lsrs	r2, r3, #18
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002194:	e002      	b.n	800219c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3b01      	subs	r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f9      	bne.n	8002196 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d17a      	bne.n	80022a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ee:	d106      	bne.n	80021fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f4:	f023 0206 	bic.w	r2, r3, #6
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80021fc:	e002      	b.n	8002204 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800220c:	4b31      	ldr	r3, [pc, #196]	@ (80022d4 <HAL_ADC_Start+0x194>)
 800220e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002218:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2b00      	cmp	r3, #0
 8002224:	d12a      	bne.n	800227c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_ADC_Start+0x198>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d015      	beq.n	800225c <HAL_ADC_Start+0x11c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a29      	ldr	r2, [pc, #164]	@ (80022dc <HAL_ADC_Start+0x19c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d105      	bne.n	8002246 <HAL_ADC_Start+0x106>
 800223a:	4b26      	ldr	r3, [pc, #152]	@ (80022d4 <HAL_ADC_Start+0x194>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a25      	ldr	r2, [pc, #148]	@ (80022e0 <HAL_ADC_Start+0x1a0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d136      	bne.n	80022be <HAL_ADC_Start+0x17e>
 8002250:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <HAL_ADC_Start+0x194>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d130      	bne.n	80022be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d129      	bne.n	80022be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	e020      	b.n	80022be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a15      	ldr	r2, [pc, #84]	@ (80022d8 <HAL_ADC_Start+0x198>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11b      	bne.n	80022be <HAL_ADC_Start+0x17e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d114      	bne.n	80022be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	e00b      	b.n	80022be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f043 0210 	orr.w	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	20000000 	.word	0x20000000
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	40012300 	.word	0x40012300
 80022d8:	40012000 	.word	0x40012000
 80022dc:	40012100 	.word	0x40012100
 80022e0:	40012200 	.word	0x40012200

080022e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e105      	b.n	800250c <HAL_ADC_ConfigChannel+0x228>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b09      	cmp	r3, #9
 800230e:	d925      	bls.n	800235c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68d9      	ldr	r1, [r3, #12]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	3b1e      	subs	r3, #30
 8002326:	2207      	movs	r2, #7
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43da      	mvns	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	400a      	ands	r2, r1
 8002334:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68d9      	ldr	r1, [r3, #12]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	4603      	mov	r3, r0
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4403      	add	r3, r0
 800234e:	3b1e      	subs	r3, #30
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	e022      	b.n	80023a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	2207      	movs	r2, #7
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6919      	ldr	r1, [r3, #16]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	4603      	mov	r3, r0
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4403      	add	r3, r0
 8002398:	409a      	lsls	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d824      	bhi.n	80023f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b05      	subs	r3, #5
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b05      	subs	r3, #5
 80023e6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023f2:	e04c      	b.n	800248e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b0c      	cmp	r3, #12
 80023fa:	d824      	bhi.n	8002446 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b23      	subs	r3, #35	@ 0x23
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43da      	mvns	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	400a      	ands	r2, r1
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	3b23      	subs	r3, #35	@ 0x23
 8002438:	fa00 f203 	lsl.w	r2, r0, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
 8002444:	e023      	b.n	800248e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b41      	subs	r3, #65	@ 0x41
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	400a      	ands	r2, r1
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b41      	subs	r3, #65	@ 0x41
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800248e:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <HAL_ADC_ConfigChannel+0x234>)
 8002490:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a21      	ldr	r2, [pc, #132]	@ (800251c <HAL_ADC_ConfigChannel+0x238>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d109      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1cc>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	@ (800251c <HAL_ADC_ConfigChannel+0x238>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d123      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x21e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d003      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x1e6>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b11      	cmp	r3, #17
 80024c8:	d11b      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d111      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <HAL_ADC_ConfigChannel+0x23c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a10      	ldr	r2, [pc, #64]	@ (8002524 <HAL_ADC_ConfigChannel+0x240>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	0c9a      	lsrs	r2, r3, #18
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40012300 	.word	0x40012300
 800251c:	40012000 	.word	0x40012000
 8002520:	20000000 	.word	0x20000000
 8002524:	431bde83 	.word	0x431bde83

08002528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002530:	4b79      	ldr	r3, [pc, #484]	@ (8002718 <ADC_Init+0x1f0>)
 8002532:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	431a      	orrs	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800255c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	021a      	lsls	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6899      	ldr	r1, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	4a58      	ldr	r2, [pc, #352]	@ (800271c <ADC_Init+0x1f4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6899      	ldr	r1, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	e00f      	b.n	8002626 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002624:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0202 	bic.w	r2, r2, #2
 8002634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7e1b      	ldrb	r3, [r3, #24]
 8002640:	005a      	lsls	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002662:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	3b01      	subs	r3, #1
 8002680:	035a      	lsls	r2, r3, #13
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e007      	b.n	800269c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800269a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	051a      	lsls	r2, r3, #20
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026de:	025a      	lsls	r2, r3, #9
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	029a      	lsls	r2, r3, #10
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40012300 	.word	0x40012300
 800271c:	0f000001 	.word	0x0f000001

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4907      	ldr	r1, [pc, #28]	@ (80027bc <__NVIC_EnableIRQ+0x38>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	@ (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	@ (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	@ 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
         );
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	@ 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800288c:	d301      	bcc.n	8002892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288e:	2301      	movs	r3, #1
 8002890:	e00f      	b.n	80028b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <SysTick_Config+0x40>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289a:	210f      	movs	r1, #15
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f7ff ff8e 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <SysTick_Config+0x40>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028aa:	4b04      	ldr	r3, [pc, #16]	@ (80028bc <SysTick_Config+0x40>)
 80028ac:	2207      	movs	r2, #7
 80028ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	e000e010 	.word	0xe000e010

080028c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff29 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff3e 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff8e 	bl	8002814 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5d 	bl	80027c0 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff31 	bl	8002784 <__NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa2 	bl	800287c <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e16b      	b.n	8002c38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 815a 	bne.w	8002c32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	2b02      	cmp	r3, #2
 8002994:	d130      	bne.n	80029f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d017      	beq.n	8002a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80b4 	beq.w	8002c32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <HAL_GPIO_Init+0x30c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8002c50 <HAL_GPIO_Init+0x30c>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ada:	4b5d      	ldr	r3, [pc, #372]	@ (8002c50 <HAL_GPIO_Init+0x30c>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c54 <HAL_GPIO_Init+0x310>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_GPIO_Init+0x314>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02b      	beq.n	8002b6a <HAL_GPIO_Init+0x226>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a51      	ldr	r2, [pc, #324]	@ (8002c5c <HAL_GPIO_Init+0x318>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d025      	beq.n	8002b66 <HAL_GPIO_Init+0x222>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a50      	ldr	r2, [pc, #320]	@ (8002c60 <HAL_GPIO_Init+0x31c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01f      	beq.n	8002b62 <HAL_GPIO_Init+0x21e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4f      	ldr	r2, [pc, #316]	@ (8002c64 <HAL_GPIO_Init+0x320>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x21a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8002c68 <HAL_GPIO_Init+0x324>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x216>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4d      	ldr	r2, [pc, #308]	@ (8002c6c <HAL_GPIO_Init+0x328>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x212>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8002c70 <HAL_GPIO_Init+0x32c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x20e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4b      	ldr	r2, [pc, #300]	@ (8002c74 <HAL_GPIO_Init+0x330>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x20a>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00e      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b4e:	2308      	movs	r3, #8
 8002b50:	e00c      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b52:	2306      	movs	r3, #6
 8002b54:	e00a      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b56:	2305      	movs	r3, #5
 8002b58:	e008      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f002 0203 	and.w	r2, r2, #3
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b7c:	4935      	ldr	r1, [pc, #212]	@ (8002c54 <HAL_GPIO_Init+0x310>)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bae:	4a32      	ldr	r2, [pc, #200]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb4:	4b30      	ldr	r3, [pc, #192]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd8:	4a27      	ldr	r2, [pc, #156]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bde:	4b26      	ldr	r3, [pc, #152]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c02:	4a1d      	ldr	r2, [pc, #116]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c2c:	4a12      	ldr	r2, [pc, #72]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	f67f ae90 	bls.w	8002960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3724      	adds	r7, #36	@ 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40021400 	.word	0x40021400
 8002c70:	40021800 	.word	0x40021800
 8002c74:	40021c00 	.word	0x40021c00
 8002c78:	40013c00 	.word	0x40013c00

08002c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c98:	e003      	b.n	8002ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	041a      	lsls	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	619a      	str	r2, [r3, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e12b      	b.n	8002f1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe feee 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	@ 0x24
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d14:	f001 ffd2 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a81      	ldr	r2, [pc, #516]	@ (8002f24 <HAL_I2C_Init+0x274>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d807      	bhi.n	8002d34 <HAL_I2C_Init+0x84>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a80      	ldr	r2, [pc, #512]	@ (8002f28 <HAL_I2C_Init+0x278>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e006      	b.n	8002d42 <HAL_I2C_Init+0x92>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a7d      	ldr	r2, [pc, #500]	@ (8002f2c <HAL_I2C_Init+0x27c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0e7      	b.n	8002f1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a78      	ldr	r2, [pc, #480]	@ (8002f30 <HAL_I2C_Init+0x280>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0c9b      	lsrs	r3, r3, #18
 8002d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a6a      	ldr	r2, [pc, #424]	@ (8002f24 <HAL_I2C_Init+0x274>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d802      	bhi.n	8002d84 <HAL_I2C_Init+0xd4>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3301      	adds	r3, #1
 8002d82:	e009      	b.n	8002d98 <HAL_I2C_Init+0xe8>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	4a69      	ldr	r2, [pc, #420]	@ (8002f34 <HAL_I2C_Init+0x284>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	3301      	adds	r3, #1
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002daa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	495c      	ldr	r1, [pc, #368]	@ (8002f24 <HAL_I2C_Init+0x274>)
 8002db4:	428b      	cmp	r3, r1
 8002db6:	d819      	bhi.n	8002dec <HAL_I2C_Init+0x13c>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e59      	subs	r1, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc6:	1c59      	adds	r1, r3, #1
 8002dc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dcc:	400b      	ands	r3, r1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_I2C_Init+0x138>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e59      	subs	r1, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	e051      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002de8:	2304      	movs	r3, #4
 8002dea:	e04f      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <HAL_I2C_Init+0x168>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e012      	b.n	8002e3e <HAL_I2C_Init+0x18e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e58      	subs	r0, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	0099      	lsls	r1, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Init+0x196>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e022      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10e      	bne.n	8002e6c <HAL_I2C_Init+0x1bc>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e58      	subs	r0, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	440b      	add	r3, r1
 8002e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e6a:	e00f      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e58      	subs	r0, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	0099      	lsls	r1, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6809      	ldr	r1, [r1, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002eba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6911      	ldr	r1, [r2, #16]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68d2      	ldr	r2, [r2, #12]
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	000186a0 	.word	0x000186a0
 8002f28:	001e847f 	.word	0x001e847f
 8002f2c:	003d08ff 	.word	0x003d08ff
 8002f30:	431bde83 	.word	0x431bde83
 8002f34:	10624dd3 	.word	0x10624dd3

08002f38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e101      	b.n	800314e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f006 fddb 	bl	8009b20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f78:	d102      	bne.n	8002f80 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 f9b0 	bl	80062ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7c1a      	ldrb	r2, [r3, #16]
 8002f92:	f88d 2000 	strb.w	r2, [sp]
 8002f96:	3304      	adds	r3, #4
 8002f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9a:	f003 f88f 	bl	80060bc <USB_CoreInit>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0ce      	b.n	800314e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 f9a8 	bl	800630c <USB_SetCurrentMode>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0bf      	b.n	800314e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e04a      	b.n	800306a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3315      	adds	r3, #21
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	b298      	uxth	r0, r3
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	332e      	adds	r3, #46	@ 0x2e
 8003010:	4602      	mov	r2, r0
 8003012:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	3318      	adds	r3, #24
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	331c      	adds	r3, #28
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3320      	adds	r3, #32
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3324      	adds	r3, #36	@ 0x24
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	3301      	adds	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	791b      	ldrb	r3, [r3, #4]
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3af      	bcc.n	8002fd4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e044      	b.n	8003104 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	3301      	adds	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	791b      	ldrb	r3, [r3, #4]
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	429a      	cmp	r2, r3
 800310c:	d3b5      	bcc.n	800307a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7c1a      	ldrb	r2, [r3, #16]
 8003116:	f88d 2000 	strb.w	r2, [sp]
 800311a:	3304      	adds	r3, #4
 800311c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800311e:	f003 f941 	bl	80063a4 <USB_DevInit>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e00c      	b.n	800314e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f004 f98b 	bl	8007462 <USB_DevDisconnect>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_PCD_Start+0x1c>
 800316e:	2302      	movs	r3, #2
 8003170:	e022      	b.n	80031b8 <HAL_PCD_Start+0x62>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003192:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 f892 	bl	80062c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f004 f939 	bl	8007420 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b08d      	sub	sp, #52	@ 0x34
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 f9f7 	bl	80075ca <USB_GetMode>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 848c 	bne.w	8003afc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 f95b 	bl	80074a4 <USB_ReadInterrupts>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8482 	beq.w	8003afa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 f948 	bl	80074a4 <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	d107      	bne.n	800322e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f002 0202 	and.w	r2, r2, #2
 800322c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f004 f936 	bl	80074a4 <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b10      	cmp	r3, #16
 8003240:	d161      	bne.n	8003306 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0210 	bic.w	r2, r2, #16
 8003250:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	3304      	adds	r3, #4
 8003270:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	0c5b      	lsrs	r3, r3, #17
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	2b02      	cmp	r3, #2
 800327c:	d124      	bne.n	80032c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d035      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003298:	b29b      	uxth	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	6a38      	ldr	r0, [r7, #32]
 800329e:	f003 ff6d 	bl	800717c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ae:	441a      	add	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c0:	441a      	add	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	615a      	str	r2, [r3, #20]
 80032c6:	e016      	b.n	80032f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	0c5b      	lsrs	r3, r3, #17
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	2b06      	cmp	r3, #6
 80032d2:	d110      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032da:	2208      	movs	r2, #8
 80032dc:	4619      	mov	r1, r3
 80032de:	6a38      	ldr	r0, [r7, #32]
 80032e0:	f003 ff4c 	bl	800717c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f0:	441a      	add	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0210 	orr.w	r2, r2, #16
 8003304:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 f8ca 	bl	80074a4 <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003316:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800331a:	f040 80a7 	bne.w	800346c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f004 f8cf 	bl	80074ca <USB_ReadDevAllOutEpInterrupt>
 800332c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800332e:	e099      	b.n	8003464 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 808e 	beq.w	8003458 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f004 f8f3 	bl	8007532 <USB_ReadDevOutEPInterrupt>
 800334c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00c      	beq.n	8003372 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003364:	461a      	mov	r2, r3
 8003366:	2301      	movs	r3, #1
 8003368:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800336a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fea3 	bl	80040b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00c      	beq.n	8003396 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003388:	461a      	mov	r2, r3
 800338a:	2308      	movs	r3, #8
 800338c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800338e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 ff79 	bl	8004288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ac:	461a      	mov	r2, r3
 80033ae:	2310      	movs	r3, #16
 80033b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d030      	beq.n	800341e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c4:	2b80      	cmp	r3, #128	@ 0x80
 80033c6:	d109      	bne.n	80033dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	78db      	ldrb	r3, [r3, #3]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f006 fc90 	bl	8009d2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003418:	461a      	mov	r2, r3
 800341a:	2302      	movs	r3, #2
 800341c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003434:	461a      	mov	r2, r3
 8003436:	2320      	movs	r3, #32
 8003438:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003450:	461a      	mov	r2, r3
 8003452:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003456:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345a:	3301      	adds	r3, #1
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	f47f af62 	bne.w	8003330 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f004 f817 	bl	80074a4 <USB_ReadInterrupts>
 8003476:	4603      	mov	r3, r0
 8003478:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800347c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003480:	f040 80db 	bne.w	800363a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f004 f838 	bl	80074fe <USB_ReadDevAllInEpInterrupt>
 800348e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003494:	e0cd      	b.n	8003632 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80c2 	beq.w	8003626 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 f85e 	bl	800756e <USB_ReadDevInEPInterrupt>
 80034b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d057      	beq.n	800356e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	2201      	movs	r2, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69f9      	ldr	r1, [r7, #28]
 80034da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034de:	4013      	ands	r3, r2
 80034e0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ee:	461a      	mov	r2, r3
 80034f0:	2301      	movs	r3, #1
 80034f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	799b      	ldrb	r3, [r3, #6]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d132      	bne.n	8003562 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3320      	adds	r3, #32
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4403      	add	r3, r0
 800351c:	331c      	adds	r3, #28
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4419      	add	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4403      	add	r3, r0
 8003530:	3320      	adds	r3, #32
 8003532:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d113      	bne.n	8003562 <HAL_PCD_IRQHandler+0x3a2>
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3324      	adds	r3, #36	@ 0x24
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800355a:	461a      	mov	r2, r3
 800355c:	2101      	movs	r1, #1
 800355e:	f004 f865 	bl	800762c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	b2db      	uxtb	r3, r3
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f006 fb5a 	bl	8009c22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003584:	461a      	mov	r2, r3
 8003586:	2308      	movs	r3, #8
 8003588:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a0:	461a      	mov	r2, r3
 80035a2:	2310      	movs	r3, #16
 80035a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035bc:	461a      	mov	r2, r3
 80035be:	2340      	movs	r3, #64	@ 0x40
 80035c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d023      	beq.n	8003614 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035ce:	6a38      	ldr	r0, [r7, #32]
 80035d0:	f003 f84c 	bl	800666c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	3310      	adds	r3, #16
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	78db      	ldrb	r3, [r3, #3]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d108      	bne.n	8003602 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f006 fba7 	bl	8009d50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360e:	461a      	mov	r2, r3
 8003610:	2302      	movs	r3, #2
 8003612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800361e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fcbd 	bl	8003fa0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	3301      	adds	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	f47f af2e 	bne.w	8003496 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f003 ff30 	bl	80074a4 <USB_ReadInterrupts>
 8003644:	4603      	mov	r3, r0
 8003646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800364a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800364e:	d122      	bne.n	8003696 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800366a:	2b01      	cmp	r3, #1
 800366c:	d108      	bne.n	8003680 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003676:	2100      	movs	r1, #0
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fea3 	bl	80043c4 <HAL_PCDEx_LPM_Callback>
 800367e:	e002      	b.n	8003686 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f006 fb45 	bl	8009d10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f003 ff02 	bl	80074a4 <USB_ReadInterrupts>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036aa:	d112      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f006 fb01 	bl	8009cc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80036d0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f003 fee4 	bl	80074a4 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e6:	f040 80b7 	bne.w	8003858 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2110      	movs	r1, #16
 8003704:	4618      	mov	r0, r3
 8003706:	f002 ffb1 	bl	800666c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370a:	2300      	movs	r3, #0
 800370c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800370e:	e046      	b.n	800379e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371c:	461a      	mov	r2, r3
 800371e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003722:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	440a      	add	r2, r1
 800373a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800373e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003742:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003750:	461a      	mov	r2, r3
 8003752:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003756:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	440a      	add	r2, r1
 800376e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003772:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003776:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003788:	0151      	lsls	r1, r2, #5
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	440a      	add	r2, r1
 800378e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003792:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003796:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	3301      	adds	r3, #1
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	791b      	ldrb	r3, [r3, #4]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d3b2      	bcc.n	8003710 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037b8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80037bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7bdb      	ldrb	r3, [r3, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037d6:	f043 030b 	orr.w	r3, r3, #11
 80037da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ec:	f043 030b 	orr.w	r3, r3, #11
 80037f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f2:	e015      	b.n	8003820 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003802:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003806:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800380a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800381a:	f043 030b 	orr.w	r3, r3, #11
 800381e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800382e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003832:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003842:	461a      	mov	r2, r3
 8003844:	f003 fef2 	bl	800762c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f003 fe21 	bl	80074a4 <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386c:	d123      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f003 feb7 	bl	80075e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f002 ff6e 	bl	800675e <USB_GetDevSpeed>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681c      	ldr	r4, [r3, #0]
 800388e:	f001 fa09 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8003892:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003898:	461a      	mov	r2, r3
 800389a:	4620      	mov	r0, r4
 800389c:	f002 fc72 	bl	8006184 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f006 f9e6 	bl	8009c72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80038b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 fdf2 	bl	80074a4 <USB_ReadInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d10a      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f006 f9c3 	bl	8009c56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f002 0208 	and.w	r2, r2, #8
 80038de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 fddd 	bl	80074a4 <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f0:	2b80      	cmp	r3, #128	@ 0x80
 80038f2:	d123      	bne.n	800393c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003900:	2301      	movs	r3, #1
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
 8003904:	e014      	b.n	8003930 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	b2db      	uxtb	r3, r3
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fb0a 	bl	8003f3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	3301      	adds	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	791b      	ldrb	r3, [r3, #4]
 8003934:	461a      	mov	r2, r3
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	4293      	cmp	r3, r2
 800393a:	d3e4      	bcc.n	8003906 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fdaf 	bl	80074a4 <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800394c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003950:	d13c      	bne.n	80039cc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003952:	2301      	movs	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
 8003956:	e02b      	b.n	80039b0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	3318      	adds	r3, #24
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d115      	bne.n	80039aa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800397e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003980:	2b00      	cmp	r3, #0
 8003982:	da12      	bge.n	80039aa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	3317      	adds	r3, #23
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 faca 	bl	8003f3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	3301      	adds	r3, #1
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	791b      	ldrb	r3, [r3, #4]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d3cd      	bcc.n	8003958 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80039ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fd67 	bl	80074a4 <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039e0:	d156      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e2:	2301      	movs	r3, #1
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e6:	e045      	b.n	8003a74 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d12e      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da2b      	bge.n	8003a6e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	0c1a      	lsrs	r2, r3, #16
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a20:	4053      	eors	r3, r2
 8003a22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d121      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a6a:	6053      	str	r3, [r2, #4]
            break;
 8003a6c:	e008      	b.n	8003a80 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	3301      	adds	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	791b      	ldrb	r3, [r3, #4]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d3b3      	bcc.n	80039e8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 fd05 	bl	80074a4 <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa4:	d10a      	bne.n	8003abc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f006 f964 	bl	8009d74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 fcef 	bl	80074a4 <USB_ReadInterrupts>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d115      	bne.n	8003afc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f006 f954 	bl	8009d90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	e000      	b.n	8003afc <HAL_PCD_IRQHandler+0x93c>
      return;
 8003afa:	bf00      	nop
    }
  }
}
 8003afc:	3734      	adds	r7, #52	@ 0x34
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}

08003b02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_PCD_SetAddress+0x1a>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e012      	b.n	8003b42 <HAL_PCD_SetAddress+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f003 fc4e 	bl	80073d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
 8003b56:	461a      	mov	r2, r3
 8003b58:	4603      	mov	r3, r0
 8003b5a:	70fb      	strb	r3, [r7, #3]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	803b      	strh	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da0f      	bge.n	8003b90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	3310      	adds	r3, #16
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4413      	add	r3, r2
 8003b84:	3304      	adds	r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	705a      	strb	r2, [r3, #1]
 8003b8e:	e00f      	b.n	8003bb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 020f 	and.w	r2, r3, #15
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003bbc:	883b      	ldrh	r3, [r7, #0]
 8003bbe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	78ba      	ldrb	r2, [r7, #2]
 8003bca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	785b      	ldrb	r3, [r3, #1]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bde:	78bb      	ldrb	r3, [r7, #2]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d102      	bne.n	8003bea <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_PCD_EP_Open+0xae>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e00e      	b.n	8003c16 <HAL_PCD_EP_Open+0xcc>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 fdce 	bl	80067a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c14:	7afb      	ldrb	r3, [r7, #11]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da0f      	bge.n	8003c52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	f003 020f 	and.w	r2, r3, #15
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	3310      	adds	r3, #16
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	3304      	adds	r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	705a      	strb	r2, [r3, #1]
 8003c50:	e00f      	b.n	8003c72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_PCD_EP_Close+0x6e>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e00e      	b.n	8003caa <HAL_PCD_EP_Close+0x8c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68f9      	ldr	r1, [r7, #12]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f002 fe0c 	bl	80068b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc2:	7afb      	ldrb	r3, [r7, #11]
 8003cc4:	f003 020f 	and.w	r2, r3, #15
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf4:	7afb      	ldrb	r3, [r7, #11]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	799b      	ldrb	r3, [r3, #6]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d102      	bne.n	8003d0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	799b      	ldrb	r3, [r3, #6]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6979      	ldr	r1, [r7, #20]
 8003d1a:	f002 fea9 	bl	8006a70 <USB_EPStartXfer>

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	460b      	mov	r3, r1
 8003d66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d68:	7afb      	ldrb	r3, [r7, #11]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	3310      	adds	r3, #16
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2201      	movs	r2, #1
 8003d96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d98:	7afb      	ldrb	r3, [r7, #11]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	799b      	ldrb	r3, [r3, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d102      	bne.n	8003db2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	799b      	ldrb	r3, [r3, #6]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6979      	ldr	r1, [r7, #20]
 8003dbe:	f002 fe57 	bl	8006a70 <USB_EPStartXfer>

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	7912      	ldrb	r2, [r2, #4]
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e04f      	b.n	8003e8a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da0f      	bge.n	8003e12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	3310      	adds	r3, #16
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	3304      	adds	r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	705a      	strb	r2, [r3, #1]
 8003e10:	e00d      	b.n	8003e2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_PCD_EP_SetStall+0x82>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e01d      	b.n	8003e8a <HAL_PCD_EP_SetStall+0xbe>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f003 f9e5 	bl	800722c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7999      	ldrb	r1, [r3, #6]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f003 fbd6 	bl	800762c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	7912      	ldrb	r2, [r2, #4]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e042      	b.n	8003f36 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	da0f      	bge.n	8003ed8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 020f 	and.w	r2, r3, #15
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	3310      	adds	r3, #16
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	705a      	strb	r2, [r3, #1]
 8003ed6:	e00f      	b.n	8003ef8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 020f 	and.w	r2, r3, #15
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	3304      	adds	r3, #4
 8003ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_PCD_EP_ClrStall+0x86>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e00e      	b.n	8003f36 <HAL_PCD_EP_ClrStall+0xa4>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 f9ee 	bl	8007308 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da0c      	bge.n	8003f6c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	f003 020f 	and.w	r2, r3, #15
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	3310      	adds	r3, #16
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e00c      	b.n	8003f86 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	f003 020f 	and.w	r2, r3, #15
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	3304      	adds	r3, #4
 8003f84:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f003 f80d 	bl	8006fac <USB_EPStopXfer>
 8003f92:	4603      	mov	r3, r0
 8003f94:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f96:	7afb      	ldrb	r3, [r7, #11]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	@ 0x28
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	3310      	adds	r3, #16
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d901      	bls.n	8003fd8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e06b      	b.n	80040b0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d902      	bls.n	8003ff4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	3303      	adds	r3, #3
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ffc:	e02a      	b.n	8004054 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	429a      	cmp	r2, r3
 8004012:	d902      	bls.n	800401a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3303      	adds	r3, #3
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4603      	mov	r3, r0
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f003 f862 	bl	8007100 <USB_WritePacket>

    ep->xfer_buff  += len;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	441a      	add	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	441a      	add	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	429a      	cmp	r2, r3
 8004068:	d809      	bhi.n	800407e <PCD_WriteEmptyTxFifo+0xde>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004072:	429a      	cmp	r2, r3
 8004074:	d203      	bcs.n	800407e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1bf      	bne.n	8003ffe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	429a      	cmp	r2, r3
 8004088:	d811      	bhi.n	80040ae <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	2201      	movs	r2, #1
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	6939      	ldr	r1, [r7, #16]
 80040a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040aa:	4013      	ands	r3, r2
 80040ac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	333c      	adds	r3, #60	@ 0x3c
 80040d0:	3304      	adds	r3, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	799b      	ldrb	r3, [r3, #6]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d17b      	bne.n	80041e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d015      	beq.n	8004124 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4a61      	ldr	r2, [pc, #388]	@ (8004280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	f240 80b9 	bls.w	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80b3 	beq.w	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411a:	461a      	mov	r2, r3
 800411c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004120:	6093      	str	r3, [r2, #8]
 8004122:	e0a7      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413a:	461a      	mov	r2, r3
 800413c:	2320      	movs	r3, #32
 800413e:	6093      	str	r3, [r2, #8]
 8004140:	e098      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 8093 	bne.w	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	4a4b      	ldr	r2, [pc, #300]	@ (8004280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d90f      	bls.n	8004176 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004172:	6093      	str	r3, [r2, #8]
 8004174:	e07e      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	0159      	lsls	r1, r3, #5
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	440b      	add	r3, r1
 8004198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d114      	bne.n	80041d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041c0:	461a      	mov	r2, r3
 80041c2:	2101      	movs	r1, #1
 80041c4:	f003 fa32 	bl	800762c <USB_EP0_OutStart>
 80041c8:	e006      	b.n	80041d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	441a      	add	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f005 fd04 	bl	8009bec <HAL_PCD_DataOutStageCallback>
 80041e4:	e046      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d124      	bne.n	8004238 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004204:	461a      	mov	r2, r3
 8004206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800420a:	6093      	str	r3, [r2, #8]
 800420c:	e032      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004224:	461a      	mov	r2, r3
 8004226:	2320      	movs	r3, #32
 8004228:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f005 fcdb 	bl	8009bec <HAL_PCD_DataOutStageCallback>
 8004236:	e01d      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d114      	bne.n	8004268 <PCD_EP_OutXfrComplete_int+0x1b0>
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d108      	bne.n	8004268 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004260:	461a      	mov	r2, r3
 8004262:	2100      	movs	r1, #0
 8004264:	f003 f9e2 	bl	800762c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f005 fcbc 	bl	8009bec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	4f54300a 	.word	0x4f54300a
 8004284:	4f54310a 	.word	0x4f54310a

08004288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	333c      	adds	r3, #60	@ 0x3c
 80042a0:	3304      	adds	r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d90e      	bls.n	80042dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d4:	461a      	mov	r2, r3
 80042d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f005 fc73 	bl	8009bc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004310 <PCD_EP_OutSetupPacket_int+0x88>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d90c      	bls.n	8004304 <PCD_EP_OutSetupPacket_int+0x7c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	799b      	ldrb	r3, [r3, #6]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d108      	bne.n	8004304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042fc:	461a      	mov	r2, r3
 80042fe:	2101      	movs	r1, #1
 8004300:	f003 f994 	bl	800762c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	4f54300a 	.word	0x4f54300a

08004314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
 8004320:	4613      	mov	r3, r2
 8004322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004332:	883b      	ldrh	r3, [r7, #0]
 8004334:	0419      	lsls	r1, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	430a      	orrs	r2, r1
 800433e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004340:	e028      	b.n	8004394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	4413      	add	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	e00d      	b.n	8004372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	3340      	adds	r3, #64	@ 0x40
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4413      	add	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	3301      	adds	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	3b01      	subs	r3, #1
 8004378:	429a      	cmp	r2, r3
 800437a:	d3ec      	bcc.n	8004356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800437c:	883b      	ldrh	r3, [r7, #0]
 800437e:	0418      	lsls	r0, r3, #16
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	3b01      	subs	r3, #1
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	4302      	orrs	r2, r0
 800438c:	3340      	adds	r3, #64	@ 0x40
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e267      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d075      	beq.n	80044e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043fa:	4b88      	ldr	r3, [pc, #544]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b04      	cmp	r3, #4
 8004404:	d00c      	beq.n	8004420 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004406:	4b85      	ldr	r3, [pc, #532]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800440e:	2b08      	cmp	r3, #8
 8004410:	d112      	bne.n	8004438 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004412:	4b82      	ldr	r3, [pc, #520]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800441e:	d10b      	bne.n	8004438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	4b7e      	ldr	r3, [pc, #504]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05b      	beq.n	80044e4 <HAL_RCC_OscConfig+0x108>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d157      	bne.n	80044e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e242      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004440:	d106      	bne.n	8004450 <HAL_RCC_OscConfig+0x74>
 8004442:	4b76      	ldr	r3, [pc, #472]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a75      	ldr	r2, [pc, #468]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e01d      	b.n	800448c <HAL_RCC_OscConfig+0xb0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x98>
 800445a:	4b70      	ldr	r3, [pc, #448]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6f      	ldr	r2, [pc, #444]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b6d      	ldr	r3, [pc, #436]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6c      	ldr	r2, [pc, #432]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0xb0>
 8004474:	4b69      	ldr	r3, [pc, #420]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a68      	ldr	r2, [pc, #416]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b66      	ldr	r3, [pc, #408]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a65      	ldr	r2, [pc, #404]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fd fde0 	bl	8002058 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fd fddc 	bl	8002058 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	@ 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e207      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b5b      	ldr	r3, [pc, #364]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0xc0>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fd fdcc 	bl	8002058 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fd fdc8 	bl	8002058 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	@ 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1f3      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	4b51      	ldr	r3, [pc, #324]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0xe8>
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d063      	beq.n	80045ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044f2:	4b4a      	ldr	r3, [pc, #296]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fe:	4b47      	ldr	r3, [pc, #284]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004506:	2b08      	cmp	r3, #8
 8004508:	d11c      	bne.n	8004544 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450a:	4b44      	ldr	r3, [pc, #272]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	4b41      	ldr	r3, [pc, #260]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_RCC_OscConfig+0x152>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d001      	beq.n	800452e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e1c7      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	4b3b      	ldr	r3, [pc, #236]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4937      	ldr	r1, [pc, #220]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004542:	e03a      	b.n	80045ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454c:	4b34      	ldr	r3, [pc, #208]	@ (8004620 <HAL_RCC_OscConfig+0x244>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fd fd81 	bl	8002058 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455a:	f7fd fd7d 	bl	8002058 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e1a8      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456c:	4b2b      	ldr	r3, [pc, #172]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004578:	4b28      	ldr	r3, [pc, #160]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4925      	ldr	r1, [pc, #148]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]
 800458c:	e015      	b.n	80045ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800458e:	4b24      	ldr	r3, [pc, #144]	@ (8004620 <HAL_RCC_OscConfig+0x244>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd fd60 	bl	8002058 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800459c:	f7fd fd5c 	bl	8002058 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e187      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d036      	beq.n	8004634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ce:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <HAL_RCC_OscConfig+0x248>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd fd40 	bl	8002058 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045dc:	f7fd fd3c 	bl	8002058 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e167      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80045f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x200>
 80045fa:	e01b      	b.n	8004634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045fc:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_OscConfig+0x248>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fd fd29 	bl	8002058 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004608:	e00e      	b.n	8004628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800460a:	f7fd fd25 	bl	8002058 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d907      	bls.n	8004628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e150      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
 800461c:	40023800 	.word	0x40023800
 8004620:	42470000 	.word	0x42470000
 8004624:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004628:	4b88      	ldr	r3, [pc, #544]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 800462a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ea      	bne.n	800460a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8097 	beq.w	8004770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004646:	4b81      	ldr	r3, [pc, #516]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10f      	bne.n	8004672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	4b7d      	ldr	r3, [pc, #500]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	4a7c      	ldr	r2, [pc, #496]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004660:	6413      	str	r3, [r2, #64]	@ 0x40
 8004662:	4b7a      	ldr	r3, [pc, #488]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004672:	4b77      	ldr	r3, [pc, #476]	@ (8004850 <HAL_RCC_OscConfig+0x474>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d118      	bne.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467e:	4b74      	ldr	r3, [pc, #464]	@ (8004850 <HAL_RCC_OscConfig+0x474>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a73      	ldr	r2, [pc, #460]	@ (8004850 <HAL_RCC_OscConfig+0x474>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468a:	f7fd fce5 	bl	8002058 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004692:	f7fd fce1 	bl	8002058 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e10c      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004850 <HAL_RCC_OscConfig+0x474>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d106      	bne.n	80046c6 <HAL_RCC_OscConfig+0x2ea>
 80046b8:	4b64      	ldr	r3, [pc, #400]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046bc:	4a63      	ldr	r2, [pc, #396]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c4:	e01c      	b.n	8004700 <HAL_RCC_OscConfig+0x324>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x30c>
 80046ce:	4b5f      	ldr	r3, [pc, #380]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	4a5e      	ldr	r2, [pc, #376]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046d4:	f043 0304 	orr.w	r3, r3, #4
 80046d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046da:	4b5c      	ldr	r3, [pc, #368]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	4a5b      	ldr	r2, [pc, #364]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0x324>
 80046e8:	4b58      	ldr	r3, [pc, #352]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ec:	4a57      	ldr	r2, [pc, #348]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f4:	4b55      	ldr	r3, [pc, #340]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	4a54      	ldr	r2, [pc, #336]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046fa:	f023 0304 	bic.w	r3, r3, #4
 80046fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d015      	beq.n	8004734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fd fca6 	bl	8002058 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd fca2 	bl	8002058 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e0cb      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	4b49      	ldr	r3, [pc, #292]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ee      	beq.n	8004710 <HAL_RCC_OscConfig+0x334>
 8004732:	e014      	b.n	800475e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004734:	f7fd fc90 	bl	8002058 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473c:	f7fd fc8c 	bl	8002058 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0b5      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004752:	4b3e      	ldr	r3, [pc, #248]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ee      	bne.n	800473c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d105      	bne.n	8004770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004764:	4b39      	ldr	r3, [pc, #228]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	4a38      	ldr	r2, [pc, #224]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a1 	beq.w	80048bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800477a:	4b34      	ldr	r3, [pc, #208]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b08      	cmp	r3, #8
 8004784:	d05c      	beq.n	8004840 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d141      	bne.n	8004812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b31      	ldr	r3, [pc, #196]	@ (8004854 <HAL_RCC_OscConfig+0x478>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd fc60 	bl	8002058 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fc5c 	bl	8002058 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e087      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b27      	ldr	r3, [pc, #156]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	019b      	lsls	r3, r3, #6
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	3b01      	subs	r3, #1
 80047d4:	041b      	lsls	r3, r3, #16
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	491b      	ldr	r1, [pc, #108]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004854 <HAL_RCC_OscConfig+0x478>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fd fc35 	bl	8002058 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fd fc31 	bl	8002058 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e05c      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004804:	4b11      	ldr	r3, [pc, #68]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0x416>
 8004810:	e054      	b.n	80048bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <HAL_RCC_OscConfig+0x478>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fd fc1e 	bl	8002058 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004820:	f7fd fc1a 	bl	8002058 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e045      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x444>
 800483e:	e03d      	b.n	80048bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d107      	bne.n	8004858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e038      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
 800484c:	40023800 	.word	0x40023800
 8004850:	40007000 	.word	0x40007000
 8004854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004858:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <HAL_RCC_OscConfig+0x4ec>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d028      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d121      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d11a      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800488e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004890:	4293      	cmp	r3, r2
 8004892:	d111      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	3b01      	subs	r3, #1
 80048a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0cc      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e0:	4b68      	ldr	r3, [pc, #416]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d90c      	bls.n	8004908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b65      	ldr	r3, [pc, #404]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b63      	ldr	r3, [pc, #396]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0b8      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d020      	beq.n	8004956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004920:	4b59      	ldr	r3, [pc, #356]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a58      	ldr	r2, [pc, #352]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800492a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004938:	4b53      	ldr	r3, [pc, #332]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a52      	ldr	r2, [pc, #328]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004944:	4b50      	ldr	r3, [pc, #320]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	494d      	ldr	r1, [pc, #308]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d044      	beq.n	80049ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b47      	ldr	r3, [pc, #284]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d119      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e07f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d003      	beq.n	800498a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004986:	2b03      	cmp	r3, #3
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e067      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049aa:	4b37      	ldr	r3, [pc, #220]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 0203 	bic.w	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4934      	ldr	r1, [pc, #208]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049bc:	f7fd fb4c 	bl	8002058 <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	e00a      	b.n	80049da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c4:	f7fd fb48 	bl	8002058 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e04f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	4b2b      	ldr	r3, [pc, #172]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 020c 	and.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d1eb      	bne.n	80049c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049ec:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d20c      	bcs.n	8004a14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fa:	4b22      	ldr	r3, [pc, #136]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b20      	ldr	r3, [pc, #128]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e032      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a20:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4916      	ldr	r1, [pc, #88]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a3e:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	490e      	ldr	r1, [pc, #56]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a52:	f000 f821 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	490a      	ldr	r1, [pc, #40]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c0>)
 8004a64:	5ccb      	ldrb	r3, [r1, r3]
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	4a09      	ldr	r2, [pc, #36]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a6e:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd faac 	bl	8001fd0 <HAL_InitTick>

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023c00 	.word	0x40023c00
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	0800d94c 	.word	0x0800d94c
 8004a90:	20000000 	.word	0x20000000
 8004a94:	20000004 	.word	0x20000004

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a9c:	b094      	sub	sp, #80	@ 0x50
 8004a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab0:	4b79      	ldr	r3, [pc, #484]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d00d      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	f200 80e1 	bhi.w	8004c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x34>
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aca:	e0db      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004acc:	4b73      	ldr	r3, [pc, #460]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ad0:	e0db      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ad2:	4b73      	ldr	r3, [pc, #460]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ad6:	e0d8      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ae0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d063      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aee:	4b6a      	ldr	r3, [pc, #424]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	099b      	lsrs	r3, r3, #6
 8004af4:	2200      	movs	r2, #0
 8004af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004af8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b02:	2300      	movs	r3, #0
 8004b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	f04f 0000 	mov.w	r0, #0
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	0159      	lsls	r1, r3, #5
 8004b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1c:	0150      	lsls	r0, r2, #5
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4621      	mov	r1, r4
 8004b24:	1a51      	subs	r1, r2, r1
 8004b26:	6139      	str	r1, [r7, #16]
 8004b28:	4629      	mov	r1, r5
 8004b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	018b      	lsls	r3, r1, #6
 8004b40:	4651      	mov	r1, sl
 8004b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b46:	4651      	mov	r1, sl
 8004b48:	018a      	lsls	r2, r1, #6
 8004b4a:	4651      	mov	r1, sl
 8004b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b50:	4659      	mov	r1, fp
 8004b52:	eb63 0901 	sbc.w	r9, r3, r1
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b6a:	4690      	mov	r8, r2
 8004b6c:	4699      	mov	r9, r3
 8004b6e:	4623      	mov	r3, r4
 8004b70:	eb18 0303 	adds.w	r3, r8, r3
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	462b      	mov	r3, r5
 8004b78:	eb49 0303 	adc.w	r3, r9, r3
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	024b      	lsls	r3, r1, #9
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b94:	4621      	mov	r1, r4
 8004b96:	024a      	lsls	r2, r1, #9
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ba8:	f7fc f84e 	bl	8000c48 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb4:	e058      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb6:	4b38      	ldr	r3, [pc, #224]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bc6:	623b      	str	r3, [r7, #32]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	0159      	lsls	r1, r3, #5
 8004bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be2:	0150      	lsls	r0, r2, #5
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4641      	mov	r1, r8
 8004bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bee:	4649      	mov	r1, r9
 8004bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c08:	ebb2 040a 	subs.w	r4, r2, sl
 8004c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	00eb      	lsls	r3, r5, #3
 8004c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c1e:	00e2      	lsls	r2, r4, #3
 8004c20:	4614      	mov	r4, r2
 8004c22:	461d      	mov	r5, r3
 8004c24:	4643      	mov	r3, r8
 8004c26:	18e3      	adds	r3, r4, r3
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	eb45 0303 	adc.w	r3, r5, r3
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c3e:	4629      	mov	r1, r5
 8004c40:	028b      	lsls	r3, r1, #10
 8004c42:	4621      	mov	r1, r4
 8004c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c48:	4621      	mov	r1, r4
 8004c4a:	028a      	lsls	r2, r1, #10
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c52:	2200      	movs	r2, #0
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	61fa      	str	r2, [r7, #28]
 8004c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c5c:	f7fb fff4 	bl	8000c48 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4613      	mov	r3, r2
 8004c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c68:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	3301      	adds	r3, #1
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c82:	e002      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3750      	adds	r7, #80	@ 0x50
 8004c90:	46bd      	mov	sp, r7
 8004c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	007a1200 	.word	0x007a1200

08004ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	@ (8004cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004caa:	681b      	ldr	r3, [r3, #0]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000000 	.word	0x20000000

08004cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cc0:	f7ff fff0 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	0a9b      	lsrs	r3, r3, #10
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	4903      	ldr	r1, [pc, #12]	@ (8004ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	0800d95c 	.word	0x0800d95c

08004ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07b      	b.n	8004dee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d06:	d009      	beq.n	8004d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	61da      	str	r2, [r3, #28]
 8004d0e:	e005      	b.n	8004d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc ff06 	bl	8001b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0104 	and.w	r1, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	f003 0210 	and.w	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	@ 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e04:	2301      	movs	r3, #1
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e08:	f7fd f926 	bl	8002058 <HAL_GetTick>
 8004e0c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e14:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e20:	7ffb      	ldrb	r3, [r7, #31]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d00c      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x4a>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e2c:	d106      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x46>
 8004e36:	7ffb      	ldrb	r3, [r7, #31]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d001      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e17f      	b.n	8005140 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_SPI_TransmitReceive+0x5c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_TransmitReceive+0x5c>
 8004e4c:	887b      	ldrh	r3, [r7, #2]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e174      	b.n	8005140 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x6e>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e16d      	b.n	8005140 <HAL_SPI_TransmitReceive+0x34a>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d003      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2205      	movs	r2, #5
 8004e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	887a      	ldrh	r2, [r7, #2]
 8004e90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	887a      	ldrh	r2, [r7, #2]
 8004e96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	887a      	ldrh	r2, [r7, #2]
 8004ea2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b40      	cmp	r3, #64	@ 0x40
 8004ec2:	d007      	beq.n	8004ed4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004edc:	d17e      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_TransmitReceive+0xf6>
 8004ee6:	8afb      	ldrh	r3, [r7, #22]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d16c      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f10:	e059      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d11b      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x162>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d016      	beq.n	8004f58 <HAL_SPI_TransmitReceive+0x162>
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d113      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f34:	881a      	ldrh	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f40:	1c9a      	adds	r2, r3, #2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d119      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x1a4>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d014      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f82:	1c9a      	adds	r2, r3, #2
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f96:	2301      	movs	r3, #1
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f9a:	f7fd f85d 	bl	8002058 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d80d      	bhi.n	8004fc6 <HAL_SPI_TransmitReceive+0x1d0>
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d009      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0bc      	b.n	8005140 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1a0      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x11c>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d19b      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x11c>
 8004fda:	e082      	b.n	80050e2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x1f4>
 8004fe4:	8afb      	ldrh	r3, [r7, #22]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d171      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005010:	e05d      	b.n	80050ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b02      	cmp	r3, #2
 800501e:	d11c      	bne.n	800505a <HAL_SPI_TransmitReceive+0x264>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d017      	beq.n	800505a <HAL_SPI_TransmitReceive+0x264>
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	2b01      	cmp	r3, #1
 800502e:	d114      	bne.n	800505a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	7812      	ldrb	r2, [r2, #0]
 800503c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d119      	bne.n	800509c <HAL_SPI_TransmitReceive+0x2a6>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d014      	beq.n	800509c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005098:	2301      	movs	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800509c:	f7fc ffdc 	bl	8002058 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d803      	bhi.n	80050b4 <HAL_SPI_TransmitReceive+0x2be>
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d102      	bne.n	80050ba <HAL_SPI_TransmitReceive+0x2c4>
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e038      	b.n	8005140 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d19c      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x21c>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d197      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050e2:	6a3a      	ldr	r2, [r7, #32]
 80050e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f8b6 	bl	8005258 <SPI_EndRxTxTransaction>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e01d      	b.n	8005140 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800513e:	2300      	movs	r3, #0
  }
}
 8005140:	4618      	mov	r0, r3
 8005142:	3728      	adds	r7, #40	@ 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005158:	f7fc ff7e 	bl	8002058 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	4413      	add	r3, r2
 8005166:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005168:	f7fc ff76 	bl	8002058 <HAL_GetTick>
 800516c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800516e:	4b39      	ldr	r3, [pc, #228]	@ (8005254 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	015b      	lsls	r3, r3, #5
 8005174:	0d1b      	lsrs	r3, r3, #20
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	fb02 f303 	mul.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800517e:	e055      	b.n	800522c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d051      	beq.n	800522c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005188:	f7fc ff66 	bl	8002058 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	429a      	cmp	r2, r3
 8005196:	d902      	bls.n	800519e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d13d      	bne.n	800521a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051b6:	d111      	bne.n	80051dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051c0:	d004      	beq.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ca:	d107      	bne.n	80051dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051e4:	d10f      	bne.n	8005206 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005204:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e018      	b.n	800524c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e002      	b.n	800522c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	3b01      	subs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4013      	ands	r3, r2
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	429a      	cmp	r2, r3
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	461a      	mov	r2, r3
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	429a      	cmp	r2, r3
 8005248:	d19a      	bne.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000000 	.word	0x20000000

08005258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2201      	movs	r2, #1
 800526c:	2102      	movs	r1, #2
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff ff6a 	bl	8005148 <SPI_WaitFlagStateUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e032      	b.n	80052f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800528a:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <SPI_EndRxTxTransaction+0xa0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1b      	ldr	r2, [pc, #108]	@ (80052fc <SPI_EndRxTxTransaction+0xa4>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	0d5b      	lsrs	r3, r3, #21
 8005296:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a8:	d112      	bne.n	80052d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2200      	movs	r2, #0
 80052b2:	2180      	movs	r1, #128	@ 0x80
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff ff47 	bl	8005148 <SPI_WaitFlagStateUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d016      	beq.n	80052ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	f043 0220 	orr.w	r2, r3, #32
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e00f      	b.n	80052f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	3b01      	subs	r3, #1
 80052da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e6:	2b80      	cmp	r3, #128	@ 0x80
 80052e8:	d0f2      	beq.n	80052d0 <SPI_EndRxTxTransaction+0x78>
 80052ea:	e000      	b.n	80052ee <SPI_EndRxTxTransaction+0x96>
        break;
 80052ec:	bf00      	nop
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000000 	.word	0x20000000
 80052fc:	165e9f81 	.word	0x165e9f81

08005300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e041      	b.n	8005396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fc76 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f000 fad8 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e041      	b.n	8005434 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f839 	bl	800543c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	4619      	mov	r1, r3
 80053dc:	4610      	mov	r0, r2
 80053de:	f000 fa89 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <HAL_TIM_PWM_Start+0x24>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	bf14      	ite	ne
 800546c:	2301      	movne	r3, #1
 800546e:	2300      	moveq	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e022      	b.n	80054ba <HAL_TIM_PWM_Start+0x6a>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d109      	bne.n	800548e <HAL_TIM_PWM_Start+0x3e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	bf14      	ite	ne
 8005486:	2301      	movne	r3, #1
 8005488:	2300      	moveq	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	e015      	b.n	80054ba <HAL_TIM_PWM_Start+0x6a>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b08      	cmp	r3, #8
 8005492:	d109      	bne.n	80054a8 <HAL_TIM_PWM_Start+0x58>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	bf14      	ite	ne
 80054a0:	2301      	movne	r3, #1
 80054a2:	2300      	moveq	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e008      	b.n	80054ba <HAL_TIM_PWM_Start+0x6a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e07c      	b.n	80055bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_PWM_Start+0x82>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054d0:	e013      	b.n	80054fa <HAL_TIM_PWM_Start+0xaa>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x92>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054e0:	e00b      	b.n	80054fa <HAL_TIM_PWM_Start+0xaa>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_PWM_Start+0xa2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f0:	e003      	b.n	80054fa <HAL_TIM_PWM_Start+0xaa>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2201      	movs	r2, #1
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fce6 	bl	8005ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2d      	ldr	r2, [pc, #180]	@ (80055c4 <HAL_TIM_PWM_Start+0x174>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIM_PWM_Start+0xcc>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2c      	ldr	r2, [pc, #176]	@ (80055c8 <HAL_TIM_PWM_Start+0x178>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d101      	bne.n	8005520 <HAL_TIM_PWM_Start+0xd0>
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <HAL_TIM_PWM_Start+0xd2>
 8005520:	2300      	movs	r3, #0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005534:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <HAL_TIM_PWM_Start+0x174>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d022      	beq.n	8005586 <HAL_TIM_PWM_Start+0x136>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005548:	d01d      	beq.n	8005586 <HAL_TIM_PWM_Start+0x136>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1f      	ldr	r2, [pc, #124]	@ (80055cc <HAL_TIM_PWM_Start+0x17c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <HAL_TIM_PWM_Start+0x136>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1d      	ldr	r2, [pc, #116]	@ (80055d0 <HAL_TIM_PWM_Start+0x180>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_TIM_PWM_Start+0x136>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <HAL_TIM_PWM_Start+0x184>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_TIM_PWM_Start+0x136>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <HAL_TIM_PWM_Start+0x178>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIM_PWM_Start+0x136>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a18      	ldr	r2, [pc, #96]	@ (80055d8 <HAL_TIM_PWM_Start+0x188>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIM_PWM_Start+0x136>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <HAL_TIM_PWM_Start+0x18c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d111      	bne.n	80055aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b06      	cmp	r3, #6
 8005596:	d010      	beq.n	80055ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	e007      	b.n	80055ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0201 	orr.w	r2, r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40010400 	.word	0x40010400
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40001800 	.word	0x40001800

080055e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e0ae      	b.n	800575c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b0c      	cmp	r3, #12
 800560a:	f200 809f 	bhi.w	800574c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005649 	.word	0x08005649
 8005618:	0800574d 	.word	0x0800574d
 800561c:	0800574d 	.word	0x0800574d
 8005620:	0800574d 	.word	0x0800574d
 8005624:	08005689 	.word	0x08005689
 8005628:	0800574d 	.word	0x0800574d
 800562c:	0800574d 	.word	0x0800574d
 8005630:	0800574d 	.word	0x0800574d
 8005634:	080056cb 	.word	0x080056cb
 8005638:	0800574d 	.word	0x0800574d
 800563c:	0800574d 	.word	0x0800574d
 8005640:	0800574d 	.word	0x0800574d
 8005644:	0800570b 	.word	0x0800570b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f9f6 	bl	8005a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0208 	orr.w	r2, r2, #8
 8005662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0204 	bic.w	r2, r2, #4
 8005672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6999      	ldr	r1, [r3, #24]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	619a      	str	r2, [r3, #24]
      break;
 8005686:	e064      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fa46 	bl	8005b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	021a      	lsls	r2, r3, #8
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	619a      	str	r2, [r3, #24]
      break;
 80056c8:	e043      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fa9b 	bl	8005c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0208 	orr.w	r2, r2, #8
 80056e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0204 	bic.w	r2, r2, #4
 80056f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69d9      	ldr	r1, [r3, #28]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	61da      	str	r2, [r3, #28]
      break;
 8005708:	e023      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 faef 	bl	8005cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69d9      	ldr	r1, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	021a      	lsls	r2, r3, #8
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	61da      	str	r2, [r3, #28]
      break;
 800574a:	e002      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75fb      	strb	r3, [r7, #23]
      break;
 8005750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIM_ConfigClockSource+0x1c>
 800577c:	2302      	movs	r3, #2
 800577e:	e0b4      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x186>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800579e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b8:	d03e      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0xd4>
 80057ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057be:	f200 8087 	bhi.w	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c6:	f000 8086 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x172>
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ce:	d87f      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b70      	cmp	r3, #112	@ 0x70
 80057d2:	d01a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0xa6>
 80057d4:	2b70      	cmp	r3, #112	@ 0x70
 80057d6:	d87b      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b60      	cmp	r3, #96	@ 0x60
 80057da:	d050      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x11a>
 80057dc:	2b60      	cmp	r3, #96	@ 0x60
 80057de:	d877      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b50      	cmp	r3, #80	@ 0x50
 80057e2:	d03c      	beq.n	800585e <HAL_TIM_ConfigClockSource+0xfa>
 80057e4:	2b50      	cmp	r3, #80	@ 0x50
 80057e6:	d873      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d058      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x13a>
 80057ec:	2b40      	cmp	r3, #64	@ 0x40
 80057ee:	d86f      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b30      	cmp	r3, #48	@ 0x30
 80057f2:	d064      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 80057f4:	2b30      	cmp	r3, #48	@ 0x30
 80057f6:	d86b      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d060      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d867      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b00      	cmp	r3, #0
 8005802:	d05c      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	2b10      	cmp	r3, #16
 8005806:	d05a      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 8005808:	e062      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800581a:	f000 fb3b 	bl	8005e94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800582c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	609a      	str	r2, [r3, #8]
      break;
 8005836:	e04f      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005848:	f000 fb24 	bl	8005e94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800585a:	609a      	str	r2, [r3, #8]
      break;
 800585c:	e03c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	461a      	mov	r2, r3
 800586c:	f000 fa98 	bl	8005da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2150      	movs	r1, #80	@ 0x50
 8005876:	4618      	mov	r0, r3
 8005878:	f000 faf1 	bl	8005e5e <TIM_ITRx_SetConfig>
      break;
 800587c:	e02c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800588a:	461a      	mov	r2, r3
 800588c:	f000 fab7 	bl	8005dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2160      	movs	r1, #96	@ 0x60
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fae1 	bl	8005e5e <TIM_ITRx_SetConfig>
      break;
 800589c:	e01c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 fa78 	bl	8005da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2140      	movs	r1, #64	@ 0x40
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fad1 	bl	8005e5e <TIM_ITRx_SetConfig>
      break;
 80058bc:	e00c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f000 fac8 	bl	8005e5e <TIM_ITRx_SetConfig>
      break;
 80058ce:	e003      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
      break;
 80058d4:	e000      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a43      	ldr	r2, [pc, #268]	@ (8005a14 <TIM_Base_SetConfig+0x120>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005912:	d00f      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a40      	ldr	r2, [pc, #256]	@ (8005a18 <TIM_Base_SetConfig+0x124>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a3f      	ldr	r2, [pc, #252]	@ (8005a1c <TIM_Base_SetConfig+0x128>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a3e      	ldr	r2, [pc, #248]	@ (8005a20 <TIM_Base_SetConfig+0x12c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a24 <TIM_Base_SetConfig+0x130>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a32      	ldr	r2, [pc, #200]	@ (8005a14 <TIM_Base_SetConfig+0x120>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d02b      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005954:	d027      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a2f      	ldr	r2, [pc, #188]	@ (8005a18 <TIM_Base_SetConfig+0x124>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d023      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a2e      	ldr	r2, [pc, #184]	@ (8005a1c <TIM_Base_SetConfig+0x128>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01f      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2d      	ldr	r2, [pc, #180]	@ (8005a20 <TIM_Base_SetConfig+0x12c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01b      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a2c      	ldr	r2, [pc, #176]	@ (8005a24 <TIM_Base_SetConfig+0x130>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d017      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2b      	ldr	r2, [pc, #172]	@ (8005a28 <TIM_Base_SetConfig+0x134>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2a      	ldr	r2, [pc, #168]	@ (8005a2c <TIM_Base_SetConfig+0x138>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00f      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a29      	ldr	r2, [pc, #164]	@ (8005a30 <TIM_Base_SetConfig+0x13c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00b      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a28      	ldr	r2, [pc, #160]	@ (8005a34 <TIM_Base_SetConfig+0x140>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d007      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a27      	ldr	r2, [pc, #156]	@ (8005a38 <TIM_Base_SetConfig+0x144>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a26      	ldr	r2, [pc, #152]	@ (8005a3c <TIM_Base_SetConfig+0x148>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d108      	bne.n	80059b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005a14 <TIM_Base_SetConfig+0x120>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_Base_SetConfig+0xf2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a10      	ldr	r2, [pc, #64]	@ (8005a24 <TIM_Base_SetConfig+0x130>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d103      	bne.n	80059ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f043 0204 	orr.w	r2, r3, #4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	601a      	str	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800
 8005a34:	40001800 	.word	0x40001800
 8005a38:	40001c00 	.word	0x40001c00
 8005a3c:	40002000 	.word	0x40002000

08005a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 0201 	bic.w	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 0302 	bic.w	r3, r3, #2
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a20      	ldr	r2, [pc, #128]	@ (8005b18 <TIM_OC1_SetConfig+0xd8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC1_SetConfig+0x64>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b1c <TIM_OC1_SetConfig+0xdc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10c      	bne.n	8005abe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0308 	bic.w	r3, r3, #8
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a15      	ldr	r2, [pc, #84]	@ (8005b18 <TIM_OC1_SetConfig+0xd8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC1_SetConfig+0x8e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a14      	ldr	r2, [pc, #80]	@ (8005b1c <TIM_OC1_SetConfig+0xdc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d111      	bne.n	8005af2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40010400 	.word	0x40010400

08005b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f023 0210 	bic.w	r2, r3, #16
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0320 	bic.w	r3, r3, #32
 8005b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a22      	ldr	r2, [pc, #136]	@ (8005c04 <TIM_OC2_SetConfig+0xe4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC2_SetConfig+0x68>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a21      	ldr	r2, [pc, #132]	@ (8005c08 <TIM_OC2_SetConfig+0xe8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d10d      	bne.n	8005ba4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a17      	ldr	r2, [pc, #92]	@ (8005c04 <TIM_OC2_SetConfig+0xe4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_OC2_SetConfig+0x94>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a16      	ldr	r2, [pc, #88]	@ (8005c08 <TIM_OC2_SetConfig+0xe8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d113      	bne.n	8005bdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40010400 	.word	0x40010400

08005c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
 8005c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a21      	ldr	r2, [pc, #132]	@ (8005cec <TIM_OC3_SetConfig+0xe0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_OC3_SetConfig+0x66>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a20      	ldr	r2, [pc, #128]	@ (8005cf0 <TIM_OC3_SetConfig+0xe4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d10d      	bne.n	8005c8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a16      	ldr	r2, [pc, #88]	@ (8005cec <TIM_OC3_SetConfig+0xe0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_OC3_SetConfig+0x92>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a15      	ldr	r2, [pc, #84]	@ (8005cf0 <TIM_OC3_SetConfig+0xe4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d113      	bne.n	8005cc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	621a      	str	r2, [r3, #32]
}
 8005ce0:	bf00      	nop
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40010400 	.word	0x40010400

08005cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	031b      	lsls	r3, r3, #12
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a12      	ldr	r2, [pc, #72]	@ (8005d98 <TIM_OC4_SetConfig+0xa4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_OC4_SetConfig+0x68>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a11      	ldr	r2, [pc, #68]	@ (8005d9c <TIM_OC4_SetConfig+0xa8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d109      	bne.n	8005d70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	019b      	lsls	r3, r3, #6
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40010400 	.word	0x40010400

08005da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0201 	bic.w	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 030a 	bic.w	r3, r3, #10
 8005ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b087      	sub	sp, #28
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f023 0210 	bic.w	r2, r3, #16
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f043 0307 	orr.w	r3, r3, #7
 8005e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	021a      	lsls	r2, r3, #8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1a      	ldr	r2, [r3, #32]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e05a      	b.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a21      	ldr	r2, [pc, #132]	@ (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d022      	beq.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f84:	d01d      	beq.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d018      	beq.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1b      	ldr	r2, [pc, #108]	@ (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00e      	beq.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a18      	ldr	r2, [pc, #96]	@ (800600c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d009      	beq.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a17      	ldr	r2, [pc, #92]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d004      	beq.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a15      	ldr	r2, [pc, #84]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d10c      	bne.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40000c00 	.word	0x40000c00
 800600c:	40010400 	.word	0x40010400
 8006010:	40014000 	.word	0x40014000
 8006014:	40001800 	.word	0x40001800

08006018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006030:	2302      	movs	r3, #2
 8006032:	e03d      	b.n	80060b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060bc:	b084      	sub	sp, #16
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	f107 001c 	add.w	r0, r7, #28
 80060ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d123      	bne.n	800611e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80060ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006102:	2b01      	cmp	r3, #1
 8006104:	d105      	bne.n	8006112 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fae8 	bl	80076e8 <USB_CoreReset>
 8006118:	4603      	mov	r3, r0
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	e01b      	b.n	8006156 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fadc 	bl	80076e8 <USB_CoreReset>
 8006130:	4603      	mov	r3, r0
 8006132:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006134:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006140:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	639a      	str	r2, [r3, #56]	@ 0x38
 8006148:	e005      	b.n	8006156 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006156:	7fbb      	ldrb	r3, [r7, #30]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d10b      	bne.n	8006174 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f043 0206 	orr.w	r2, r3, #6
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f043 0220 	orr.w	r2, r3, #32
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006180:	b004      	add	sp, #16
 8006182:	4770      	bx	lr

08006184 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d165      	bne.n	8006264 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4a41      	ldr	r2, [pc, #260]	@ (80062a0 <USB_SetTurnaroundTime+0x11c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d906      	bls.n	80061ae <USB_SetTurnaroundTime+0x2a>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4a40      	ldr	r2, [pc, #256]	@ (80062a4 <USB_SetTurnaroundTime+0x120>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d202      	bcs.n	80061ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061a8:	230f      	movs	r3, #15
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e062      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4a3c      	ldr	r2, [pc, #240]	@ (80062a4 <USB_SetTurnaroundTime+0x120>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d306      	bcc.n	80061c4 <USB_SetTurnaroundTime+0x40>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	4a3b      	ldr	r2, [pc, #236]	@ (80062a8 <USB_SetTurnaroundTime+0x124>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d202      	bcs.n	80061c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061be:	230e      	movs	r3, #14
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e057      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4a38      	ldr	r2, [pc, #224]	@ (80062a8 <USB_SetTurnaroundTime+0x124>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d306      	bcc.n	80061da <USB_SetTurnaroundTime+0x56>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4a37      	ldr	r2, [pc, #220]	@ (80062ac <USB_SetTurnaroundTime+0x128>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d202      	bcs.n	80061da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061d4:	230d      	movs	r3, #13
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e04c      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4a33      	ldr	r2, [pc, #204]	@ (80062ac <USB_SetTurnaroundTime+0x128>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d306      	bcc.n	80061f0 <USB_SetTurnaroundTime+0x6c>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4a32      	ldr	r2, [pc, #200]	@ (80062b0 <USB_SetTurnaroundTime+0x12c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d802      	bhi.n	80061f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061ea:	230c      	movs	r3, #12
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	e041      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4a2f      	ldr	r2, [pc, #188]	@ (80062b0 <USB_SetTurnaroundTime+0x12c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d906      	bls.n	8006206 <USB_SetTurnaroundTime+0x82>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4a2e      	ldr	r2, [pc, #184]	@ (80062b4 <USB_SetTurnaroundTime+0x130>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d802      	bhi.n	8006206 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006200:	230b      	movs	r3, #11
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e036      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4a2a      	ldr	r2, [pc, #168]	@ (80062b4 <USB_SetTurnaroundTime+0x130>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d906      	bls.n	800621c <USB_SetTurnaroundTime+0x98>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4a29      	ldr	r2, [pc, #164]	@ (80062b8 <USB_SetTurnaroundTime+0x134>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d802      	bhi.n	800621c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006216:	230a      	movs	r3, #10
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e02b      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4a26      	ldr	r2, [pc, #152]	@ (80062b8 <USB_SetTurnaroundTime+0x134>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d906      	bls.n	8006232 <USB_SetTurnaroundTime+0xae>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4a25      	ldr	r2, [pc, #148]	@ (80062bc <USB_SetTurnaroundTime+0x138>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d202      	bcs.n	8006232 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800622c:	2309      	movs	r3, #9
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e020      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4a21      	ldr	r2, [pc, #132]	@ (80062bc <USB_SetTurnaroundTime+0x138>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d306      	bcc.n	8006248 <USB_SetTurnaroundTime+0xc4>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4a20      	ldr	r2, [pc, #128]	@ (80062c0 <USB_SetTurnaroundTime+0x13c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d802      	bhi.n	8006248 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006242:	2308      	movs	r3, #8
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e015      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4a1d      	ldr	r2, [pc, #116]	@ (80062c0 <USB_SetTurnaroundTime+0x13c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d906      	bls.n	800625e <USB_SetTurnaroundTime+0xda>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a1c      	ldr	r2, [pc, #112]	@ (80062c4 <USB_SetTurnaroundTime+0x140>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d202      	bcs.n	800625e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006258:	2307      	movs	r3, #7
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e00a      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800625e:	2306      	movs	r3, #6
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e007      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800626a:	2309      	movs	r3, #9
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e001      	b.n	8006274 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006270:	2309      	movs	r3, #9
 8006272:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	00d8acbf 	.word	0x00d8acbf
 80062a4:	00e4e1c0 	.word	0x00e4e1c0
 80062a8:	00f42400 	.word	0x00f42400
 80062ac:	01067380 	.word	0x01067380
 80062b0:	011a499f 	.word	0x011a499f
 80062b4:	01312cff 	.word	0x01312cff
 80062b8:	014ca43f 	.word	0x014ca43f
 80062bc:	016e3600 	.word	0x016e3600
 80062c0:	01a6ab1f 	.word	0x01a6ab1f
 80062c4:	01e84800 	.word	0x01e84800

080062c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f043 0201 	orr.w	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f023 0201 	bic.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d115      	bne.n	800635a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800633a:	200a      	movs	r0, #10
 800633c:	f7fb fe98 	bl	8002070 <HAL_Delay>
      ms += 10U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	330a      	adds	r3, #10
 8006344:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f93f 	bl	80075ca <USB_GetMode>
 800634c:	4603      	mov	r3, r0
 800634e:	2b01      	cmp	r3, #1
 8006350:	d01e      	beq.n	8006390 <USB_SetCurrentMode+0x84>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2bc7      	cmp	r3, #199	@ 0xc7
 8006356:	d9f0      	bls.n	800633a <USB_SetCurrentMode+0x2e>
 8006358:	e01a      	b.n	8006390 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d115      	bne.n	800638c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800636c:	200a      	movs	r0, #10
 800636e:	f7fb fe7f 	bl	8002070 <HAL_Delay>
      ms += 10U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	330a      	adds	r3, #10
 8006376:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 f926 	bl	80075ca <USB_GetMode>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <USB_SetCurrentMode+0x84>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2bc7      	cmp	r3, #199	@ 0xc7
 8006388:	d9f0      	bls.n	800636c <USB_SetCurrentMode+0x60>
 800638a:	e001      	b.n	8006390 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e005      	b.n	800639c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2bc8      	cmp	r3, #200	@ 0xc8
 8006394:	d101      	bne.n	800639a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063a4:	b084      	sub	sp, #16
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063be:	2300      	movs	r3, #0
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	e009      	b.n	80063d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3340      	adds	r3, #64	@ 0x40
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	3301      	adds	r3, #1
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b0e      	cmp	r3, #14
 80063dc:	d9f2      	bls.n	80063c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d11c      	bne.n	8006420 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063f4:	f043 0302 	orr.w	r3, r3, #2
 80063f8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	@ 0x38
 800641e:	e00b      	b.n	8006438 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006424:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800643e:	461a      	mov	r2, r3
 8006440:	2300      	movs	r3, #0
 8006442:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006444:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10d      	bne.n	8006468 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006454:	2100      	movs	r1, #0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f968 	bl	800672c <USB_SetDevSpeed>
 800645c:	e008      	b.n	8006470 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800645e:	2101      	movs	r1, #1
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f963 	bl	800672c <USB_SetDevSpeed>
 8006466:	e003      	b.n	8006470 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006468:	2103      	movs	r1, #3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f95e 	bl	800672c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006470:	2110      	movs	r1, #16
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f8fa 	bl	800666c <USB_FlushTxFifo>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f924 	bl	80066d0 <USB_FlushRxFifo>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a4:	461a      	mov	r2, r3
 80064a6:	2300      	movs	r3, #0
 80064a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b0:	461a      	mov	r2, r3
 80064b2:	2300      	movs	r3, #0
 80064b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	e043      	b.n	8006544 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064d2:	d118      	bne.n	8006506 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e6:	461a      	mov	r2, r3
 80064e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	e013      	b.n	8006518 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064fc:	461a      	mov	r2, r3
 80064fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	e008      	b.n	8006518 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006512:	461a      	mov	r2, r3
 8006514:	2300      	movs	r3, #0
 8006516:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006524:	461a      	mov	r2, r3
 8006526:	2300      	movs	r3, #0
 8006528:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006536:	461a      	mov	r2, r3
 8006538:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800653c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3301      	adds	r3, #1
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006548:	461a      	mov	r2, r3
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4293      	cmp	r3, r2
 800654e:	d3b5      	bcc.n	80064bc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	e043      	b.n	80065de <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800656c:	d118      	bne.n	80065a0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006580:	461a      	mov	r2, r3
 8006582:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e013      	b.n	80065b2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006596:	461a      	mov	r2, r3
 8006598:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	e008      	b.n	80065b2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d0:	461a      	mov	r2, r3
 80065d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	3301      	adds	r3, #1
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065e2:	461a      	mov	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d3b5      	bcc.n	8006556 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800660a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800660c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f043 0210 	orr.w	r2, r3, #16
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699a      	ldr	r2, [r3, #24]
 8006624:	4b10      	ldr	r3, [pc, #64]	@ (8006668 <USB_DevInit+0x2c4>)
 8006626:	4313      	orrs	r3, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800662c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f043 0208 	orr.w	r2, r3, #8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006640:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006644:	2b01      	cmp	r3, #1
 8006646:	d107      	bne.n	8006658 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006650:	f043 0304 	orr.w	r3, r3, #4
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006664:	b004      	add	sp, #16
 8006666:	4770      	bx	lr
 8006668:	803c3800 	.word	0x803c3800

0800666c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3301      	adds	r3, #1
 800667e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006686:	d901      	bls.n	800668c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e01b      	b.n	80066c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	daf2      	bge.n	800667a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	019b      	lsls	r3, r3, #6
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066b0:	d901      	bls.n	80066b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e006      	b.n	80066c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d0f0      	beq.n	80066a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066e8:	d901      	bls.n	80066ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e018      	b.n	8006720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	daf2      	bge.n	80066dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2210      	movs	r2, #16
 80066fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3301      	adds	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800670c:	d901      	bls.n	8006712 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e006      	b.n	8006720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0310 	and.w	r3, r3, #16
 800671a:	2b10      	cmp	r3, #16
 800671c:	d0f0      	beq.n	8006700 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800674c:	4313      	orrs	r3, r2
 800674e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800675e:	b480      	push	{r7}
 8006760:	b087      	sub	sp, #28
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0306 	and.w	r3, r3, #6
 8006776:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d102      	bne.n	8006784 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800677e:	2300      	movs	r3, #0
 8006780:	75fb      	strb	r3, [r7, #23]
 8006782:	e00a      	b.n	800679a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d002      	beq.n	8006790 <USB_GetDevSpeed+0x32>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b06      	cmp	r3, #6
 800678e:	d102      	bne.n	8006796 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006790:	2302      	movs	r3, #2
 8006792:	75fb      	strb	r3, [r7, #23]
 8006794:	e001      	b.n	800679a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006796:	230f      	movs	r3, #15
 8006798:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
}
 800679c:	4618      	mov	r0, r3
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d13a      	bne.n	800683a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	2101      	movs	r1, #1
 80067d6:	fa01 f303 	lsl.w	r3, r1, r3
 80067da:	b29b      	uxth	r3, r3
 80067dc:	68f9      	ldr	r1, [r7, #12]
 80067de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067e2:	4313      	orrs	r3, r2
 80067e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d155      	bne.n	80068a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	791b      	ldrb	r3, [r3, #4]
 8006816:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006818:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	059b      	lsls	r3, r3, #22
 800681e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006820:	4313      	orrs	r3, r2
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800682e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	e036      	b.n	80068a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006840:	69da      	ldr	r2, [r3, #28]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	2101      	movs	r1, #1
 800684c:	fa01 f303 	lsl.w	r3, r1, r3
 8006850:	041b      	lsls	r3, r3, #16
 8006852:	68f9      	ldr	r1, [r7, #12]
 8006854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006858:	4313      	orrs	r3, r2
 800685a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d11a      	bne.n	80068a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	791b      	ldrb	r3, [r3, #4]
 800688c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800688e:	430b      	orrs	r3, r1
 8006890:	4313      	orrs	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d161      	bne.n	8006998 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ea:	d11f      	bne.n	800692c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006906:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800690a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	440a      	add	r2, r1
 8006922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006926:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800692a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	2101      	movs	r1, #1
 800693e:	fa01 f303 	lsl.w	r3, r1, r3
 8006942:	b29b      	uxth	r3, r3
 8006944:	43db      	mvns	r3, r3
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800694c:	4013      	ands	r3, r2
 800694e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	2101      	movs	r1, #1
 8006962:	fa01 f303 	lsl.w	r3, r1, r3
 8006966:	b29b      	uxth	r3, r3
 8006968:	43db      	mvns	r3, r3
 800696a:	68f9      	ldr	r1, [r7, #12]
 800696c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006970:	4013      	ands	r3, r2
 8006972:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	0159      	lsls	r1, r3, #5
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	440b      	add	r3, r1
 800698a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698e:	4619      	mov	r1, r3
 8006990:	4b35      	ldr	r3, [pc, #212]	@ (8006a68 <USB_DeactivateEndpoint+0x1b0>)
 8006992:	4013      	ands	r3, r2
 8006994:	600b      	str	r3, [r1, #0]
 8006996:	e060      	b.n	8006a5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069ae:	d11f      	bne.n	80069f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	2101      	movs	r1, #1
 8006a02:	fa01 f303 	lsl.w	r3, r1, r3
 8006a06:	041b      	lsls	r3, r3, #16
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a10:	4013      	ands	r3, r2
 8006a12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	2101      	movs	r1, #1
 8006a26:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a34:	4013      	ands	r3, r2
 8006a36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	0159      	lsls	r1, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	440b      	add	r3, r1
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a52:	4619      	mov	r1, r3
 8006a54:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <USB_DeactivateEndpoint+0x1b4>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	ec337800 	.word	0xec337800
 8006a6c:	eff37800 	.word	0xeff37800

08006a70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	@ 0x28
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	f040 817f 	bne.w	8006d90 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d132      	bne.n	8006b00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ab8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006abc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ad8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006adc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af8:	0cdb      	lsrs	r3, r3, #19
 8006afa:	04db      	lsls	r3, r3, #19
 8006afc:	6113      	str	r3, [r2, #16]
 8006afe:	e097      	b.n	8006c30 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	0151      	lsls	r1, r2, #5
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	440a      	add	r2, r1
 8006b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b1a:	0cdb      	lsrs	r3, r3, #19
 8006b1c:	04db      	lsls	r3, r3, #19
 8006b1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b42:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d11a      	bne.n	8006b80 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d903      	bls.n	8006b5e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b7c:	6113      	str	r3, [r2, #16]
 8006b7e:	e044      	b.n	8006c0a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	4413      	add	r3, r2
 8006b8a:	1e5a      	subs	r2, r3, #1
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b94:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	8afb      	ldrh	r3, [r7, #22]
 8006ba6:	04d9      	lsls	r1, r3, #19
 8006ba8:	4ba4      	ldr	r3, [pc, #656]	@ (8006e3c <USB_EPStartXfer+0x3cc>)
 8006baa:	400b      	ands	r3, r1
 8006bac:	69b9      	ldr	r1, [r7, #24]
 8006bae:	0148      	lsls	r0, r1, #5
 8006bb0:	69f9      	ldr	r1, [r7, #28]
 8006bb2:	4401      	add	r1, r0
 8006bb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	791b      	ldrb	r3, [r3, #4]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d122      	bne.n	8006c0a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bde:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006be2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	8afb      	ldrh	r3, [r7, #22]
 8006bf4:	075b      	lsls	r3, r3, #29
 8006bf6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006bfa:	69b9      	ldr	r1, [r7, #24]
 8006bfc:	0148      	lsls	r0, r1, #5
 8006bfe:	69f9      	ldr	r1, [r7, #28]
 8006c00:	4401      	add	r1, r0
 8006c02:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c06:	4313      	orrs	r3, r2
 8006c08:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c20:	69b9      	ldr	r1, [r7, #24]
 8006c22:	0148      	lsls	r0, r1, #5
 8006c24:	69f9      	ldr	r1, [r7, #28]
 8006c26:	4401      	add	r1, r0
 8006c28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d14b      	bne.n	8006cce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	791b      	ldrb	r3, [r3, #4]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d128      	bne.n	8006cac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d110      	bne.n	8006c8c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e00f      	b.n	8006cac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006caa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cc6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	e166      	b.n	8006f9c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	0151      	lsls	r1, r2, #5
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	440a      	add	r2, r1
 8006ce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ce8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006cec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d015      	beq.n	8006d22 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 814e 	beq.w	8006f9c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	2101      	movs	r1, #1
 8006d12:	fa01 f303 	lsl.w	r3, r1, r3
 8006d16:	69f9      	ldr	r1, [r7, #28]
 8006d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006d20:	e13c      	b.n	8006f9c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d110      	bne.n	8006d54 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	0151      	lsls	r1, r2, #5
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	440a      	add	r2, r1
 8006d48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	e00f      	b.n	8006d74 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	68d9      	ldr	r1, [r3, #12]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	b298      	uxth	r0, r3
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	4603      	mov	r3, r0
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f9b9 	bl	8007100 <USB_WritePacket>
 8006d8e:	e105      	b.n	8006f9c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006daa:	0cdb      	lsrs	r3, r3, #19
 8006dac:	04db      	lsls	r3, r3, #19
 8006dae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	0151      	lsls	r1, r2, #5
 8006dc2:	69fa      	ldr	r2, [r7, #28]
 8006dc4:	440a      	add	r2, r1
 8006dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006dce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006dd2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d132      	bne.n	8006e40 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	0148      	lsls	r0, r1, #5
 8006e0c:	69f9      	ldr	r1, [r7, #28]
 8006e0e:	4401      	add	r1, r0
 8006e10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e14:	4313      	orrs	r3, r2
 8006e16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e36:	6113      	str	r3, [r2, #16]
 8006e38:	e062      	b.n	8006f00 <USB_EPStartXfer+0x490>
 8006e3a:	bf00      	nop
 8006e3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d123      	bne.n	8006e90 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e5e:	69b9      	ldr	r1, [r7, #24]
 8006e60:	0148      	lsls	r0, r1, #5
 8006e62:	69f9      	ldr	r1, [r7, #28]
 8006e64:	4401      	add	r1, r0
 8006e66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e8c:	6113      	str	r3, [r2, #16]
 8006e8e:	e037      	b.n	8006f00 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	4413      	add	r3, r2
 8006e9a:	1e5a      	subs	r2, r3, #1
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	8afa      	ldrh	r2, [r7, #22]
 8006eac:	fb03 f202 	mul.w	r2, r3, r2
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	8afb      	ldrh	r3, [r7, #22]
 8006ec4:	04d9      	lsls	r1, r3, #19
 8006ec6:	4b38      	ldr	r3, [pc, #224]	@ (8006fa8 <USB_EPStartXfer+0x538>)
 8006ec8:	400b      	ands	r3, r1
 8006eca:	69b9      	ldr	r1, [r7, #24]
 8006ecc:	0148      	lsls	r0, r1, #5
 8006ece:	69f9      	ldr	r1, [r7, #28]
 8006ed0:	4401      	add	r1, r0
 8006ed2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef0:	69b9      	ldr	r1, [r7, #24]
 8006ef2:	0148      	lsls	r0, r1, #5
 8006ef4:	69f9      	ldr	r1, [r7, #28]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006efc:	4313      	orrs	r3, r2
 8006efe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10d      	bne.n	8006f22 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	68d9      	ldr	r1, [r3, #12]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1e:	460a      	mov	r2, r1
 8006f20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	791b      	ldrb	r3, [r3, #4]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d128      	bne.n	8006f7c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d110      	bne.n	8006f5c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e00f      	b.n	8006f7c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	0151      	lsls	r1, r2, #5
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	440a      	add	r2, r1
 8006f72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	1ff80000 	.word	0x1ff80000

08006fac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d14a      	bne.n	8007060 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fe2:	f040 8086 	bne.w	80070f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007004:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007008:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	7812      	ldrb	r2, [r2, #0]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007028:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800702c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3301      	adds	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f242 7210 	movw	r2, #10000	@ 0x2710
 800703a:	4293      	cmp	r3, r2
 800703c:	d902      	bls.n	8007044 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	75fb      	strb	r3, [r7, #23]
          break;
 8007042:	e056      	b.n	80070f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800705c:	d0e7      	beq.n	800702e <USB_EPStopXfer+0x82>
 800705e:	e048      	b.n	80070f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007078:	d13b      	bne.n	80070f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	0151      	lsls	r1, r2, #5
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	440a      	add	r2, r1
 8007094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007098:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800709c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	7812      	ldrb	r2, [r2, #0]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d902      	bls.n	80070d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	75fb      	strb	r3, [r7, #23]
          break;
 80070d6:	e00c      	b.n	80070f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070f0:	d0e7      	beq.n	80070c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	@ 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4611      	mov	r1, r2
 800710c:	461a      	mov	r2, r3
 800710e:	460b      	mov	r3, r1
 8007110:	71fb      	strb	r3, [r7, #7]
 8007112:	4613      	mov	r3, r2
 8007114:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800711e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007122:	2b00      	cmp	r3, #0
 8007124:	d123      	bne.n	800716e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007126:	88bb      	ldrh	r3, [r7, #4]
 8007128:	3303      	adds	r3, #3
 800712a:	089b      	lsrs	r3, r3, #2
 800712c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800712e:	2300      	movs	r3, #0
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	e018      	b.n	8007166 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	031a      	lsls	r2, r3, #12
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	4413      	add	r3, r2
 800713c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007140:	461a      	mov	r2, r3
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	3301      	adds	r3, #1
 800714c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	3301      	adds	r3, #1
 8007152:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	3301      	adds	r3, #1
 8007158:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	3301      	adds	r3, #1
 800715e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	3301      	adds	r3, #1
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	429a      	cmp	r2, r3
 800716c:	d3e2      	bcc.n	8007134 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3724      	adds	r7, #36	@ 0x24
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800717c:	b480      	push	{r7}
 800717e:	b08b      	sub	sp, #44	@ 0x2c
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	089b      	lsrs	r3, r3, #2
 8007196:	b29b      	uxth	r3, r3
 8007198:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071a2:	2300      	movs	r3, #0
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	e014      	b.n	80071d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	3301      	adds	r3, #1
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	3301      	adds	r3, #1
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	3301      	adds	r3, #1
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	3301      	adds	r3, #1
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	3301      	adds	r3, #1
 80071d0:	623b      	str	r3, [r7, #32]
 80071d2:	6a3a      	ldr	r2, [r7, #32]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d3e6      	bcc.n	80071a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071da:	8bfb      	ldrh	r3, [r7, #30]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d01e      	beq.n	800721e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ea:	461a      	mov	r2, r3
 80071ec:	f107 0310 	add.w	r3, r7, #16
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007200:	b2da      	uxtb	r2, r3
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	701a      	strb	r2, [r3, #0]
      i++;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	3301      	adds	r3, #1
 800720a:	623b      	str	r3, [r7, #32]
      pDest++;
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	3301      	adds	r3, #1
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007212:	8bfb      	ldrh	r3, [r7, #30]
 8007214:	3b01      	subs	r3, #1
 8007216:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007218:	8bfb      	ldrh	r3, [r7, #30]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1ea      	bne.n	80071f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007220:	4618      	mov	r0, r3
 8007222:	372c      	adds	r7, #44	@ 0x2c
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d12c      	bne.n	80072a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	db12      	blt.n	8007280 <USB_EPSetStall+0x54>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00f      	beq.n	8007280 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800727a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800727e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	0151      	lsls	r1, r2, #5
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	440a      	add	r2, r1
 8007296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800729a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	e02b      	b.n	80072fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	db12      	blt.n	80072da <USB_EPSetStall+0xae>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00f      	beq.n	80072da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d128      	bne.n	8007376 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800733e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007342:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	791b      	ldrb	r3, [r3, #4]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d003      	beq.n	8007354 <USB_EPClearStall+0x4c>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	791b      	ldrb	r3, [r3, #4]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d138      	bne.n	80073c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800736e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	e027      	b.n	80073c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007390:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007394:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	791b      	ldrb	r3, [r3, #4]
 800739a:	2b03      	cmp	r3, #3
 800739c:	d003      	beq.n	80073a6 <USB_EPClearStall+0x9e>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	791b      	ldrb	r3, [r3, #4]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d10f      	bne.n	80073c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	0151      	lsls	r1, r2, #5
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	440a      	add	r2, r1
 80073bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80073f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007408:	68f9      	ldr	r1, [r7, #12]
 800740a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800740e:	4313      	orrs	r3, r2
 8007410:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800744e:	f023 0302 	bic.w	r3, r3, #2
 8007452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800747c:	f023 0303 	bic.w	r3, r3, #3
 8007480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007490:	f043 0302 	orr.w	r3, r3, #2
 8007494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	4013      	ands	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074bc:	68fb      	ldr	r3, [r7, #12]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	4013      	ands	r3, r2
 80074ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	0c1b      	lsrs	r3, r3, #16
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	4013      	ands	r3, r2
 8007520:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	b29b      	uxth	r3, r3
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007532:	b480      	push	{r7}
 8007534:	b085      	sub	sp, #20
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4013      	ands	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007560:	68bb      	ldr	r3, [r7, #8]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800756e:	b480      	push	{r7}
 8007570:	b087      	sub	sp, #28
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800758e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007590:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	fa22 f303 	lsr.w	r3, r2, r3
 800759e:	01db      	lsls	r3, r3, #7
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4013      	ands	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075bc:	68bb      	ldr	r3, [r7, #8]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f003 0301 	and.w	r3, r3, #1
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007600:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007604:	f023 0307 	bic.w	r3, r3, #7
 8007608:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800761c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	460b      	mov	r3, r1
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	333c      	adds	r3, #60	@ 0x3c
 8007642:	3304      	adds	r3, #4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	4a26      	ldr	r2, [pc, #152]	@ (80076e4 <USB_EP0_OutStart+0xb8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d90a      	bls.n	8007666 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800765c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007660:	d101      	bne.n	8007666 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	e037      	b.n	80076d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766c:	461a      	mov	r2, r3
 800766e:	2300      	movs	r3, #0
 8007670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007680:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007694:	f043 0318 	orr.w	r3, r3, #24
 8007698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80076ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076ae:	7afb      	ldrb	r3, [r7, #11]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d10f      	bne.n	80076d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80076d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	4f54300a 	.word	0x4f54300a

080076e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007700:	d901      	bls.n	8007706 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e022      	b.n	800774c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	daf2      	bge.n	80076f4 <USB_CoreReset+0xc>

  count = 10U;
 800770e:	230a      	movs	r3, #10
 8007710:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007712:	e002      	b.n	800771a <USB_CoreReset+0x32>
  {
    count--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3b01      	subs	r3, #1
 8007718:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1f9      	bne.n	8007714 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	f043 0201 	orr.w	r2, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007738:	d901      	bls.n	800773e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e006      	b.n	800774c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b01      	cmp	r3, #1
 8007748:	d0f0      	beq.n	800772c <USB_CoreReset+0x44>

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007764:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007768:	f002 fcaa 	bl	800a0c0 <USBD_static_malloc>
 800776c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	32b0      	adds	r2, #176	@ 0xb0
 800777e:	2100      	movs	r1, #0
 8007780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007784:	2302      	movs	r3, #2
 8007786:	e0d4      	b.n	8007932 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007788:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800778c:	2100      	movs	r1, #0
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f003 fa57 	bl	800ac42 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	32b0      	adds	r2, #176	@ 0xb0
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32b0      	adds	r2, #176	@ 0xb0
 80077ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7c1b      	ldrb	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d138      	bne.n	8007832 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077c0:	4b5e      	ldr	r3, [pc, #376]	@ (800793c <USBD_CDC_Init+0x1e4>)
 80077c2:	7819      	ldrb	r1, [r3, #0]
 80077c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077c8:	2202      	movs	r2, #2
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f002 fb55 	bl	8009e7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077d0:	4b5a      	ldr	r3, [pc, #360]	@ (800793c <USBD_CDC_Init+0x1e4>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	f003 020f 	and.w	r2, r3, #15
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	3323      	adds	r3, #35	@ 0x23
 80077e6:	2201      	movs	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077ea:	4b55      	ldr	r3, [pc, #340]	@ (8007940 <USBD_CDC_Init+0x1e8>)
 80077ec:	7819      	ldrb	r1, [r3, #0]
 80077ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077f2:	2202      	movs	r2, #2
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f002 fb40 	bl	8009e7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077fa:	4b51      	ldr	r3, [pc, #324]	@ (8007940 <USBD_CDC_Init+0x1e8>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	f003 020f 	and.w	r2, r3, #15
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007812:	2201      	movs	r2, #1
 8007814:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007816:	4b4b      	ldr	r3, [pc, #300]	@ (8007944 <USBD_CDC_Init+0x1ec>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	f003 020f 	and.w	r2, r3, #15
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	331c      	adds	r3, #28
 800782c:	2210      	movs	r2, #16
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e035      	b.n	800789e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007832:	4b42      	ldr	r3, [pc, #264]	@ (800793c <USBD_CDC_Init+0x1e4>)
 8007834:	7819      	ldrb	r1, [r3, #0]
 8007836:	2340      	movs	r3, #64	@ 0x40
 8007838:	2202      	movs	r2, #2
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f002 fb1d 	bl	8009e7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007840:	4b3e      	ldr	r3, [pc, #248]	@ (800793c <USBD_CDC_Init+0x1e4>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f003 020f 	and.w	r2, r3, #15
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	3323      	adds	r3, #35	@ 0x23
 8007856:	2201      	movs	r2, #1
 8007858:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800785a:	4b39      	ldr	r3, [pc, #228]	@ (8007940 <USBD_CDC_Init+0x1e8>)
 800785c:	7819      	ldrb	r1, [r3, #0]
 800785e:	2340      	movs	r3, #64	@ 0x40
 8007860:	2202      	movs	r2, #2
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f002 fb09 	bl	8009e7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007868:	4b35      	ldr	r3, [pc, #212]	@ (8007940 <USBD_CDC_Init+0x1e8>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f003 020f 	and.w	r2, r3, #15
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007880:	2201      	movs	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007884:	4b2f      	ldr	r3, [pc, #188]	@ (8007944 <USBD_CDC_Init+0x1ec>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	f003 020f 	and.w	r2, r3, #15
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	331c      	adds	r3, #28
 800789a:	2210      	movs	r2, #16
 800789c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800789e:	4b29      	ldr	r3, [pc, #164]	@ (8007944 <USBD_CDC_Init+0x1ec>)
 80078a0:	7819      	ldrb	r1, [r3, #0]
 80078a2:	2308      	movs	r3, #8
 80078a4:	2203      	movs	r2, #3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f002 fae7 	bl	8009e7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80078ac:	4b25      	ldr	r3, [pc, #148]	@ (8007944 <USBD_CDC_Init+0x1ec>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	f003 020f 	and.w	r2, r3, #15
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	3323      	adds	r3, #35	@ 0x23
 80078c2:	2201      	movs	r2, #1
 80078c4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	33b0      	adds	r3, #176	@ 0xb0
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80078fc:	2302      	movs	r3, #2
 80078fe:	e018      	b.n	8007932 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	7c1b      	ldrb	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007908:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <USBD_CDC_Init+0x1e8>)
 800790a:	7819      	ldrb	r1, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007912:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f002 fb9e 	bl	800a058 <USBD_LL_PrepareReceive>
 800791c:	e008      	b.n	8007930 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800791e:	4b08      	ldr	r3, [pc, #32]	@ (8007940 <USBD_CDC_Init+0x1e8>)
 8007920:	7819      	ldrb	r1, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007928:	2340      	movs	r3, #64	@ 0x40
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f002 fb94 	bl	800a058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000093 	.word	0x20000093
 8007940:	20000094 	.word	0x20000094
 8007944:	20000095 	.word	0x20000095

08007948 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007954:	4b3a      	ldr	r3, [pc, #232]	@ (8007a40 <USBD_CDC_DeInit+0xf8>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f002 fab3 	bl	8009ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007960:	4b37      	ldr	r3, [pc, #220]	@ (8007a40 <USBD_CDC_DeInit+0xf8>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	f003 020f 	and.w	r2, r3, #15
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	440b      	add	r3, r1
 8007974:	3323      	adds	r3, #35	@ 0x23
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800797a:	4b32      	ldr	r3, [pc, #200]	@ (8007a44 <USBD_CDC_DeInit+0xfc>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f002 faa0 	bl	8009ec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007986:	4b2f      	ldr	r3, [pc, #188]	@ (8007a44 <USBD_CDC_DeInit+0xfc>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f003 020f 	and.w	r2, r3, #15
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80079a2:	4b29      	ldr	r3, [pc, #164]	@ (8007a48 <USBD_CDC_DeInit+0x100>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f002 fa8c 	bl	8009ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80079ae:	4b26      	ldr	r3, [pc, #152]	@ (8007a48 <USBD_CDC_DeInit+0x100>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	f003 020f 	and.w	r2, r3, #15
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	3323      	adds	r3, #35	@ 0x23
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007a48 <USBD_CDC_DeInit+0x100>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	331c      	adds	r3, #28
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	32b0      	adds	r2, #176	@ 0xb0
 80079ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01f      	beq.n	8007a34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	33b0      	adds	r3, #176	@ 0xb0
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	32b0      	adds	r2, #176	@ 0xb0
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f002 fb60 	bl	800a0dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	32b0      	adds	r2, #176	@ 0xb0
 8007a26:	2100      	movs	r1, #0
 8007a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000093 	.word	0x20000093
 8007a44:	20000094 	.word	0x20000094
 8007a48:	20000095 	.word	0x20000095

08007a4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	32b0      	adds	r2, #176	@ 0xb0
 8007a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e0bf      	b.n	8007bfc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d050      	beq.n	8007b2a <USBD_CDC_Setup+0xde>
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	f040 80af 	bne.w	8007bec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	88db      	ldrh	r3, [r3, #6]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d03a      	beq.n	8007b0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b25b      	sxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da1b      	bge.n	8007ad8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	33b0      	adds	r3, #176	@ 0xb0
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ab6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	88d2      	ldrh	r2, [r2, #6]
 8007abc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	88db      	ldrh	r3, [r3, #6]
 8007ac2:	2b07      	cmp	r3, #7
 8007ac4:	bf28      	it	cs
 8007ac6:	2307      	movcs	r3, #7
 8007ac8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	89fa      	ldrh	r2, [r7, #14]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 fda7 	bl	8009624 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ad6:	e090      	b.n	8007bfa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	785a      	ldrb	r2, [r3, #1]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88db      	ldrh	r3, [r3, #6]
 8007ae6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ae8:	d803      	bhi.n	8007af2 <USBD_CDC_Setup+0xa6>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	88db      	ldrh	r3, [r3, #6]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	e000      	b.n	8007af4 <USBD_CDC_Setup+0xa8>
 8007af2:	2240      	movs	r2, #64	@ 0x40
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007afa:	6939      	ldr	r1, [r7, #16]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007b02:	461a      	mov	r2, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 fdbc 	bl	8009682 <USBD_CtlPrepareRx>
      break;
 8007b0a:	e076      	b.n	8007bfa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	33b0      	adds	r3, #176	@ 0xb0
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	7850      	ldrb	r0, [r2, #1]
 8007b22:	2200      	movs	r2, #0
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	4798      	blx	r3
      break;
 8007b28:	e067      	b.n	8007bfa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b0b      	cmp	r3, #11
 8007b30:	d851      	bhi.n	8007bd6 <USBD_CDC_Setup+0x18a>
 8007b32:	a201      	add	r2, pc, #4	@ (adr r2, 8007b38 <USBD_CDC_Setup+0xec>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b69 	.word	0x08007b69
 8007b3c:	08007be5 	.word	0x08007be5
 8007b40:	08007bd7 	.word	0x08007bd7
 8007b44:	08007bd7 	.word	0x08007bd7
 8007b48:	08007bd7 	.word	0x08007bd7
 8007b4c:	08007bd7 	.word	0x08007bd7
 8007b50:	08007bd7 	.word	0x08007bd7
 8007b54:	08007bd7 	.word	0x08007bd7
 8007b58:	08007bd7 	.word	0x08007bd7
 8007b5c:	08007bd7 	.word	0x08007bd7
 8007b60:	08007b93 	.word	0x08007b93
 8007b64:	08007bbd 	.word	0x08007bbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d107      	bne.n	8007b84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b74:	f107 030a 	add.w	r3, r7, #10
 8007b78:	2202      	movs	r2, #2
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 fd51 	bl	8009624 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b82:	e032      	b.n	8007bea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 fccf 	bl	800952a <USBD_CtlError>
            ret = USBD_FAIL;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	75fb      	strb	r3, [r7, #23]
          break;
 8007b90:	e02b      	b.n	8007bea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d107      	bne.n	8007bae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b9e:	f107 030d 	add.w	r3, r7, #13
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fd3c 	bl	8009624 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bac:	e01d      	b.n	8007bea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fcba 	bl	800952a <USBD_CtlError>
            ret = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bba:	e016      	b.n	8007bea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d00f      	beq.n	8007be8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 fcad 	bl	800952a <USBD_CtlError>
            ret = USBD_FAIL;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bd4:	e008      	b.n	8007be8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 fca6 	bl	800952a <USBD_CtlError>
          ret = USBD_FAIL;
 8007bde:	2303      	movs	r3, #3
 8007be0:	75fb      	strb	r3, [r7, #23]
          break;
 8007be2:	e002      	b.n	8007bea <USBD_CDC_Setup+0x19e>
          break;
 8007be4:	bf00      	nop
 8007be6:	e008      	b.n	8007bfa <USBD_CDC_Setup+0x1ae>
          break;
 8007be8:	bf00      	nop
      }
      break;
 8007bea:	e006      	b.n	8007bfa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 fc9b 	bl	800952a <USBD_CtlError>
      ret = USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	32b0      	adds	r2, #176	@ 0xb0
 8007c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e065      	b.n	8007cfa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	32b0      	adds	r2, #176	@ 0xb0
 8007c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	f003 020f 	and.w	r2, r3, #15
 8007c44:	6879      	ldr	r1, [r7, #4]
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	440b      	add	r3, r1
 8007c50:	3314      	adds	r3, #20
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d02f      	beq.n	8007cb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	f003 010f 	and.w	r1, r3, #15
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	460b      	mov	r3, r1
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	440b      	add	r3, r1
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4403      	add	r3, r0
 8007c80:	331c      	adds	r3, #28
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c88:	fb01 f303 	mul.w	r3, r1, r3
 8007c8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d112      	bne.n	8007cb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	f003 020f 	and.w	r2, r3, #15
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007caa:	78f9      	ldrb	r1, [r7, #3]
 8007cac:	2300      	movs	r3, #0
 8007cae:	2200      	movs	r2, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f002 f9b0 	bl	800a016 <USBD_LL_Transmit>
 8007cb6:	e01f      	b.n	8007cf8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	33b0      	adds	r3, #176	@ 0xb0
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d010      	beq.n	8007cf8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	33b0      	adds	r3, #176	@ 0xb0
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	32b0      	adds	r2, #176	@ 0xb0
 8007d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	32b0      	adds	r2, #176	@ 0xb0
 8007d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e01a      	b.n	8007d6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f002 f9ae 	bl	800a09a <USBD_LL_GetRxDataSize>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	33b0      	adds	r3, #176	@ 0xb0
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d64:	4611      	mov	r1, r2
 8007d66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	32b0      	adds	r2, #176	@ 0xb0
 8007d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e024      	b.n	8007dde <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	33b0      	adds	r3, #176	@ 0xb0
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d019      	beq.n	8007ddc <USBD_CDC_EP0_RxReady+0x6a>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007dae:	2bff      	cmp	r3, #255	@ 0xff
 8007db0:	d014      	beq.n	8007ddc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	33b0      	adds	r3, #176	@ 0xb0
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007dca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dd2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	22ff      	movs	r2, #255	@ 0xff
 8007dd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007df0:	2182      	movs	r1, #130	@ 0x82
 8007df2:	4818      	ldr	r0, [pc, #96]	@ (8007e54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007df4:	f000 fd62 	bl	80088bc <USBD_GetEpDesc>
 8007df8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	4815      	ldr	r0, [pc, #84]	@ (8007e54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dfe:	f000 fd5d 	bl	80088bc <USBD_GetEpDesc>
 8007e02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e04:	2181      	movs	r1, #129	@ 0x81
 8007e06:	4813      	ldr	r0, [pc, #76]	@ (8007e54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e08:	f000 fd58 	bl	80088bc <USBD_GetEpDesc>
 8007e0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2210      	movs	r2, #16
 8007e18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d006      	beq.n	8007e2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e28:	711a      	strb	r2, [r3, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d006      	beq.n	8007e42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e3c:	711a      	strb	r2, [r3, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2243      	movs	r2, #67	@ 0x43
 8007e46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e48:	4b02      	ldr	r3, [pc, #8]	@ (8007e54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000050 	.word	0x20000050

08007e58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e60:	2182      	movs	r1, #130	@ 0x82
 8007e62:	4818      	ldr	r0, [pc, #96]	@ (8007ec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e64:	f000 fd2a 	bl	80088bc <USBD_GetEpDesc>
 8007e68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	4815      	ldr	r0, [pc, #84]	@ (8007ec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e6e:	f000 fd25 	bl	80088bc <USBD_GetEpDesc>
 8007e72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e74:	2181      	movs	r1, #129	@ 0x81
 8007e76:	4813      	ldr	r0, [pc, #76]	@ (8007ec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e78:	f000 fd20 	bl	80088bc <USBD_GetEpDesc>
 8007e7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2210      	movs	r2, #16
 8007e88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d006      	beq.n	8007e9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2200      	movs	r2, #0
 8007e94:	711a      	strb	r2, [r3, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f042 0202 	orr.w	r2, r2, #2
 8007e9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d006      	beq.n	8007eb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	711a      	strb	r2, [r3, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f042 0202 	orr.w	r2, r2, #2
 8007eb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2243      	movs	r2, #67	@ 0x43
 8007eb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007eb8:	4b02      	ldr	r3, [pc, #8]	@ (8007ec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000050 	.word	0x20000050

08007ec8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ed0:	2182      	movs	r1, #130	@ 0x82
 8007ed2:	4818      	ldr	r0, [pc, #96]	@ (8007f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ed4:	f000 fcf2 	bl	80088bc <USBD_GetEpDesc>
 8007ed8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eda:	2101      	movs	r1, #1
 8007edc:	4815      	ldr	r0, [pc, #84]	@ (8007f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ede:	f000 fced 	bl	80088bc <USBD_GetEpDesc>
 8007ee2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ee4:	2181      	movs	r1, #129	@ 0x81
 8007ee6:	4813      	ldr	r0, [pc, #76]	@ (8007f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ee8:	f000 fce8 	bl	80088bc <USBD_GetEpDesc>
 8007eec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2210      	movs	r2, #16
 8007ef8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d006      	beq.n	8007f0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f08:	711a      	strb	r2, [r3, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d006      	beq.n	8007f22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f1c:	711a      	strb	r2, [r3, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2243      	movs	r2, #67	@ 0x43
 8007f26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f28:	4b02      	ldr	r3, [pc, #8]	@ (8007f34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000050 	.word	0x20000050

08007f38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220a      	movs	r2, #10
 8007f44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f46:	4b03      	ldr	r3, [pc, #12]	@ (8007f54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	2000000c 	.word	0x2000000c

08007f58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e009      	b.n	8007f80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	33b0      	adds	r3, #176	@ 0xb0
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	32b0      	adds	r2, #176	@ 0xb0
 8007fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e008      	b.n	8007fc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	32b0      	adds	r2, #176	@ 0xb0
 8007fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e004      	b.n	8007ffe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
	...

0800800c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	32b0      	adds	r2, #176	@ 0xb0
 800801e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008022:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008024:	2301      	movs	r3, #1
 8008026:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800802e:	2303      	movs	r3, #3
 8008030:	e025      	b.n	800807e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008038:	2b00      	cmp	r3, #0
 800803a:	d11f      	bne.n	800807c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2201      	movs	r2, #1
 8008040:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008044:	4b10      	ldr	r3, [pc, #64]	@ (8008088 <USBD_CDC_TransmitPacket+0x7c>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	f003 020f 	and.w	r2, r3, #15
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4613      	mov	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4403      	add	r3, r0
 800805e:	3314      	adds	r3, #20
 8008060:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008062:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <USBD_CDC_TransmitPacket+0x7c>)
 8008064:	7819      	ldrb	r1, [r3, #0]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 ffcf 	bl	800a016 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000093 	.word	0x20000093

0800808c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	32b0      	adds	r2, #176	@ 0xb0
 800809e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32b0      	adds	r2, #176	@ 0xb0
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e018      	b.n	80080ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	7c1b      	ldrb	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080c2:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <USBD_CDC_ReceivePacket+0x68>)
 80080c4:	7819      	ldrb	r1, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 ffc1 	bl	800a058 <USBD_LL_PrepareReceive>
 80080d6:	e008      	b.n	80080ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080d8:	4b06      	ldr	r3, [pc, #24]	@ (80080f4 <USBD_CDC_ReceivePacket+0x68>)
 80080da:	7819      	ldrb	r1, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080e2:	2340      	movs	r3, #64	@ 0x40
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 ffb7 	bl	800a058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000094 	.word	0x20000094

080080f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800810c:	2303      	movs	r3, #3
 800810e:	e01f      	b.n	8008150 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	79fa      	ldrb	r2, [r7, #7]
 8008142:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f001 fe31 	bl	8009dac <USBD_LL_Init>
 800814a:	4603      	mov	r3, r0
 800814c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e025      	b.n	80081bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32ae      	adds	r2, #174	@ 0xae
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00f      	beq.n	80081ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	32ae      	adds	r2, #174	@ 0xae
 8008196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819c:	f107 020e 	add.w	r2, r7, #14
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	4602      	mov	r2, r0
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 fe39 	bl	8009e44 <USBD_LL_Start>
 80081d2:	4603      	mov	r3, r0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	4611      	mov	r1, r2
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	4611      	mov	r1, r2
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008250:	2303      	movs	r3, #3
 8008252:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008254:	7bfb      	ldrb	r3, [r7, #15]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	4618      	mov	r0, r3
 8008272:	f001 f920 	bl	80094b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008284:	461a      	mov	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008292:	f003 031f 	and.w	r3, r3, #31
 8008296:	2b02      	cmp	r3, #2
 8008298:	d01a      	beq.n	80082d0 <USBD_LL_SetupStage+0x72>
 800829a:	2b02      	cmp	r3, #2
 800829c:	d822      	bhi.n	80082e4 <USBD_LL_SetupStage+0x86>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <USBD_LL_SetupStage+0x4a>
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d00a      	beq.n	80082bc <USBD_LL_SetupStage+0x5e>
 80082a6:	e01d      	b.n	80082e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fb75 	bl	80089a0 <USBD_StdDevReq>
 80082b6:	4603      	mov	r3, r0
 80082b8:	73fb      	strb	r3, [r7, #15]
      break;
 80082ba:	e020      	b.n	80082fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fbdd 	bl	8008a84 <USBD_StdItfReq>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73fb      	strb	r3, [r7, #15]
      break;
 80082ce:	e016      	b.n	80082fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fc3f 	bl	8008b5c <USBD_StdEPReq>
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]
      break;
 80082e2:	e00c      	b.n	80082fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fe06 	bl	8009f04 <USBD_LL_StallEP>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
      break;
 80082fc:	bf00      	nop
  }

  return ret;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	460b      	mov	r3, r1
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d177      	bne.n	8008410 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008326:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800832e:	2b03      	cmp	r3, #3
 8008330:	f040 80a1 	bne.w	8008476 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	8992      	ldrh	r2, [r2, #12]
 800833c:	4293      	cmp	r3, r2
 800833e:	d91c      	bls.n	800837a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	8992      	ldrh	r2, [r2, #12]
 8008348:	1a9a      	subs	r2, r3, r2
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	8992      	ldrh	r2, [r2, #12]
 8008356:	441a      	add	r2, r3
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	6919      	ldr	r1, [r3, #16]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	899b      	ldrh	r3, [r3, #12]
 8008364:	461a      	mov	r2, r3
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	4293      	cmp	r3, r2
 800836c:	bf38      	it	cc
 800836e:	4613      	movcc	r3, r2
 8008370:	461a      	mov	r2, r3
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f001 f9a6 	bl	80096c4 <USBD_CtlContinueRx>
 8008378:	e07d      	b.n	8008476 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008380:	f003 031f 	and.w	r3, r3, #31
 8008384:	2b02      	cmp	r3, #2
 8008386:	d014      	beq.n	80083b2 <USBD_LL_DataOutStage+0xaa>
 8008388:	2b02      	cmp	r3, #2
 800838a:	d81d      	bhi.n	80083c8 <USBD_LL_DataOutStage+0xc0>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <USBD_LL_DataOutStage+0x8e>
 8008390:	2b01      	cmp	r3, #1
 8008392:	d003      	beq.n	800839c <USBD_LL_DataOutStage+0x94>
 8008394:	e018      	b.n	80083c8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	75bb      	strb	r3, [r7, #22]
            break;
 800839a:	e018      	b.n	80083ce <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	4619      	mov	r1, r3
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fa6e 	bl	8008888 <USBD_CoreFindIF>
 80083ac:	4603      	mov	r3, r0
 80083ae:	75bb      	strb	r3, [r7, #22]
            break;
 80083b0:	e00d      	b.n	80083ce <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	4619      	mov	r1, r3
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fa70 	bl	80088a2 <USBD_CoreFindEP>
 80083c2:	4603      	mov	r3, r0
 80083c4:	75bb      	strb	r3, [r7, #22]
            break;
 80083c6:	e002      	b.n	80083ce <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	75bb      	strb	r3, [r7, #22]
            break;
 80083cc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083ce:	7dbb      	ldrb	r3, [r7, #22]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d119      	bne.n	8008408 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d113      	bne.n	8008408 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083e0:	7dba      	ldrb	r2, [r7, #22]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	32ae      	adds	r2, #174	@ 0xae
 80083e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80083f0:	7dba      	ldrb	r2, [r7, #22]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083f8:	7dba      	ldrb	r2, [r7, #22]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	32ae      	adds	r2, #174	@ 0xae
 80083fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f001 f96c 	bl	80096e6 <USBD_CtlSendStatus>
 800840e:	e032      	b.n	8008476 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008416:	b2db      	uxtb	r3, r3
 8008418:	4619      	mov	r1, r3
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 fa41 	bl	80088a2 <USBD_CoreFindEP>
 8008420:	4603      	mov	r3, r0
 8008422:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008424:	7dbb      	ldrb	r3, [r7, #22]
 8008426:	2bff      	cmp	r3, #255	@ 0xff
 8008428:	d025      	beq.n	8008476 <USBD_LL_DataOutStage+0x16e>
 800842a:	7dbb      	ldrb	r3, [r7, #22]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d122      	bne.n	8008476 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b03      	cmp	r3, #3
 800843a:	d117      	bne.n	800846c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800843c:	7dba      	ldrb	r2, [r7, #22]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	32ae      	adds	r2, #174	@ 0xae
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00f      	beq.n	800846c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800844c:	7dba      	ldrb	r2, [r7, #22]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008454:	7dba      	ldrb	r2, [r7, #22]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	32ae      	adds	r2, #174	@ 0xae
 800845a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	7afa      	ldrb	r2, [r7, #11]
 8008462:	4611      	mov	r1, r2
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	4798      	blx	r3
 8008468:	4603      	mov	r3, r0
 800846a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	e000      	b.n	8008478 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	460b      	mov	r3, r1
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d178      	bne.n	8008586 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3314      	adds	r3, #20
 8008498:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d163      	bne.n	800856c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	8992      	ldrh	r2, [r2, #12]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d91c      	bls.n	80084ea <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	8992      	ldrh	r2, [r2, #12]
 80084b8:	1a9a      	subs	r2, r3, r2
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	8992      	ldrh	r2, [r2, #12]
 80084c6:	441a      	add	r2, r3
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	6919      	ldr	r1, [r3, #16]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	461a      	mov	r2, r3
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f001 f8c2 	bl	8009660 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f001 fdb8 	bl	800a058 <USBD_LL_PrepareReceive>
 80084e8:	e040      	b.n	800856c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	899b      	ldrh	r3, [r3, #12]
 80084ee:	461a      	mov	r2, r3
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d11c      	bne.n	8008532 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008500:	4293      	cmp	r3, r2
 8008502:	d316      	bcc.n	8008532 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800850e:	429a      	cmp	r2, r3
 8008510:	d20f      	bcs.n	8008532 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008512:	2200      	movs	r2, #0
 8008514:	2100      	movs	r1, #0
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f001 f8a2 	bl	8009660 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008524:	2300      	movs	r3, #0
 8008526:	2200      	movs	r2, #0
 8008528:	2100      	movs	r1, #0
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f001 fd94 	bl	800a058 <USBD_LL_PrepareReceive>
 8008530:	e01c      	b.n	800856c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b03      	cmp	r3, #3
 800853c:	d10f      	bne.n	800855e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800855e:	2180      	movs	r1, #128	@ 0x80
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f001 fccf 	bl	8009f04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f001 f8d0 	bl	800970c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d03a      	beq.n	80085ec <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7ff fe30 	bl	80081dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008584:	e032      	b.n	80085ec <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800858c:	b2db      	uxtb	r3, r3
 800858e:	4619      	mov	r1, r3
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f986 	bl	80088a2 <USBD_CoreFindEP>
 8008596:	4603      	mov	r3, r0
 8008598:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	2bff      	cmp	r3, #255	@ 0xff
 800859e:	d025      	beq.n	80085ec <USBD_LL_DataInStage+0x16c>
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d122      	bne.n	80085ec <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d11c      	bne.n	80085ec <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80085b2:	7dfa      	ldrb	r2, [r7, #23]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	32ae      	adds	r2, #174	@ 0xae
 80085b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d014      	beq.n	80085ec <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80085c2:	7dfa      	ldrb	r2, [r7, #23]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80085ca:	7dfa      	ldrb	r2, [r7, #23]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	32ae      	adds	r2, #174	@ 0xae
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	7afa      	ldrb	r2, [r7, #11]
 80085d8:	4611      	mov	r1, r2
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	4798      	blx	r3
 80085de:	4603      	mov	r3, r0
 80085e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80085e2:	7dbb      	ldrb	r3, [r7, #22]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80085e8:	7dbb      	ldrb	r3, [r7, #22]
 80085ea:	e000      	b.n	80085ee <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d014      	beq.n	800865c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00e      	beq.n	800865c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	6852      	ldr	r2, [r2, #4]
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	4611      	mov	r1, r2
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800865c:	2340      	movs	r3, #64	@ 0x40
 800865e:	2200      	movs	r2, #0
 8008660:	2100      	movs	r1, #0
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 fc09 	bl	8009e7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2240      	movs	r2, #64	@ 0x40
 8008674:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008678:	2340      	movs	r3, #64	@ 0x40
 800867a:	2200      	movs	r2, #0
 800867c:	2180      	movs	r1, #128	@ 0x80
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fbfb 	bl	8009e7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2240      	movs	r2, #64	@ 0x40
 8008690:	841a      	strh	r2, [r3, #32]

  return ret;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d006      	beq.n	80086de <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2204      	movs	r2, #4
 80086e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b04      	cmp	r3, #4
 8008706:	d106      	bne.n	8008716 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800870e:	b2da      	uxtb	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b03      	cmp	r3, #3
 8008736:	d110      	bne.n	800875a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	32ae      	adds	r2, #174	@ 0xae
 800877a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008782:	2303      	movs	r3, #3
 8008784:	e01c      	b.n	80087c0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b03      	cmp	r3, #3
 8008790:	d115      	bne.n	80087be <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	32ae      	adds	r2, #174	@ 0xae
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00b      	beq.n	80087be <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	32ae      	adds	r2, #174	@ 0xae
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	4611      	mov	r1, r2
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	32ae      	adds	r2, #174	@ 0xae
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e01c      	b.n	8008824 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d115      	bne.n	8008822 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	32ae      	adds	r2, #174	@ 0xae
 8008800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	32ae      	adds	r2, #174	@ 0xae
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	4611      	mov	r1, r2
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00e      	beq.n	800887e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6852      	ldr	r2, [r2, #4]
 800886c:	b2d2      	uxtb	r2, r2
 800886e:	4611      	mov	r1, r2
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	4798      	blx	r3
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008894:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	4293      	cmp	r3, r2
 80088e0:	d91f      	bls.n	8008922 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80088e8:	e013      	b.n	8008912 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80088ea:	f107 030a 	add.w	r3, r7, #10
 80088ee:	4619      	mov	r1, r3
 80088f0:	6978      	ldr	r0, [r7, #20]
 80088f2:	f000 f81b 	bl	800892c <USBD_GetNextDesc>
 80088f6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	2b05      	cmp	r3, #5
 80088fe:	d108      	bne.n	8008912 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	789b      	ldrb	r3, [r3, #2]
 8008908:	78fa      	ldrb	r2, [r7, #3]
 800890a:	429a      	cmp	r2, r3
 800890c:	d008      	beq.n	8008920 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	b29a      	uxth	r2, r3
 8008918:	897b      	ldrh	r3, [r7, #10]
 800891a:	429a      	cmp	r2, r3
 800891c:	d8e5      	bhi.n	80088ea <USBD_GetEpDesc+0x2e>
 800891e:	e000      	b.n	8008922 <USBD_GetEpDesc+0x66>
          break;
 8008920:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008922:	693b      	ldr	r3, [r7, #16]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	7812      	ldrb	r2, [r2, #0]
 8008942:	4413      	add	r3, r2
 8008944:	b29a      	uxth	r2, r3
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4413      	add	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008956:	68fb      	ldr	r3, [r7, #12]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	3301      	adds	r3, #1
 800897a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008982:	8a3b      	ldrh	r3, [r7, #16]
 8008984:	021b      	lsls	r3, r3, #8
 8008986:	b21a      	sxth	r2, r3
 8008988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800898c:	4313      	orrs	r3, r2
 800898e:	b21b      	sxth	r3, r3
 8008990:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008992:	89fb      	ldrh	r3, [r7, #14]
}
 8008994:	4618      	mov	r0, r3
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089b6:	2b40      	cmp	r3, #64	@ 0x40
 80089b8:	d005      	beq.n	80089c6 <USBD_StdDevReq+0x26>
 80089ba:	2b40      	cmp	r3, #64	@ 0x40
 80089bc:	d857      	bhi.n	8008a6e <USBD_StdDevReq+0xce>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00f      	beq.n	80089e2 <USBD_StdDevReq+0x42>
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d153      	bne.n	8008a6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	32ae      	adds	r2, #174	@ 0xae
 80089d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	4798      	blx	r3
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]
      break;
 80089e0:	e04a      	b.n	8008a78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b09      	cmp	r3, #9
 80089e8:	d83b      	bhi.n	8008a62 <USBD_StdDevReq+0xc2>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <USBD_StdDevReq+0x50>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a45 	.word	0x08008a45
 80089f4:	08008a59 	.word	0x08008a59
 80089f8:	08008a63 	.word	0x08008a63
 80089fc:	08008a4f 	.word	0x08008a4f
 8008a00:	08008a63 	.word	0x08008a63
 8008a04:	08008a23 	.word	0x08008a23
 8008a08:	08008a19 	.word	0x08008a19
 8008a0c:	08008a63 	.word	0x08008a63
 8008a10:	08008a3b 	.word	0x08008a3b
 8008a14:	08008a2d 	.word	0x08008a2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa3e 	bl	8008e9c <USBD_GetDescriptor>
          break;
 8008a20:	e024      	b.n	8008a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fba3 	bl	8009170 <USBD_SetAddress>
          break;
 8008a2a:	e01f      	b.n	8008a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fbe2 	bl	80091f8 <USBD_SetConfig>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]
          break;
 8008a38:	e018      	b.n	8008a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fc85 	bl	800934c <USBD_GetConfig>
          break;
 8008a42:	e013      	b.n	8008a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fcb6 	bl	80093b8 <USBD_GetStatus>
          break;
 8008a4c:	e00e      	b.n	8008a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fce5 	bl	8009420 <USBD_SetFeature>
          break;
 8008a56:	e009      	b.n	8008a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fd09 	bl	8009472 <USBD_ClrFeature>
          break;
 8008a60:	e004      	b.n	8008a6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fd60 	bl	800952a <USBD_CtlError>
          break;
 8008a6a:	bf00      	nop
      }
      break;
 8008a6c:	e004      	b.n	8008a78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fd5a 	bl	800952a <USBD_CtlError>
      break;
 8008a76:	bf00      	nop
  }

  return ret;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop

08008a84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a9a:	2b40      	cmp	r3, #64	@ 0x40
 8008a9c:	d005      	beq.n	8008aaa <USBD_StdItfReq+0x26>
 8008a9e:	2b40      	cmp	r3, #64	@ 0x40
 8008aa0:	d852      	bhi.n	8008b48 <USBD_StdItfReq+0xc4>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <USBD_StdItfReq+0x26>
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d14e      	bne.n	8008b48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d840      	bhi.n	8008b3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	889b      	ldrh	r3, [r3, #4]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d836      	bhi.n	8008b30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff fedc 	bl	8008888 <USBD_CoreFindIF>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2bff      	cmp	r3, #255	@ 0xff
 8008ad8:	d01d      	beq.n	8008b16 <USBD_StdItfReq+0x92>
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d11a      	bne.n	8008b16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ae0:	7bba      	ldrb	r2, [r7, #14]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	32ae      	adds	r2, #174	@ 0xae
 8008ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00f      	beq.n	8008b10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008af0:	7bba      	ldrb	r2, [r7, #14]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008af8:	7bba      	ldrb	r2, [r7, #14]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	32ae      	adds	r2, #174	@ 0xae
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b0e:	e004      	b.n	8008b1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b10:	2303      	movs	r3, #3
 8008b12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b14:	e001      	b.n	8008b1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	88db      	ldrh	r3, [r3, #6]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d110      	bne.n	8008b44 <USBD_StdItfReq+0xc0>
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10d      	bne.n	8008b44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fddc 	bl	80096e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b2e:	e009      	b.n	8008b44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fcf9 	bl	800952a <USBD_CtlError>
          break;
 8008b38:	e004      	b.n	8008b44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fcf4 	bl	800952a <USBD_CtlError>
          break;
 8008b42:	e000      	b.n	8008b46 <USBD_StdItfReq+0xc2>
          break;
 8008b44:	bf00      	nop
      }
      break;
 8008b46:	e004      	b.n	8008b52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fced 	bl	800952a <USBD_CtlError>
      break;
 8008b50:	bf00      	nop
  }

  return ret;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	889b      	ldrh	r3, [r3, #4]
 8008b6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b78:	2b40      	cmp	r3, #64	@ 0x40
 8008b7a:	d007      	beq.n	8008b8c <USBD_StdEPReq+0x30>
 8008b7c:	2b40      	cmp	r3, #64	@ 0x40
 8008b7e:	f200 8181 	bhi.w	8008e84 <USBD_StdEPReq+0x328>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d02a      	beq.n	8008bdc <USBD_StdEPReq+0x80>
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	f040 817c 	bne.w	8008e84 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff fe86 	bl	80088a2 <USBD_CoreFindEP>
 8008b96:	4603      	mov	r3, r0
 8008b98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b9a:	7b7b      	ldrb	r3, [r7, #13]
 8008b9c:	2bff      	cmp	r3, #255	@ 0xff
 8008b9e:	f000 8176 	beq.w	8008e8e <USBD_StdEPReq+0x332>
 8008ba2:	7b7b      	ldrb	r3, [r7, #13]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f040 8172 	bne.w	8008e8e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008baa:	7b7a      	ldrb	r2, [r7, #13]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008bb2:	7b7a      	ldrb	r2, [r7, #13]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	32ae      	adds	r2, #174	@ 0xae
 8008bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f000 8165 	beq.w	8008e8e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008bc4:	7b7a      	ldrb	r2, [r7, #13]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	32ae      	adds	r2, #174	@ 0xae
 8008bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bda:	e158      	b.n	8008e8e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d008      	beq.n	8008bf6 <USBD_StdEPReq+0x9a>
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	f300 8147 	bgt.w	8008e78 <USBD_StdEPReq+0x31c>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 809b 	beq.w	8008d26 <USBD_StdEPReq+0x1ca>
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d03c      	beq.n	8008c6e <USBD_StdEPReq+0x112>
 8008bf4:	e140      	b.n	8008e78 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d002      	beq.n	8008c08 <USBD_StdEPReq+0xac>
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d016      	beq.n	8008c34 <USBD_StdEPReq+0xd8>
 8008c06:	e02c      	b.n	8008c62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <USBD_StdEPReq+0xce>
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	2b80      	cmp	r3, #128	@ 0x80
 8008c12:	d00a      	beq.n	8008c2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f973 	bl	8009f04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c1e:	2180      	movs	r1, #128	@ 0x80
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f96f 	bl	8009f04 <USBD_LL_StallEP>
 8008c26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c28:	e020      	b.n	8008c6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fc7c 	bl	800952a <USBD_CtlError>
              break;
 8008c32:	e01b      	b.n	8008c6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	885b      	ldrh	r3, [r3, #2]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10e      	bne.n	8008c5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00b      	beq.n	8008c5a <USBD_StdEPReq+0xfe>
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b80      	cmp	r3, #128	@ 0x80
 8008c46:	d008      	beq.n	8008c5a <USBD_StdEPReq+0xfe>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	88db      	ldrh	r3, [r3, #6]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 f955 	bl	8009f04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fd43 	bl	80096e6 <USBD_CtlSendStatus>

              break;
 8008c60:	e004      	b.n	8008c6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fc60 	bl	800952a <USBD_CtlError>
              break;
 8008c6a:	bf00      	nop
          }
          break;
 8008c6c:	e109      	b.n	8008e82 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d002      	beq.n	8008c80 <USBD_StdEPReq+0x124>
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d016      	beq.n	8008cac <USBD_StdEPReq+0x150>
 8008c7e:	e04b      	b.n	8008d18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00d      	beq.n	8008ca2 <USBD_StdEPReq+0x146>
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b80      	cmp	r3, #128	@ 0x80
 8008c8a:	d00a      	beq.n	8008ca2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f937 	bl	8009f04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c96:	2180      	movs	r1, #128	@ 0x80
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f933 	bl	8009f04 <USBD_LL_StallEP>
 8008c9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ca0:	e040      	b.n	8008d24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fc40 	bl	800952a <USBD_CtlError>
              break;
 8008caa:	e03b      	b.n	8008d24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	885b      	ldrh	r3, [r3, #2]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d136      	bne.n	8008d22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 f93d 	bl	8009f42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fd0c 	bl	80096e6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7ff fde5 	bl	80088a2 <USBD_CoreFindEP>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cdc:	7b7b      	ldrb	r3, [r7, #13]
 8008cde:	2bff      	cmp	r3, #255	@ 0xff
 8008ce0:	d01f      	beq.n	8008d22 <USBD_StdEPReq+0x1c6>
 8008ce2:	7b7b      	ldrb	r3, [r7, #13]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d11c      	bne.n	8008d22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ce8:	7b7a      	ldrb	r2, [r7, #13]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008cf0:	7b7a      	ldrb	r2, [r7, #13]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	32ae      	adds	r2, #174	@ 0xae
 8008cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d010      	beq.n	8008d22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d00:	7b7a      	ldrb	r2, [r7, #13]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	32ae      	adds	r2, #174	@ 0xae
 8008d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d16:	e004      	b.n	8008d22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fc05 	bl	800952a <USBD_CtlError>
              break;
 8008d20:	e000      	b.n	8008d24 <USBD_StdEPReq+0x1c8>
              break;
 8008d22:	bf00      	nop
          }
          break;
 8008d24:	e0ad      	b.n	8008e82 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d002      	beq.n	8008d38 <USBD_StdEPReq+0x1dc>
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d033      	beq.n	8008d9e <USBD_StdEPReq+0x242>
 8008d36:	e099      	b.n	8008e6c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <USBD_StdEPReq+0x1f2>
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b80      	cmp	r3, #128	@ 0x80
 8008d42:	d004      	beq.n	8008d4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fbef 	bl	800952a <USBD_CtlError>
                break;
 8008d4c:	e093      	b.n	8008e76 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	da0b      	bge.n	8008d6e <USBD_StdEPReq+0x212>
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	3310      	adds	r3, #16
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	4413      	add	r3, r2
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	e00b      	b.n	8008d86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	3304      	adds	r3, #4
 8008d86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	330e      	adds	r3, #14
 8008d92:	2202      	movs	r2, #2
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fc44 	bl	8009624 <USBD_CtlSendData>
              break;
 8008d9c:	e06b      	b.n	8008e76 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da11      	bge.n	8008dca <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	f003 020f 	and.w	r2, r3, #15
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	3323      	adds	r3, #35	@ 0x23
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d117      	bne.n	8008df0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fbb1 	bl	800952a <USBD_CtlError>
                  break;
 8008dc8:	e055      	b.n	8008e76 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	f003 020f 	and.w	r2, r3, #15
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d104      	bne.n	8008df0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fb9e 	bl	800952a <USBD_CtlError>
                  break;
 8008dee:	e042      	b.n	8008e76 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da0b      	bge.n	8008e10 <USBD_StdEPReq+0x2b4>
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	3310      	adds	r3, #16
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	e00b      	b.n	8008e28 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	4413      	add	r3, r2
 8008e26:	3304      	adds	r3, #4
 8008e28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <USBD_StdEPReq+0x2da>
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	2b80      	cmp	r3, #128	@ 0x80
 8008e34:	d103      	bne.n	8008e3e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	739a      	strb	r2, [r3, #14]
 8008e3c:	e00e      	b.n	8008e5c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 f89c 	bl	8009f80 <USBD_LL_IsStallEP>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2201      	movs	r2, #1
 8008e52:	739a      	strb	r2, [r3, #14]
 8008e54:	e002      	b.n	8008e5c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	330e      	adds	r3, #14
 8008e60:	2202      	movs	r2, #2
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fbdd 	bl	8009624 <USBD_CtlSendData>
              break;
 8008e6a:	e004      	b.n	8008e76 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fb5b 	bl	800952a <USBD_CtlError>
              break;
 8008e74:	bf00      	nop
          }
          break;
 8008e76:	e004      	b.n	8008e82 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fb55 	bl	800952a <USBD_CtlError>
          break;
 8008e80:	bf00      	nop
      }
      break;
 8008e82:	e005      	b.n	8008e90 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fb4f 	bl	800952a <USBD_CtlError>
      break;
 8008e8c:	e000      	b.n	8008e90 <USBD_StdEPReq+0x334>
      break;
 8008e8e:	bf00      	nop
  }

  return ret;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	885b      	ldrh	r3, [r3, #2]
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	2b06      	cmp	r3, #6
 8008ebe:	f200 8128 	bhi.w	8009112 <USBD_GetDescriptor+0x276>
 8008ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <USBD_GetDescriptor+0x2c>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee5 	.word	0x08008ee5
 8008ecc:	08008efd 	.word	0x08008efd
 8008ed0:	08008f3d 	.word	0x08008f3d
 8008ed4:	08009113 	.word	0x08009113
 8008ed8:	08009113 	.word	0x08009113
 8008edc:	080090b3 	.word	0x080090b3
 8008ee0:	080090df 	.word	0x080090df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	7c12      	ldrb	r2, [r2, #16]
 8008ef0:	f107 0108 	add.w	r1, r7, #8
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	60f8      	str	r0, [r7, #12]
      break;
 8008efa:	e112      	b.n	8009122 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7c1b      	ldrb	r3, [r3, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10d      	bne.n	8008f20 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	f107 0208 	add.w	r2, r7, #8
 8008f10:	4610      	mov	r0, r2
 8008f12:	4798      	blx	r3
 8008f14:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f1e:	e100      	b.n	8009122 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	f107 0208 	add.w	r2, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3301      	adds	r3, #1
 8008f36:	2202      	movs	r2, #2
 8008f38:	701a      	strb	r2, [r3, #0]
      break;
 8008f3a:	e0f2      	b.n	8009122 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	885b      	ldrh	r3, [r3, #2]
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b05      	cmp	r3, #5
 8008f44:	f200 80ac 	bhi.w	80090a0 <USBD_GetDescriptor+0x204>
 8008f48:	a201      	add	r2, pc, #4	@ (adr r2, 8008f50 <USBD_GetDescriptor+0xb4>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008f69 	.word	0x08008f69
 8008f54:	08008f9d 	.word	0x08008f9d
 8008f58:	08008fd1 	.word	0x08008fd1
 8008f5c:	08009005 	.word	0x08009005
 8008f60:	08009039 	.word	0x08009039
 8008f64:	0800906d 	.word	0x0800906d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	7c12      	ldrb	r2, [r2, #16]
 8008f80:	f107 0108 	add.w	r1, r7, #8
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
 8008f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f8a:	e091      	b.n	80090b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 facb 	bl	800952a <USBD_CtlError>
            err++;
 8008f94:	7afb      	ldrb	r3, [r7, #11]
 8008f96:	3301      	adds	r3, #1
 8008f98:	72fb      	strb	r3, [r7, #11]
          break;
 8008f9a:	e089      	b.n	80090b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	7c12      	ldrb	r2, [r2, #16]
 8008fb4:	f107 0108 	add.w	r1, r7, #8
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
 8008fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fbe:	e077      	b.n	80090b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fab1 	bl	800952a <USBD_CtlError>
            err++;
 8008fc8:	7afb      	ldrb	r3, [r7, #11]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fce:	e06f      	b.n	80090b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	7c12      	ldrb	r2, [r2, #16]
 8008fe8:	f107 0108 	add.w	r1, r7, #8
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
 8008ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff2:	e05d      	b.n	80090b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa97 	bl	800952a <USBD_CtlError>
            err++;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	3301      	adds	r3, #1
 8009000:	72fb      	strb	r3, [r7, #11]
          break;
 8009002:	e055      	b.n	80090b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	7c12      	ldrb	r2, [r2, #16]
 800901c:	f107 0108 	add.w	r1, r7, #8
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
 8009024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009026:	e043      	b.n	80090b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa7d 	bl	800952a <USBD_CtlError>
            err++;
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	3301      	adds	r3, #1
 8009034:	72fb      	strb	r3, [r7, #11]
          break;
 8009036:	e03b      	b.n	80090b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	7c12      	ldrb	r2, [r2, #16]
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	4610      	mov	r0, r2
 8009056:	4798      	blx	r3
 8009058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905a:	e029      	b.n	80090b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa63 	bl	800952a <USBD_CtlError>
            err++;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	3301      	adds	r3, #1
 8009068:	72fb      	strb	r3, [r7, #11]
          break;
 800906a:	e021      	b.n	80090b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	7c12      	ldrb	r2, [r2, #16]
 8009084:	f107 0108 	add.w	r1, r7, #8
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800908e:	e00f      	b.n	80090b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa49 	bl	800952a <USBD_CtlError>
            err++;
 8009098:	7afb      	ldrb	r3, [r7, #11]
 800909a:	3301      	adds	r3, #1
 800909c:	72fb      	strb	r3, [r7, #11]
          break;
 800909e:	e007      	b.n	80090b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa41 	bl	800952a <USBD_CtlError>
          err++;
 80090a8:	7afb      	ldrb	r3, [r7, #11]
 80090aa:	3301      	adds	r3, #1
 80090ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090ae:	bf00      	nop
      }
      break;
 80090b0:	e037      	b.n	8009122 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7c1b      	ldrb	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d109      	bne.n	80090ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c2:	f107 0208 	add.w	r2, r7, #8
 80090c6:	4610      	mov	r0, r2
 80090c8:	4798      	blx	r3
 80090ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090cc:	e029      	b.n	8009122 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fa2a 	bl	800952a <USBD_CtlError>
        err++;
 80090d6:	7afb      	ldrb	r3, [r7, #11]
 80090d8:	3301      	adds	r3, #1
 80090da:	72fb      	strb	r3, [r7, #11]
      break;
 80090dc:	e021      	b.n	8009122 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	7c1b      	ldrb	r3, [r3, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10d      	bne.n	8009102 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ee:	f107 0208 	add.w	r2, r7, #8
 80090f2:	4610      	mov	r0, r2
 80090f4:	4798      	blx	r3
 80090f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3301      	adds	r3, #1
 80090fc:	2207      	movs	r2, #7
 80090fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009100:	e00f      	b.n	8009122 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa10 	bl	800952a <USBD_CtlError>
        err++;
 800910a:	7afb      	ldrb	r3, [r7, #11]
 800910c:	3301      	adds	r3, #1
 800910e:	72fb      	strb	r3, [r7, #11]
      break;
 8009110:	e007      	b.n	8009122 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa08 	bl	800952a <USBD_CtlError>
      err++;
 800911a:	7afb      	ldrb	r3, [r7, #11]
 800911c:	3301      	adds	r3, #1
 800911e:	72fb      	strb	r3, [r7, #11]
      break;
 8009120:	bf00      	nop
  }

  if (err != 0U)
 8009122:	7afb      	ldrb	r3, [r7, #11]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11e      	bne.n	8009166 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	88db      	ldrh	r3, [r3, #6]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d016      	beq.n	800915e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009130:	893b      	ldrh	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00e      	beq.n	8009154 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	88da      	ldrh	r2, [r3, #6]
 800913a:	893b      	ldrh	r3, [r7, #8]
 800913c:	4293      	cmp	r3, r2
 800913e:	bf28      	it	cs
 8009140:	4613      	movcs	r3, r2
 8009142:	b29b      	uxth	r3, r3
 8009144:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009146:	893b      	ldrh	r3, [r7, #8]
 8009148:	461a      	mov	r2, r3
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fa69 	bl	8009624 <USBD_CtlSendData>
 8009152:	e009      	b.n	8009168 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f9e7 	bl	800952a <USBD_CtlError>
 800915c:	e004      	b.n	8009168 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fac1 	bl	80096e6 <USBD_CtlSendStatus>
 8009164:	e000      	b.n	8009168 <USBD_GetDescriptor+0x2cc>
    return;
 8009166:	bf00      	nop
  }
}
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop

08009170 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	889b      	ldrh	r3, [r3, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d131      	bne.n	80091e6 <USBD_SetAddress+0x76>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	88db      	ldrh	r3, [r3, #6]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d12d      	bne.n	80091e6 <USBD_SetAddress+0x76>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	885b      	ldrh	r3, [r3, #2]
 800918e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009190:	d829      	bhi.n	80091e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800919c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d104      	bne.n	80091b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f9bc 	bl	800952a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b2:	e01d      	b.n	80091f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7bfa      	ldrb	r2, [r7, #15]
 80091b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 ff09 	bl	8009fd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fa8d 	bl	80096e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d004      	beq.n	80091dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2202      	movs	r2, #2
 80091d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091da:	e009      	b.n	80091f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e4:	e004      	b.n	80091f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f99e 	bl	800952a <USBD_CtlError>
  }
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	885b      	ldrh	r3, [r3, #2]
 800920a:	b2da      	uxtb	r2, r3
 800920c:	4b4e      	ldr	r3, [pc, #312]	@ (8009348 <USBD_SetConfig+0x150>)
 800920e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009210:	4b4d      	ldr	r3, [pc, #308]	@ (8009348 <USBD_SetConfig+0x150>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d905      	bls.n	8009224 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f985 	bl	800952a <USBD_CtlError>
    return USBD_FAIL;
 8009220:	2303      	movs	r3, #3
 8009222:	e08c      	b.n	800933e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d002      	beq.n	8009236 <USBD_SetConfig+0x3e>
 8009230:	2b03      	cmp	r3, #3
 8009232:	d029      	beq.n	8009288 <USBD_SetConfig+0x90>
 8009234:	e075      	b.n	8009322 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009236:	4b44      	ldr	r3, [pc, #272]	@ (8009348 <USBD_SetConfig+0x150>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d020      	beq.n	8009280 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800923e:	4b42      	ldr	r3, [pc, #264]	@ (8009348 <USBD_SetConfig+0x150>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009248:	4b3f      	ldr	r3, [pc, #252]	@ (8009348 <USBD_SetConfig+0x150>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7fe ffcf 	bl	80081f2 <USBD_SetClassConfig>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d008      	beq.n	8009270 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f962 	bl	800952a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800926e:	e065      	b.n	800933c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fa38 	bl	80096e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2203      	movs	r2, #3
 800927a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800927e:	e05d      	b.n	800933c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fa30 	bl	80096e6 <USBD_CtlSendStatus>
      break;
 8009286:	e059      	b.n	800933c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009288:	4b2f      	ldr	r3, [pc, #188]	@ (8009348 <USBD_SetConfig+0x150>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d112      	bne.n	80092b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009298:	4b2b      	ldr	r3, [pc, #172]	@ (8009348 <USBD_SetConfig+0x150>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092a2:	4b29      	ldr	r3, [pc, #164]	@ (8009348 <USBD_SetConfig+0x150>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7fe ffbe 	bl	800822a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa19 	bl	80096e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092b4:	e042      	b.n	800933c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80092b6:	4b24      	ldr	r3, [pc, #144]	@ (8009348 <USBD_SetConfig+0x150>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d02a      	beq.n	800931a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7fe ffac 	bl	800822a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009348 <USBD_SetConfig+0x150>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009348 <USBD_SetConfig+0x150>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fe ff85 	bl	80081f2 <USBD_SetClassConfig>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00f      	beq.n	8009312 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f918 	bl	800952a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7fe ff91 	bl	800822a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009310:	e014      	b.n	800933c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f9e7 	bl	80096e6 <USBD_CtlSendStatus>
      break;
 8009318:	e010      	b.n	800933c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9e3 	bl	80096e6 <USBD_CtlSendStatus>
      break;
 8009320:	e00c      	b.n	800933c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f900 	bl	800952a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800932a:	4b07      	ldr	r3, [pc, #28]	@ (8009348 <USBD_SetConfig+0x150>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7fe ff7a 	bl	800822a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009336:	2303      	movs	r3, #3
 8009338:	73fb      	strb	r3, [r7, #15]
      break;
 800933a:	bf00      	nop
  }

  return ret;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20000484 	.word	0x20000484

0800934c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	88db      	ldrh	r3, [r3, #6]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d004      	beq.n	8009368 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f8e2 	bl	800952a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009366:	e023      	b.n	80093b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b02      	cmp	r3, #2
 8009372:	dc02      	bgt.n	800937a <USBD_GetConfig+0x2e>
 8009374:	2b00      	cmp	r3, #0
 8009376:	dc03      	bgt.n	8009380 <USBD_GetConfig+0x34>
 8009378:	e015      	b.n	80093a6 <USBD_GetConfig+0x5a>
 800937a:	2b03      	cmp	r3, #3
 800937c:	d00b      	beq.n	8009396 <USBD_GetConfig+0x4a>
 800937e:	e012      	b.n	80093a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	3308      	adds	r3, #8
 800938a:	2201      	movs	r2, #1
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f948 	bl	8009624 <USBD_CtlSendData>
        break;
 8009394:	e00c      	b.n	80093b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3304      	adds	r3, #4
 800939a:	2201      	movs	r2, #1
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f940 	bl	8009624 <USBD_CtlSendData>
        break;
 80093a4:	e004      	b.n	80093b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f8be 	bl	800952a <USBD_CtlError>
        break;
 80093ae:	bf00      	nop
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	3b01      	subs	r3, #1
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d81e      	bhi.n	800940e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	88db      	ldrh	r3, [r3, #6]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d004      	beq.n	80093e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f8a5 	bl	800952a <USBD_CtlError>
        break;
 80093e0:	e01a      	b.n	8009418 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f043 0202 	orr.w	r2, r3, #2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	330c      	adds	r3, #12
 8009402:	2202      	movs	r2, #2
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f90c 	bl	8009624 <USBD_CtlSendData>
      break;
 800940c:	e004      	b.n	8009418 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f88a 	bl	800952a <USBD_CtlError>
      break;
 8009416:	bf00      	nop
  }
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	885b      	ldrh	r3, [r3, #2]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d107      	bne.n	8009442 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f953 	bl	80096e6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009440:	e013      	b.n	800946a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	885b      	ldrh	r3, [r3, #2]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d10b      	bne.n	8009462 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	889b      	ldrh	r3, [r3, #4]
 800944e:	0a1b      	lsrs	r3, r3, #8
 8009450:	b29b      	uxth	r3, r3
 8009452:	b2da      	uxtb	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f943 	bl	80096e6 <USBD_CtlSendStatus>
}
 8009460:	e003      	b.n	800946a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f860 	bl	800952a <USBD_CtlError>
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009482:	b2db      	uxtb	r3, r3
 8009484:	3b01      	subs	r3, #1
 8009486:	2b02      	cmp	r3, #2
 8009488:	d80b      	bhi.n	80094a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	885b      	ldrh	r3, [r3, #2]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d10c      	bne.n	80094ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f923 	bl	80096e6 <USBD_CtlSendStatus>
      }
      break;
 80094a0:	e004      	b.n	80094ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f840 	bl	800952a <USBD_CtlError>
      break;
 80094aa:	e000      	b.n	80094ae <USBD_ClrFeature+0x3c>
      break;
 80094ac:	bf00      	nop
  }
}
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	781a      	ldrb	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3301      	adds	r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	781a      	ldrb	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3301      	adds	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7ff fa3f 	bl	8008964 <SWAPBYTE>
 80094e6:	4603      	mov	r3, r0
 80094e8:	461a      	mov	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	3301      	adds	r3, #1
 80094f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff fa32 	bl	8008964 <SWAPBYTE>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3301      	adds	r3, #1
 800950c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3301      	adds	r3, #1
 8009512:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f7ff fa25 	bl	8008964 <SWAPBYTE>
 800951a:	4603      	mov	r3, r0
 800951c:	461a      	mov	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	80da      	strh	r2, [r3, #6]
}
 8009522:	bf00      	nop
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009534:	2180      	movs	r1, #128	@ 0x80
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fce4 	bl	8009f04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800953c:	2100      	movs	r1, #0
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fce0 	bl	8009f04 <USBD_LL_StallEP>
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d042      	beq.n	80095e8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009566:	6938      	ldr	r0, [r7, #16]
 8009568:	f000 f842 	bl	80095f0 <USBD_GetLen>
 800956c:	4603      	mov	r3, r0
 800956e:	3301      	adds	r3, #1
 8009570:	005b      	lsls	r3, r3, #1
 8009572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009576:	d808      	bhi.n	800958a <USBD_GetString+0x3e>
 8009578:	6938      	ldr	r0, [r7, #16]
 800957a:	f000 f839 	bl	80095f0 <USBD_GetLen>
 800957e:	4603      	mov	r3, r0
 8009580:	3301      	adds	r3, #1
 8009582:	b29b      	uxth	r3, r3
 8009584:	005b      	lsls	r3, r3, #1
 8009586:	b29a      	uxth	r2, r3
 8009588:	e001      	b.n	800958e <USBD_GetString+0x42>
 800958a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	4413      	add	r3, r2
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	7812      	ldrb	r2, [r2, #0]
 800959c:	701a      	strb	r2, [r3, #0]
  idx++;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	3301      	adds	r3, #1
 80095a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	4413      	add	r3, r2
 80095aa:	2203      	movs	r2, #3
 80095ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	3301      	adds	r3, #1
 80095b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095b4:	e013      	b.n	80095de <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	4413      	add	r3, r2
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	7812      	ldrb	r2, [r2, #0]
 80095c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	3301      	adds	r3, #1
 80095c6:	613b      	str	r3, [r7, #16]
    idx++;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	3301      	adds	r3, #1
 80095cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	4413      	add	r3, r2
 80095d4:	2200      	movs	r2, #0
 80095d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	3301      	adds	r3, #1
 80095dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e7      	bne.n	80095b6 <USBD_GetString+0x6a>
 80095e6:	e000      	b.n	80095ea <USBD_GetString+0x9e>
    return;
 80095e8:	bf00      	nop
  }
}
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009600:	e005      	b.n	800960e <USBD_GetLen+0x1e>
  {
    len++;
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	3301      	adds	r3, #1
 8009606:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	3301      	adds	r3, #1
 800960c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1f5      	bne.n	8009602 <USBD_GetLen+0x12>
  }

  return len;
 8009616:	7bfb      	ldrb	r3, [r7, #15]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2202      	movs	r2, #2
 8009634:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	2100      	movs	r1, #0
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 fce0 	bl	800a016 <USBD_LL_Transmit>

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	2100      	movs	r1, #0
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 fccf 	bl	800a016 <USBD_LL_Transmit>

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	60f8      	str	r0, [r7, #12]
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2203      	movs	r2, #3
 8009692:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	2100      	movs	r1, #0
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 fccf 	bl	800a058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	2100      	movs	r1, #0
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 fcbe 	bl	800a058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2204      	movs	r2, #4
 80096f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096f6:	2300      	movs	r3, #0
 80096f8:	2200      	movs	r2, #0
 80096fa:	2100      	movs	r1, #0
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fc8a 	bl	800a016 <USBD_LL_Transmit>

  return USBD_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2205      	movs	r2, #5
 8009718:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800971c:	2300      	movs	r3, #0
 800971e:	2200      	movs	r2, #0
 8009720:	2100      	movs	r1, #0
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fc98 	bl	800a058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009738:	2200      	movs	r2, #0
 800973a:	4912      	ldr	r1, [pc, #72]	@ (8009784 <MX_USB_DEVICE_Init+0x50>)
 800973c:	4812      	ldr	r0, [pc, #72]	@ (8009788 <MX_USB_DEVICE_Init+0x54>)
 800973e:	f7fe fcdb 	bl	80080f8 <USBD_Init>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009748:	f7f8 f914 	bl	8001974 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800974c:	490f      	ldr	r1, [pc, #60]	@ (800978c <MX_USB_DEVICE_Init+0x58>)
 800974e:	480e      	ldr	r0, [pc, #56]	@ (8009788 <MX_USB_DEVICE_Init+0x54>)
 8009750:	f7fe fd02 	bl	8008158 <USBD_RegisterClass>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800975a:	f7f8 f90b 	bl	8001974 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800975e:	490c      	ldr	r1, [pc, #48]	@ (8009790 <MX_USB_DEVICE_Init+0x5c>)
 8009760:	4809      	ldr	r0, [pc, #36]	@ (8009788 <MX_USB_DEVICE_Init+0x54>)
 8009762:	f7fe fbf9 	bl	8007f58 <USBD_CDC_RegisterInterface>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800976c:	f7f8 f902 	bl	8001974 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009770:	4805      	ldr	r0, [pc, #20]	@ (8009788 <MX_USB_DEVICE_Init+0x54>)
 8009772:	f7fe fd27 	bl	80081c4 <USBD_Start>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800977c:	f7f8 f8fa 	bl	8001974 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009780:	bf00      	nop
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200000ac 	.word	0x200000ac
 8009788:	20000488 	.word	0x20000488
 800978c:	20000018 	.word	0x20000018
 8009790:	20000098 	.word	0x20000098

08009794 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009798:	2200      	movs	r2, #0
 800979a:	4905      	ldr	r1, [pc, #20]	@ (80097b0 <CDC_Init_FS+0x1c>)
 800979c:	4805      	ldr	r0, [pc, #20]	@ (80097b4 <CDC_Init_FS+0x20>)
 800979e:	f7fe fbf5 	bl	8007f8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097a2:	4905      	ldr	r1, [pc, #20]	@ (80097b8 <CDC_Init_FS+0x24>)
 80097a4:	4803      	ldr	r0, [pc, #12]	@ (80097b4 <CDC_Init_FS+0x20>)
 80097a6:	f7fe fc13 	bl	8007fd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20000f64 	.word	0x20000f64
 80097b4:	20000488 	.word	0x20000488
 80097b8:	20000764 	.word	0x20000764

080097bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
 80097d8:	4613      	mov	r3, r2
 80097da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	2b23      	cmp	r3, #35	@ 0x23
 80097e0:	d84a      	bhi.n	8009878 <CDC_Control_FS+0xac>
 80097e2:	a201      	add	r2, pc, #4	@ (adr r2, 80097e8 <CDC_Control_FS+0x1c>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	08009879 	.word	0x08009879
 80097ec:	08009879 	.word	0x08009879
 80097f0:	08009879 	.word	0x08009879
 80097f4:	08009879 	.word	0x08009879
 80097f8:	08009879 	.word	0x08009879
 80097fc:	08009879 	.word	0x08009879
 8009800:	08009879 	.word	0x08009879
 8009804:	08009879 	.word	0x08009879
 8009808:	08009879 	.word	0x08009879
 800980c:	08009879 	.word	0x08009879
 8009810:	08009879 	.word	0x08009879
 8009814:	08009879 	.word	0x08009879
 8009818:	08009879 	.word	0x08009879
 800981c:	08009879 	.word	0x08009879
 8009820:	08009879 	.word	0x08009879
 8009824:	08009879 	.word	0x08009879
 8009828:	08009879 	.word	0x08009879
 800982c:	08009879 	.word	0x08009879
 8009830:	08009879 	.word	0x08009879
 8009834:	08009879 	.word	0x08009879
 8009838:	08009879 	.word	0x08009879
 800983c:	08009879 	.word	0x08009879
 8009840:	08009879 	.word	0x08009879
 8009844:	08009879 	.word	0x08009879
 8009848:	08009879 	.word	0x08009879
 800984c:	08009879 	.word	0x08009879
 8009850:	08009879 	.word	0x08009879
 8009854:	08009879 	.word	0x08009879
 8009858:	08009879 	.word	0x08009879
 800985c:	08009879 	.word	0x08009879
 8009860:	08009879 	.word	0x08009879
 8009864:	08009879 	.word	0x08009879
 8009868:	08009879 	.word	0x08009879
 800986c:	08009879 	.word	0x08009879
 8009870:	08009879 	.word	0x08009879
 8009874:	08009879 	.word	0x08009879
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009878:	bf00      	nop
  }

  return (USBD_OK);
 800987a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800987c:	4618      	mov	r0, r3
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	4805      	ldr	r0, [pc, #20]	@ (80098ac <CDC_Receive_FS+0x24>)
 8009896:	f7fe fb9b 	bl	8007fd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800989a:	4804      	ldr	r0, [pc, #16]	@ (80098ac <CDC_Receive_FS+0x24>)
 800989c:	f7fe fbf6 	bl	800808c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80098a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20000488 	.word	0x20000488

080098b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098c0:	4b0d      	ldr	r3, [pc, #52]	@ (80098f8 <CDC_Transmit_FS+0x48>)
 80098c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e00b      	b.n	80098ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098d6:	887b      	ldrh	r3, [r7, #2]
 80098d8:	461a      	mov	r2, r3
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	4806      	ldr	r0, [pc, #24]	@ (80098f8 <CDC_Transmit_FS+0x48>)
 80098de:	f7fe fb55 	bl	8007f8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098e2:	4805      	ldr	r0, [pc, #20]	@ (80098f8 <CDC_Transmit_FS+0x48>)
 80098e4:	f7fe fb92 	bl	800800c <USBD_CDC_TransmitPacket>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20000488 	.word	0x20000488

080098fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800990e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009912:	4618      	mov	r0, r3
 8009914:	371c      	adds	r7, #28
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2212      	movs	r2, #18
 8009930:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009932:	4b03      	ldr	r3, [pc, #12]	@ (8009940 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	200000c8 	.word	0x200000c8

08009944 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2204      	movs	r2, #4
 8009954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009956:	4b03      	ldr	r3, [pc, #12]	@ (8009964 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	200000dc 	.word	0x200000dc

08009968 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4907      	ldr	r1, [pc, #28]	@ (800999c <USBD_FS_ProductStrDescriptor+0x34>)
 800997e:	4808      	ldr	r0, [pc, #32]	@ (80099a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009980:	f7ff fde4 	bl	800954c <USBD_GetString>
 8009984:	e004      	b.n	8009990 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4904      	ldr	r1, [pc, #16]	@ (800999c <USBD_FS_ProductStrDescriptor+0x34>)
 800998a:	4805      	ldr	r0, [pc, #20]	@ (80099a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800998c:	f7ff fdde 	bl	800954c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009990:	4b02      	ldr	r3, [pc, #8]	@ (800999c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20001764 	.word	0x20001764
 80099a0:	0800d904 	.word	0x0800d904

080099a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	4904      	ldr	r1, [pc, #16]	@ (80099c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099b4:	4804      	ldr	r0, [pc, #16]	@ (80099c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099b6:	f7ff fdc9 	bl	800954c <USBD_GetString>
  return USBD_StrDesc;
 80099ba:	4b02      	ldr	r3, [pc, #8]	@ (80099c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20001764 	.word	0x20001764
 80099c8:	0800d91c 	.word	0x0800d91c

080099cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	221a      	movs	r2, #26
 80099dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099de:	f000 f843 	bl	8009a68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099e2:	4b02      	ldr	r3, [pc, #8]	@ (80099ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	200000e0 	.word	0x200000e0

080099f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4907      	ldr	r1, [pc, #28]	@ (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a06:	4808      	ldr	r0, [pc, #32]	@ (8009a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a08:	f7ff fda0 	bl	800954c <USBD_GetString>
 8009a0c:	e004      	b.n	8009a18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	4904      	ldr	r1, [pc, #16]	@ (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a12:	4805      	ldr	r0, [pc, #20]	@ (8009a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a14:	f7ff fd9a 	bl	800954c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a18:	4b02      	ldr	r3, [pc, #8]	@ (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20001764 	.word	0x20001764
 8009a28:	0800d930 	.word	0x0800d930

08009a2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d105      	bne.n	8009a4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4907      	ldr	r1, [pc, #28]	@ (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a42:	4808      	ldr	r0, [pc, #32]	@ (8009a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a44:	f7ff fd82 	bl	800954c <USBD_GetString>
 8009a48:	e004      	b.n	8009a54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4904      	ldr	r1, [pc, #16]	@ (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a4e:	4805      	ldr	r0, [pc, #20]	@ (8009a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a50:	f7ff fd7c 	bl	800954c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a54:	4b02      	ldr	r3, [pc, #8]	@ (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20001764 	.word	0x20001764
 8009a64:	0800d93c 	.word	0x0800d93c

08009a68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4413      	add	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a7c:	2208      	movs	r2, #8
 8009a7e:	4906      	ldr	r1, [pc, #24]	@ (8009a98 <Get_SerialNum+0x30>)
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 f80d 	bl	8009aa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a86:	2204      	movs	r2, #4
 8009a88:	4904      	ldr	r1, [pc, #16]	@ (8009a9c <Get_SerialNum+0x34>)
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f808 	bl	8009aa0 <IntToUnicode>
  }
}
 8009a90:	bf00      	nop
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200000e2 	.word	0x200000e2
 8009a9c:	200000f2 	.word	0x200000f2

08009aa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	75fb      	strb	r3, [r7, #23]
 8009ab6:	e027      	b.n	8009b08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	0f1b      	lsrs	r3, r3, #28
 8009abc:	2b09      	cmp	r3, #9
 8009abe:	d80b      	bhi.n	8009ad8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	0f1b      	lsrs	r3, r3, #28
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	4619      	mov	r1, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	440b      	add	r3, r1
 8009ad0:	3230      	adds	r2, #48	@ 0x30
 8009ad2:	b2d2      	uxtb	r2, r2
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	e00a      	b.n	8009aee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	0f1b      	lsrs	r3, r3, #28
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	440b      	add	r3, r1
 8009ae8:	3237      	adds	r2, #55	@ 0x37
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	011b      	lsls	r3, r3, #4
 8009af2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	3301      	adds	r3, #1
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	4413      	add	r3, r2
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	3301      	adds	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
 8009b08:	7dfa      	ldrb	r2, [r7, #23]
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d3d3      	bcc.n	8009ab8 <IntToUnicode+0x18>
  }
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
	...

08009b20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	@ 0x28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b28:	f107 0314 	add.w	r3, r7, #20
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	605a      	str	r2, [r3, #4]
 8009b32:	609a      	str	r2, [r3, #8]
 8009b34:	60da      	str	r2, [r3, #12]
 8009b36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b40:	d13a      	bne.n	8009bb8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	4b1e      	ldr	r3, [pc, #120]	@ (8009bc0 <HAL_PCD_MspInit+0xa0>)
 8009b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8009bc0 <HAL_PCD_MspInit+0xa0>)
 8009b4c:	f043 0301 	orr.w	r3, r3, #1
 8009b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b52:	4b1b      	ldr	r3, [pc, #108]	@ (8009bc0 <HAL_PCD_MspInit+0xa0>)
 8009b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	613b      	str	r3, [r7, #16]
 8009b5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b64:	2302      	movs	r3, #2
 8009b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b70:	230a      	movs	r3, #10
 8009b72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b74:	f107 0314 	add.w	r3, r7, #20
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4812      	ldr	r0, [pc, #72]	@ (8009bc4 <HAL_PCD_MspInit+0xa4>)
 8009b7c:	f7f8 fee2 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b80:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc0 <HAL_PCD_MspInit+0xa0>)
 8009b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b84:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc0 <HAL_PCD_MspInit+0xa0>)
 8009b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b8a:	6353      	str	r3, [r2, #52]	@ 0x34
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc0 <HAL_PCD_MspInit+0xa0>)
 8009b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b94:	4a0a      	ldr	r2, [pc, #40]	@ (8009bc0 <HAL_PCD_MspInit+0xa0>)
 8009b96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b9c:	4b08      	ldr	r3, [pc, #32]	@ (8009bc0 <HAL_PCD_MspInit+0xa0>)
 8009b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2100      	movs	r1, #0
 8009bac:	2043      	movs	r0, #67	@ 0x43
 8009bae:	f7f8 fe92 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009bb2:	2043      	movs	r0, #67	@ 0x43
 8009bb4:	f7f8 feab 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bb8:	bf00      	nop
 8009bba:	3728      	adds	r7, #40	@ 0x28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	40023800 	.word	0x40023800
 8009bc4:	40020000 	.word	0x40020000

08009bc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f7fe fb3d 	bl	800825e <USBD_LL_SetupStage>
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009bfe:	78fa      	ldrb	r2, [r7, #3]
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	00db      	lsls	r3, r3, #3
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	78fb      	ldrb	r3, [r7, #3]
 8009c14:	4619      	mov	r1, r3
 8009c16:	f7fe fb77 	bl	8008308 <USBD_LL_DataOutStage>
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009c34:	78fa      	ldrb	r2, [r7, #3]
 8009c36:	6879      	ldr	r1, [r7, #4]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	440b      	add	r3, r1
 8009c42:	3320      	adds	r3, #32
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	78fb      	ldrb	r3, [r7, #3]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f7fe fc19 	bl	8008480 <USBD_LL_DataInStage>
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe fd5d 	bl	8008724 <USBD_LL_SOF>
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	79db      	ldrb	r3, [r3, #7]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d102      	bne.n	8009c8c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
 8009c8a:	e008      	b.n	8009c9e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	79db      	ldrb	r3, [r3, #7]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d102      	bne.n	8009c9a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c94:	2301      	movs	r3, #1
 8009c96:	73fb      	strb	r3, [r7, #15]
 8009c98:	e001      	b.n	8009c9e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c9a:	f7f7 fe6b 	bl	8001974 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ca4:	7bfa      	ldrb	r2, [r7, #15]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe fcf7 	bl	800869c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe fc9e 	bl	80085f6 <USBD_LL_Reset>
}
 8009cba:	bf00      	nop
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
	...

08009cc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fe fcf2 	bl	80086bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	6812      	ldr	r2, [r2, #0]
 8009ce6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7adb      	ldrb	r3, [r3, #11]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d005      	beq.n	8009d04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cf8:	4b04      	ldr	r3, [pc, #16]	@ (8009d0c <HAL_PCD_SuspendCallback+0x48>)
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	4a03      	ldr	r2, [pc, #12]	@ (8009d0c <HAL_PCD_SuspendCallback+0x48>)
 8009cfe:	f043 0306 	orr.w	r3, r3, #6
 8009d02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	e000ed00 	.word	0xe000ed00

08009d10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fce8 	bl	80086f4 <USBD_LL_Resume>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d3e:	78fa      	ldrb	r2, [r7, #3]
 8009d40:	4611      	mov	r1, r2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fd40 	bl	80087c8 <USBD_LL_IsoOUTIncomplete>
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d62:	78fa      	ldrb	r2, [r7, #3]
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fe fcfc 	bl	8008764 <USBD_LL_IsoINIncomplete>
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fd52 	bl	800882c <USBD_LL_DevConnected>
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fd4f 	bl	8008842 <USBD_LL_DevDisconnected>
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d13c      	bne.n	8009e36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009dbc:	4a20      	ldr	r2, [pc, #128]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009dc8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009dce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009dd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009dd6:	2204      	movs	r2, #4
 8009dd8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009dda:	4b19      	ldr	r3, [pc, #100]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009ddc:	2202      	movs	r2, #2
 8009dde:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009de0:	4b17      	ldr	r3, [pc, #92]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009de6:	4b16      	ldr	r3, [pc, #88]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009de8:	2202      	movs	r2, #2
 8009dea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009dec:	4b14      	ldr	r3, [pc, #80]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009df2:	4b13      	ldr	r3, [pc, #76]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009df8:	4b11      	ldr	r3, [pc, #68]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dfe:	4b10      	ldr	r3, [pc, #64]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e04:	4b0e      	ldr	r3, [pc, #56]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e0a:	480d      	ldr	r0, [pc, #52]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009e0c:	f7f9 f894 	bl	8002f38 <HAL_PCD_Init>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009e16:	f7f7 fdad 	bl	8001974 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e1a:	2180      	movs	r1, #128	@ 0x80
 8009e1c:	4808      	ldr	r0, [pc, #32]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009e1e:	f7fa fac0 	bl	80043a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e22:	2240      	movs	r2, #64	@ 0x40
 8009e24:	2100      	movs	r1, #0
 8009e26:	4806      	ldr	r0, [pc, #24]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009e28:	f7fa fa74 	bl	8004314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e2c:	2280      	movs	r2, #128	@ 0x80
 8009e2e:	2101      	movs	r1, #1
 8009e30:	4803      	ldr	r0, [pc, #12]	@ (8009e40 <USBD_LL_Init+0x94>)
 8009e32:	f7fa fa6f 	bl	8004314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20001964 	.word	0x20001964

08009e44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f9 f97b 	bl	8003156 <HAL_PCD_Start>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 f942 	bl	800a0f0 <USBD_Get_USB_Status>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	4608      	mov	r0, r1
 8009e84:	4611      	mov	r1, r2
 8009e86:	461a      	mov	r2, r3
 8009e88:	4603      	mov	r3, r0
 8009e8a:	70fb      	strb	r3, [r7, #3]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70bb      	strb	r3, [r7, #2]
 8009e90:	4613      	mov	r3, r2
 8009e92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ea2:	78bb      	ldrb	r3, [r7, #2]
 8009ea4:	883a      	ldrh	r2, [r7, #0]
 8009ea6:	78f9      	ldrb	r1, [r7, #3]
 8009ea8:	f7f9 fe4f 	bl	8003b4a <HAL_PCD_EP_Open>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f91c 	bl	800a0f0 <USBD_Get_USB_Status>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7f9 fe9a 	bl	8003c1e <HAL_PCD_EP_Close>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 f8fd 	bl	800a0f0 <USBD_Get_USB_Status>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f1e:	78fa      	ldrb	r2, [r7, #3]
 8009f20:	4611      	mov	r1, r2
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7f9 ff52 	bl	8003dcc <HAL_PCD_EP_SetStall>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f8de 	bl	800a0f0 <USBD_Get_USB_Status>
 8009f34:	4603      	mov	r3, r0
 8009f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f5c:	78fa      	ldrb	r2, [r7, #3]
 8009f5e:	4611      	mov	r1, r2
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7f9 ff96 	bl	8003e92 <HAL_PCD_EP_ClrStall>
 8009f66:	4603      	mov	r3, r0
 8009f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 f8bf 	bl	800a0f0 <USBD_Get_USB_Status>
 8009f72:	4603      	mov	r3, r0
 8009f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	da0b      	bge.n	8009fb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fa2:	68f9      	ldr	r1, [r7, #12]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	440b      	add	r3, r1
 8009fae:	3316      	adds	r3, #22
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	e00b      	b.n	8009fcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fba:	68f9      	ldr	r1, [r7, #12]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009fca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ff2:	78fa      	ldrb	r2, [r7, #3]
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7f9 fd83 	bl	8003b02 <HAL_PCD_SetAddress>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f874 	bl	800a0f0 <USBD_Get_USB_Status>
 800a008:	4603      	mov	r3, r0
 800a00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b086      	sub	sp, #24
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	603b      	str	r3, [r7, #0]
 800a022:	460b      	mov	r3, r1
 800a024:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a034:	7af9      	ldrb	r1, [r7, #11]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	f7f9 fe8d 	bl	8003d58 <HAL_PCD_EP_Transmit>
 800a03e:	4603      	mov	r3, r0
 800a040:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f853 	bl	800a0f0 <USBD_Get_USB_Status>
 800a04a:	4603      	mov	r3, r0
 800a04c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a04e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	607a      	str	r2, [r7, #4]
 800a062:	603b      	str	r3, [r7, #0]
 800a064:	460b      	mov	r3, r1
 800a066:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a076:	7af9      	ldrb	r1, [r7, #11]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	f7f9 fe19 	bl	8003cb2 <HAL_PCD_EP_Receive>
 800a080:	4603      	mov	r3, r0
 800a082:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 f832 	bl	800a0f0 <USBD_Get_USB_Status>
 800a08c:	4603      	mov	r3, r0
 800a08e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a090:	7dbb      	ldrb	r3, [r7, #22]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0ac:	78fa      	ldrb	r2, [r7, #3]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7f9 fe39 	bl	8003d28 <HAL_PCD_EP_GetRxCount>
 800a0b6:	4603      	mov	r3, r0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0c8:	4b03      	ldr	r3, [pc, #12]	@ (800a0d8 <USBD_static_malloc+0x18>)
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	20001e48 	.word	0x20001e48

0800a0dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]

}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d817      	bhi.n	800a134 <USBD_Get_USB_Status+0x44>
 800a104:	a201      	add	r2, pc, #4	@ (adr r2, 800a10c <USBD_Get_USB_Status+0x1c>)
 800a106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10a:	bf00      	nop
 800a10c:	0800a11d 	.word	0x0800a11d
 800a110:	0800a123 	.word	0x0800a123
 800a114:	0800a129 	.word	0x0800a129
 800a118:	0800a12f 	.word	0x0800a12f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73fb      	strb	r3, [r7, #15]
    break;
 800a120:	e00b      	b.n	800a13a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a122:	2303      	movs	r3, #3
 800a124:	73fb      	strb	r3, [r7, #15]
    break;
 800a126:	e008      	b.n	800a13a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
    break;
 800a12c:	e005      	b.n	800a13a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a12e:	2303      	movs	r3, #3
 800a130:	73fb      	strb	r3, [r7, #15]
    break;
 800a132:	e002      	b.n	800a13a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a134:	2303      	movs	r3, #3
 800a136:	73fb      	strb	r3, [r7, #15]
    break;
 800a138:	bf00      	nop
  }
  return usb_status;
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <__cvt>:
 800a148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	ec57 6b10 	vmov	r6, r7, d0
 800a150:	2f00      	cmp	r7, #0
 800a152:	460c      	mov	r4, r1
 800a154:	4619      	mov	r1, r3
 800a156:	463b      	mov	r3, r7
 800a158:	bfbb      	ittet	lt
 800a15a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a15e:	461f      	movlt	r7, r3
 800a160:	2300      	movge	r3, #0
 800a162:	232d      	movlt	r3, #45	@ 0x2d
 800a164:	700b      	strb	r3, [r1, #0]
 800a166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a168:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a16c:	4691      	mov	r9, r2
 800a16e:	f023 0820 	bic.w	r8, r3, #32
 800a172:	bfbc      	itt	lt
 800a174:	4632      	movlt	r2, r6
 800a176:	4616      	movlt	r6, r2
 800a178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a17c:	d005      	beq.n	800a18a <__cvt+0x42>
 800a17e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a182:	d100      	bne.n	800a186 <__cvt+0x3e>
 800a184:	3401      	adds	r4, #1
 800a186:	2102      	movs	r1, #2
 800a188:	e000      	b.n	800a18c <__cvt+0x44>
 800a18a:	2103      	movs	r1, #3
 800a18c:	ab03      	add	r3, sp, #12
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	ab02      	add	r3, sp, #8
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	ec47 6b10 	vmov	d0, r6, r7
 800a198:	4653      	mov	r3, sl
 800a19a:	4622      	mov	r2, r4
 800a19c:	f000 fe5c 	bl	800ae58 <_dtoa_r>
 800a1a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	d119      	bne.n	800a1dc <__cvt+0x94>
 800a1a8:	f019 0f01 	tst.w	r9, #1
 800a1ac:	d00e      	beq.n	800a1cc <__cvt+0x84>
 800a1ae:	eb00 0904 	add.w	r9, r0, r4
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	f7f6 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1be:	b108      	cbz	r0, 800a1c4 <__cvt+0x7c>
 800a1c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1c4:	2230      	movs	r2, #48	@ 0x30
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	454b      	cmp	r3, r9
 800a1ca:	d31e      	bcc.n	800a20a <__cvt+0xc2>
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1d0:	1b5b      	subs	r3, r3, r5
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	b004      	add	sp, #16
 800a1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1e0:	eb00 0904 	add.w	r9, r0, r4
 800a1e4:	d1e5      	bne.n	800a1b2 <__cvt+0x6a>
 800a1e6:	7803      	ldrb	r3, [r0, #0]
 800a1e8:	2b30      	cmp	r3, #48	@ 0x30
 800a1ea:	d10a      	bne.n	800a202 <__cvt+0xba>
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	f7f6 fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1f8:	b918      	cbnz	r0, 800a202 <__cvt+0xba>
 800a1fa:	f1c4 0401 	rsb	r4, r4, #1
 800a1fe:	f8ca 4000 	str.w	r4, [sl]
 800a202:	f8da 3000 	ldr.w	r3, [sl]
 800a206:	4499      	add	r9, r3
 800a208:	e7d3      	b.n	800a1b2 <__cvt+0x6a>
 800a20a:	1c59      	adds	r1, r3, #1
 800a20c:	9103      	str	r1, [sp, #12]
 800a20e:	701a      	strb	r2, [r3, #0]
 800a210:	e7d9      	b.n	800a1c6 <__cvt+0x7e>

0800a212 <__exponent>:
 800a212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a214:	2900      	cmp	r1, #0
 800a216:	bfba      	itte	lt
 800a218:	4249      	neglt	r1, r1
 800a21a:	232d      	movlt	r3, #45	@ 0x2d
 800a21c:	232b      	movge	r3, #43	@ 0x2b
 800a21e:	2909      	cmp	r1, #9
 800a220:	7002      	strb	r2, [r0, #0]
 800a222:	7043      	strb	r3, [r0, #1]
 800a224:	dd29      	ble.n	800a27a <__exponent+0x68>
 800a226:	f10d 0307 	add.w	r3, sp, #7
 800a22a:	461d      	mov	r5, r3
 800a22c:	270a      	movs	r7, #10
 800a22e:	461a      	mov	r2, r3
 800a230:	fbb1 f6f7 	udiv	r6, r1, r7
 800a234:	fb07 1416 	mls	r4, r7, r6, r1
 800a238:	3430      	adds	r4, #48	@ 0x30
 800a23a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a23e:	460c      	mov	r4, r1
 800a240:	2c63      	cmp	r4, #99	@ 0x63
 800a242:	f103 33ff 	add.w	r3, r3, #4294967295
 800a246:	4631      	mov	r1, r6
 800a248:	dcf1      	bgt.n	800a22e <__exponent+0x1c>
 800a24a:	3130      	adds	r1, #48	@ 0x30
 800a24c:	1e94      	subs	r4, r2, #2
 800a24e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a252:	1c41      	adds	r1, r0, #1
 800a254:	4623      	mov	r3, r4
 800a256:	42ab      	cmp	r3, r5
 800a258:	d30a      	bcc.n	800a270 <__exponent+0x5e>
 800a25a:	f10d 0309 	add.w	r3, sp, #9
 800a25e:	1a9b      	subs	r3, r3, r2
 800a260:	42ac      	cmp	r4, r5
 800a262:	bf88      	it	hi
 800a264:	2300      	movhi	r3, #0
 800a266:	3302      	adds	r3, #2
 800a268:	4403      	add	r3, r0
 800a26a:	1a18      	subs	r0, r3, r0
 800a26c:	b003      	add	sp, #12
 800a26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a270:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a274:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a278:	e7ed      	b.n	800a256 <__exponent+0x44>
 800a27a:	2330      	movs	r3, #48	@ 0x30
 800a27c:	3130      	adds	r1, #48	@ 0x30
 800a27e:	7083      	strb	r3, [r0, #2]
 800a280:	70c1      	strb	r1, [r0, #3]
 800a282:	1d03      	adds	r3, r0, #4
 800a284:	e7f1      	b.n	800a26a <__exponent+0x58>
	...

0800a288 <_printf_float>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	b08d      	sub	sp, #52	@ 0x34
 800a28e:	460c      	mov	r4, r1
 800a290:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a294:	4616      	mov	r6, r2
 800a296:	461f      	mov	r7, r3
 800a298:	4605      	mov	r5, r0
 800a29a:	f000 fcdb 	bl	800ac54 <_localeconv_r>
 800a29e:	6803      	ldr	r3, [r0, #0]
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f5 ffe4 	bl	8000270 <strlen>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a2b0:	9005      	str	r0, [sp, #20]
 800a2b2:	3307      	adds	r3, #7
 800a2b4:	f023 0307 	bic.w	r3, r3, #7
 800a2b8:	f103 0208 	add.w	r2, r3, #8
 800a2bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2c0:	f8d4 b000 	ldr.w	fp, [r4]
 800a2c4:	f8c8 2000 	str.w	r2, [r8]
 800a2c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2d0:	9307      	str	r3, [sp, #28]
 800a2d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a2da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2de:	4b9c      	ldr	r3, [pc, #624]	@ (800a550 <_printf_float+0x2c8>)
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e4:	f7f6 fc22 	bl	8000b2c <__aeabi_dcmpun>
 800a2e8:	bb70      	cbnz	r0, 800a348 <_printf_float+0xc0>
 800a2ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ee:	4b98      	ldr	r3, [pc, #608]	@ (800a550 <_printf_float+0x2c8>)
 800a2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f4:	f7f6 fbfc 	bl	8000af0 <__aeabi_dcmple>
 800a2f8:	bb30      	cbnz	r0, 800a348 <_printf_float+0xc0>
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4640      	mov	r0, r8
 800a300:	4649      	mov	r1, r9
 800a302:	f7f6 fbeb 	bl	8000adc <__aeabi_dcmplt>
 800a306:	b110      	cbz	r0, 800a30e <_printf_float+0x86>
 800a308:	232d      	movs	r3, #45	@ 0x2d
 800a30a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a30e:	4a91      	ldr	r2, [pc, #580]	@ (800a554 <_printf_float+0x2cc>)
 800a310:	4b91      	ldr	r3, [pc, #580]	@ (800a558 <_printf_float+0x2d0>)
 800a312:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a316:	bf94      	ite	ls
 800a318:	4690      	movls	r8, r2
 800a31a:	4698      	movhi	r8, r3
 800a31c:	2303      	movs	r3, #3
 800a31e:	6123      	str	r3, [r4, #16]
 800a320:	f02b 0304 	bic.w	r3, fp, #4
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	f04f 0900 	mov.w	r9, #0
 800a32a:	9700      	str	r7, [sp, #0]
 800a32c:	4633      	mov	r3, r6
 800a32e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a330:	4621      	mov	r1, r4
 800a332:	4628      	mov	r0, r5
 800a334:	f000 f9d2 	bl	800a6dc <_printf_common>
 800a338:	3001      	adds	r0, #1
 800a33a:	f040 808d 	bne.w	800a458 <_printf_float+0x1d0>
 800a33e:	f04f 30ff 	mov.w	r0, #4294967295
 800a342:	b00d      	add	sp, #52	@ 0x34
 800a344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a348:	4642      	mov	r2, r8
 800a34a:	464b      	mov	r3, r9
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	f7f6 fbec 	bl	8000b2c <__aeabi_dcmpun>
 800a354:	b140      	cbz	r0, 800a368 <_printf_float+0xe0>
 800a356:	464b      	mov	r3, r9
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bfbc      	itt	lt
 800a35c:	232d      	movlt	r3, #45	@ 0x2d
 800a35e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a362:	4a7e      	ldr	r2, [pc, #504]	@ (800a55c <_printf_float+0x2d4>)
 800a364:	4b7e      	ldr	r3, [pc, #504]	@ (800a560 <_printf_float+0x2d8>)
 800a366:	e7d4      	b.n	800a312 <_printf_float+0x8a>
 800a368:	6863      	ldr	r3, [r4, #4]
 800a36a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a36e:	9206      	str	r2, [sp, #24]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	d13b      	bne.n	800a3ec <_printf_float+0x164>
 800a374:	2306      	movs	r3, #6
 800a376:	6063      	str	r3, [r4, #4]
 800a378:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a37c:	2300      	movs	r3, #0
 800a37e:	6022      	str	r2, [r4, #0]
 800a380:	9303      	str	r3, [sp, #12]
 800a382:	ab0a      	add	r3, sp, #40	@ 0x28
 800a384:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a388:	ab09      	add	r3, sp, #36	@ 0x24
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	6861      	ldr	r1, [r4, #4]
 800a38e:	ec49 8b10 	vmov	d0, r8, r9
 800a392:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a396:	4628      	mov	r0, r5
 800a398:	f7ff fed6 	bl	800a148 <__cvt>
 800a39c:	9b06      	ldr	r3, [sp, #24]
 800a39e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3a0:	2b47      	cmp	r3, #71	@ 0x47
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	d129      	bne.n	800a3fa <_printf_float+0x172>
 800a3a6:	1cc8      	adds	r0, r1, #3
 800a3a8:	db02      	blt.n	800a3b0 <_printf_float+0x128>
 800a3aa:	6863      	ldr	r3, [r4, #4]
 800a3ac:	4299      	cmp	r1, r3
 800a3ae:	dd41      	ble.n	800a434 <_printf_float+0x1ac>
 800a3b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3b4:	fa5f fa8a 	uxtb.w	sl, sl
 800a3b8:	3901      	subs	r1, #1
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3c2:	f7ff ff26 	bl	800a212 <__exponent>
 800a3c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3c8:	1813      	adds	r3, r2, r0
 800a3ca:	2a01      	cmp	r2, #1
 800a3cc:	4681      	mov	r9, r0
 800a3ce:	6123      	str	r3, [r4, #16]
 800a3d0:	dc02      	bgt.n	800a3d8 <_printf_float+0x150>
 800a3d2:	6822      	ldr	r2, [r4, #0]
 800a3d4:	07d2      	lsls	r2, r2, #31
 800a3d6:	d501      	bpl.n	800a3dc <_printf_float+0x154>
 800a3d8:	3301      	adds	r3, #1
 800a3da:	6123      	str	r3, [r4, #16]
 800a3dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0a2      	beq.n	800a32a <_printf_float+0xa2>
 800a3e4:	232d      	movs	r3, #45	@ 0x2d
 800a3e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3ea:	e79e      	b.n	800a32a <_printf_float+0xa2>
 800a3ec:	9a06      	ldr	r2, [sp, #24]
 800a3ee:	2a47      	cmp	r2, #71	@ 0x47
 800a3f0:	d1c2      	bne.n	800a378 <_printf_float+0xf0>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1c0      	bne.n	800a378 <_printf_float+0xf0>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e7bd      	b.n	800a376 <_printf_float+0xee>
 800a3fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3fe:	d9db      	bls.n	800a3b8 <_printf_float+0x130>
 800a400:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a404:	d118      	bne.n	800a438 <_printf_float+0x1b0>
 800a406:	2900      	cmp	r1, #0
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	dd0b      	ble.n	800a424 <_printf_float+0x19c>
 800a40c:	6121      	str	r1, [r4, #16]
 800a40e:	b913      	cbnz	r3, 800a416 <_printf_float+0x18e>
 800a410:	6822      	ldr	r2, [r4, #0]
 800a412:	07d0      	lsls	r0, r2, #31
 800a414:	d502      	bpl.n	800a41c <_printf_float+0x194>
 800a416:	3301      	adds	r3, #1
 800a418:	440b      	add	r3, r1
 800a41a:	6123      	str	r3, [r4, #16]
 800a41c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a41e:	f04f 0900 	mov.w	r9, #0
 800a422:	e7db      	b.n	800a3dc <_printf_float+0x154>
 800a424:	b913      	cbnz	r3, 800a42c <_printf_float+0x1a4>
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	07d2      	lsls	r2, r2, #31
 800a42a:	d501      	bpl.n	800a430 <_printf_float+0x1a8>
 800a42c:	3302      	adds	r3, #2
 800a42e:	e7f4      	b.n	800a41a <_printf_float+0x192>
 800a430:	2301      	movs	r3, #1
 800a432:	e7f2      	b.n	800a41a <_printf_float+0x192>
 800a434:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a43a:	4299      	cmp	r1, r3
 800a43c:	db05      	blt.n	800a44a <_printf_float+0x1c2>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	6121      	str	r1, [r4, #16]
 800a442:	07d8      	lsls	r0, r3, #31
 800a444:	d5ea      	bpl.n	800a41c <_printf_float+0x194>
 800a446:	1c4b      	adds	r3, r1, #1
 800a448:	e7e7      	b.n	800a41a <_printf_float+0x192>
 800a44a:	2900      	cmp	r1, #0
 800a44c:	bfd4      	ite	le
 800a44e:	f1c1 0202 	rsble	r2, r1, #2
 800a452:	2201      	movgt	r2, #1
 800a454:	4413      	add	r3, r2
 800a456:	e7e0      	b.n	800a41a <_printf_float+0x192>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	055a      	lsls	r2, r3, #21
 800a45c:	d407      	bmi.n	800a46e <_printf_float+0x1e6>
 800a45e:	6923      	ldr	r3, [r4, #16]
 800a460:	4642      	mov	r2, r8
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	d12b      	bne.n	800a4c4 <_printf_float+0x23c>
 800a46c:	e767      	b.n	800a33e <_printf_float+0xb6>
 800a46e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a472:	f240 80dd 	bls.w	800a630 <_printf_float+0x3a8>
 800a476:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a47a:	2200      	movs	r2, #0
 800a47c:	2300      	movs	r3, #0
 800a47e:	f7f6 fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 800a482:	2800      	cmp	r0, #0
 800a484:	d033      	beq.n	800a4ee <_printf_float+0x266>
 800a486:	4a37      	ldr	r2, [pc, #220]	@ (800a564 <_printf_float+0x2dc>)
 800a488:	2301      	movs	r3, #1
 800a48a:	4631      	mov	r1, r6
 800a48c:	4628      	mov	r0, r5
 800a48e:	47b8      	blx	r7
 800a490:	3001      	adds	r0, #1
 800a492:	f43f af54 	beq.w	800a33e <_printf_float+0xb6>
 800a496:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a49a:	4543      	cmp	r3, r8
 800a49c:	db02      	blt.n	800a4a4 <_printf_float+0x21c>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	07d8      	lsls	r0, r3, #31
 800a4a2:	d50f      	bpl.n	800a4c4 <_printf_float+0x23c>
 800a4a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4a8:	4631      	mov	r1, r6
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	47b8      	blx	r7
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	f43f af45 	beq.w	800a33e <_printf_float+0xb6>
 800a4b4:	f04f 0900 	mov.w	r9, #0
 800a4b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4bc:	f104 0a1a 	add.w	sl, r4, #26
 800a4c0:	45c8      	cmp	r8, r9
 800a4c2:	dc09      	bgt.n	800a4d8 <_printf_float+0x250>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	079b      	lsls	r3, r3, #30
 800a4c8:	f100 8103 	bmi.w	800a6d2 <_printf_float+0x44a>
 800a4cc:	68e0      	ldr	r0, [r4, #12]
 800a4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4d0:	4298      	cmp	r0, r3
 800a4d2:	bfb8      	it	lt
 800a4d4:	4618      	movlt	r0, r3
 800a4d6:	e734      	b.n	800a342 <_printf_float+0xba>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4652      	mov	r2, sl
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b8      	blx	r7
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	f43f af2b 	beq.w	800a33e <_printf_float+0xb6>
 800a4e8:	f109 0901 	add.w	r9, r9, #1
 800a4ec:	e7e8      	b.n	800a4c0 <_printf_float+0x238>
 800a4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	dc39      	bgt.n	800a568 <_printf_float+0x2e0>
 800a4f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a564 <_printf_float+0x2dc>)
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	47b8      	blx	r7
 800a4fe:	3001      	adds	r0, #1
 800a500:	f43f af1d 	beq.w	800a33e <_printf_float+0xb6>
 800a504:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a508:	ea59 0303 	orrs.w	r3, r9, r3
 800a50c:	d102      	bne.n	800a514 <_printf_float+0x28c>
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	07d9      	lsls	r1, r3, #31
 800a512:	d5d7      	bpl.n	800a4c4 <_printf_float+0x23c>
 800a514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a518:	4631      	mov	r1, r6
 800a51a:	4628      	mov	r0, r5
 800a51c:	47b8      	blx	r7
 800a51e:	3001      	adds	r0, #1
 800a520:	f43f af0d 	beq.w	800a33e <_printf_float+0xb6>
 800a524:	f04f 0a00 	mov.w	sl, #0
 800a528:	f104 0b1a 	add.w	fp, r4, #26
 800a52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a52e:	425b      	negs	r3, r3
 800a530:	4553      	cmp	r3, sl
 800a532:	dc01      	bgt.n	800a538 <_printf_float+0x2b0>
 800a534:	464b      	mov	r3, r9
 800a536:	e793      	b.n	800a460 <_printf_float+0x1d8>
 800a538:	2301      	movs	r3, #1
 800a53a:	465a      	mov	r2, fp
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	f43f aefb 	beq.w	800a33e <_printf_float+0xb6>
 800a548:	f10a 0a01 	add.w	sl, sl, #1
 800a54c:	e7ee      	b.n	800a52c <_printf_float+0x2a4>
 800a54e:	bf00      	nop
 800a550:	7fefffff 	.word	0x7fefffff
 800a554:	0800d964 	.word	0x0800d964
 800a558:	0800d968 	.word	0x0800d968
 800a55c:	0800d96c 	.word	0x0800d96c
 800a560:	0800d970 	.word	0x0800d970
 800a564:	0800d974 	.word	0x0800d974
 800a568:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a56a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a56e:	4553      	cmp	r3, sl
 800a570:	bfa8      	it	ge
 800a572:	4653      	movge	r3, sl
 800a574:	2b00      	cmp	r3, #0
 800a576:	4699      	mov	r9, r3
 800a578:	dc36      	bgt.n	800a5e8 <_printf_float+0x360>
 800a57a:	f04f 0b00 	mov.w	fp, #0
 800a57e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a582:	f104 021a 	add.w	r2, r4, #26
 800a586:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a588:	9306      	str	r3, [sp, #24]
 800a58a:	eba3 0309 	sub.w	r3, r3, r9
 800a58e:	455b      	cmp	r3, fp
 800a590:	dc31      	bgt.n	800a5f6 <_printf_float+0x36e>
 800a592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a594:	459a      	cmp	sl, r3
 800a596:	dc3a      	bgt.n	800a60e <_printf_float+0x386>
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	07da      	lsls	r2, r3, #31
 800a59c:	d437      	bmi.n	800a60e <_printf_float+0x386>
 800a59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a0:	ebaa 0903 	sub.w	r9, sl, r3
 800a5a4:	9b06      	ldr	r3, [sp, #24]
 800a5a6:	ebaa 0303 	sub.w	r3, sl, r3
 800a5aa:	4599      	cmp	r9, r3
 800a5ac:	bfa8      	it	ge
 800a5ae:	4699      	movge	r9, r3
 800a5b0:	f1b9 0f00 	cmp.w	r9, #0
 800a5b4:	dc33      	bgt.n	800a61e <_printf_float+0x396>
 800a5b6:	f04f 0800 	mov.w	r8, #0
 800a5ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5be:	f104 0b1a 	add.w	fp, r4, #26
 800a5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a5c8:	eba3 0309 	sub.w	r3, r3, r9
 800a5cc:	4543      	cmp	r3, r8
 800a5ce:	f77f af79 	ble.w	800a4c4 <_printf_float+0x23c>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	465a      	mov	r2, fp
 800a5d6:	4631      	mov	r1, r6
 800a5d8:	4628      	mov	r0, r5
 800a5da:	47b8      	blx	r7
 800a5dc:	3001      	adds	r0, #1
 800a5de:	f43f aeae 	beq.w	800a33e <_printf_float+0xb6>
 800a5e2:	f108 0801 	add.w	r8, r8, #1
 800a5e6:	e7ec      	b.n	800a5c2 <_printf_float+0x33a>
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d1c2      	bne.n	800a57a <_printf_float+0x2f2>
 800a5f4:	e6a3      	b.n	800a33e <_printf_float+0xb6>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	9206      	str	r2, [sp, #24]
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	f43f ae9c 	beq.w	800a33e <_printf_float+0xb6>
 800a606:	9a06      	ldr	r2, [sp, #24]
 800a608:	f10b 0b01 	add.w	fp, fp, #1
 800a60c:	e7bb      	b.n	800a586 <_printf_float+0x2fe>
 800a60e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a612:	4631      	mov	r1, r6
 800a614:	4628      	mov	r0, r5
 800a616:	47b8      	blx	r7
 800a618:	3001      	adds	r0, #1
 800a61a:	d1c0      	bne.n	800a59e <_printf_float+0x316>
 800a61c:	e68f      	b.n	800a33e <_printf_float+0xb6>
 800a61e:	9a06      	ldr	r2, [sp, #24]
 800a620:	464b      	mov	r3, r9
 800a622:	4442      	add	r2, r8
 800a624:	4631      	mov	r1, r6
 800a626:	4628      	mov	r0, r5
 800a628:	47b8      	blx	r7
 800a62a:	3001      	adds	r0, #1
 800a62c:	d1c3      	bne.n	800a5b6 <_printf_float+0x32e>
 800a62e:	e686      	b.n	800a33e <_printf_float+0xb6>
 800a630:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a634:	f1ba 0f01 	cmp.w	sl, #1
 800a638:	dc01      	bgt.n	800a63e <_printf_float+0x3b6>
 800a63a:	07db      	lsls	r3, r3, #31
 800a63c:	d536      	bpl.n	800a6ac <_printf_float+0x424>
 800a63e:	2301      	movs	r3, #1
 800a640:	4642      	mov	r2, r8
 800a642:	4631      	mov	r1, r6
 800a644:	4628      	mov	r0, r5
 800a646:	47b8      	blx	r7
 800a648:	3001      	adds	r0, #1
 800a64a:	f43f ae78 	beq.w	800a33e <_printf_float+0xb6>
 800a64e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a652:	4631      	mov	r1, r6
 800a654:	4628      	mov	r0, r5
 800a656:	47b8      	blx	r7
 800a658:	3001      	adds	r0, #1
 800a65a:	f43f ae70 	beq.w	800a33e <_printf_float+0xb6>
 800a65e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a662:	2200      	movs	r2, #0
 800a664:	2300      	movs	r3, #0
 800a666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a66a:	f7f6 fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a66e:	b9c0      	cbnz	r0, 800a6a2 <_printf_float+0x41a>
 800a670:	4653      	mov	r3, sl
 800a672:	f108 0201 	add.w	r2, r8, #1
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	d10c      	bne.n	800a69a <_printf_float+0x412>
 800a680:	e65d      	b.n	800a33e <_printf_float+0xb6>
 800a682:	2301      	movs	r3, #1
 800a684:	465a      	mov	r2, fp
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	f43f ae56 	beq.w	800a33e <_printf_float+0xb6>
 800a692:	f108 0801 	add.w	r8, r8, #1
 800a696:	45d0      	cmp	r8, sl
 800a698:	dbf3      	blt.n	800a682 <_printf_float+0x3fa>
 800a69a:	464b      	mov	r3, r9
 800a69c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6a0:	e6df      	b.n	800a462 <_printf_float+0x1da>
 800a6a2:	f04f 0800 	mov.w	r8, #0
 800a6a6:	f104 0b1a 	add.w	fp, r4, #26
 800a6aa:	e7f4      	b.n	800a696 <_printf_float+0x40e>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4642      	mov	r2, r8
 800a6b0:	e7e1      	b.n	800a676 <_printf_float+0x3ee>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	464a      	mov	r2, r9
 800a6b6:	4631      	mov	r1, r6
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	47b8      	blx	r7
 800a6bc:	3001      	adds	r0, #1
 800a6be:	f43f ae3e 	beq.w	800a33e <_printf_float+0xb6>
 800a6c2:	f108 0801 	add.w	r8, r8, #1
 800a6c6:	68e3      	ldr	r3, [r4, #12]
 800a6c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6ca:	1a5b      	subs	r3, r3, r1
 800a6cc:	4543      	cmp	r3, r8
 800a6ce:	dcf0      	bgt.n	800a6b2 <_printf_float+0x42a>
 800a6d0:	e6fc      	b.n	800a4cc <_printf_float+0x244>
 800a6d2:	f04f 0800 	mov.w	r8, #0
 800a6d6:	f104 0919 	add.w	r9, r4, #25
 800a6da:	e7f4      	b.n	800a6c6 <_printf_float+0x43e>

0800a6dc <_printf_common>:
 800a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e0:	4616      	mov	r6, r2
 800a6e2:	4698      	mov	r8, r3
 800a6e4:	688a      	ldr	r2, [r1, #8]
 800a6e6:	690b      	ldr	r3, [r1, #16]
 800a6e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	bfb8      	it	lt
 800a6f0:	4613      	movlt	r3, r2
 800a6f2:	6033      	str	r3, [r6, #0]
 800a6f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	b10a      	cbz	r2, 800a702 <_printf_common+0x26>
 800a6fe:	3301      	adds	r3, #1
 800a700:	6033      	str	r3, [r6, #0]
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	0699      	lsls	r1, r3, #26
 800a706:	bf42      	ittt	mi
 800a708:	6833      	ldrmi	r3, [r6, #0]
 800a70a:	3302      	addmi	r3, #2
 800a70c:	6033      	strmi	r3, [r6, #0]
 800a70e:	6825      	ldr	r5, [r4, #0]
 800a710:	f015 0506 	ands.w	r5, r5, #6
 800a714:	d106      	bne.n	800a724 <_printf_common+0x48>
 800a716:	f104 0a19 	add.w	sl, r4, #25
 800a71a:	68e3      	ldr	r3, [r4, #12]
 800a71c:	6832      	ldr	r2, [r6, #0]
 800a71e:	1a9b      	subs	r3, r3, r2
 800a720:	42ab      	cmp	r3, r5
 800a722:	dc26      	bgt.n	800a772 <_printf_common+0x96>
 800a724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a728:	6822      	ldr	r2, [r4, #0]
 800a72a:	3b00      	subs	r3, #0
 800a72c:	bf18      	it	ne
 800a72e:	2301      	movne	r3, #1
 800a730:	0692      	lsls	r2, r2, #26
 800a732:	d42b      	bmi.n	800a78c <_printf_common+0xb0>
 800a734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a738:	4641      	mov	r1, r8
 800a73a:	4638      	mov	r0, r7
 800a73c:	47c8      	blx	r9
 800a73e:	3001      	adds	r0, #1
 800a740:	d01e      	beq.n	800a780 <_printf_common+0xa4>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	6922      	ldr	r2, [r4, #16]
 800a746:	f003 0306 	and.w	r3, r3, #6
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	bf02      	ittt	eq
 800a74e:	68e5      	ldreq	r5, [r4, #12]
 800a750:	6833      	ldreq	r3, [r6, #0]
 800a752:	1aed      	subeq	r5, r5, r3
 800a754:	68a3      	ldr	r3, [r4, #8]
 800a756:	bf0c      	ite	eq
 800a758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a75c:	2500      	movne	r5, #0
 800a75e:	4293      	cmp	r3, r2
 800a760:	bfc4      	itt	gt
 800a762:	1a9b      	subgt	r3, r3, r2
 800a764:	18ed      	addgt	r5, r5, r3
 800a766:	2600      	movs	r6, #0
 800a768:	341a      	adds	r4, #26
 800a76a:	42b5      	cmp	r5, r6
 800a76c:	d11a      	bne.n	800a7a4 <_printf_common+0xc8>
 800a76e:	2000      	movs	r0, #0
 800a770:	e008      	b.n	800a784 <_printf_common+0xa8>
 800a772:	2301      	movs	r3, #1
 800a774:	4652      	mov	r2, sl
 800a776:	4641      	mov	r1, r8
 800a778:	4638      	mov	r0, r7
 800a77a:	47c8      	blx	r9
 800a77c:	3001      	adds	r0, #1
 800a77e:	d103      	bne.n	800a788 <_printf_common+0xac>
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a788:	3501      	adds	r5, #1
 800a78a:	e7c6      	b.n	800a71a <_printf_common+0x3e>
 800a78c:	18e1      	adds	r1, r4, r3
 800a78e:	1c5a      	adds	r2, r3, #1
 800a790:	2030      	movs	r0, #48	@ 0x30
 800a792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a796:	4422      	add	r2, r4
 800a798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a79c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7a0:	3302      	adds	r3, #2
 800a7a2:	e7c7      	b.n	800a734 <_printf_common+0x58>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	47c8      	blx	r9
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d0e6      	beq.n	800a780 <_printf_common+0xa4>
 800a7b2:	3601      	adds	r6, #1
 800a7b4:	e7d9      	b.n	800a76a <_printf_common+0x8e>
	...

0800a7b8 <_printf_i>:
 800a7b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7bc:	7e0f      	ldrb	r7, [r1, #24]
 800a7be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7c0:	2f78      	cmp	r7, #120	@ 0x78
 800a7c2:	4691      	mov	r9, r2
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	469a      	mov	sl, r3
 800a7ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7ce:	d807      	bhi.n	800a7e0 <_printf_i+0x28>
 800a7d0:	2f62      	cmp	r7, #98	@ 0x62
 800a7d2:	d80a      	bhi.n	800a7ea <_printf_i+0x32>
 800a7d4:	2f00      	cmp	r7, #0
 800a7d6:	f000 80d2 	beq.w	800a97e <_printf_i+0x1c6>
 800a7da:	2f58      	cmp	r7, #88	@ 0x58
 800a7dc:	f000 80b9 	beq.w	800a952 <_printf_i+0x19a>
 800a7e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7e8:	e03a      	b.n	800a860 <_printf_i+0xa8>
 800a7ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7ee:	2b15      	cmp	r3, #21
 800a7f0:	d8f6      	bhi.n	800a7e0 <_printf_i+0x28>
 800a7f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a7f8 <_printf_i+0x40>)
 800a7f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7f8:	0800a851 	.word	0x0800a851
 800a7fc:	0800a865 	.word	0x0800a865
 800a800:	0800a7e1 	.word	0x0800a7e1
 800a804:	0800a7e1 	.word	0x0800a7e1
 800a808:	0800a7e1 	.word	0x0800a7e1
 800a80c:	0800a7e1 	.word	0x0800a7e1
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a7e1 	.word	0x0800a7e1
 800a818:	0800a7e1 	.word	0x0800a7e1
 800a81c:	0800a7e1 	.word	0x0800a7e1
 800a820:	0800a7e1 	.word	0x0800a7e1
 800a824:	0800a965 	.word	0x0800a965
 800a828:	0800a88f 	.word	0x0800a88f
 800a82c:	0800a91f 	.word	0x0800a91f
 800a830:	0800a7e1 	.word	0x0800a7e1
 800a834:	0800a7e1 	.word	0x0800a7e1
 800a838:	0800a987 	.word	0x0800a987
 800a83c:	0800a7e1 	.word	0x0800a7e1
 800a840:	0800a88f 	.word	0x0800a88f
 800a844:	0800a7e1 	.word	0x0800a7e1
 800a848:	0800a7e1 	.word	0x0800a7e1
 800a84c:	0800a927 	.word	0x0800a927
 800a850:	6833      	ldr	r3, [r6, #0]
 800a852:	1d1a      	adds	r2, r3, #4
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6032      	str	r2, [r6, #0]
 800a858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a85c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a860:	2301      	movs	r3, #1
 800a862:	e09d      	b.n	800a9a0 <_printf_i+0x1e8>
 800a864:	6833      	ldr	r3, [r6, #0]
 800a866:	6820      	ldr	r0, [r4, #0]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	6031      	str	r1, [r6, #0]
 800a86c:	0606      	lsls	r6, r0, #24
 800a86e:	d501      	bpl.n	800a874 <_printf_i+0xbc>
 800a870:	681d      	ldr	r5, [r3, #0]
 800a872:	e003      	b.n	800a87c <_printf_i+0xc4>
 800a874:	0645      	lsls	r5, r0, #25
 800a876:	d5fb      	bpl.n	800a870 <_printf_i+0xb8>
 800a878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a87c:	2d00      	cmp	r5, #0
 800a87e:	da03      	bge.n	800a888 <_printf_i+0xd0>
 800a880:	232d      	movs	r3, #45	@ 0x2d
 800a882:	426d      	negs	r5, r5
 800a884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a888:	4859      	ldr	r0, [pc, #356]	@ (800a9f0 <_printf_i+0x238>)
 800a88a:	230a      	movs	r3, #10
 800a88c:	e011      	b.n	800a8b2 <_printf_i+0xfa>
 800a88e:	6821      	ldr	r1, [r4, #0]
 800a890:	6833      	ldr	r3, [r6, #0]
 800a892:	0608      	lsls	r0, r1, #24
 800a894:	f853 5b04 	ldr.w	r5, [r3], #4
 800a898:	d402      	bmi.n	800a8a0 <_printf_i+0xe8>
 800a89a:	0649      	lsls	r1, r1, #25
 800a89c:	bf48      	it	mi
 800a89e:	b2ad      	uxthmi	r5, r5
 800a8a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8a2:	4853      	ldr	r0, [pc, #332]	@ (800a9f0 <_printf_i+0x238>)
 800a8a4:	6033      	str	r3, [r6, #0]
 800a8a6:	bf14      	ite	ne
 800a8a8:	230a      	movne	r3, #10
 800a8aa:	2308      	moveq	r3, #8
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8b2:	6866      	ldr	r6, [r4, #4]
 800a8b4:	60a6      	str	r6, [r4, #8]
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	bfa2      	ittt	ge
 800a8ba:	6821      	ldrge	r1, [r4, #0]
 800a8bc:	f021 0104 	bicge.w	r1, r1, #4
 800a8c0:	6021      	strge	r1, [r4, #0]
 800a8c2:	b90d      	cbnz	r5, 800a8c8 <_printf_i+0x110>
 800a8c4:	2e00      	cmp	r6, #0
 800a8c6:	d04b      	beq.n	800a960 <_printf_i+0x1a8>
 800a8c8:	4616      	mov	r6, r2
 800a8ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8ce:	fb03 5711 	mls	r7, r3, r1, r5
 800a8d2:	5dc7      	ldrb	r7, [r0, r7]
 800a8d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8d8:	462f      	mov	r7, r5
 800a8da:	42bb      	cmp	r3, r7
 800a8dc:	460d      	mov	r5, r1
 800a8de:	d9f4      	bls.n	800a8ca <_printf_i+0x112>
 800a8e0:	2b08      	cmp	r3, #8
 800a8e2:	d10b      	bne.n	800a8fc <_printf_i+0x144>
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	07df      	lsls	r7, r3, #31
 800a8e8:	d508      	bpl.n	800a8fc <_printf_i+0x144>
 800a8ea:	6923      	ldr	r3, [r4, #16]
 800a8ec:	6861      	ldr	r1, [r4, #4]
 800a8ee:	4299      	cmp	r1, r3
 800a8f0:	bfde      	ittt	le
 800a8f2:	2330      	movle	r3, #48	@ 0x30
 800a8f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8fc:	1b92      	subs	r2, r2, r6
 800a8fe:	6122      	str	r2, [r4, #16]
 800a900:	f8cd a000 	str.w	sl, [sp]
 800a904:	464b      	mov	r3, r9
 800a906:	aa03      	add	r2, sp, #12
 800a908:	4621      	mov	r1, r4
 800a90a:	4640      	mov	r0, r8
 800a90c:	f7ff fee6 	bl	800a6dc <_printf_common>
 800a910:	3001      	adds	r0, #1
 800a912:	d14a      	bne.n	800a9aa <_printf_i+0x1f2>
 800a914:	f04f 30ff 	mov.w	r0, #4294967295
 800a918:	b004      	add	sp, #16
 800a91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	f043 0320 	orr.w	r3, r3, #32
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	4833      	ldr	r0, [pc, #204]	@ (800a9f4 <_printf_i+0x23c>)
 800a928:	2778      	movs	r7, #120	@ 0x78
 800a92a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	6831      	ldr	r1, [r6, #0]
 800a932:	061f      	lsls	r7, r3, #24
 800a934:	f851 5b04 	ldr.w	r5, [r1], #4
 800a938:	d402      	bmi.n	800a940 <_printf_i+0x188>
 800a93a:	065f      	lsls	r7, r3, #25
 800a93c:	bf48      	it	mi
 800a93e:	b2ad      	uxthmi	r5, r5
 800a940:	6031      	str	r1, [r6, #0]
 800a942:	07d9      	lsls	r1, r3, #31
 800a944:	bf44      	itt	mi
 800a946:	f043 0320 	orrmi.w	r3, r3, #32
 800a94a:	6023      	strmi	r3, [r4, #0]
 800a94c:	b11d      	cbz	r5, 800a956 <_printf_i+0x19e>
 800a94e:	2310      	movs	r3, #16
 800a950:	e7ac      	b.n	800a8ac <_printf_i+0xf4>
 800a952:	4827      	ldr	r0, [pc, #156]	@ (800a9f0 <_printf_i+0x238>)
 800a954:	e7e9      	b.n	800a92a <_printf_i+0x172>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	f023 0320 	bic.w	r3, r3, #32
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	e7f6      	b.n	800a94e <_printf_i+0x196>
 800a960:	4616      	mov	r6, r2
 800a962:	e7bd      	b.n	800a8e0 <_printf_i+0x128>
 800a964:	6833      	ldr	r3, [r6, #0]
 800a966:	6825      	ldr	r5, [r4, #0]
 800a968:	6961      	ldr	r1, [r4, #20]
 800a96a:	1d18      	adds	r0, r3, #4
 800a96c:	6030      	str	r0, [r6, #0]
 800a96e:	062e      	lsls	r6, r5, #24
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	d501      	bpl.n	800a978 <_printf_i+0x1c0>
 800a974:	6019      	str	r1, [r3, #0]
 800a976:	e002      	b.n	800a97e <_printf_i+0x1c6>
 800a978:	0668      	lsls	r0, r5, #25
 800a97a:	d5fb      	bpl.n	800a974 <_printf_i+0x1bc>
 800a97c:	8019      	strh	r1, [r3, #0]
 800a97e:	2300      	movs	r3, #0
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	4616      	mov	r6, r2
 800a984:	e7bc      	b.n	800a900 <_printf_i+0x148>
 800a986:	6833      	ldr	r3, [r6, #0]
 800a988:	1d1a      	adds	r2, r3, #4
 800a98a:	6032      	str	r2, [r6, #0]
 800a98c:	681e      	ldr	r6, [r3, #0]
 800a98e:	6862      	ldr	r2, [r4, #4]
 800a990:	2100      	movs	r1, #0
 800a992:	4630      	mov	r0, r6
 800a994:	f7f5 fc1c 	bl	80001d0 <memchr>
 800a998:	b108      	cbz	r0, 800a99e <_printf_i+0x1e6>
 800a99a:	1b80      	subs	r0, r0, r6
 800a99c:	6060      	str	r0, [r4, #4]
 800a99e:	6863      	ldr	r3, [r4, #4]
 800a9a0:	6123      	str	r3, [r4, #16]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9a8:	e7aa      	b.n	800a900 <_printf_i+0x148>
 800a9aa:	6923      	ldr	r3, [r4, #16]
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	47d0      	blx	sl
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d0ad      	beq.n	800a914 <_printf_i+0x15c>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	079b      	lsls	r3, r3, #30
 800a9bc:	d413      	bmi.n	800a9e6 <_printf_i+0x22e>
 800a9be:	68e0      	ldr	r0, [r4, #12]
 800a9c0:	9b03      	ldr	r3, [sp, #12]
 800a9c2:	4298      	cmp	r0, r3
 800a9c4:	bfb8      	it	lt
 800a9c6:	4618      	movlt	r0, r3
 800a9c8:	e7a6      	b.n	800a918 <_printf_i+0x160>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	4632      	mov	r2, r6
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	47d0      	blx	sl
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	d09d      	beq.n	800a914 <_printf_i+0x15c>
 800a9d8:	3501      	adds	r5, #1
 800a9da:	68e3      	ldr	r3, [r4, #12]
 800a9dc:	9903      	ldr	r1, [sp, #12]
 800a9de:	1a5b      	subs	r3, r3, r1
 800a9e0:	42ab      	cmp	r3, r5
 800a9e2:	dcf2      	bgt.n	800a9ca <_printf_i+0x212>
 800a9e4:	e7eb      	b.n	800a9be <_printf_i+0x206>
 800a9e6:	2500      	movs	r5, #0
 800a9e8:	f104 0619 	add.w	r6, r4, #25
 800a9ec:	e7f5      	b.n	800a9da <_printf_i+0x222>
 800a9ee:	bf00      	nop
 800a9f0:	0800d976 	.word	0x0800d976
 800a9f4:	0800d987 	.word	0x0800d987

0800a9f8 <std>:
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	e9c0 3300 	strd	r3, r3, [r0]
 800aa02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa06:	6083      	str	r3, [r0, #8]
 800aa08:	8181      	strh	r1, [r0, #12]
 800aa0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa0c:	81c2      	strh	r2, [r0, #14]
 800aa0e:	6183      	str	r3, [r0, #24]
 800aa10:	4619      	mov	r1, r3
 800aa12:	2208      	movs	r2, #8
 800aa14:	305c      	adds	r0, #92	@ 0x5c
 800aa16:	f000 f914 	bl	800ac42 <memset>
 800aa1a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa50 <std+0x58>)
 800aa1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <std+0x5c>)
 800aa20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa22:	4b0d      	ldr	r3, [pc, #52]	@ (800aa58 <std+0x60>)
 800aa24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa26:	4b0d      	ldr	r3, [pc, #52]	@ (800aa5c <std+0x64>)
 800aa28:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa2a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa60 <std+0x68>)
 800aa2c:	6224      	str	r4, [r4, #32]
 800aa2e:	429c      	cmp	r4, r3
 800aa30:	d006      	beq.n	800aa40 <std+0x48>
 800aa32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa36:	4294      	cmp	r4, r2
 800aa38:	d002      	beq.n	800aa40 <std+0x48>
 800aa3a:	33d0      	adds	r3, #208	@ 0xd0
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	d105      	bne.n	800aa4c <std+0x54>
 800aa40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa48:	f000 b978 	b.w	800ad3c <__retarget_lock_init_recursive>
 800aa4c:	bd10      	pop	{r4, pc}
 800aa4e:	bf00      	nop
 800aa50:	0800abbd 	.word	0x0800abbd
 800aa54:	0800abdf 	.word	0x0800abdf
 800aa58:	0800ac17 	.word	0x0800ac17
 800aa5c:	0800ac3b 	.word	0x0800ac3b
 800aa60:	20002068 	.word	0x20002068

0800aa64 <stdio_exit_handler>:
 800aa64:	4a02      	ldr	r2, [pc, #8]	@ (800aa70 <stdio_exit_handler+0xc>)
 800aa66:	4903      	ldr	r1, [pc, #12]	@ (800aa74 <stdio_exit_handler+0x10>)
 800aa68:	4803      	ldr	r0, [pc, #12]	@ (800aa78 <stdio_exit_handler+0x14>)
 800aa6a:	f000 b869 	b.w	800ab40 <_fwalk_sglue>
 800aa6e:	bf00      	nop
 800aa70:	200000fc 	.word	0x200000fc
 800aa74:	0800c69d 	.word	0x0800c69d
 800aa78:	2000010c 	.word	0x2000010c

0800aa7c <cleanup_stdio>:
 800aa7c:	6841      	ldr	r1, [r0, #4]
 800aa7e:	4b0c      	ldr	r3, [pc, #48]	@ (800aab0 <cleanup_stdio+0x34>)
 800aa80:	4299      	cmp	r1, r3
 800aa82:	b510      	push	{r4, lr}
 800aa84:	4604      	mov	r4, r0
 800aa86:	d001      	beq.n	800aa8c <cleanup_stdio+0x10>
 800aa88:	f001 fe08 	bl	800c69c <_fflush_r>
 800aa8c:	68a1      	ldr	r1, [r4, #8]
 800aa8e:	4b09      	ldr	r3, [pc, #36]	@ (800aab4 <cleanup_stdio+0x38>)
 800aa90:	4299      	cmp	r1, r3
 800aa92:	d002      	beq.n	800aa9a <cleanup_stdio+0x1e>
 800aa94:	4620      	mov	r0, r4
 800aa96:	f001 fe01 	bl	800c69c <_fflush_r>
 800aa9a:	68e1      	ldr	r1, [r4, #12]
 800aa9c:	4b06      	ldr	r3, [pc, #24]	@ (800aab8 <cleanup_stdio+0x3c>)
 800aa9e:	4299      	cmp	r1, r3
 800aaa0:	d004      	beq.n	800aaac <cleanup_stdio+0x30>
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa8:	f001 bdf8 	b.w	800c69c <_fflush_r>
 800aaac:	bd10      	pop	{r4, pc}
 800aaae:	bf00      	nop
 800aab0:	20002068 	.word	0x20002068
 800aab4:	200020d0 	.word	0x200020d0
 800aab8:	20002138 	.word	0x20002138

0800aabc <global_stdio_init.part.0>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	4b0b      	ldr	r3, [pc, #44]	@ (800aaec <global_stdio_init.part.0+0x30>)
 800aac0:	4c0b      	ldr	r4, [pc, #44]	@ (800aaf0 <global_stdio_init.part.0+0x34>)
 800aac2:	4a0c      	ldr	r2, [pc, #48]	@ (800aaf4 <global_stdio_init.part.0+0x38>)
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	4620      	mov	r0, r4
 800aac8:	2200      	movs	r2, #0
 800aaca:	2104      	movs	r1, #4
 800aacc:	f7ff ff94 	bl	800a9f8 <std>
 800aad0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aad4:	2201      	movs	r2, #1
 800aad6:	2109      	movs	r1, #9
 800aad8:	f7ff ff8e 	bl	800a9f8 <std>
 800aadc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aae0:	2202      	movs	r2, #2
 800aae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aae6:	2112      	movs	r1, #18
 800aae8:	f7ff bf86 	b.w	800a9f8 <std>
 800aaec:	200021a0 	.word	0x200021a0
 800aaf0:	20002068 	.word	0x20002068
 800aaf4:	0800aa65 	.word	0x0800aa65

0800aaf8 <__sfp_lock_acquire>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	@ (800ab00 <__sfp_lock_acquire+0x8>)
 800aafa:	f000 b920 	b.w	800ad3e <__retarget_lock_acquire_recursive>
 800aafe:	bf00      	nop
 800ab00:	200021a9 	.word	0x200021a9

0800ab04 <__sfp_lock_release>:
 800ab04:	4801      	ldr	r0, [pc, #4]	@ (800ab0c <__sfp_lock_release+0x8>)
 800ab06:	f000 b91b 	b.w	800ad40 <__retarget_lock_release_recursive>
 800ab0a:	bf00      	nop
 800ab0c:	200021a9 	.word	0x200021a9

0800ab10 <__sinit>:
 800ab10:	b510      	push	{r4, lr}
 800ab12:	4604      	mov	r4, r0
 800ab14:	f7ff fff0 	bl	800aaf8 <__sfp_lock_acquire>
 800ab18:	6a23      	ldr	r3, [r4, #32]
 800ab1a:	b11b      	cbz	r3, 800ab24 <__sinit+0x14>
 800ab1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab20:	f7ff bff0 	b.w	800ab04 <__sfp_lock_release>
 800ab24:	4b04      	ldr	r3, [pc, #16]	@ (800ab38 <__sinit+0x28>)
 800ab26:	6223      	str	r3, [r4, #32]
 800ab28:	4b04      	ldr	r3, [pc, #16]	@ (800ab3c <__sinit+0x2c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1f5      	bne.n	800ab1c <__sinit+0xc>
 800ab30:	f7ff ffc4 	bl	800aabc <global_stdio_init.part.0>
 800ab34:	e7f2      	b.n	800ab1c <__sinit+0xc>
 800ab36:	bf00      	nop
 800ab38:	0800aa7d 	.word	0x0800aa7d
 800ab3c:	200021a0 	.word	0x200021a0

0800ab40 <_fwalk_sglue>:
 800ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab44:	4607      	mov	r7, r0
 800ab46:	4688      	mov	r8, r1
 800ab48:	4614      	mov	r4, r2
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab50:	f1b9 0901 	subs.w	r9, r9, #1
 800ab54:	d505      	bpl.n	800ab62 <_fwalk_sglue+0x22>
 800ab56:	6824      	ldr	r4, [r4, #0]
 800ab58:	2c00      	cmp	r4, #0
 800ab5a:	d1f7      	bne.n	800ab4c <_fwalk_sglue+0xc>
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab62:	89ab      	ldrh	r3, [r5, #12]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d907      	bls.n	800ab78 <_fwalk_sglue+0x38>
 800ab68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	d003      	beq.n	800ab78 <_fwalk_sglue+0x38>
 800ab70:	4629      	mov	r1, r5
 800ab72:	4638      	mov	r0, r7
 800ab74:	47c0      	blx	r8
 800ab76:	4306      	orrs	r6, r0
 800ab78:	3568      	adds	r5, #104	@ 0x68
 800ab7a:	e7e9      	b.n	800ab50 <_fwalk_sglue+0x10>

0800ab7c <siprintf>:
 800ab7c:	b40e      	push	{r1, r2, r3}
 800ab7e:	b500      	push	{lr}
 800ab80:	b09c      	sub	sp, #112	@ 0x70
 800ab82:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab84:	9002      	str	r0, [sp, #8]
 800ab86:	9006      	str	r0, [sp, #24]
 800ab88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab8c:	4809      	ldr	r0, [pc, #36]	@ (800abb4 <siprintf+0x38>)
 800ab8e:	9107      	str	r1, [sp, #28]
 800ab90:	9104      	str	r1, [sp, #16]
 800ab92:	4909      	ldr	r1, [pc, #36]	@ (800abb8 <siprintf+0x3c>)
 800ab94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab98:	9105      	str	r1, [sp, #20]
 800ab9a:	6800      	ldr	r0, [r0, #0]
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	a902      	add	r1, sp, #8
 800aba0:	f001 fbfc 	bl	800c39c <_svfiprintf_r>
 800aba4:	9b02      	ldr	r3, [sp, #8]
 800aba6:	2200      	movs	r2, #0
 800aba8:	701a      	strb	r2, [r3, #0]
 800abaa:	b01c      	add	sp, #112	@ 0x70
 800abac:	f85d eb04 	ldr.w	lr, [sp], #4
 800abb0:	b003      	add	sp, #12
 800abb2:	4770      	bx	lr
 800abb4:	20000108 	.word	0x20000108
 800abb8:	ffff0208 	.word	0xffff0208

0800abbc <__sread>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	460c      	mov	r4, r1
 800abc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc4:	f000 f86c 	bl	800aca0 <_read_r>
 800abc8:	2800      	cmp	r0, #0
 800abca:	bfab      	itete	ge
 800abcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abce:	89a3      	ldrhlt	r3, [r4, #12]
 800abd0:	181b      	addge	r3, r3, r0
 800abd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abd6:	bfac      	ite	ge
 800abd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abda:	81a3      	strhlt	r3, [r4, #12]
 800abdc:	bd10      	pop	{r4, pc}

0800abde <__swrite>:
 800abde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	461f      	mov	r7, r3
 800abe4:	898b      	ldrh	r3, [r1, #12]
 800abe6:	05db      	lsls	r3, r3, #23
 800abe8:	4605      	mov	r5, r0
 800abea:	460c      	mov	r4, r1
 800abec:	4616      	mov	r6, r2
 800abee:	d505      	bpl.n	800abfc <__swrite+0x1e>
 800abf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf4:	2302      	movs	r3, #2
 800abf6:	2200      	movs	r2, #0
 800abf8:	f000 f840 	bl	800ac7c <_lseek_r>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	4632      	mov	r2, r6
 800ac0a:	463b      	mov	r3, r7
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	f000 b857 	b.w	800acc4 <_write_r>

0800ac16 <__sseek>:
 800ac16:	b510      	push	{r4, lr}
 800ac18:	460c      	mov	r4, r1
 800ac1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1e:	f000 f82d 	bl	800ac7c <_lseek_r>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	bf15      	itete	ne
 800ac28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac32:	81a3      	strheq	r3, [r4, #12]
 800ac34:	bf18      	it	ne
 800ac36:	81a3      	strhne	r3, [r4, #12]
 800ac38:	bd10      	pop	{r4, pc}

0800ac3a <__sclose>:
 800ac3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac3e:	f000 b80d 	b.w	800ac5c <_close_r>

0800ac42 <memset>:
 800ac42:	4402      	add	r2, r0
 800ac44:	4603      	mov	r3, r0
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d100      	bne.n	800ac4c <memset+0xa>
 800ac4a:	4770      	bx	lr
 800ac4c:	f803 1b01 	strb.w	r1, [r3], #1
 800ac50:	e7f9      	b.n	800ac46 <memset+0x4>
	...

0800ac54 <_localeconv_r>:
 800ac54:	4800      	ldr	r0, [pc, #0]	@ (800ac58 <_localeconv_r+0x4>)
 800ac56:	4770      	bx	lr
 800ac58:	20000248 	.word	0x20000248

0800ac5c <_close_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d06      	ldr	r5, [pc, #24]	@ (800ac78 <_close_r+0x1c>)
 800ac60:	2300      	movs	r3, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	602b      	str	r3, [r5, #0]
 800ac68:	f7f7 f8ea 	bl	8001e40 <_close>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_close_r+0x1a>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_close_r+0x1a>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	200021a4 	.word	0x200021a4

0800ac7c <_lseek_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4d07      	ldr	r5, [pc, #28]	@ (800ac9c <_lseek_r+0x20>)
 800ac80:	4604      	mov	r4, r0
 800ac82:	4608      	mov	r0, r1
 800ac84:	4611      	mov	r1, r2
 800ac86:	2200      	movs	r2, #0
 800ac88:	602a      	str	r2, [r5, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f7f7 f8ff 	bl	8001e8e <_lseek>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_lseek_r+0x1e>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_lseek_r+0x1e>
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	200021a4 	.word	0x200021a4

0800aca0 <_read_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d07      	ldr	r5, [pc, #28]	@ (800acc0 <_read_r+0x20>)
 800aca4:	4604      	mov	r4, r0
 800aca6:	4608      	mov	r0, r1
 800aca8:	4611      	mov	r1, r2
 800acaa:	2200      	movs	r2, #0
 800acac:	602a      	str	r2, [r5, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	f7f7 f88d 	bl	8001dce <_read>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	d102      	bne.n	800acbe <_read_r+0x1e>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	b103      	cbz	r3, 800acbe <_read_r+0x1e>
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	200021a4 	.word	0x200021a4

0800acc4 <_write_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4d07      	ldr	r5, [pc, #28]	@ (800ace4 <_write_r+0x20>)
 800acc8:	4604      	mov	r4, r0
 800acca:	4608      	mov	r0, r1
 800accc:	4611      	mov	r1, r2
 800acce:	2200      	movs	r2, #0
 800acd0:	602a      	str	r2, [r5, #0]
 800acd2:	461a      	mov	r2, r3
 800acd4:	f7f7 f898 	bl	8001e08 <_write>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	d102      	bne.n	800ace2 <_write_r+0x1e>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	b103      	cbz	r3, 800ace2 <_write_r+0x1e>
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	200021a4 	.word	0x200021a4

0800ace8 <__errno>:
 800ace8:	4b01      	ldr	r3, [pc, #4]	@ (800acf0 <__errno+0x8>)
 800acea:	6818      	ldr	r0, [r3, #0]
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	20000108 	.word	0x20000108

0800acf4 <__libc_init_array>:
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	4d0d      	ldr	r5, [pc, #52]	@ (800ad2c <__libc_init_array+0x38>)
 800acf8:	4c0d      	ldr	r4, [pc, #52]	@ (800ad30 <__libc_init_array+0x3c>)
 800acfa:	1b64      	subs	r4, r4, r5
 800acfc:	10a4      	asrs	r4, r4, #2
 800acfe:	2600      	movs	r6, #0
 800ad00:	42a6      	cmp	r6, r4
 800ad02:	d109      	bne.n	800ad18 <__libc_init_array+0x24>
 800ad04:	4d0b      	ldr	r5, [pc, #44]	@ (800ad34 <__libc_init_array+0x40>)
 800ad06:	4c0c      	ldr	r4, [pc, #48]	@ (800ad38 <__libc_init_array+0x44>)
 800ad08:	f002 fde4 	bl	800d8d4 <_init>
 800ad0c:	1b64      	subs	r4, r4, r5
 800ad0e:	10a4      	asrs	r4, r4, #2
 800ad10:	2600      	movs	r6, #0
 800ad12:	42a6      	cmp	r6, r4
 800ad14:	d105      	bne.n	800ad22 <__libc_init_array+0x2e>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
 800ad18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad1c:	4798      	blx	r3
 800ad1e:	3601      	adds	r6, #1
 800ad20:	e7ee      	b.n	800ad00 <__libc_init_array+0xc>
 800ad22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad26:	4798      	blx	r3
 800ad28:	3601      	adds	r6, #1
 800ad2a:	e7f2      	b.n	800ad12 <__libc_init_array+0x1e>
 800ad2c:	0800e0b0 	.word	0x0800e0b0
 800ad30:	0800e0b0 	.word	0x0800e0b0
 800ad34:	0800e0b0 	.word	0x0800e0b0
 800ad38:	0800e0b4 	.word	0x0800e0b4

0800ad3c <__retarget_lock_init_recursive>:
 800ad3c:	4770      	bx	lr

0800ad3e <__retarget_lock_acquire_recursive>:
 800ad3e:	4770      	bx	lr

0800ad40 <__retarget_lock_release_recursive>:
 800ad40:	4770      	bx	lr

0800ad42 <quorem>:
 800ad42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad46:	6903      	ldr	r3, [r0, #16]
 800ad48:	690c      	ldr	r4, [r1, #16]
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	db7e      	blt.n	800ae4e <quorem+0x10c>
 800ad50:	3c01      	subs	r4, #1
 800ad52:	f101 0814 	add.w	r8, r1, #20
 800ad56:	00a3      	lsls	r3, r4, #2
 800ad58:	f100 0514 	add.w	r5, r0, #20
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad74:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad78:	d32e      	bcc.n	800add8 <quorem+0x96>
 800ad7a:	f04f 0a00 	mov.w	sl, #0
 800ad7e:	46c4      	mov	ip, r8
 800ad80:	46ae      	mov	lr, r5
 800ad82:	46d3      	mov	fp, sl
 800ad84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad88:	b298      	uxth	r0, r3
 800ad8a:	fb06 a000 	mla	r0, r6, r0, sl
 800ad8e:	0c02      	lsrs	r2, r0, #16
 800ad90:	0c1b      	lsrs	r3, r3, #16
 800ad92:	fb06 2303 	mla	r3, r6, r3, r2
 800ad96:	f8de 2000 	ldr.w	r2, [lr]
 800ad9a:	b280      	uxth	r0, r0
 800ad9c:	b292      	uxth	r2, r2
 800ad9e:	1a12      	subs	r2, r2, r0
 800ada0:	445a      	add	r2, fp
 800ada2:	f8de 0000 	ldr.w	r0, [lr]
 800ada6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adaa:	b29b      	uxth	r3, r3
 800adac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800adb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800adb4:	b292      	uxth	r2, r2
 800adb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800adba:	45e1      	cmp	r9, ip
 800adbc:	f84e 2b04 	str.w	r2, [lr], #4
 800adc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800adc4:	d2de      	bcs.n	800ad84 <quorem+0x42>
 800adc6:	9b00      	ldr	r3, [sp, #0]
 800adc8:	58eb      	ldr	r3, [r5, r3]
 800adca:	b92b      	cbnz	r3, 800add8 <quorem+0x96>
 800adcc:	9b01      	ldr	r3, [sp, #4]
 800adce:	3b04      	subs	r3, #4
 800add0:	429d      	cmp	r5, r3
 800add2:	461a      	mov	r2, r3
 800add4:	d32f      	bcc.n	800ae36 <quorem+0xf4>
 800add6:	613c      	str	r4, [r7, #16]
 800add8:	4638      	mov	r0, r7
 800adda:	f001 f97b 	bl	800c0d4 <__mcmp>
 800adde:	2800      	cmp	r0, #0
 800ade0:	db25      	blt.n	800ae2e <quorem+0xec>
 800ade2:	4629      	mov	r1, r5
 800ade4:	2000      	movs	r0, #0
 800ade6:	f858 2b04 	ldr.w	r2, [r8], #4
 800adea:	f8d1 c000 	ldr.w	ip, [r1]
 800adee:	fa1f fe82 	uxth.w	lr, r2
 800adf2:	fa1f f38c 	uxth.w	r3, ip
 800adf6:	eba3 030e 	sub.w	r3, r3, lr
 800adfa:	4403      	add	r3, r0
 800adfc:	0c12      	lsrs	r2, r2, #16
 800adfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae0c:	45c1      	cmp	r9, r8
 800ae0e:	f841 3b04 	str.w	r3, [r1], #4
 800ae12:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae16:	d2e6      	bcs.n	800ade6 <quorem+0xa4>
 800ae18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae20:	b922      	cbnz	r2, 800ae2c <quorem+0xea>
 800ae22:	3b04      	subs	r3, #4
 800ae24:	429d      	cmp	r5, r3
 800ae26:	461a      	mov	r2, r3
 800ae28:	d30b      	bcc.n	800ae42 <quorem+0x100>
 800ae2a:	613c      	str	r4, [r7, #16]
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	4630      	mov	r0, r6
 800ae30:	b003      	add	sp, #12
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	3b04      	subs	r3, #4
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	d1cb      	bne.n	800add6 <quorem+0x94>
 800ae3e:	3c01      	subs	r4, #1
 800ae40:	e7c6      	b.n	800add0 <quorem+0x8e>
 800ae42:	6812      	ldr	r2, [r2, #0]
 800ae44:	3b04      	subs	r3, #4
 800ae46:	2a00      	cmp	r2, #0
 800ae48:	d1ef      	bne.n	800ae2a <quorem+0xe8>
 800ae4a:	3c01      	subs	r4, #1
 800ae4c:	e7ea      	b.n	800ae24 <quorem+0xe2>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e7ee      	b.n	800ae30 <quorem+0xee>
 800ae52:	0000      	movs	r0, r0
 800ae54:	0000      	movs	r0, r0
	...

0800ae58 <_dtoa_r>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	69c7      	ldr	r7, [r0, #28]
 800ae5e:	b099      	sub	sp, #100	@ 0x64
 800ae60:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae64:	ec55 4b10 	vmov	r4, r5, d0
 800ae68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae6c:	4683      	mov	fp, r0
 800ae6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae72:	b97f      	cbnz	r7, 800ae94 <_dtoa_r+0x3c>
 800ae74:	2010      	movs	r0, #16
 800ae76:	f000 fdfd 	bl	800ba74 <malloc>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae80:	b920      	cbnz	r0, 800ae8c <_dtoa_r+0x34>
 800ae82:	4ba7      	ldr	r3, [pc, #668]	@ (800b120 <_dtoa_r+0x2c8>)
 800ae84:	21ef      	movs	r1, #239	@ 0xef
 800ae86:	48a7      	ldr	r0, [pc, #668]	@ (800b124 <_dtoa_r+0x2cc>)
 800ae88:	f001 fc68 	bl	800c75c <__assert_func>
 800ae8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae90:	6007      	str	r7, [r0, #0]
 800ae92:	60c7      	str	r7, [r0, #12]
 800ae94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae98:	6819      	ldr	r1, [r3, #0]
 800ae9a:	b159      	cbz	r1, 800aeb4 <_dtoa_r+0x5c>
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	604a      	str	r2, [r1, #4]
 800aea0:	2301      	movs	r3, #1
 800aea2:	4093      	lsls	r3, r2
 800aea4:	608b      	str	r3, [r1, #8]
 800aea6:	4658      	mov	r0, fp
 800aea8:	f000 feda 	bl	800bc60 <_Bfree>
 800aeac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	1e2b      	subs	r3, r5, #0
 800aeb6:	bfb9      	ittee	lt
 800aeb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aebc:	9303      	strlt	r3, [sp, #12]
 800aebe:	2300      	movge	r3, #0
 800aec0:	6033      	strge	r3, [r6, #0]
 800aec2:	9f03      	ldr	r7, [sp, #12]
 800aec4:	4b98      	ldr	r3, [pc, #608]	@ (800b128 <_dtoa_r+0x2d0>)
 800aec6:	bfbc      	itt	lt
 800aec8:	2201      	movlt	r2, #1
 800aeca:	6032      	strlt	r2, [r6, #0]
 800aecc:	43bb      	bics	r3, r7
 800aece:	d112      	bne.n	800aef6 <_dtoa_r+0x9e>
 800aed0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aed2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aedc:	4323      	orrs	r3, r4
 800aede:	f000 854d 	beq.w	800b97c <_dtoa_r+0xb24>
 800aee2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aee4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b13c <_dtoa_r+0x2e4>
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 854f 	beq.w	800b98c <_dtoa_r+0xb34>
 800aeee:	f10a 0303 	add.w	r3, sl, #3
 800aef2:	f000 bd49 	b.w	800b988 <_dtoa_r+0xb30>
 800aef6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aefa:	2200      	movs	r2, #0
 800aefc:	ec51 0b17 	vmov	r0, r1, d7
 800af00:	2300      	movs	r3, #0
 800af02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800af06:	f7f5 fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 800af0a:	4680      	mov	r8, r0
 800af0c:	b158      	cbz	r0, 800af26 <_dtoa_r+0xce>
 800af0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800af10:	2301      	movs	r3, #1
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af16:	b113      	cbz	r3, 800af1e <_dtoa_r+0xc6>
 800af18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800af1a:	4b84      	ldr	r3, [pc, #528]	@ (800b12c <_dtoa_r+0x2d4>)
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b140 <_dtoa_r+0x2e8>
 800af22:	f000 bd33 	b.w	800b98c <_dtoa_r+0xb34>
 800af26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800af2a:	aa16      	add	r2, sp, #88	@ 0x58
 800af2c:	a917      	add	r1, sp, #92	@ 0x5c
 800af2e:	4658      	mov	r0, fp
 800af30:	f001 f980 	bl	800c234 <__d2b>
 800af34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800af38:	4681      	mov	r9, r0
 800af3a:	2e00      	cmp	r6, #0
 800af3c:	d077      	beq.n	800b02e <_dtoa_r+0x1d6>
 800af3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800af44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af58:	4619      	mov	r1, r3
 800af5a:	2200      	movs	r2, #0
 800af5c:	4b74      	ldr	r3, [pc, #464]	@ (800b130 <_dtoa_r+0x2d8>)
 800af5e:	f7f5 f993 	bl	8000288 <__aeabi_dsub>
 800af62:	a369      	add	r3, pc, #420	@ (adr r3, 800b108 <_dtoa_r+0x2b0>)
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	f7f5 fb46 	bl	80005f8 <__aeabi_dmul>
 800af6c:	a368      	add	r3, pc, #416	@ (adr r3, 800b110 <_dtoa_r+0x2b8>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	f7f5 f98b 	bl	800028c <__adddf3>
 800af76:	4604      	mov	r4, r0
 800af78:	4630      	mov	r0, r6
 800af7a:	460d      	mov	r5, r1
 800af7c:	f7f5 fad2 	bl	8000524 <__aeabi_i2d>
 800af80:	a365      	add	r3, pc, #404	@ (adr r3, 800b118 <_dtoa_r+0x2c0>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 fb37 	bl	80005f8 <__aeabi_dmul>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4620      	mov	r0, r4
 800af90:	4629      	mov	r1, r5
 800af92:	f7f5 f97b 	bl	800028c <__adddf3>
 800af96:	4604      	mov	r4, r0
 800af98:	460d      	mov	r5, r1
 800af9a:	f7f5 fddd 	bl	8000b58 <__aeabi_d2iz>
 800af9e:	2200      	movs	r2, #0
 800afa0:	4607      	mov	r7, r0
 800afa2:	2300      	movs	r3, #0
 800afa4:	4620      	mov	r0, r4
 800afa6:	4629      	mov	r1, r5
 800afa8:	f7f5 fd98 	bl	8000adc <__aeabi_dcmplt>
 800afac:	b140      	cbz	r0, 800afc0 <_dtoa_r+0x168>
 800afae:	4638      	mov	r0, r7
 800afb0:	f7f5 fab8 	bl	8000524 <__aeabi_i2d>
 800afb4:	4622      	mov	r2, r4
 800afb6:	462b      	mov	r3, r5
 800afb8:	f7f5 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 800afbc:	b900      	cbnz	r0, 800afc0 <_dtoa_r+0x168>
 800afbe:	3f01      	subs	r7, #1
 800afc0:	2f16      	cmp	r7, #22
 800afc2:	d851      	bhi.n	800b068 <_dtoa_r+0x210>
 800afc4:	4b5b      	ldr	r3, [pc, #364]	@ (800b134 <_dtoa_r+0x2dc>)
 800afc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afd2:	f7f5 fd83 	bl	8000adc <__aeabi_dcmplt>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d048      	beq.n	800b06c <_dtoa_r+0x214>
 800afda:	3f01      	subs	r7, #1
 800afdc:	2300      	movs	r3, #0
 800afde:	9312      	str	r3, [sp, #72]	@ 0x48
 800afe0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800afe2:	1b9b      	subs	r3, r3, r6
 800afe4:	1e5a      	subs	r2, r3, #1
 800afe6:	bf44      	itt	mi
 800afe8:	f1c3 0801 	rsbmi	r8, r3, #1
 800afec:	2300      	movmi	r3, #0
 800afee:	9208      	str	r2, [sp, #32]
 800aff0:	bf54      	ite	pl
 800aff2:	f04f 0800 	movpl.w	r8, #0
 800aff6:	9308      	strmi	r3, [sp, #32]
 800aff8:	2f00      	cmp	r7, #0
 800affa:	db39      	blt.n	800b070 <_dtoa_r+0x218>
 800affc:	9b08      	ldr	r3, [sp, #32]
 800affe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b000:	443b      	add	r3, r7
 800b002:	9308      	str	r3, [sp, #32]
 800b004:	2300      	movs	r3, #0
 800b006:	930a      	str	r3, [sp, #40]	@ 0x28
 800b008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	d864      	bhi.n	800b0d8 <_dtoa_r+0x280>
 800b00e:	2b05      	cmp	r3, #5
 800b010:	bfc4      	itt	gt
 800b012:	3b04      	subgt	r3, #4
 800b014:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b018:	f1a3 0302 	sub.w	r3, r3, #2
 800b01c:	bfcc      	ite	gt
 800b01e:	2400      	movgt	r4, #0
 800b020:	2401      	movle	r4, #1
 800b022:	2b03      	cmp	r3, #3
 800b024:	d863      	bhi.n	800b0ee <_dtoa_r+0x296>
 800b026:	e8df f003 	tbb	[pc, r3]
 800b02a:	372a      	.short	0x372a
 800b02c:	5535      	.short	0x5535
 800b02e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b032:	441e      	add	r6, r3
 800b034:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b038:	2b20      	cmp	r3, #32
 800b03a:	bfc1      	itttt	gt
 800b03c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b040:	409f      	lslgt	r7, r3
 800b042:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b046:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b04a:	bfd6      	itet	le
 800b04c:	f1c3 0320 	rsble	r3, r3, #32
 800b050:	ea47 0003 	orrgt.w	r0, r7, r3
 800b054:	fa04 f003 	lslle.w	r0, r4, r3
 800b058:	f7f5 fa54 	bl	8000504 <__aeabi_ui2d>
 800b05c:	2201      	movs	r2, #1
 800b05e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b062:	3e01      	subs	r6, #1
 800b064:	9214      	str	r2, [sp, #80]	@ 0x50
 800b066:	e777      	b.n	800af58 <_dtoa_r+0x100>
 800b068:	2301      	movs	r3, #1
 800b06a:	e7b8      	b.n	800afde <_dtoa_r+0x186>
 800b06c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b06e:	e7b7      	b.n	800afe0 <_dtoa_r+0x188>
 800b070:	427b      	negs	r3, r7
 800b072:	930a      	str	r3, [sp, #40]	@ 0x28
 800b074:	2300      	movs	r3, #0
 800b076:	eba8 0807 	sub.w	r8, r8, r7
 800b07a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b07c:	e7c4      	b.n	800b008 <_dtoa_r+0x1b0>
 800b07e:	2300      	movs	r3, #0
 800b080:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b084:	2b00      	cmp	r3, #0
 800b086:	dc35      	bgt.n	800b0f4 <_dtoa_r+0x29c>
 800b088:	2301      	movs	r3, #1
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	9307      	str	r3, [sp, #28]
 800b08e:	461a      	mov	r2, r3
 800b090:	920e      	str	r2, [sp, #56]	@ 0x38
 800b092:	e00b      	b.n	800b0ac <_dtoa_r+0x254>
 800b094:	2301      	movs	r3, #1
 800b096:	e7f3      	b.n	800b080 <_dtoa_r+0x228>
 800b098:	2300      	movs	r3, #0
 800b09a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b09c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b09e:	18fb      	adds	r3, r7, r3
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	9307      	str	r3, [sp, #28]
 800b0a8:	bfb8      	it	lt
 800b0aa:	2301      	movlt	r3, #1
 800b0ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	2204      	movs	r2, #4
 800b0b4:	f102 0514 	add.w	r5, r2, #20
 800b0b8:	429d      	cmp	r5, r3
 800b0ba:	d91f      	bls.n	800b0fc <_dtoa_r+0x2a4>
 800b0bc:	6041      	str	r1, [r0, #4]
 800b0be:	4658      	mov	r0, fp
 800b0c0:	f000 fd8e 	bl	800bbe0 <_Balloc>
 800b0c4:	4682      	mov	sl, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d13c      	bne.n	800b144 <_dtoa_r+0x2ec>
 800b0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b138 <_dtoa_r+0x2e0>)
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0d2:	e6d8      	b.n	800ae86 <_dtoa_r+0x2e>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e7e0      	b.n	800b09a <_dtoa_r+0x242>
 800b0d8:	2401      	movs	r4, #1
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	9307      	str	r3, [sp, #28]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2312      	movs	r3, #18
 800b0ec:	e7d0      	b.n	800b090 <_dtoa_r+0x238>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0f2:	e7f5      	b.n	800b0e0 <_dtoa_r+0x288>
 800b0f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	9307      	str	r3, [sp, #28]
 800b0fa:	e7d7      	b.n	800b0ac <_dtoa_r+0x254>
 800b0fc:	3101      	adds	r1, #1
 800b0fe:	0052      	lsls	r2, r2, #1
 800b100:	e7d8      	b.n	800b0b4 <_dtoa_r+0x25c>
 800b102:	bf00      	nop
 800b104:	f3af 8000 	nop.w
 800b108:	636f4361 	.word	0x636f4361
 800b10c:	3fd287a7 	.word	0x3fd287a7
 800b110:	8b60c8b3 	.word	0x8b60c8b3
 800b114:	3fc68a28 	.word	0x3fc68a28
 800b118:	509f79fb 	.word	0x509f79fb
 800b11c:	3fd34413 	.word	0x3fd34413
 800b120:	0800d9a5 	.word	0x0800d9a5
 800b124:	0800d9bc 	.word	0x0800d9bc
 800b128:	7ff00000 	.word	0x7ff00000
 800b12c:	0800d975 	.word	0x0800d975
 800b130:	3ff80000 	.word	0x3ff80000
 800b134:	0800dab8 	.word	0x0800dab8
 800b138:	0800da14 	.word	0x0800da14
 800b13c:	0800d9a1 	.word	0x0800d9a1
 800b140:	0800d974 	.word	0x0800d974
 800b144:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b148:	6018      	str	r0, [r3, #0]
 800b14a:	9b07      	ldr	r3, [sp, #28]
 800b14c:	2b0e      	cmp	r3, #14
 800b14e:	f200 80a4 	bhi.w	800b29a <_dtoa_r+0x442>
 800b152:	2c00      	cmp	r4, #0
 800b154:	f000 80a1 	beq.w	800b29a <_dtoa_r+0x442>
 800b158:	2f00      	cmp	r7, #0
 800b15a:	dd33      	ble.n	800b1c4 <_dtoa_r+0x36c>
 800b15c:	4bad      	ldr	r3, [pc, #692]	@ (800b414 <_dtoa_r+0x5bc>)
 800b15e:	f007 020f 	and.w	r2, r7, #15
 800b162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b166:	ed93 7b00 	vldr	d7, [r3]
 800b16a:	05f8      	lsls	r0, r7, #23
 800b16c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b170:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b174:	d516      	bpl.n	800b1a4 <_dtoa_r+0x34c>
 800b176:	4ba8      	ldr	r3, [pc, #672]	@ (800b418 <_dtoa_r+0x5c0>)
 800b178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b17c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b180:	f7f5 fb64 	bl	800084c <__aeabi_ddiv>
 800b184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b188:	f004 040f 	and.w	r4, r4, #15
 800b18c:	2603      	movs	r6, #3
 800b18e:	4da2      	ldr	r5, [pc, #648]	@ (800b418 <_dtoa_r+0x5c0>)
 800b190:	b954      	cbnz	r4, 800b1a8 <_dtoa_r+0x350>
 800b192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b19a:	f7f5 fb57 	bl	800084c <__aeabi_ddiv>
 800b19e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a2:	e028      	b.n	800b1f6 <_dtoa_r+0x39e>
 800b1a4:	2602      	movs	r6, #2
 800b1a6:	e7f2      	b.n	800b18e <_dtoa_r+0x336>
 800b1a8:	07e1      	lsls	r1, r4, #31
 800b1aa:	d508      	bpl.n	800b1be <_dtoa_r+0x366>
 800b1ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1b4:	f7f5 fa20 	bl	80005f8 <__aeabi_dmul>
 800b1b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1bc:	3601      	adds	r6, #1
 800b1be:	1064      	asrs	r4, r4, #1
 800b1c0:	3508      	adds	r5, #8
 800b1c2:	e7e5      	b.n	800b190 <_dtoa_r+0x338>
 800b1c4:	f000 80d2 	beq.w	800b36c <_dtoa_r+0x514>
 800b1c8:	427c      	negs	r4, r7
 800b1ca:	4b92      	ldr	r3, [pc, #584]	@ (800b414 <_dtoa_r+0x5bc>)
 800b1cc:	4d92      	ldr	r5, [pc, #584]	@ (800b418 <_dtoa_r+0x5c0>)
 800b1ce:	f004 020f 	and.w	r2, r4, #15
 800b1d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1de:	f7f5 fa0b 	bl	80005f8 <__aeabi_dmul>
 800b1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1e6:	1124      	asrs	r4, r4, #4
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2602      	movs	r6, #2
 800b1ec:	2c00      	cmp	r4, #0
 800b1ee:	f040 80b2 	bne.w	800b356 <_dtoa_r+0x4fe>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1d3      	bne.n	800b19e <_dtoa_r+0x346>
 800b1f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 80b7 	beq.w	800b370 <_dtoa_r+0x518>
 800b202:	4b86      	ldr	r3, [pc, #536]	@ (800b41c <_dtoa_r+0x5c4>)
 800b204:	2200      	movs	r2, #0
 800b206:	4620      	mov	r0, r4
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 fc67 	bl	8000adc <__aeabi_dcmplt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	f000 80ae 	beq.w	800b370 <_dtoa_r+0x518>
 800b214:	9b07      	ldr	r3, [sp, #28]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 80aa 	beq.w	800b370 <_dtoa_r+0x518>
 800b21c:	9b00      	ldr	r3, [sp, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dd37      	ble.n	800b292 <_dtoa_r+0x43a>
 800b222:	1e7b      	subs	r3, r7, #1
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	4620      	mov	r0, r4
 800b228:	4b7d      	ldr	r3, [pc, #500]	@ (800b420 <_dtoa_r+0x5c8>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	4629      	mov	r1, r5
 800b22e:	f7f5 f9e3 	bl	80005f8 <__aeabi_dmul>
 800b232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b236:	9c00      	ldr	r4, [sp, #0]
 800b238:	3601      	adds	r6, #1
 800b23a:	4630      	mov	r0, r6
 800b23c:	f7f5 f972 	bl	8000524 <__aeabi_i2d>
 800b240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b244:	f7f5 f9d8 	bl	80005f8 <__aeabi_dmul>
 800b248:	4b76      	ldr	r3, [pc, #472]	@ (800b424 <_dtoa_r+0x5cc>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	f7f5 f81e 	bl	800028c <__adddf3>
 800b250:	4605      	mov	r5, r0
 800b252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b256:	2c00      	cmp	r4, #0
 800b258:	f040 808d 	bne.w	800b376 <_dtoa_r+0x51e>
 800b25c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b260:	4b71      	ldr	r3, [pc, #452]	@ (800b428 <_dtoa_r+0x5d0>)
 800b262:	2200      	movs	r2, #0
 800b264:	f7f5 f810 	bl	8000288 <__aeabi_dsub>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b270:	462a      	mov	r2, r5
 800b272:	4633      	mov	r3, r6
 800b274:	f7f5 fc50 	bl	8000b18 <__aeabi_dcmpgt>
 800b278:	2800      	cmp	r0, #0
 800b27a:	f040 828b 	bne.w	800b794 <_dtoa_r+0x93c>
 800b27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b282:	462a      	mov	r2, r5
 800b284:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b288:	f7f5 fc28 	bl	8000adc <__aeabi_dcmplt>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	f040 8128 	bne.w	800b4e2 <_dtoa_r+0x68a>
 800b292:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b296:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b29a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f2c0 815a 	blt.w	800b556 <_dtoa_r+0x6fe>
 800b2a2:	2f0e      	cmp	r7, #14
 800b2a4:	f300 8157 	bgt.w	800b556 <_dtoa_r+0x6fe>
 800b2a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b414 <_dtoa_r+0x5bc>)
 800b2aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2ae:	ed93 7b00 	vldr	d7, [r3]
 800b2b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	ed8d 7b00 	vstr	d7, [sp]
 800b2ba:	da03      	bge.n	800b2c4 <_dtoa_r+0x46c>
 800b2bc:	9b07      	ldr	r3, [sp, #28]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f340 8101 	ble.w	800b4c6 <_dtoa_r+0x66e>
 800b2c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2c8:	4656      	mov	r6, sl
 800b2ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	f7f5 fabb 	bl	800084c <__aeabi_ddiv>
 800b2d6:	f7f5 fc3f 	bl	8000b58 <__aeabi_d2iz>
 800b2da:	4680      	mov	r8, r0
 800b2dc:	f7f5 f922 	bl	8000524 <__aeabi_i2d>
 800b2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e4:	f7f5 f988 	bl	80005f8 <__aeabi_dmul>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b2f4:	f7f4 ffc8 	bl	8000288 <__aeabi_dsub>
 800b2f8:	f806 4b01 	strb.w	r4, [r6], #1
 800b2fc:	9d07      	ldr	r5, [sp, #28]
 800b2fe:	eba6 040a 	sub.w	r4, r6, sl
 800b302:	42a5      	cmp	r5, r4
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	f040 8117 	bne.w	800b53a <_dtoa_r+0x6e2>
 800b30c:	f7f4 ffbe 	bl	800028c <__adddf3>
 800b310:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b314:	4604      	mov	r4, r0
 800b316:	460d      	mov	r5, r1
 800b318:	f7f5 fbfe 	bl	8000b18 <__aeabi_dcmpgt>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	f040 80f9 	bne.w	800b514 <_dtoa_r+0x6bc>
 800b322:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b326:	4620      	mov	r0, r4
 800b328:	4629      	mov	r1, r5
 800b32a:	f7f5 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b32e:	b118      	cbz	r0, 800b338 <_dtoa_r+0x4e0>
 800b330:	f018 0f01 	tst.w	r8, #1
 800b334:	f040 80ee 	bne.w	800b514 <_dtoa_r+0x6bc>
 800b338:	4649      	mov	r1, r9
 800b33a:	4658      	mov	r0, fp
 800b33c:	f000 fc90 	bl	800bc60 <_Bfree>
 800b340:	2300      	movs	r3, #0
 800b342:	7033      	strb	r3, [r6, #0]
 800b344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b346:	3701      	adds	r7, #1
 800b348:	601f      	str	r7, [r3, #0]
 800b34a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 831d 	beq.w	800b98c <_dtoa_r+0xb34>
 800b352:	601e      	str	r6, [r3, #0]
 800b354:	e31a      	b.n	800b98c <_dtoa_r+0xb34>
 800b356:	07e2      	lsls	r2, r4, #31
 800b358:	d505      	bpl.n	800b366 <_dtoa_r+0x50e>
 800b35a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b35e:	f7f5 f94b 	bl	80005f8 <__aeabi_dmul>
 800b362:	3601      	adds	r6, #1
 800b364:	2301      	movs	r3, #1
 800b366:	1064      	asrs	r4, r4, #1
 800b368:	3508      	adds	r5, #8
 800b36a:	e73f      	b.n	800b1ec <_dtoa_r+0x394>
 800b36c:	2602      	movs	r6, #2
 800b36e:	e742      	b.n	800b1f6 <_dtoa_r+0x39e>
 800b370:	9c07      	ldr	r4, [sp, #28]
 800b372:	9704      	str	r7, [sp, #16]
 800b374:	e761      	b.n	800b23a <_dtoa_r+0x3e2>
 800b376:	4b27      	ldr	r3, [pc, #156]	@ (800b414 <_dtoa_r+0x5bc>)
 800b378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b37a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b37e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b382:	4454      	add	r4, sl
 800b384:	2900      	cmp	r1, #0
 800b386:	d053      	beq.n	800b430 <_dtoa_r+0x5d8>
 800b388:	4928      	ldr	r1, [pc, #160]	@ (800b42c <_dtoa_r+0x5d4>)
 800b38a:	2000      	movs	r0, #0
 800b38c:	f7f5 fa5e 	bl	800084c <__aeabi_ddiv>
 800b390:	4633      	mov	r3, r6
 800b392:	462a      	mov	r2, r5
 800b394:	f7f4 ff78 	bl	8000288 <__aeabi_dsub>
 800b398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b39c:	4656      	mov	r6, sl
 800b39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3a2:	f7f5 fbd9 	bl	8000b58 <__aeabi_d2iz>
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	f7f5 f8bc 	bl	8000524 <__aeabi_i2d>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3b4:	f7f4 ff68 	bl	8000288 <__aeabi_dsub>
 800b3b8:	3530      	adds	r5, #48	@ 0x30
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3c2:	f806 5b01 	strb.w	r5, [r6], #1
 800b3c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3ca:	f7f5 fb87 	bl	8000adc <__aeabi_dcmplt>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d171      	bne.n	800b4b6 <_dtoa_r+0x65e>
 800b3d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3d6:	4911      	ldr	r1, [pc, #68]	@ (800b41c <_dtoa_r+0x5c4>)
 800b3d8:	2000      	movs	r0, #0
 800b3da:	f7f4 ff55 	bl	8000288 <__aeabi_dsub>
 800b3de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3e2:	f7f5 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f040 8095 	bne.w	800b516 <_dtoa_r+0x6be>
 800b3ec:	42a6      	cmp	r6, r4
 800b3ee:	f43f af50 	beq.w	800b292 <_dtoa_r+0x43a>
 800b3f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b3f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b420 <_dtoa_r+0x5c8>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f7f5 f8fd 	bl	80005f8 <__aeabi_dmul>
 800b3fe:	4b08      	ldr	r3, [pc, #32]	@ (800b420 <_dtoa_r+0x5c8>)
 800b400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b404:	2200      	movs	r2, #0
 800b406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b40a:	f7f5 f8f5 	bl	80005f8 <__aeabi_dmul>
 800b40e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b412:	e7c4      	b.n	800b39e <_dtoa_r+0x546>
 800b414:	0800dab8 	.word	0x0800dab8
 800b418:	0800da90 	.word	0x0800da90
 800b41c:	3ff00000 	.word	0x3ff00000
 800b420:	40240000 	.word	0x40240000
 800b424:	401c0000 	.word	0x401c0000
 800b428:	40140000 	.word	0x40140000
 800b42c:	3fe00000 	.word	0x3fe00000
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	f7f5 f8e0 	bl	80005f8 <__aeabi_dmul>
 800b438:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b43c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b43e:	4656      	mov	r6, sl
 800b440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b444:	f7f5 fb88 	bl	8000b58 <__aeabi_d2iz>
 800b448:	4605      	mov	r5, r0
 800b44a:	f7f5 f86b 	bl	8000524 <__aeabi_i2d>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b456:	f7f4 ff17 	bl	8000288 <__aeabi_dsub>
 800b45a:	3530      	adds	r5, #48	@ 0x30
 800b45c:	f806 5b01 	strb.w	r5, [r6], #1
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	42a6      	cmp	r6, r4
 800b466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b46a:	f04f 0200 	mov.w	r2, #0
 800b46e:	d124      	bne.n	800b4ba <_dtoa_r+0x662>
 800b470:	4bac      	ldr	r3, [pc, #688]	@ (800b724 <_dtoa_r+0x8cc>)
 800b472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b476:	f7f4 ff09 	bl	800028c <__adddf3>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b482:	f7f5 fb49 	bl	8000b18 <__aeabi_dcmpgt>
 800b486:	2800      	cmp	r0, #0
 800b488:	d145      	bne.n	800b516 <_dtoa_r+0x6be>
 800b48a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b48e:	49a5      	ldr	r1, [pc, #660]	@ (800b724 <_dtoa_r+0x8cc>)
 800b490:	2000      	movs	r0, #0
 800b492:	f7f4 fef9 	bl	8000288 <__aeabi_dsub>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b49e:	f7f5 fb1d 	bl	8000adc <__aeabi_dcmplt>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	f43f aef5 	beq.w	800b292 <_dtoa_r+0x43a>
 800b4a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b4aa:	1e73      	subs	r3, r6, #1
 800b4ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4b2:	2b30      	cmp	r3, #48	@ 0x30
 800b4b4:	d0f8      	beq.n	800b4a8 <_dtoa_r+0x650>
 800b4b6:	9f04      	ldr	r7, [sp, #16]
 800b4b8:	e73e      	b.n	800b338 <_dtoa_r+0x4e0>
 800b4ba:	4b9b      	ldr	r3, [pc, #620]	@ (800b728 <_dtoa_r+0x8d0>)
 800b4bc:	f7f5 f89c 	bl	80005f8 <__aeabi_dmul>
 800b4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c4:	e7bc      	b.n	800b440 <_dtoa_r+0x5e8>
 800b4c6:	d10c      	bne.n	800b4e2 <_dtoa_r+0x68a>
 800b4c8:	4b98      	ldr	r3, [pc, #608]	@ (800b72c <_dtoa_r+0x8d4>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4d0:	f7f5 f892 	bl	80005f8 <__aeabi_dmul>
 800b4d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4d8:	f7f5 fb14 	bl	8000b04 <__aeabi_dcmpge>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f000 8157 	beq.w	800b790 <_dtoa_r+0x938>
 800b4e2:	2400      	movs	r4, #0
 800b4e4:	4625      	mov	r5, r4
 800b4e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4e8:	43db      	mvns	r3, r3
 800b4ea:	9304      	str	r3, [sp, #16]
 800b4ec:	4656      	mov	r6, sl
 800b4ee:	2700      	movs	r7, #0
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4658      	mov	r0, fp
 800b4f4:	f000 fbb4 	bl	800bc60 <_Bfree>
 800b4f8:	2d00      	cmp	r5, #0
 800b4fa:	d0dc      	beq.n	800b4b6 <_dtoa_r+0x65e>
 800b4fc:	b12f      	cbz	r7, 800b50a <_dtoa_r+0x6b2>
 800b4fe:	42af      	cmp	r7, r5
 800b500:	d003      	beq.n	800b50a <_dtoa_r+0x6b2>
 800b502:	4639      	mov	r1, r7
 800b504:	4658      	mov	r0, fp
 800b506:	f000 fbab 	bl	800bc60 <_Bfree>
 800b50a:	4629      	mov	r1, r5
 800b50c:	4658      	mov	r0, fp
 800b50e:	f000 fba7 	bl	800bc60 <_Bfree>
 800b512:	e7d0      	b.n	800b4b6 <_dtoa_r+0x65e>
 800b514:	9704      	str	r7, [sp, #16]
 800b516:	4633      	mov	r3, r6
 800b518:	461e      	mov	r6, r3
 800b51a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b51e:	2a39      	cmp	r2, #57	@ 0x39
 800b520:	d107      	bne.n	800b532 <_dtoa_r+0x6da>
 800b522:	459a      	cmp	sl, r3
 800b524:	d1f8      	bne.n	800b518 <_dtoa_r+0x6c0>
 800b526:	9a04      	ldr	r2, [sp, #16]
 800b528:	3201      	adds	r2, #1
 800b52a:	9204      	str	r2, [sp, #16]
 800b52c:	2230      	movs	r2, #48	@ 0x30
 800b52e:	f88a 2000 	strb.w	r2, [sl]
 800b532:	781a      	ldrb	r2, [r3, #0]
 800b534:	3201      	adds	r2, #1
 800b536:	701a      	strb	r2, [r3, #0]
 800b538:	e7bd      	b.n	800b4b6 <_dtoa_r+0x65e>
 800b53a:	4b7b      	ldr	r3, [pc, #492]	@ (800b728 <_dtoa_r+0x8d0>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	f7f5 f85b 	bl	80005f8 <__aeabi_dmul>
 800b542:	2200      	movs	r2, #0
 800b544:	2300      	movs	r3, #0
 800b546:	4604      	mov	r4, r0
 800b548:	460d      	mov	r5, r1
 800b54a:	f7f5 fabd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b54e:	2800      	cmp	r0, #0
 800b550:	f43f aebb 	beq.w	800b2ca <_dtoa_r+0x472>
 800b554:	e6f0      	b.n	800b338 <_dtoa_r+0x4e0>
 800b556:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b558:	2a00      	cmp	r2, #0
 800b55a:	f000 80db 	beq.w	800b714 <_dtoa_r+0x8bc>
 800b55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b560:	2a01      	cmp	r2, #1
 800b562:	f300 80bf 	bgt.w	800b6e4 <_dtoa_r+0x88c>
 800b566:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b568:	2a00      	cmp	r2, #0
 800b56a:	f000 80b7 	beq.w	800b6dc <_dtoa_r+0x884>
 800b56e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b572:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b574:	4646      	mov	r6, r8
 800b576:	9a08      	ldr	r2, [sp, #32]
 800b578:	2101      	movs	r1, #1
 800b57a:	441a      	add	r2, r3
 800b57c:	4658      	mov	r0, fp
 800b57e:	4498      	add	r8, r3
 800b580:	9208      	str	r2, [sp, #32]
 800b582:	f000 fc21 	bl	800bdc8 <__i2b>
 800b586:	4605      	mov	r5, r0
 800b588:	b15e      	cbz	r6, 800b5a2 <_dtoa_r+0x74a>
 800b58a:	9b08      	ldr	r3, [sp, #32]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dd08      	ble.n	800b5a2 <_dtoa_r+0x74a>
 800b590:	42b3      	cmp	r3, r6
 800b592:	9a08      	ldr	r2, [sp, #32]
 800b594:	bfa8      	it	ge
 800b596:	4633      	movge	r3, r6
 800b598:	eba8 0803 	sub.w	r8, r8, r3
 800b59c:	1af6      	subs	r6, r6, r3
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	9308      	str	r3, [sp, #32]
 800b5a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5a4:	b1f3      	cbz	r3, 800b5e4 <_dtoa_r+0x78c>
 800b5a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 80b7 	beq.w	800b71c <_dtoa_r+0x8c4>
 800b5ae:	b18c      	cbz	r4, 800b5d4 <_dtoa_r+0x77c>
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4622      	mov	r2, r4
 800b5b4:	4658      	mov	r0, fp
 800b5b6:	f000 fcc7 	bl	800bf48 <__pow5mult>
 800b5ba:	464a      	mov	r2, r9
 800b5bc:	4601      	mov	r1, r0
 800b5be:	4605      	mov	r5, r0
 800b5c0:	4658      	mov	r0, fp
 800b5c2:	f000 fc17 	bl	800bdf4 <__multiply>
 800b5c6:	4649      	mov	r1, r9
 800b5c8:	9004      	str	r0, [sp, #16]
 800b5ca:	4658      	mov	r0, fp
 800b5cc:	f000 fb48 	bl	800bc60 <_Bfree>
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	4699      	mov	r9, r3
 800b5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5d6:	1b1a      	subs	r2, r3, r4
 800b5d8:	d004      	beq.n	800b5e4 <_dtoa_r+0x78c>
 800b5da:	4649      	mov	r1, r9
 800b5dc:	4658      	mov	r0, fp
 800b5de:	f000 fcb3 	bl	800bf48 <__pow5mult>
 800b5e2:	4681      	mov	r9, r0
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	4658      	mov	r0, fp
 800b5e8:	f000 fbee 	bl	800bdc8 <__i2b>
 800b5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 81cf 	beq.w	800b994 <_dtoa_r+0xb3c>
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	4601      	mov	r1, r0
 800b5fa:	4658      	mov	r0, fp
 800b5fc:	f000 fca4 	bl	800bf48 <__pow5mult>
 800b600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b602:	2b01      	cmp	r3, #1
 800b604:	4604      	mov	r4, r0
 800b606:	f300 8095 	bgt.w	800b734 <_dtoa_r+0x8dc>
 800b60a:	9b02      	ldr	r3, [sp, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f040 8087 	bne.w	800b720 <_dtoa_r+0x8c8>
 800b612:	9b03      	ldr	r3, [sp, #12]
 800b614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f040 8089 	bne.w	800b730 <_dtoa_r+0x8d8>
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b624:	0d1b      	lsrs	r3, r3, #20
 800b626:	051b      	lsls	r3, r3, #20
 800b628:	b12b      	cbz	r3, 800b636 <_dtoa_r+0x7de>
 800b62a:	9b08      	ldr	r3, [sp, #32]
 800b62c:	3301      	adds	r3, #1
 800b62e:	9308      	str	r3, [sp, #32]
 800b630:	f108 0801 	add.w	r8, r8, #1
 800b634:	2301      	movs	r3, #1
 800b636:	930a      	str	r3, [sp, #40]	@ 0x28
 800b638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f000 81b0 	beq.w	800b9a0 <_dtoa_r+0xb48>
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b646:	6918      	ldr	r0, [r3, #16]
 800b648:	f000 fb72 	bl	800bd30 <__hi0bits>
 800b64c:	f1c0 0020 	rsb	r0, r0, #32
 800b650:	9b08      	ldr	r3, [sp, #32]
 800b652:	4418      	add	r0, r3
 800b654:	f010 001f 	ands.w	r0, r0, #31
 800b658:	d077      	beq.n	800b74a <_dtoa_r+0x8f2>
 800b65a:	f1c0 0320 	rsb	r3, r0, #32
 800b65e:	2b04      	cmp	r3, #4
 800b660:	dd6b      	ble.n	800b73a <_dtoa_r+0x8e2>
 800b662:	9b08      	ldr	r3, [sp, #32]
 800b664:	f1c0 001c 	rsb	r0, r0, #28
 800b668:	4403      	add	r3, r0
 800b66a:	4480      	add	r8, r0
 800b66c:	4406      	add	r6, r0
 800b66e:	9308      	str	r3, [sp, #32]
 800b670:	f1b8 0f00 	cmp.w	r8, #0
 800b674:	dd05      	ble.n	800b682 <_dtoa_r+0x82a>
 800b676:	4649      	mov	r1, r9
 800b678:	4642      	mov	r2, r8
 800b67a:	4658      	mov	r0, fp
 800b67c:	f000 fcbe 	bl	800bffc <__lshift>
 800b680:	4681      	mov	r9, r0
 800b682:	9b08      	ldr	r3, [sp, #32]
 800b684:	2b00      	cmp	r3, #0
 800b686:	dd05      	ble.n	800b694 <_dtoa_r+0x83c>
 800b688:	4621      	mov	r1, r4
 800b68a:	461a      	mov	r2, r3
 800b68c:	4658      	mov	r0, fp
 800b68e:	f000 fcb5 	bl	800bffc <__lshift>
 800b692:	4604      	mov	r4, r0
 800b694:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b696:	2b00      	cmp	r3, #0
 800b698:	d059      	beq.n	800b74e <_dtoa_r+0x8f6>
 800b69a:	4621      	mov	r1, r4
 800b69c:	4648      	mov	r0, r9
 800b69e:	f000 fd19 	bl	800c0d4 <__mcmp>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	da53      	bge.n	800b74e <_dtoa_r+0x8f6>
 800b6a6:	1e7b      	subs	r3, r7, #1
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	220a      	movs	r2, #10
 800b6b0:	4658      	mov	r0, fp
 800b6b2:	f000 faf7 	bl	800bca4 <__multadd>
 800b6b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6b8:	4681      	mov	r9, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 8172 	beq.w	800b9a4 <_dtoa_r+0xb4c>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	220a      	movs	r2, #10
 800b6c6:	4658      	mov	r0, fp
 800b6c8:	f000 faec 	bl	800bca4 <__multadd>
 800b6cc:	9b00      	ldr	r3, [sp, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	dc67      	bgt.n	800b7a4 <_dtoa_r+0x94c>
 800b6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	dc41      	bgt.n	800b75e <_dtoa_r+0x906>
 800b6da:	e063      	b.n	800b7a4 <_dtoa_r+0x94c>
 800b6dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b6de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6e2:	e746      	b.n	800b572 <_dtoa_r+0x71a>
 800b6e4:	9b07      	ldr	r3, [sp, #28]
 800b6e6:	1e5c      	subs	r4, r3, #1
 800b6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	bfbf      	itttt	lt
 800b6ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b6f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b6f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b6f4:	1ae3      	sublt	r3, r4, r3
 800b6f6:	bfb4      	ite	lt
 800b6f8:	18d2      	addlt	r2, r2, r3
 800b6fa:	1b1c      	subge	r4, r3, r4
 800b6fc:	9b07      	ldr	r3, [sp, #28]
 800b6fe:	bfbc      	itt	lt
 800b700:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b702:	2400      	movlt	r4, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfb5      	itete	lt
 800b708:	eba8 0603 	sublt.w	r6, r8, r3
 800b70c:	9b07      	ldrge	r3, [sp, #28]
 800b70e:	2300      	movlt	r3, #0
 800b710:	4646      	movge	r6, r8
 800b712:	e730      	b.n	800b576 <_dtoa_r+0x71e>
 800b714:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b716:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b718:	4646      	mov	r6, r8
 800b71a:	e735      	b.n	800b588 <_dtoa_r+0x730>
 800b71c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b71e:	e75c      	b.n	800b5da <_dtoa_r+0x782>
 800b720:	2300      	movs	r3, #0
 800b722:	e788      	b.n	800b636 <_dtoa_r+0x7de>
 800b724:	3fe00000 	.word	0x3fe00000
 800b728:	40240000 	.word	0x40240000
 800b72c:	40140000 	.word	0x40140000
 800b730:	9b02      	ldr	r3, [sp, #8]
 800b732:	e780      	b.n	800b636 <_dtoa_r+0x7de>
 800b734:	2300      	movs	r3, #0
 800b736:	930a      	str	r3, [sp, #40]	@ 0x28
 800b738:	e782      	b.n	800b640 <_dtoa_r+0x7e8>
 800b73a:	d099      	beq.n	800b670 <_dtoa_r+0x818>
 800b73c:	9a08      	ldr	r2, [sp, #32]
 800b73e:	331c      	adds	r3, #28
 800b740:	441a      	add	r2, r3
 800b742:	4498      	add	r8, r3
 800b744:	441e      	add	r6, r3
 800b746:	9208      	str	r2, [sp, #32]
 800b748:	e792      	b.n	800b670 <_dtoa_r+0x818>
 800b74a:	4603      	mov	r3, r0
 800b74c:	e7f6      	b.n	800b73c <_dtoa_r+0x8e4>
 800b74e:	9b07      	ldr	r3, [sp, #28]
 800b750:	9704      	str	r7, [sp, #16]
 800b752:	2b00      	cmp	r3, #0
 800b754:	dc20      	bgt.n	800b798 <_dtoa_r+0x940>
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	dd1e      	ble.n	800b79c <_dtoa_r+0x944>
 800b75e:	9b00      	ldr	r3, [sp, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	f47f aec0 	bne.w	800b4e6 <_dtoa_r+0x68e>
 800b766:	4621      	mov	r1, r4
 800b768:	2205      	movs	r2, #5
 800b76a:	4658      	mov	r0, fp
 800b76c:	f000 fa9a 	bl	800bca4 <__multadd>
 800b770:	4601      	mov	r1, r0
 800b772:	4604      	mov	r4, r0
 800b774:	4648      	mov	r0, r9
 800b776:	f000 fcad 	bl	800c0d4 <__mcmp>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f77f aeb3 	ble.w	800b4e6 <_dtoa_r+0x68e>
 800b780:	4656      	mov	r6, sl
 800b782:	2331      	movs	r3, #49	@ 0x31
 800b784:	f806 3b01 	strb.w	r3, [r6], #1
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	3301      	adds	r3, #1
 800b78c:	9304      	str	r3, [sp, #16]
 800b78e:	e6ae      	b.n	800b4ee <_dtoa_r+0x696>
 800b790:	9c07      	ldr	r4, [sp, #28]
 800b792:	9704      	str	r7, [sp, #16]
 800b794:	4625      	mov	r5, r4
 800b796:	e7f3      	b.n	800b780 <_dtoa_r+0x928>
 800b798:	9b07      	ldr	r3, [sp, #28]
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 8104 	beq.w	800b9ac <_dtoa_r+0xb54>
 800b7a4:	2e00      	cmp	r6, #0
 800b7a6:	dd05      	ble.n	800b7b4 <_dtoa_r+0x95c>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4632      	mov	r2, r6
 800b7ac:	4658      	mov	r0, fp
 800b7ae:	f000 fc25 	bl	800bffc <__lshift>
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d05a      	beq.n	800b870 <_dtoa_r+0xa18>
 800b7ba:	6869      	ldr	r1, [r5, #4]
 800b7bc:	4658      	mov	r0, fp
 800b7be:	f000 fa0f 	bl	800bbe0 <_Balloc>
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	b928      	cbnz	r0, 800b7d2 <_dtoa_r+0x97a>
 800b7c6:	4b84      	ldr	r3, [pc, #528]	@ (800b9d8 <_dtoa_r+0xb80>)
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7ce:	f7ff bb5a 	b.w	800ae86 <_dtoa_r+0x2e>
 800b7d2:	692a      	ldr	r2, [r5, #16]
 800b7d4:	3202      	adds	r2, #2
 800b7d6:	0092      	lsls	r2, r2, #2
 800b7d8:	f105 010c 	add.w	r1, r5, #12
 800b7dc:	300c      	adds	r0, #12
 800b7de:	f000 ffaf 	bl	800c740 <memcpy>
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4658      	mov	r0, fp
 800b7e8:	f000 fc08 	bl	800bffc <__lshift>
 800b7ec:	f10a 0301 	add.w	r3, sl, #1
 800b7f0:	9307      	str	r3, [sp, #28]
 800b7f2:	9b00      	ldr	r3, [sp, #0]
 800b7f4:	4453      	add	r3, sl
 800b7f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7f8:	9b02      	ldr	r3, [sp, #8]
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	462f      	mov	r7, r5
 800b800:	930a      	str	r3, [sp, #40]	@ 0x28
 800b802:	4605      	mov	r5, r0
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	4621      	mov	r1, r4
 800b808:	3b01      	subs	r3, #1
 800b80a:	4648      	mov	r0, r9
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	f7ff fa98 	bl	800ad42 <quorem>
 800b812:	4639      	mov	r1, r7
 800b814:	9002      	str	r0, [sp, #8]
 800b816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b81a:	4648      	mov	r0, r9
 800b81c:	f000 fc5a 	bl	800c0d4 <__mcmp>
 800b820:	462a      	mov	r2, r5
 800b822:	9008      	str	r0, [sp, #32]
 800b824:	4621      	mov	r1, r4
 800b826:	4658      	mov	r0, fp
 800b828:	f000 fc70 	bl	800c10c <__mdiff>
 800b82c:	68c2      	ldr	r2, [r0, #12]
 800b82e:	4606      	mov	r6, r0
 800b830:	bb02      	cbnz	r2, 800b874 <_dtoa_r+0xa1c>
 800b832:	4601      	mov	r1, r0
 800b834:	4648      	mov	r0, r9
 800b836:	f000 fc4d 	bl	800c0d4 <__mcmp>
 800b83a:	4602      	mov	r2, r0
 800b83c:	4631      	mov	r1, r6
 800b83e:	4658      	mov	r0, fp
 800b840:	920e      	str	r2, [sp, #56]	@ 0x38
 800b842:	f000 fa0d 	bl	800bc60 <_Bfree>
 800b846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b848:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b84a:	9e07      	ldr	r6, [sp, #28]
 800b84c:	ea43 0102 	orr.w	r1, r3, r2
 800b850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b852:	4319      	orrs	r1, r3
 800b854:	d110      	bne.n	800b878 <_dtoa_r+0xa20>
 800b856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b85a:	d029      	beq.n	800b8b0 <_dtoa_r+0xa58>
 800b85c:	9b08      	ldr	r3, [sp, #32]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dd02      	ble.n	800b868 <_dtoa_r+0xa10>
 800b862:	9b02      	ldr	r3, [sp, #8]
 800b864:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b868:	9b00      	ldr	r3, [sp, #0]
 800b86a:	f883 8000 	strb.w	r8, [r3]
 800b86e:	e63f      	b.n	800b4f0 <_dtoa_r+0x698>
 800b870:	4628      	mov	r0, r5
 800b872:	e7bb      	b.n	800b7ec <_dtoa_r+0x994>
 800b874:	2201      	movs	r2, #1
 800b876:	e7e1      	b.n	800b83c <_dtoa_r+0x9e4>
 800b878:	9b08      	ldr	r3, [sp, #32]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	db04      	blt.n	800b888 <_dtoa_r+0xa30>
 800b87e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b880:	430b      	orrs	r3, r1
 800b882:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b884:	430b      	orrs	r3, r1
 800b886:	d120      	bne.n	800b8ca <_dtoa_r+0xa72>
 800b888:	2a00      	cmp	r2, #0
 800b88a:	dded      	ble.n	800b868 <_dtoa_r+0xa10>
 800b88c:	4649      	mov	r1, r9
 800b88e:	2201      	movs	r2, #1
 800b890:	4658      	mov	r0, fp
 800b892:	f000 fbb3 	bl	800bffc <__lshift>
 800b896:	4621      	mov	r1, r4
 800b898:	4681      	mov	r9, r0
 800b89a:	f000 fc1b 	bl	800c0d4 <__mcmp>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	dc03      	bgt.n	800b8aa <_dtoa_r+0xa52>
 800b8a2:	d1e1      	bne.n	800b868 <_dtoa_r+0xa10>
 800b8a4:	f018 0f01 	tst.w	r8, #1
 800b8a8:	d0de      	beq.n	800b868 <_dtoa_r+0xa10>
 800b8aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8ae:	d1d8      	bne.n	800b862 <_dtoa_r+0xa0a>
 800b8b0:	9a00      	ldr	r2, [sp, #0]
 800b8b2:	2339      	movs	r3, #57	@ 0x39
 800b8b4:	7013      	strb	r3, [r2, #0]
 800b8b6:	4633      	mov	r3, r6
 800b8b8:	461e      	mov	r6, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8c0:	2a39      	cmp	r2, #57	@ 0x39
 800b8c2:	d052      	beq.n	800b96a <_dtoa_r+0xb12>
 800b8c4:	3201      	adds	r2, #1
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	e612      	b.n	800b4f0 <_dtoa_r+0x698>
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	dd07      	ble.n	800b8de <_dtoa_r+0xa86>
 800b8ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8d2:	d0ed      	beq.n	800b8b0 <_dtoa_r+0xa58>
 800b8d4:	9a00      	ldr	r2, [sp, #0]
 800b8d6:	f108 0301 	add.w	r3, r8, #1
 800b8da:	7013      	strb	r3, [r2, #0]
 800b8dc:	e608      	b.n	800b4f0 <_dtoa_r+0x698>
 800b8de:	9b07      	ldr	r3, [sp, #28]
 800b8e0:	9a07      	ldr	r2, [sp, #28]
 800b8e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b8e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d028      	beq.n	800b93e <_dtoa_r+0xae6>
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	220a      	movs	r2, #10
 800b8f2:	4658      	mov	r0, fp
 800b8f4:	f000 f9d6 	bl	800bca4 <__multadd>
 800b8f8:	42af      	cmp	r7, r5
 800b8fa:	4681      	mov	r9, r0
 800b8fc:	f04f 0300 	mov.w	r3, #0
 800b900:	f04f 020a 	mov.w	r2, #10
 800b904:	4639      	mov	r1, r7
 800b906:	4658      	mov	r0, fp
 800b908:	d107      	bne.n	800b91a <_dtoa_r+0xac2>
 800b90a:	f000 f9cb 	bl	800bca4 <__multadd>
 800b90e:	4607      	mov	r7, r0
 800b910:	4605      	mov	r5, r0
 800b912:	9b07      	ldr	r3, [sp, #28]
 800b914:	3301      	adds	r3, #1
 800b916:	9307      	str	r3, [sp, #28]
 800b918:	e774      	b.n	800b804 <_dtoa_r+0x9ac>
 800b91a:	f000 f9c3 	bl	800bca4 <__multadd>
 800b91e:	4629      	mov	r1, r5
 800b920:	4607      	mov	r7, r0
 800b922:	2300      	movs	r3, #0
 800b924:	220a      	movs	r2, #10
 800b926:	4658      	mov	r0, fp
 800b928:	f000 f9bc 	bl	800bca4 <__multadd>
 800b92c:	4605      	mov	r5, r0
 800b92e:	e7f0      	b.n	800b912 <_dtoa_r+0xaba>
 800b930:	9b00      	ldr	r3, [sp, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	bfcc      	ite	gt
 800b936:	461e      	movgt	r6, r3
 800b938:	2601      	movle	r6, #1
 800b93a:	4456      	add	r6, sl
 800b93c:	2700      	movs	r7, #0
 800b93e:	4649      	mov	r1, r9
 800b940:	2201      	movs	r2, #1
 800b942:	4658      	mov	r0, fp
 800b944:	f000 fb5a 	bl	800bffc <__lshift>
 800b948:	4621      	mov	r1, r4
 800b94a:	4681      	mov	r9, r0
 800b94c:	f000 fbc2 	bl	800c0d4 <__mcmp>
 800b950:	2800      	cmp	r0, #0
 800b952:	dcb0      	bgt.n	800b8b6 <_dtoa_r+0xa5e>
 800b954:	d102      	bne.n	800b95c <_dtoa_r+0xb04>
 800b956:	f018 0f01 	tst.w	r8, #1
 800b95a:	d1ac      	bne.n	800b8b6 <_dtoa_r+0xa5e>
 800b95c:	4633      	mov	r3, r6
 800b95e:	461e      	mov	r6, r3
 800b960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b964:	2a30      	cmp	r2, #48	@ 0x30
 800b966:	d0fa      	beq.n	800b95e <_dtoa_r+0xb06>
 800b968:	e5c2      	b.n	800b4f0 <_dtoa_r+0x698>
 800b96a:	459a      	cmp	sl, r3
 800b96c:	d1a4      	bne.n	800b8b8 <_dtoa_r+0xa60>
 800b96e:	9b04      	ldr	r3, [sp, #16]
 800b970:	3301      	adds	r3, #1
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	2331      	movs	r3, #49	@ 0x31
 800b976:	f88a 3000 	strb.w	r3, [sl]
 800b97a:	e5b9      	b.n	800b4f0 <_dtoa_r+0x698>
 800b97c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b97e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b9dc <_dtoa_r+0xb84>
 800b982:	b11b      	cbz	r3, 800b98c <_dtoa_r+0xb34>
 800b984:	f10a 0308 	add.w	r3, sl, #8
 800b988:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	4650      	mov	r0, sl
 800b98e:	b019      	add	sp, #100	@ 0x64
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b996:	2b01      	cmp	r3, #1
 800b998:	f77f ae37 	ble.w	800b60a <_dtoa_r+0x7b2>
 800b99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b99e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	e655      	b.n	800b650 <_dtoa_r+0x7f8>
 800b9a4:	9b00      	ldr	r3, [sp, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f77f aed6 	ble.w	800b758 <_dtoa_r+0x900>
 800b9ac:	4656      	mov	r6, sl
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	4648      	mov	r0, r9
 800b9b2:	f7ff f9c6 	bl	800ad42 <quorem>
 800b9b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9ba:	f806 8b01 	strb.w	r8, [r6], #1
 800b9be:	9b00      	ldr	r3, [sp, #0]
 800b9c0:	eba6 020a 	sub.w	r2, r6, sl
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	ddb3      	ble.n	800b930 <_dtoa_r+0xad8>
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	220a      	movs	r2, #10
 800b9ce:	4658      	mov	r0, fp
 800b9d0:	f000 f968 	bl	800bca4 <__multadd>
 800b9d4:	4681      	mov	r9, r0
 800b9d6:	e7ea      	b.n	800b9ae <_dtoa_r+0xb56>
 800b9d8:	0800da14 	.word	0x0800da14
 800b9dc:	0800d998 	.word	0x0800d998

0800b9e0 <_free_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	d041      	beq.n	800ba6c <_free_r+0x8c>
 800b9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ec:	1f0c      	subs	r4, r1, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bfb8      	it	lt
 800b9f2:	18e4      	addlt	r4, r4, r3
 800b9f4:	f000 f8e8 	bl	800bbc8 <__malloc_lock>
 800b9f8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba70 <_free_r+0x90>)
 800b9fa:	6813      	ldr	r3, [r2, #0]
 800b9fc:	b933      	cbnz	r3, 800ba0c <_free_r+0x2c>
 800b9fe:	6063      	str	r3, [r4, #4]
 800ba00:	6014      	str	r4, [r2, #0]
 800ba02:	4628      	mov	r0, r5
 800ba04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba08:	f000 b8e4 	b.w	800bbd4 <__malloc_unlock>
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	d908      	bls.n	800ba22 <_free_r+0x42>
 800ba10:	6820      	ldr	r0, [r4, #0]
 800ba12:	1821      	adds	r1, r4, r0
 800ba14:	428b      	cmp	r3, r1
 800ba16:	bf01      	itttt	eq
 800ba18:	6819      	ldreq	r1, [r3, #0]
 800ba1a:	685b      	ldreq	r3, [r3, #4]
 800ba1c:	1809      	addeq	r1, r1, r0
 800ba1e:	6021      	streq	r1, [r4, #0]
 800ba20:	e7ed      	b.n	800b9fe <_free_r+0x1e>
 800ba22:	461a      	mov	r2, r3
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	b10b      	cbz	r3, 800ba2c <_free_r+0x4c>
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	d9fa      	bls.n	800ba22 <_free_r+0x42>
 800ba2c:	6811      	ldr	r1, [r2, #0]
 800ba2e:	1850      	adds	r0, r2, r1
 800ba30:	42a0      	cmp	r0, r4
 800ba32:	d10b      	bne.n	800ba4c <_free_r+0x6c>
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	4401      	add	r1, r0
 800ba38:	1850      	adds	r0, r2, r1
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	6011      	str	r1, [r2, #0]
 800ba3e:	d1e0      	bne.n	800ba02 <_free_r+0x22>
 800ba40:	6818      	ldr	r0, [r3, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	6053      	str	r3, [r2, #4]
 800ba46:	4408      	add	r0, r1
 800ba48:	6010      	str	r0, [r2, #0]
 800ba4a:	e7da      	b.n	800ba02 <_free_r+0x22>
 800ba4c:	d902      	bls.n	800ba54 <_free_r+0x74>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	602b      	str	r3, [r5, #0]
 800ba52:	e7d6      	b.n	800ba02 <_free_r+0x22>
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	1821      	adds	r1, r4, r0
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf04      	itt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	6063      	str	r3, [r4, #4]
 800ba62:	bf04      	itt	eq
 800ba64:	1809      	addeq	r1, r1, r0
 800ba66:	6021      	streq	r1, [r4, #0]
 800ba68:	6054      	str	r4, [r2, #4]
 800ba6a:	e7ca      	b.n	800ba02 <_free_r+0x22>
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	200021b0 	.word	0x200021b0

0800ba74 <malloc>:
 800ba74:	4b02      	ldr	r3, [pc, #8]	@ (800ba80 <malloc+0xc>)
 800ba76:	4601      	mov	r1, r0
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	f000 b825 	b.w	800bac8 <_malloc_r>
 800ba7e:	bf00      	nop
 800ba80:	20000108 	.word	0x20000108

0800ba84 <sbrk_aligned>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	4e0f      	ldr	r6, [pc, #60]	@ (800bac4 <sbrk_aligned+0x40>)
 800ba88:	460c      	mov	r4, r1
 800ba8a:	6831      	ldr	r1, [r6, #0]
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	b911      	cbnz	r1, 800ba96 <sbrk_aligned+0x12>
 800ba90:	f000 fe46 	bl	800c720 <_sbrk_r>
 800ba94:	6030      	str	r0, [r6, #0]
 800ba96:	4621      	mov	r1, r4
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f000 fe41 	bl	800c720 <_sbrk_r>
 800ba9e:	1c43      	adds	r3, r0, #1
 800baa0:	d103      	bne.n	800baaa <sbrk_aligned+0x26>
 800baa2:	f04f 34ff 	mov.w	r4, #4294967295
 800baa6:	4620      	mov	r0, r4
 800baa8:	bd70      	pop	{r4, r5, r6, pc}
 800baaa:	1cc4      	adds	r4, r0, #3
 800baac:	f024 0403 	bic.w	r4, r4, #3
 800bab0:	42a0      	cmp	r0, r4
 800bab2:	d0f8      	beq.n	800baa6 <sbrk_aligned+0x22>
 800bab4:	1a21      	subs	r1, r4, r0
 800bab6:	4628      	mov	r0, r5
 800bab8:	f000 fe32 	bl	800c720 <_sbrk_r>
 800babc:	3001      	adds	r0, #1
 800babe:	d1f2      	bne.n	800baa6 <sbrk_aligned+0x22>
 800bac0:	e7ef      	b.n	800baa2 <sbrk_aligned+0x1e>
 800bac2:	bf00      	nop
 800bac4:	200021ac 	.word	0x200021ac

0800bac8 <_malloc_r>:
 800bac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bacc:	1ccd      	adds	r5, r1, #3
 800bace:	f025 0503 	bic.w	r5, r5, #3
 800bad2:	3508      	adds	r5, #8
 800bad4:	2d0c      	cmp	r5, #12
 800bad6:	bf38      	it	cc
 800bad8:	250c      	movcc	r5, #12
 800bada:	2d00      	cmp	r5, #0
 800badc:	4606      	mov	r6, r0
 800bade:	db01      	blt.n	800bae4 <_malloc_r+0x1c>
 800bae0:	42a9      	cmp	r1, r5
 800bae2:	d904      	bls.n	800baee <_malloc_r+0x26>
 800bae4:	230c      	movs	r3, #12
 800bae6:	6033      	str	r3, [r6, #0]
 800bae8:	2000      	movs	r0, #0
 800baea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbc4 <_malloc_r+0xfc>
 800baf2:	f000 f869 	bl	800bbc8 <__malloc_lock>
 800baf6:	f8d8 3000 	ldr.w	r3, [r8]
 800bafa:	461c      	mov	r4, r3
 800bafc:	bb44      	cbnz	r4, 800bb50 <_malloc_r+0x88>
 800bafe:	4629      	mov	r1, r5
 800bb00:	4630      	mov	r0, r6
 800bb02:	f7ff ffbf 	bl	800ba84 <sbrk_aligned>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	4604      	mov	r4, r0
 800bb0a:	d158      	bne.n	800bbbe <_malloc_r+0xf6>
 800bb0c:	f8d8 4000 	ldr.w	r4, [r8]
 800bb10:	4627      	mov	r7, r4
 800bb12:	2f00      	cmp	r7, #0
 800bb14:	d143      	bne.n	800bb9e <_malloc_r+0xd6>
 800bb16:	2c00      	cmp	r4, #0
 800bb18:	d04b      	beq.n	800bbb2 <_malloc_r+0xea>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	4630      	mov	r0, r6
 800bb20:	eb04 0903 	add.w	r9, r4, r3
 800bb24:	f000 fdfc 	bl	800c720 <_sbrk_r>
 800bb28:	4581      	cmp	r9, r0
 800bb2a:	d142      	bne.n	800bbb2 <_malloc_r+0xea>
 800bb2c:	6821      	ldr	r1, [r4, #0]
 800bb2e:	1a6d      	subs	r5, r5, r1
 800bb30:	4629      	mov	r1, r5
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7ff ffa6 	bl	800ba84 <sbrk_aligned>
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d03a      	beq.n	800bbb2 <_malloc_r+0xea>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	442b      	add	r3, r5
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	f8d8 3000 	ldr.w	r3, [r8]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	bb62      	cbnz	r2, 800bba4 <_malloc_r+0xdc>
 800bb4a:	f8c8 7000 	str.w	r7, [r8]
 800bb4e:	e00f      	b.n	800bb70 <_malloc_r+0xa8>
 800bb50:	6822      	ldr	r2, [r4, #0]
 800bb52:	1b52      	subs	r2, r2, r5
 800bb54:	d420      	bmi.n	800bb98 <_malloc_r+0xd0>
 800bb56:	2a0b      	cmp	r2, #11
 800bb58:	d917      	bls.n	800bb8a <_malloc_r+0xc2>
 800bb5a:	1961      	adds	r1, r4, r5
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	6025      	str	r5, [r4, #0]
 800bb60:	bf18      	it	ne
 800bb62:	6059      	strne	r1, [r3, #4]
 800bb64:	6863      	ldr	r3, [r4, #4]
 800bb66:	bf08      	it	eq
 800bb68:	f8c8 1000 	streq.w	r1, [r8]
 800bb6c:	5162      	str	r2, [r4, r5]
 800bb6e:	604b      	str	r3, [r1, #4]
 800bb70:	4630      	mov	r0, r6
 800bb72:	f000 f82f 	bl	800bbd4 <__malloc_unlock>
 800bb76:	f104 000b 	add.w	r0, r4, #11
 800bb7a:	1d23      	adds	r3, r4, #4
 800bb7c:	f020 0007 	bic.w	r0, r0, #7
 800bb80:	1ac2      	subs	r2, r0, r3
 800bb82:	bf1c      	itt	ne
 800bb84:	1a1b      	subne	r3, r3, r0
 800bb86:	50a3      	strne	r3, [r4, r2]
 800bb88:	e7af      	b.n	800baea <_malloc_r+0x22>
 800bb8a:	6862      	ldr	r2, [r4, #4]
 800bb8c:	42a3      	cmp	r3, r4
 800bb8e:	bf0c      	ite	eq
 800bb90:	f8c8 2000 	streq.w	r2, [r8]
 800bb94:	605a      	strne	r2, [r3, #4]
 800bb96:	e7eb      	b.n	800bb70 <_malloc_r+0xa8>
 800bb98:	4623      	mov	r3, r4
 800bb9a:	6864      	ldr	r4, [r4, #4]
 800bb9c:	e7ae      	b.n	800bafc <_malloc_r+0x34>
 800bb9e:	463c      	mov	r4, r7
 800bba0:	687f      	ldr	r7, [r7, #4]
 800bba2:	e7b6      	b.n	800bb12 <_malloc_r+0x4a>
 800bba4:	461a      	mov	r2, r3
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	42a3      	cmp	r3, r4
 800bbaa:	d1fb      	bne.n	800bba4 <_malloc_r+0xdc>
 800bbac:	2300      	movs	r3, #0
 800bbae:	6053      	str	r3, [r2, #4]
 800bbb0:	e7de      	b.n	800bb70 <_malloc_r+0xa8>
 800bbb2:	230c      	movs	r3, #12
 800bbb4:	6033      	str	r3, [r6, #0]
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f000 f80c 	bl	800bbd4 <__malloc_unlock>
 800bbbc:	e794      	b.n	800bae8 <_malloc_r+0x20>
 800bbbe:	6005      	str	r5, [r0, #0]
 800bbc0:	e7d6      	b.n	800bb70 <_malloc_r+0xa8>
 800bbc2:	bf00      	nop
 800bbc4:	200021b0 	.word	0x200021b0

0800bbc8 <__malloc_lock>:
 800bbc8:	4801      	ldr	r0, [pc, #4]	@ (800bbd0 <__malloc_lock+0x8>)
 800bbca:	f7ff b8b8 	b.w	800ad3e <__retarget_lock_acquire_recursive>
 800bbce:	bf00      	nop
 800bbd0:	200021a8 	.word	0x200021a8

0800bbd4 <__malloc_unlock>:
 800bbd4:	4801      	ldr	r0, [pc, #4]	@ (800bbdc <__malloc_unlock+0x8>)
 800bbd6:	f7ff b8b3 	b.w	800ad40 <__retarget_lock_release_recursive>
 800bbda:	bf00      	nop
 800bbdc:	200021a8 	.word	0x200021a8

0800bbe0 <_Balloc>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	69c6      	ldr	r6, [r0, #28]
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	b976      	cbnz	r6, 800bc08 <_Balloc+0x28>
 800bbea:	2010      	movs	r0, #16
 800bbec:	f7ff ff42 	bl	800ba74 <malloc>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	61e0      	str	r0, [r4, #28]
 800bbf4:	b920      	cbnz	r0, 800bc00 <_Balloc+0x20>
 800bbf6:	4b18      	ldr	r3, [pc, #96]	@ (800bc58 <_Balloc+0x78>)
 800bbf8:	4818      	ldr	r0, [pc, #96]	@ (800bc5c <_Balloc+0x7c>)
 800bbfa:	216b      	movs	r1, #107	@ 0x6b
 800bbfc:	f000 fdae 	bl	800c75c <__assert_func>
 800bc00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc04:	6006      	str	r6, [r0, #0]
 800bc06:	60c6      	str	r6, [r0, #12]
 800bc08:	69e6      	ldr	r6, [r4, #28]
 800bc0a:	68f3      	ldr	r3, [r6, #12]
 800bc0c:	b183      	cbz	r3, 800bc30 <_Balloc+0x50>
 800bc0e:	69e3      	ldr	r3, [r4, #28]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc16:	b9b8      	cbnz	r0, 800bc48 <_Balloc+0x68>
 800bc18:	2101      	movs	r1, #1
 800bc1a:	fa01 f605 	lsl.w	r6, r1, r5
 800bc1e:	1d72      	adds	r2, r6, #5
 800bc20:	0092      	lsls	r2, r2, #2
 800bc22:	4620      	mov	r0, r4
 800bc24:	f000 fdb8 	bl	800c798 <_calloc_r>
 800bc28:	b160      	cbz	r0, 800bc44 <_Balloc+0x64>
 800bc2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc2e:	e00e      	b.n	800bc4e <_Balloc+0x6e>
 800bc30:	2221      	movs	r2, #33	@ 0x21
 800bc32:	2104      	movs	r1, #4
 800bc34:	4620      	mov	r0, r4
 800bc36:	f000 fdaf 	bl	800c798 <_calloc_r>
 800bc3a:	69e3      	ldr	r3, [r4, #28]
 800bc3c:	60f0      	str	r0, [r6, #12]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1e4      	bne.n	800bc0e <_Balloc+0x2e>
 800bc44:	2000      	movs	r0, #0
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	6802      	ldr	r2, [r0, #0]
 800bc4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc54:	e7f7      	b.n	800bc46 <_Balloc+0x66>
 800bc56:	bf00      	nop
 800bc58:	0800d9a5 	.word	0x0800d9a5
 800bc5c:	0800da25 	.word	0x0800da25

0800bc60 <_Bfree>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	69c6      	ldr	r6, [r0, #28]
 800bc64:	4605      	mov	r5, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	b976      	cbnz	r6, 800bc88 <_Bfree+0x28>
 800bc6a:	2010      	movs	r0, #16
 800bc6c:	f7ff ff02 	bl	800ba74 <malloc>
 800bc70:	4602      	mov	r2, r0
 800bc72:	61e8      	str	r0, [r5, #28]
 800bc74:	b920      	cbnz	r0, 800bc80 <_Bfree+0x20>
 800bc76:	4b09      	ldr	r3, [pc, #36]	@ (800bc9c <_Bfree+0x3c>)
 800bc78:	4809      	ldr	r0, [pc, #36]	@ (800bca0 <_Bfree+0x40>)
 800bc7a:	218f      	movs	r1, #143	@ 0x8f
 800bc7c:	f000 fd6e 	bl	800c75c <__assert_func>
 800bc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc84:	6006      	str	r6, [r0, #0]
 800bc86:	60c6      	str	r6, [r0, #12]
 800bc88:	b13c      	cbz	r4, 800bc9a <_Bfree+0x3a>
 800bc8a:	69eb      	ldr	r3, [r5, #28]
 800bc8c:	6862      	ldr	r2, [r4, #4]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc94:	6021      	str	r1, [r4, #0]
 800bc96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	0800d9a5 	.word	0x0800d9a5
 800bca0:	0800da25 	.word	0x0800da25

0800bca4 <__multadd>:
 800bca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca8:	690d      	ldr	r5, [r1, #16]
 800bcaa:	4607      	mov	r7, r0
 800bcac:	460c      	mov	r4, r1
 800bcae:	461e      	mov	r6, r3
 800bcb0:	f101 0c14 	add.w	ip, r1, #20
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f8dc 3000 	ldr.w	r3, [ip]
 800bcba:	b299      	uxth	r1, r3
 800bcbc:	fb02 6101 	mla	r1, r2, r1, r6
 800bcc0:	0c1e      	lsrs	r6, r3, #16
 800bcc2:	0c0b      	lsrs	r3, r1, #16
 800bcc4:	fb02 3306 	mla	r3, r2, r6, r3
 800bcc8:	b289      	uxth	r1, r1
 800bcca:	3001      	adds	r0, #1
 800bccc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcd0:	4285      	cmp	r5, r0
 800bcd2:	f84c 1b04 	str.w	r1, [ip], #4
 800bcd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcda:	dcec      	bgt.n	800bcb6 <__multadd+0x12>
 800bcdc:	b30e      	cbz	r6, 800bd22 <__multadd+0x7e>
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	42ab      	cmp	r3, r5
 800bce2:	dc19      	bgt.n	800bd18 <__multadd+0x74>
 800bce4:	6861      	ldr	r1, [r4, #4]
 800bce6:	4638      	mov	r0, r7
 800bce8:	3101      	adds	r1, #1
 800bcea:	f7ff ff79 	bl	800bbe0 <_Balloc>
 800bcee:	4680      	mov	r8, r0
 800bcf0:	b928      	cbnz	r0, 800bcfe <__multadd+0x5a>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd28 <__multadd+0x84>)
 800bcf6:	480d      	ldr	r0, [pc, #52]	@ (800bd2c <__multadd+0x88>)
 800bcf8:	21ba      	movs	r1, #186	@ 0xba
 800bcfa:	f000 fd2f 	bl	800c75c <__assert_func>
 800bcfe:	6922      	ldr	r2, [r4, #16]
 800bd00:	3202      	adds	r2, #2
 800bd02:	f104 010c 	add.w	r1, r4, #12
 800bd06:	0092      	lsls	r2, r2, #2
 800bd08:	300c      	adds	r0, #12
 800bd0a:	f000 fd19 	bl	800c740 <memcpy>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7ff ffa5 	bl	800bc60 <_Bfree>
 800bd16:	4644      	mov	r4, r8
 800bd18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	615e      	str	r6, [r3, #20]
 800bd20:	6125      	str	r5, [r4, #16]
 800bd22:	4620      	mov	r0, r4
 800bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd28:	0800da14 	.word	0x0800da14
 800bd2c:	0800da25 	.word	0x0800da25

0800bd30 <__hi0bits>:
 800bd30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd34:	4603      	mov	r3, r0
 800bd36:	bf36      	itet	cc
 800bd38:	0403      	lslcc	r3, r0, #16
 800bd3a:	2000      	movcs	r0, #0
 800bd3c:	2010      	movcc	r0, #16
 800bd3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd42:	bf3c      	itt	cc
 800bd44:	021b      	lslcc	r3, r3, #8
 800bd46:	3008      	addcc	r0, #8
 800bd48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd4c:	bf3c      	itt	cc
 800bd4e:	011b      	lslcc	r3, r3, #4
 800bd50:	3004      	addcc	r0, #4
 800bd52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd56:	bf3c      	itt	cc
 800bd58:	009b      	lslcc	r3, r3, #2
 800bd5a:	3002      	addcc	r0, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	db05      	blt.n	800bd6c <__hi0bits+0x3c>
 800bd60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd64:	f100 0001 	add.w	r0, r0, #1
 800bd68:	bf08      	it	eq
 800bd6a:	2020      	moveq	r0, #32
 800bd6c:	4770      	bx	lr

0800bd6e <__lo0bits>:
 800bd6e:	6803      	ldr	r3, [r0, #0]
 800bd70:	4602      	mov	r2, r0
 800bd72:	f013 0007 	ands.w	r0, r3, #7
 800bd76:	d00b      	beq.n	800bd90 <__lo0bits+0x22>
 800bd78:	07d9      	lsls	r1, r3, #31
 800bd7a:	d421      	bmi.n	800bdc0 <__lo0bits+0x52>
 800bd7c:	0798      	lsls	r0, r3, #30
 800bd7e:	bf49      	itett	mi
 800bd80:	085b      	lsrmi	r3, r3, #1
 800bd82:	089b      	lsrpl	r3, r3, #2
 800bd84:	2001      	movmi	r0, #1
 800bd86:	6013      	strmi	r3, [r2, #0]
 800bd88:	bf5c      	itt	pl
 800bd8a:	6013      	strpl	r3, [r2, #0]
 800bd8c:	2002      	movpl	r0, #2
 800bd8e:	4770      	bx	lr
 800bd90:	b299      	uxth	r1, r3
 800bd92:	b909      	cbnz	r1, 800bd98 <__lo0bits+0x2a>
 800bd94:	0c1b      	lsrs	r3, r3, #16
 800bd96:	2010      	movs	r0, #16
 800bd98:	b2d9      	uxtb	r1, r3
 800bd9a:	b909      	cbnz	r1, 800bda0 <__lo0bits+0x32>
 800bd9c:	3008      	adds	r0, #8
 800bd9e:	0a1b      	lsrs	r3, r3, #8
 800bda0:	0719      	lsls	r1, r3, #28
 800bda2:	bf04      	itt	eq
 800bda4:	091b      	lsreq	r3, r3, #4
 800bda6:	3004      	addeq	r0, #4
 800bda8:	0799      	lsls	r1, r3, #30
 800bdaa:	bf04      	itt	eq
 800bdac:	089b      	lsreq	r3, r3, #2
 800bdae:	3002      	addeq	r0, #2
 800bdb0:	07d9      	lsls	r1, r3, #31
 800bdb2:	d403      	bmi.n	800bdbc <__lo0bits+0x4e>
 800bdb4:	085b      	lsrs	r3, r3, #1
 800bdb6:	f100 0001 	add.w	r0, r0, #1
 800bdba:	d003      	beq.n	800bdc4 <__lo0bits+0x56>
 800bdbc:	6013      	str	r3, [r2, #0]
 800bdbe:	4770      	bx	lr
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	4770      	bx	lr
 800bdc4:	2020      	movs	r0, #32
 800bdc6:	4770      	bx	lr

0800bdc8 <__i2b>:
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	460c      	mov	r4, r1
 800bdcc:	2101      	movs	r1, #1
 800bdce:	f7ff ff07 	bl	800bbe0 <_Balloc>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	b928      	cbnz	r0, 800bde2 <__i2b+0x1a>
 800bdd6:	4b05      	ldr	r3, [pc, #20]	@ (800bdec <__i2b+0x24>)
 800bdd8:	4805      	ldr	r0, [pc, #20]	@ (800bdf0 <__i2b+0x28>)
 800bdda:	f240 1145 	movw	r1, #325	@ 0x145
 800bdde:	f000 fcbd 	bl	800c75c <__assert_func>
 800bde2:	2301      	movs	r3, #1
 800bde4:	6144      	str	r4, [r0, #20]
 800bde6:	6103      	str	r3, [r0, #16]
 800bde8:	bd10      	pop	{r4, pc}
 800bdea:	bf00      	nop
 800bdec:	0800da14 	.word	0x0800da14
 800bdf0:	0800da25 	.word	0x0800da25

0800bdf4 <__multiply>:
 800bdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf8:	4614      	mov	r4, r2
 800bdfa:	690a      	ldr	r2, [r1, #16]
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	bfa8      	it	ge
 800be02:	4623      	movge	r3, r4
 800be04:	460f      	mov	r7, r1
 800be06:	bfa4      	itt	ge
 800be08:	460c      	movge	r4, r1
 800be0a:	461f      	movge	r7, r3
 800be0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be14:	68a3      	ldr	r3, [r4, #8]
 800be16:	6861      	ldr	r1, [r4, #4]
 800be18:	eb0a 0609 	add.w	r6, sl, r9
 800be1c:	42b3      	cmp	r3, r6
 800be1e:	b085      	sub	sp, #20
 800be20:	bfb8      	it	lt
 800be22:	3101      	addlt	r1, #1
 800be24:	f7ff fedc 	bl	800bbe0 <_Balloc>
 800be28:	b930      	cbnz	r0, 800be38 <__multiply+0x44>
 800be2a:	4602      	mov	r2, r0
 800be2c:	4b44      	ldr	r3, [pc, #272]	@ (800bf40 <__multiply+0x14c>)
 800be2e:	4845      	ldr	r0, [pc, #276]	@ (800bf44 <__multiply+0x150>)
 800be30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be34:	f000 fc92 	bl	800c75c <__assert_func>
 800be38:	f100 0514 	add.w	r5, r0, #20
 800be3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be40:	462b      	mov	r3, r5
 800be42:	2200      	movs	r2, #0
 800be44:	4543      	cmp	r3, r8
 800be46:	d321      	bcc.n	800be8c <__multiply+0x98>
 800be48:	f107 0114 	add.w	r1, r7, #20
 800be4c:	f104 0214 	add.w	r2, r4, #20
 800be50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be58:	9302      	str	r3, [sp, #8]
 800be5a:	1b13      	subs	r3, r2, r4
 800be5c:	3b15      	subs	r3, #21
 800be5e:	f023 0303 	bic.w	r3, r3, #3
 800be62:	3304      	adds	r3, #4
 800be64:	f104 0715 	add.w	r7, r4, #21
 800be68:	42ba      	cmp	r2, r7
 800be6a:	bf38      	it	cc
 800be6c:	2304      	movcc	r3, #4
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	9b02      	ldr	r3, [sp, #8]
 800be72:	9103      	str	r1, [sp, #12]
 800be74:	428b      	cmp	r3, r1
 800be76:	d80c      	bhi.n	800be92 <__multiply+0x9e>
 800be78:	2e00      	cmp	r6, #0
 800be7a:	dd03      	ble.n	800be84 <__multiply+0x90>
 800be7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be80:	2b00      	cmp	r3, #0
 800be82:	d05b      	beq.n	800bf3c <__multiply+0x148>
 800be84:	6106      	str	r6, [r0, #16]
 800be86:	b005      	add	sp, #20
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	f843 2b04 	str.w	r2, [r3], #4
 800be90:	e7d8      	b.n	800be44 <__multiply+0x50>
 800be92:	f8b1 a000 	ldrh.w	sl, [r1]
 800be96:	f1ba 0f00 	cmp.w	sl, #0
 800be9a:	d024      	beq.n	800bee6 <__multiply+0xf2>
 800be9c:	f104 0e14 	add.w	lr, r4, #20
 800bea0:	46a9      	mov	r9, r5
 800bea2:	f04f 0c00 	mov.w	ip, #0
 800bea6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800beaa:	f8d9 3000 	ldr.w	r3, [r9]
 800beae:	fa1f fb87 	uxth.w	fp, r7
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800beb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bebc:	f8d9 7000 	ldr.w	r7, [r9]
 800bec0:	4463      	add	r3, ip
 800bec2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bec6:	fb0a c70b 	mla	r7, sl, fp, ip
 800beca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bece:	b29b      	uxth	r3, r3
 800bed0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bed4:	4572      	cmp	r2, lr
 800bed6:	f849 3b04 	str.w	r3, [r9], #4
 800beda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bede:	d8e2      	bhi.n	800bea6 <__multiply+0xb2>
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	f845 c003 	str.w	ip, [r5, r3]
 800bee6:	9b03      	ldr	r3, [sp, #12]
 800bee8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800beec:	3104      	adds	r1, #4
 800beee:	f1b9 0f00 	cmp.w	r9, #0
 800bef2:	d021      	beq.n	800bf38 <__multiply+0x144>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	f104 0c14 	add.w	ip, r4, #20
 800befa:	46ae      	mov	lr, r5
 800befc:	f04f 0a00 	mov.w	sl, #0
 800bf00:	f8bc b000 	ldrh.w	fp, [ip]
 800bf04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf08:	fb09 770b 	mla	r7, r9, fp, r7
 800bf0c:	4457      	add	r7, sl
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf14:	f84e 3b04 	str.w	r3, [lr], #4
 800bf18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf20:	f8be 3000 	ldrh.w	r3, [lr]
 800bf24:	fb09 330a 	mla	r3, r9, sl, r3
 800bf28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf2c:	4562      	cmp	r2, ip
 800bf2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf32:	d8e5      	bhi.n	800bf00 <__multiply+0x10c>
 800bf34:	9f01      	ldr	r7, [sp, #4]
 800bf36:	51eb      	str	r3, [r5, r7]
 800bf38:	3504      	adds	r5, #4
 800bf3a:	e799      	b.n	800be70 <__multiply+0x7c>
 800bf3c:	3e01      	subs	r6, #1
 800bf3e:	e79b      	b.n	800be78 <__multiply+0x84>
 800bf40:	0800da14 	.word	0x0800da14
 800bf44:	0800da25 	.word	0x0800da25

0800bf48 <__pow5mult>:
 800bf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	4615      	mov	r5, r2
 800bf4e:	f012 0203 	ands.w	r2, r2, #3
 800bf52:	4607      	mov	r7, r0
 800bf54:	460e      	mov	r6, r1
 800bf56:	d007      	beq.n	800bf68 <__pow5mult+0x20>
 800bf58:	4c25      	ldr	r4, [pc, #148]	@ (800bff0 <__pow5mult+0xa8>)
 800bf5a:	3a01      	subs	r2, #1
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf62:	f7ff fe9f 	bl	800bca4 <__multadd>
 800bf66:	4606      	mov	r6, r0
 800bf68:	10ad      	asrs	r5, r5, #2
 800bf6a:	d03d      	beq.n	800bfe8 <__pow5mult+0xa0>
 800bf6c:	69fc      	ldr	r4, [r7, #28]
 800bf6e:	b97c      	cbnz	r4, 800bf90 <__pow5mult+0x48>
 800bf70:	2010      	movs	r0, #16
 800bf72:	f7ff fd7f 	bl	800ba74 <malloc>
 800bf76:	4602      	mov	r2, r0
 800bf78:	61f8      	str	r0, [r7, #28]
 800bf7a:	b928      	cbnz	r0, 800bf88 <__pow5mult+0x40>
 800bf7c:	4b1d      	ldr	r3, [pc, #116]	@ (800bff4 <__pow5mult+0xac>)
 800bf7e:	481e      	ldr	r0, [pc, #120]	@ (800bff8 <__pow5mult+0xb0>)
 800bf80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf84:	f000 fbea 	bl	800c75c <__assert_func>
 800bf88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf8c:	6004      	str	r4, [r0, #0]
 800bf8e:	60c4      	str	r4, [r0, #12]
 800bf90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf98:	b94c      	cbnz	r4, 800bfae <__pow5mult+0x66>
 800bf9a:	f240 2171 	movw	r1, #625	@ 0x271
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	f7ff ff12 	bl	800bdc8 <__i2b>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfaa:	4604      	mov	r4, r0
 800bfac:	6003      	str	r3, [r0, #0]
 800bfae:	f04f 0900 	mov.w	r9, #0
 800bfb2:	07eb      	lsls	r3, r5, #31
 800bfb4:	d50a      	bpl.n	800bfcc <__pow5mult+0x84>
 800bfb6:	4631      	mov	r1, r6
 800bfb8:	4622      	mov	r2, r4
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f7ff ff1a 	bl	800bdf4 <__multiply>
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	4680      	mov	r8, r0
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	f7ff fe4b 	bl	800bc60 <_Bfree>
 800bfca:	4646      	mov	r6, r8
 800bfcc:	106d      	asrs	r5, r5, #1
 800bfce:	d00b      	beq.n	800bfe8 <__pow5mult+0xa0>
 800bfd0:	6820      	ldr	r0, [r4, #0]
 800bfd2:	b938      	cbnz	r0, 800bfe4 <__pow5mult+0x9c>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff ff0b 	bl	800bdf4 <__multiply>
 800bfde:	6020      	str	r0, [r4, #0]
 800bfe0:	f8c0 9000 	str.w	r9, [r0]
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	e7e4      	b.n	800bfb2 <__pow5mult+0x6a>
 800bfe8:	4630      	mov	r0, r6
 800bfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfee:	bf00      	nop
 800bff0:	0800da80 	.word	0x0800da80
 800bff4:	0800d9a5 	.word	0x0800d9a5
 800bff8:	0800da25 	.word	0x0800da25

0800bffc <__lshift>:
 800bffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c000:	460c      	mov	r4, r1
 800c002:	6849      	ldr	r1, [r1, #4]
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c00a:	68a3      	ldr	r3, [r4, #8]
 800c00c:	4607      	mov	r7, r0
 800c00e:	4691      	mov	r9, r2
 800c010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c014:	f108 0601 	add.w	r6, r8, #1
 800c018:	42b3      	cmp	r3, r6
 800c01a:	db0b      	blt.n	800c034 <__lshift+0x38>
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7ff fddf 	bl	800bbe0 <_Balloc>
 800c022:	4605      	mov	r5, r0
 800c024:	b948      	cbnz	r0, 800c03a <__lshift+0x3e>
 800c026:	4602      	mov	r2, r0
 800c028:	4b28      	ldr	r3, [pc, #160]	@ (800c0cc <__lshift+0xd0>)
 800c02a:	4829      	ldr	r0, [pc, #164]	@ (800c0d0 <__lshift+0xd4>)
 800c02c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c030:	f000 fb94 	bl	800c75c <__assert_func>
 800c034:	3101      	adds	r1, #1
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	e7ee      	b.n	800c018 <__lshift+0x1c>
 800c03a:	2300      	movs	r3, #0
 800c03c:	f100 0114 	add.w	r1, r0, #20
 800c040:	f100 0210 	add.w	r2, r0, #16
 800c044:	4618      	mov	r0, r3
 800c046:	4553      	cmp	r3, sl
 800c048:	db33      	blt.n	800c0b2 <__lshift+0xb6>
 800c04a:	6920      	ldr	r0, [r4, #16]
 800c04c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c050:	f104 0314 	add.w	r3, r4, #20
 800c054:	f019 091f 	ands.w	r9, r9, #31
 800c058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c05c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c060:	d02b      	beq.n	800c0ba <__lshift+0xbe>
 800c062:	f1c9 0e20 	rsb	lr, r9, #32
 800c066:	468a      	mov	sl, r1
 800c068:	2200      	movs	r2, #0
 800c06a:	6818      	ldr	r0, [r3, #0]
 800c06c:	fa00 f009 	lsl.w	r0, r0, r9
 800c070:	4310      	orrs	r0, r2
 800c072:	f84a 0b04 	str.w	r0, [sl], #4
 800c076:	f853 2b04 	ldr.w	r2, [r3], #4
 800c07a:	459c      	cmp	ip, r3
 800c07c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c080:	d8f3      	bhi.n	800c06a <__lshift+0x6e>
 800c082:	ebac 0304 	sub.w	r3, ip, r4
 800c086:	3b15      	subs	r3, #21
 800c088:	f023 0303 	bic.w	r3, r3, #3
 800c08c:	3304      	adds	r3, #4
 800c08e:	f104 0015 	add.w	r0, r4, #21
 800c092:	4584      	cmp	ip, r0
 800c094:	bf38      	it	cc
 800c096:	2304      	movcc	r3, #4
 800c098:	50ca      	str	r2, [r1, r3]
 800c09a:	b10a      	cbz	r2, 800c0a0 <__lshift+0xa4>
 800c09c:	f108 0602 	add.w	r6, r8, #2
 800c0a0:	3e01      	subs	r6, #1
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	612e      	str	r6, [r5, #16]
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	f7ff fdda 	bl	800bc60 <_Bfree>
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	e7c5      	b.n	800c046 <__lshift+0x4a>
 800c0ba:	3904      	subs	r1, #4
 800c0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0c4:	459c      	cmp	ip, r3
 800c0c6:	d8f9      	bhi.n	800c0bc <__lshift+0xc0>
 800c0c8:	e7ea      	b.n	800c0a0 <__lshift+0xa4>
 800c0ca:	bf00      	nop
 800c0cc:	0800da14 	.word	0x0800da14
 800c0d0:	0800da25 	.word	0x0800da25

0800c0d4 <__mcmp>:
 800c0d4:	690a      	ldr	r2, [r1, #16]
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	6900      	ldr	r0, [r0, #16]
 800c0da:	1a80      	subs	r0, r0, r2
 800c0dc:	b530      	push	{r4, r5, lr}
 800c0de:	d10e      	bne.n	800c0fe <__mcmp+0x2a>
 800c0e0:	3314      	adds	r3, #20
 800c0e2:	3114      	adds	r1, #20
 800c0e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0f4:	4295      	cmp	r5, r2
 800c0f6:	d003      	beq.n	800c100 <__mcmp+0x2c>
 800c0f8:	d205      	bcs.n	800c106 <__mcmp+0x32>
 800c0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fe:	bd30      	pop	{r4, r5, pc}
 800c100:	42a3      	cmp	r3, r4
 800c102:	d3f3      	bcc.n	800c0ec <__mcmp+0x18>
 800c104:	e7fb      	b.n	800c0fe <__mcmp+0x2a>
 800c106:	2001      	movs	r0, #1
 800c108:	e7f9      	b.n	800c0fe <__mcmp+0x2a>
	...

0800c10c <__mdiff>:
 800c10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	4689      	mov	r9, r1
 800c112:	4606      	mov	r6, r0
 800c114:	4611      	mov	r1, r2
 800c116:	4648      	mov	r0, r9
 800c118:	4614      	mov	r4, r2
 800c11a:	f7ff ffdb 	bl	800c0d4 <__mcmp>
 800c11e:	1e05      	subs	r5, r0, #0
 800c120:	d112      	bne.n	800c148 <__mdiff+0x3c>
 800c122:	4629      	mov	r1, r5
 800c124:	4630      	mov	r0, r6
 800c126:	f7ff fd5b 	bl	800bbe0 <_Balloc>
 800c12a:	4602      	mov	r2, r0
 800c12c:	b928      	cbnz	r0, 800c13a <__mdiff+0x2e>
 800c12e:	4b3f      	ldr	r3, [pc, #252]	@ (800c22c <__mdiff+0x120>)
 800c130:	f240 2137 	movw	r1, #567	@ 0x237
 800c134:	483e      	ldr	r0, [pc, #248]	@ (800c230 <__mdiff+0x124>)
 800c136:	f000 fb11 	bl	800c75c <__assert_func>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c140:	4610      	mov	r0, r2
 800c142:	b003      	add	sp, #12
 800c144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c148:	bfbc      	itt	lt
 800c14a:	464b      	movlt	r3, r9
 800c14c:	46a1      	movlt	r9, r4
 800c14e:	4630      	mov	r0, r6
 800c150:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c154:	bfba      	itte	lt
 800c156:	461c      	movlt	r4, r3
 800c158:	2501      	movlt	r5, #1
 800c15a:	2500      	movge	r5, #0
 800c15c:	f7ff fd40 	bl	800bbe0 <_Balloc>
 800c160:	4602      	mov	r2, r0
 800c162:	b918      	cbnz	r0, 800c16c <__mdiff+0x60>
 800c164:	4b31      	ldr	r3, [pc, #196]	@ (800c22c <__mdiff+0x120>)
 800c166:	f240 2145 	movw	r1, #581	@ 0x245
 800c16a:	e7e3      	b.n	800c134 <__mdiff+0x28>
 800c16c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c170:	6926      	ldr	r6, [r4, #16]
 800c172:	60c5      	str	r5, [r0, #12]
 800c174:	f109 0310 	add.w	r3, r9, #16
 800c178:	f109 0514 	add.w	r5, r9, #20
 800c17c:	f104 0e14 	add.w	lr, r4, #20
 800c180:	f100 0b14 	add.w	fp, r0, #20
 800c184:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c188:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	46d9      	mov	r9, fp
 800c190:	f04f 0c00 	mov.w	ip, #0
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c19a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	fa1f f38a 	uxth.w	r3, sl
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	b283      	uxth	r3, r0
 800c1a8:	1acb      	subs	r3, r1, r3
 800c1aa:	0c00      	lsrs	r0, r0, #16
 800c1ac:	4463      	add	r3, ip
 800c1ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1bc:	4576      	cmp	r6, lr
 800c1be:	f849 3b04 	str.w	r3, [r9], #4
 800c1c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1c6:	d8e5      	bhi.n	800c194 <__mdiff+0x88>
 800c1c8:	1b33      	subs	r3, r6, r4
 800c1ca:	3b15      	subs	r3, #21
 800c1cc:	f023 0303 	bic.w	r3, r3, #3
 800c1d0:	3415      	adds	r4, #21
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	42a6      	cmp	r6, r4
 800c1d6:	bf38      	it	cc
 800c1d8:	2304      	movcc	r3, #4
 800c1da:	441d      	add	r5, r3
 800c1dc:	445b      	add	r3, fp
 800c1de:	461e      	mov	r6, r3
 800c1e0:	462c      	mov	r4, r5
 800c1e2:	4544      	cmp	r4, r8
 800c1e4:	d30e      	bcc.n	800c204 <__mdiff+0xf8>
 800c1e6:	f108 0103 	add.w	r1, r8, #3
 800c1ea:	1b49      	subs	r1, r1, r5
 800c1ec:	f021 0103 	bic.w	r1, r1, #3
 800c1f0:	3d03      	subs	r5, #3
 800c1f2:	45a8      	cmp	r8, r5
 800c1f4:	bf38      	it	cc
 800c1f6:	2100      	movcc	r1, #0
 800c1f8:	440b      	add	r3, r1
 800c1fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1fe:	b191      	cbz	r1, 800c226 <__mdiff+0x11a>
 800c200:	6117      	str	r7, [r2, #16]
 800c202:	e79d      	b.n	800c140 <__mdiff+0x34>
 800c204:	f854 1b04 	ldr.w	r1, [r4], #4
 800c208:	46e6      	mov	lr, ip
 800c20a:	0c08      	lsrs	r0, r1, #16
 800c20c:	fa1c fc81 	uxtah	ip, ip, r1
 800c210:	4471      	add	r1, lr
 800c212:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c216:	b289      	uxth	r1, r1
 800c218:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c21c:	f846 1b04 	str.w	r1, [r6], #4
 800c220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c224:	e7dd      	b.n	800c1e2 <__mdiff+0xd6>
 800c226:	3f01      	subs	r7, #1
 800c228:	e7e7      	b.n	800c1fa <__mdiff+0xee>
 800c22a:	bf00      	nop
 800c22c:	0800da14 	.word	0x0800da14
 800c230:	0800da25 	.word	0x0800da25

0800c234 <__d2b>:
 800c234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c238:	460f      	mov	r7, r1
 800c23a:	2101      	movs	r1, #1
 800c23c:	ec59 8b10 	vmov	r8, r9, d0
 800c240:	4616      	mov	r6, r2
 800c242:	f7ff fccd 	bl	800bbe0 <_Balloc>
 800c246:	4604      	mov	r4, r0
 800c248:	b930      	cbnz	r0, 800c258 <__d2b+0x24>
 800c24a:	4602      	mov	r2, r0
 800c24c:	4b23      	ldr	r3, [pc, #140]	@ (800c2dc <__d2b+0xa8>)
 800c24e:	4824      	ldr	r0, [pc, #144]	@ (800c2e0 <__d2b+0xac>)
 800c250:	f240 310f 	movw	r1, #783	@ 0x30f
 800c254:	f000 fa82 	bl	800c75c <__assert_func>
 800c258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c25c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c260:	b10d      	cbz	r5, 800c266 <__d2b+0x32>
 800c262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	f1b8 0300 	subs.w	r3, r8, #0
 800c26c:	d023      	beq.n	800c2b6 <__d2b+0x82>
 800c26e:	4668      	mov	r0, sp
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	f7ff fd7c 	bl	800bd6e <__lo0bits>
 800c276:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c27a:	b1d0      	cbz	r0, 800c2b2 <__d2b+0x7e>
 800c27c:	f1c0 0320 	rsb	r3, r0, #32
 800c280:	fa02 f303 	lsl.w	r3, r2, r3
 800c284:	430b      	orrs	r3, r1
 800c286:	40c2      	lsrs	r2, r0
 800c288:	6163      	str	r3, [r4, #20]
 800c28a:	9201      	str	r2, [sp, #4]
 800c28c:	9b01      	ldr	r3, [sp, #4]
 800c28e:	61a3      	str	r3, [r4, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	bf0c      	ite	eq
 800c294:	2201      	moveq	r2, #1
 800c296:	2202      	movne	r2, #2
 800c298:	6122      	str	r2, [r4, #16]
 800c29a:	b1a5      	cbz	r5, 800c2c6 <__d2b+0x92>
 800c29c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c2a0:	4405      	add	r5, r0
 800c2a2:	603d      	str	r5, [r7, #0]
 800c2a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c2a8:	6030      	str	r0, [r6, #0]
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	b003      	add	sp, #12
 800c2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2b2:	6161      	str	r1, [r4, #20]
 800c2b4:	e7ea      	b.n	800c28c <__d2b+0x58>
 800c2b6:	a801      	add	r0, sp, #4
 800c2b8:	f7ff fd59 	bl	800bd6e <__lo0bits>
 800c2bc:	9b01      	ldr	r3, [sp, #4]
 800c2be:	6163      	str	r3, [r4, #20]
 800c2c0:	3020      	adds	r0, #32
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	e7e8      	b.n	800c298 <__d2b+0x64>
 800c2c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c2ce:	6038      	str	r0, [r7, #0]
 800c2d0:	6918      	ldr	r0, [r3, #16]
 800c2d2:	f7ff fd2d 	bl	800bd30 <__hi0bits>
 800c2d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2da:	e7e5      	b.n	800c2a8 <__d2b+0x74>
 800c2dc:	0800da14 	.word	0x0800da14
 800c2e0:	0800da25 	.word	0x0800da25

0800c2e4 <__ssputs_r>:
 800c2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	688e      	ldr	r6, [r1, #8]
 800c2ea:	461f      	mov	r7, r3
 800c2ec:	42be      	cmp	r6, r7
 800c2ee:	680b      	ldr	r3, [r1, #0]
 800c2f0:	4682      	mov	sl, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	4690      	mov	r8, r2
 800c2f6:	d82d      	bhi.n	800c354 <__ssputs_r+0x70>
 800c2f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c300:	d026      	beq.n	800c350 <__ssputs_r+0x6c>
 800c302:	6965      	ldr	r5, [r4, #20]
 800c304:	6909      	ldr	r1, [r1, #16]
 800c306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c30a:	eba3 0901 	sub.w	r9, r3, r1
 800c30e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c312:	1c7b      	adds	r3, r7, #1
 800c314:	444b      	add	r3, r9
 800c316:	106d      	asrs	r5, r5, #1
 800c318:	429d      	cmp	r5, r3
 800c31a:	bf38      	it	cc
 800c31c:	461d      	movcc	r5, r3
 800c31e:	0553      	lsls	r3, r2, #21
 800c320:	d527      	bpl.n	800c372 <__ssputs_r+0x8e>
 800c322:	4629      	mov	r1, r5
 800c324:	f7ff fbd0 	bl	800bac8 <_malloc_r>
 800c328:	4606      	mov	r6, r0
 800c32a:	b360      	cbz	r0, 800c386 <__ssputs_r+0xa2>
 800c32c:	6921      	ldr	r1, [r4, #16]
 800c32e:	464a      	mov	r2, r9
 800c330:	f000 fa06 	bl	800c740 <memcpy>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c33a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	6126      	str	r6, [r4, #16]
 800c342:	6165      	str	r5, [r4, #20]
 800c344:	444e      	add	r6, r9
 800c346:	eba5 0509 	sub.w	r5, r5, r9
 800c34a:	6026      	str	r6, [r4, #0]
 800c34c:	60a5      	str	r5, [r4, #8]
 800c34e:	463e      	mov	r6, r7
 800c350:	42be      	cmp	r6, r7
 800c352:	d900      	bls.n	800c356 <__ssputs_r+0x72>
 800c354:	463e      	mov	r6, r7
 800c356:	6820      	ldr	r0, [r4, #0]
 800c358:	4632      	mov	r2, r6
 800c35a:	4641      	mov	r1, r8
 800c35c:	f000 f9c6 	bl	800c6ec <memmove>
 800c360:	68a3      	ldr	r3, [r4, #8]
 800c362:	1b9b      	subs	r3, r3, r6
 800c364:	60a3      	str	r3, [r4, #8]
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	4433      	add	r3, r6
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	2000      	movs	r0, #0
 800c36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c372:	462a      	mov	r2, r5
 800c374:	f000 fa36 	bl	800c7e4 <_realloc_r>
 800c378:	4606      	mov	r6, r0
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d1e0      	bne.n	800c340 <__ssputs_r+0x5c>
 800c37e:	6921      	ldr	r1, [r4, #16]
 800c380:	4650      	mov	r0, sl
 800c382:	f7ff fb2d 	bl	800b9e0 <_free_r>
 800c386:	230c      	movs	r3, #12
 800c388:	f8ca 3000 	str.w	r3, [sl]
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	e7e9      	b.n	800c36e <__ssputs_r+0x8a>
	...

0800c39c <_svfiprintf_r>:
 800c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a0:	4698      	mov	r8, r3
 800c3a2:	898b      	ldrh	r3, [r1, #12]
 800c3a4:	061b      	lsls	r3, r3, #24
 800c3a6:	b09d      	sub	sp, #116	@ 0x74
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	4614      	mov	r4, r2
 800c3ae:	d510      	bpl.n	800c3d2 <_svfiprintf_r+0x36>
 800c3b0:	690b      	ldr	r3, [r1, #16]
 800c3b2:	b973      	cbnz	r3, 800c3d2 <_svfiprintf_r+0x36>
 800c3b4:	2140      	movs	r1, #64	@ 0x40
 800c3b6:	f7ff fb87 	bl	800bac8 <_malloc_r>
 800c3ba:	6028      	str	r0, [r5, #0]
 800c3bc:	6128      	str	r0, [r5, #16]
 800c3be:	b930      	cbnz	r0, 800c3ce <_svfiprintf_r+0x32>
 800c3c0:	230c      	movs	r3, #12
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	b01d      	add	sp, #116	@ 0x74
 800c3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ce:	2340      	movs	r3, #64	@ 0x40
 800c3d0:	616b      	str	r3, [r5, #20]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3d6:	2320      	movs	r3, #32
 800c3d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3e0:	2330      	movs	r3, #48	@ 0x30
 800c3e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c580 <_svfiprintf_r+0x1e4>
 800c3e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3ea:	f04f 0901 	mov.w	r9, #1
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	469a      	mov	sl, r3
 800c3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3f6:	b10a      	cbz	r2, 800c3fc <_svfiprintf_r+0x60>
 800c3f8:	2a25      	cmp	r2, #37	@ 0x25
 800c3fa:	d1f9      	bne.n	800c3f0 <_svfiprintf_r+0x54>
 800c3fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c400:	d00b      	beq.n	800c41a <_svfiprintf_r+0x7e>
 800c402:	465b      	mov	r3, fp
 800c404:	4622      	mov	r2, r4
 800c406:	4629      	mov	r1, r5
 800c408:	4638      	mov	r0, r7
 800c40a:	f7ff ff6b 	bl	800c2e4 <__ssputs_r>
 800c40e:	3001      	adds	r0, #1
 800c410:	f000 80a7 	beq.w	800c562 <_svfiprintf_r+0x1c6>
 800c414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c416:	445a      	add	r2, fp
 800c418:	9209      	str	r2, [sp, #36]	@ 0x24
 800c41a:	f89a 3000 	ldrb.w	r3, [sl]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 809f 	beq.w	800c562 <_svfiprintf_r+0x1c6>
 800c424:	2300      	movs	r3, #0
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c42e:	f10a 0a01 	add.w	sl, sl, #1
 800c432:	9304      	str	r3, [sp, #16]
 800c434:	9307      	str	r3, [sp, #28]
 800c436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c43a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c43c:	4654      	mov	r4, sl
 800c43e:	2205      	movs	r2, #5
 800c440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c444:	484e      	ldr	r0, [pc, #312]	@ (800c580 <_svfiprintf_r+0x1e4>)
 800c446:	f7f3 fec3 	bl	80001d0 <memchr>
 800c44a:	9a04      	ldr	r2, [sp, #16]
 800c44c:	b9d8      	cbnz	r0, 800c486 <_svfiprintf_r+0xea>
 800c44e:	06d0      	lsls	r0, r2, #27
 800c450:	bf44      	itt	mi
 800c452:	2320      	movmi	r3, #32
 800c454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c458:	0711      	lsls	r1, r2, #28
 800c45a:	bf44      	itt	mi
 800c45c:	232b      	movmi	r3, #43	@ 0x2b
 800c45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c462:	f89a 3000 	ldrb.w	r3, [sl]
 800c466:	2b2a      	cmp	r3, #42	@ 0x2a
 800c468:	d015      	beq.n	800c496 <_svfiprintf_r+0xfa>
 800c46a:	9a07      	ldr	r2, [sp, #28]
 800c46c:	4654      	mov	r4, sl
 800c46e:	2000      	movs	r0, #0
 800c470:	f04f 0c0a 	mov.w	ip, #10
 800c474:	4621      	mov	r1, r4
 800c476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c47a:	3b30      	subs	r3, #48	@ 0x30
 800c47c:	2b09      	cmp	r3, #9
 800c47e:	d94b      	bls.n	800c518 <_svfiprintf_r+0x17c>
 800c480:	b1b0      	cbz	r0, 800c4b0 <_svfiprintf_r+0x114>
 800c482:	9207      	str	r2, [sp, #28]
 800c484:	e014      	b.n	800c4b0 <_svfiprintf_r+0x114>
 800c486:	eba0 0308 	sub.w	r3, r0, r8
 800c48a:	fa09 f303 	lsl.w	r3, r9, r3
 800c48e:	4313      	orrs	r3, r2
 800c490:	9304      	str	r3, [sp, #16]
 800c492:	46a2      	mov	sl, r4
 800c494:	e7d2      	b.n	800c43c <_svfiprintf_r+0xa0>
 800c496:	9b03      	ldr	r3, [sp, #12]
 800c498:	1d19      	adds	r1, r3, #4
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	9103      	str	r1, [sp, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	bfbb      	ittet	lt
 800c4a2:	425b      	neglt	r3, r3
 800c4a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4a8:	9307      	strge	r3, [sp, #28]
 800c4aa:	9307      	strlt	r3, [sp, #28]
 800c4ac:	bfb8      	it	lt
 800c4ae:	9204      	strlt	r2, [sp, #16]
 800c4b0:	7823      	ldrb	r3, [r4, #0]
 800c4b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4b4:	d10a      	bne.n	800c4cc <_svfiprintf_r+0x130>
 800c4b6:	7863      	ldrb	r3, [r4, #1]
 800c4b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4ba:	d132      	bne.n	800c522 <_svfiprintf_r+0x186>
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	9203      	str	r2, [sp, #12]
 800c4c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4c8:	3402      	adds	r4, #2
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c590 <_svfiprintf_r+0x1f4>
 800c4d0:	7821      	ldrb	r1, [r4, #0]
 800c4d2:	2203      	movs	r2, #3
 800c4d4:	4650      	mov	r0, sl
 800c4d6:	f7f3 fe7b 	bl	80001d0 <memchr>
 800c4da:	b138      	cbz	r0, 800c4ec <_svfiprintf_r+0x150>
 800c4dc:	9b04      	ldr	r3, [sp, #16]
 800c4de:	eba0 000a 	sub.w	r0, r0, sl
 800c4e2:	2240      	movs	r2, #64	@ 0x40
 800c4e4:	4082      	lsls	r2, r0
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	3401      	adds	r4, #1
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f0:	4824      	ldr	r0, [pc, #144]	@ (800c584 <_svfiprintf_r+0x1e8>)
 800c4f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4f6:	2206      	movs	r2, #6
 800c4f8:	f7f3 fe6a 	bl	80001d0 <memchr>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d036      	beq.n	800c56e <_svfiprintf_r+0x1d2>
 800c500:	4b21      	ldr	r3, [pc, #132]	@ (800c588 <_svfiprintf_r+0x1ec>)
 800c502:	bb1b      	cbnz	r3, 800c54c <_svfiprintf_r+0x1b0>
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	3307      	adds	r3, #7
 800c508:	f023 0307 	bic.w	r3, r3, #7
 800c50c:	3308      	adds	r3, #8
 800c50e:	9303      	str	r3, [sp, #12]
 800c510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c512:	4433      	add	r3, r6
 800c514:	9309      	str	r3, [sp, #36]	@ 0x24
 800c516:	e76a      	b.n	800c3ee <_svfiprintf_r+0x52>
 800c518:	fb0c 3202 	mla	r2, ip, r2, r3
 800c51c:	460c      	mov	r4, r1
 800c51e:	2001      	movs	r0, #1
 800c520:	e7a8      	b.n	800c474 <_svfiprintf_r+0xd8>
 800c522:	2300      	movs	r3, #0
 800c524:	3401      	adds	r4, #1
 800c526:	9305      	str	r3, [sp, #20]
 800c528:	4619      	mov	r1, r3
 800c52a:	f04f 0c0a 	mov.w	ip, #10
 800c52e:	4620      	mov	r0, r4
 800c530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c534:	3a30      	subs	r2, #48	@ 0x30
 800c536:	2a09      	cmp	r2, #9
 800c538:	d903      	bls.n	800c542 <_svfiprintf_r+0x1a6>
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0c6      	beq.n	800c4cc <_svfiprintf_r+0x130>
 800c53e:	9105      	str	r1, [sp, #20]
 800c540:	e7c4      	b.n	800c4cc <_svfiprintf_r+0x130>
 800c542:	fb0c 2101 	mla	r1, ip, r1, r2
 800c546:	4604      	mov	r4, r0
 800c548:	2301      	movs	r3, #1
 800c54a:	e7f0      	b.n	800c52e <_svfiprintf_r+0x192>
 800c54c:	ab03      	add	r3, sp, #12
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	462a      	mov	r2, r5
 800c552:	4b0e      	ldr	r3, [pc, #56]	@ (800c58c <_svfiprintf_r+0x1f0>)
 800c554:	a904      	add	r1, sp, #16
 800c556:	4638      	mov	r0, r7
 800c558:	f7fd fe96 	bl	800a288 <_printf_float>
 800c55c:	1c42      	adds	r2, r0, #1
 800c55e:	4606      	mov	r6, r0
 800c560:	d1d6      	bne.n	800c510 <_svfiprintf_r+0x174>
 800c562:	89ab      	ldrh	r3, [r5, #12]
 800c564:	065b      	lsls	r3, r3, #25
 800c566:	f53f af2d 	bmi.w	800c3c4 <_svfiprintf_r+0x28>
 800c56a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c56c:	e72c      	b.n	800c3c8 <_svfiprintf_r+0x2c>
 800c56e:	ab03      	add	r3, sp, #12
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	462a      	mov	r2, r5
 800c574:	4b05      	ldr	r3, [pc, #20]	@ (800c58c <_svfiprintf_r+0x1f0>)
 800c576:	a904      	add	r1, sp, #16
 800c578:	4638      	mov	r0, r7
 800c57a:	f7fe f91d 	bl	800a7b8 <_printf_i>
 800c57e:	e7ed      	b.n	800c55c <_svfiprintf_r+0x1c0>
 800c580:	0800db80 	.word	0x0800db80
 800c584:	0800db8a 	.word	0x0800db8a
 800c588:	0800a289 	.word	0x0800a289
 800c58c:	0800c2e5 	.word	0x0800c2e5
 800c590:	0800db86 	.word	0x0800db86

0800c594 <__sflush_r>:
 800c594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c59c:	0716      	lsls	r6, r2, #28
 800c59e:	4605      	mov	r5, r0
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	d454      	bmi.n	800c64e <__sflush_r+0xba>
 800c5a4:	684b      	ldr	r3, [r1, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dc02      	bgt.n	800c5b0 <__sflush_r+0x1c>
 800c5aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd48      	ble.n	800c642 <__sflush_r+0xae>
 800c5b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5b2:	2e00      	cmp	r6, #0
 800c5b4:	d045      	beq.n	800c642 <__sflush_r+0xae>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c5bc:	682f      	ldr	r7, [r5, #0]
 800c5be:	6a21      	ldr	r1, [r4, #32]
 800c5c0:	602b      	str	r3, [r5, #0]
 800c5c2:	d030      	beq.n	800c626 <__sflush_r+0x92>
 800c5c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	0759      	lsls	r1, r3, #29
 800c5ca:	d505      	bpl.n	800c5d8 <__sflush_r+0x44>
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	1ad2      	subs	r2, r2, r3
 800c5d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c5d2:	b10b      	cbz	r3, 800c5d8 <__sflush_r+0x44>
 800c5d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c5d6:	1ad2      	subs	r2, r2, r3
 800c5d8:	2300      	movs	r3, #0
 800c5da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5dc:	6a21      	ldr	r1, [r4, #32]
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b0      	blx	r6
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	d106      	bne.n	800c5f6 <__sflush_r+0x62>
 800c5e8:	6829      	ldr	r1, [r5, #0]
 800c5ea:	291d      	cmp	r1, #29
 800c5ec:	d82b      	bhi.n	800c646 <__sflush_r+0xb2>
 800c5ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c698 <__sflush_r+0x104>)
 800c5f0:	410a      	asrs	r2, r1
 800c5f2:	07d6      	lsls	r6, r2, #31
 800c5f4:	d427      	bmi.n	800c646 <__sflush_r+0xb2>
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	6062      	str	r2, [r4, #4]
 800c5fa:	04d9      	lsls	r1, r3, #19
 800c5fc:	6922      	ldr	r2, [r4, #16]
 800c5fe:	6022      	str	r2, [r4, #0]
 800c600:	d504      	bpl.n	800c60c <__sflush_r+0x78>
 800c602:	1c42      	adds	r2, r0, #1
 800c604:	d101      	bne.n	800c60a <__sflush_r+0x76>
 800c606:	682b      	ldr	r3, [r5, #0]
 800c608:	b903      	cbnz	r3, 800c60c <__sflush_r+0x78>
 800c60a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c60c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c60e:	602f      	str	r7, [r5, #0]
 800c610:	b1b9      	cbz	r1, 800c642 <__sflush_r+0xae>
 800c612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c616:	4299      	cmp	r1, r3
 800c618:	d002      	beq.n	800c620 <__sflush_r+0x8c>
 800c61a:	4628      	mov	r0, r5
 800c61c:	f7ff f9e0 	bl	800b9e0 <_free_r>
 800c620:	2300      	movs	r3, #0
 800c622:	6363      	str	r3, [r4, #52]	@ 0x34
 800c624:	e00d      	b.n	800c642 <__sflush_r+0xae>
 800c626:	2301      	movs	r3, #1
 800c628:	4628      	mov	r0, r5
 800c62a:	47b0      	blx	r6
 800c62c:	4602      	mov	r2, r0
 800c62e:	1c50      	adds	r0, r2, #1
 800c630:	d1c9      	bne.n	800c5c6 <__sflush_r+0x32>
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0c6      	beq.n	800c5c6 <__sflush_r+0x32>
 800c638:	2b1d      	cmp	r3, #29
 800c63a:	d001      	beq.n	800c640 <__sflush_r+0xac>
 800c63c:	2b16      	cmp	r3, #22
 800c63e:	d11e      	bne.n	800c67e <__sflush_r+0xea>
 800c640:	602f      	str	r7, [r5, #0]
 800c642:	2000      	movs	r0, #0
 800c644:	e022      	b.n	800c68c <__sflush_r+0xf8>
 800c646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c64a:	b21b      	sxth	r3, r3
 800c64c:	e01b      	b.n	800c686 <__sflush_r+0xf2>
 800c64e:	690f      	ldr	r7, [r1, #16]
 800c650:	2f00      	cmp	r7, #0
 800c652:	d0f6      	beq.n	800c642 <__sflush_r+0xae>
 800c654:	0793      	lsls	r3, r2, #30
 800c656:	680e      	ldr	r6, [r1, #0]
 800c658:	bf08      	it	eq
 800c65a:	694b      	ldreq	r3, [r1, #20]
 800c65c:	600f      	str	r7, [r1, #0]
 800c65e:	bf18      	it	ne
 800c660:	2300      	movne	r3, #0
 800c662:	eba6 0807 	sub.w	r8, r6, r7
 800c666:	608b      	str	r3, [r1, #8]
 800c668:	f1b8 0f00 	cmp.w	r8, #0
 800c66c:	dde9      	ble.n	800c642 <__sflush_r+0xae>
 800c66e:	6a21      	ldr	r1, [r4, #32]
 800c670:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c672:	4643      	mov	r3, r8
 800c674:	463a      	mov	r2, r7
 800c676:	4628      	mov	r0, r5
 800c678:	47b0      	blx	r6
 800c67a:	2800      	cmp	r0, #0
 800c67c:	dc08      	bgt.n	800c690 <__sflush_r+0xfc>
 800c67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c686:	81a3      	strh	r3, [r4, #12]
 800c688:	f04f 30ff 	mov.w	r0, #4294967295
 800c68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c690:	4407      	add	r7, r0
 800c692:	eba8 0800 	sub.w	r8, r8, r0
 800c696:	e7e7      	b.n	800c668 <__sflush_r+0xd4>
 800c698:	dfbffffe 	.word	0xdfbffffe

0800c69c <_fflush_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	690b      	ldr	r3, [r1, #16]
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	b913      	cbnz	r3, 800c6ac <_fflush_r+0x10>
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	b118      	cbz	r0, 800c6b6 <_fflush_r+0x1a>
 800c6ae:	6a03      	ldr	r3, [r0, #32]
 800c6b0:	b90b      	cbnz	r3, 800c6b6 <_fflush_r+0x1a>
 800c6b2:	f7fe fa2d 	bl	800ab10 <__sinit>
 800c6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0f3      	beq.n	800c6a6 <_fflush_r+0xa>
 800c6be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c6c0:	07d0      	lsls	r0, r2, #31
 800c6c2:	d404      	bmi.n	800c6ce <_fflush_r+0x32>
 800c6c4:	0599      	lsls	r1, r3, #22
 800c6c6:	d402      	bmi.n	800c6ce <_fflush_r+0x32>
 800c6c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6ca:	f7fe fb38 	bl	800ad3e <__retarget_lock_acquire_recursive>
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	f7ff ff5f 	bl	800c594 <__sflush_r>
 800c6d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6d8:	07da      	lsls	r2, r3, #31
 800c6da:	4605      	mov	r5, r0
 800c6dc:	d4e4      	bmi.n	800c6a8 <_fflush_r+0xc>
 800c6de:	89a3      	ldrh	r3, [r4, #12]
 800c6e0:	059b      	lsls	r3, r3, #22
 800c6e2:	d4e1      	bmi.n	800c6a8 <_fflush_r+0xc>
 800c6e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6e6:	f7fe fb2b 	bl	800ad40 <__retarget_lock_release_recursive>
 800c6ea:	e7dd      	b.n	800c6a8 <_fflush_r+0xc>

0800c6ec <memmove>:
 800c6ec:	4288      	cmp	r0, r1
 800c6ee:	b510      	push	{r4, lr}
 800c6f0:	eb01 0402 	add.w	r4, r1, r2
 800c6f4:	d902      	bls.n	800c6fc <memmove+0x10>
 800c6f6:	4284      	cmp	r4, r0
 800c6f8:	4623      	mov	r3, r4
 800c6fa:	d807      	bhi.n	800c70c <memmove+0x20>
 800c6fc:	1e43      	subs	r3, r0, #1
 800c6fe:	42a1      	cmp	r1, r4
 800c700:	d008      	beq.n	800c714 <memmove+0x28>
 800c702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c70a:	e7f8      	b.n	800c6fe <memmove+0x12>
 800c70c:	4402      	add	r2, r0
 800c70e:	4601      	mov	r1, r0
 800c710:	428a      	cmp	r2, r1
 800c712:	d100      	bne.n	800c716 <memmove+0x2a>
 800c714:	bd10      	pop	{r4, pc}
 800c716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c71e:	e7f7      	b.n	800c710 <memmove+0x24>

0800c720 <_sbrk_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d06      	ldr	r5, [pc, #24]	@ (800c73c <_sbrk_r+0x1c>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	602b      	str	r3, [r5, #0]
 800c72c:	f7f5 fbbc 	bl	8001ea8 <_sbrk>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_sbrk_r+0x1a>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_sbrk_r+0x1a>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	200021a4 	.word	0x200021a4

0800c740 <memcpy>:
 800c740:	440a      	add	r2, r1
 800c742:	4291      	cmp	r1, r2
 800c744:	f100 33ff 	add.w	r3, r0, #4294967295
 800c748:	d100      	bne.n	800c74c <memcpy+0xc>
 800c74a:	4770      	bx	lr
 800c74c:	b510      	push	{r4, lr}
 800c74e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c752:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c756:	4291      	cmp	r1, r2
 800c758:	d1f9      	bne.n	800c74e <memcpy+0xe>
 800c75a:	bd10      	pop	{r4, pc}

0800c75c <__assert_func>:
 800c75c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c75e:	4614      	mov	r4, r2
 800c760:	461a      	mov	r2, r3
 800c762:	4b09      	ldr	r3, [pc, #36]	@ (800c788 <__assert_func+0x2c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4605      	mov	r5, r0
 800c768:	68d8      	ldr	r0, [r3, #12]
 800c76a:	b954      	cbnz	r4, 800c782 <__assert_func+0x26>
 800c76c:	4b07      	ldr	r3, [pc, #28]	@ (800c78c <__assert_func+0x30>)
 800c76e:	461c      	mov	r4, r3
 800c770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c774:	9100      	str	r1, [sp, #0]
 800c776:	462b      	mov	r3, r5
 800c778:	4905      	ldr	r1, [pc, #20]	@ (800c790 <__assert_func+0x34>)
 800c77a:	f000 f86f 	bl	800c85c <fiprintf>
 800c77e:	f000 f87f 	bl	800c880 <abort>
 800c782:	4b04      	ldr	r3, [pc, #16]	@ (800c794 <__assert_func+0x38>)
 800c784:	e7f4      	b.n	800c770 <__assert_func+0x14>
 800c786:	bf00      	nop
 800c788:	20000108 	.word	0x20000108
 800c78c:	0800dbd6 	.word	0x0800dbd6
 800c790:	0800dba8 	.word	0x0800dba8
 800c794:	0800db9b 	.word	0x0800db9b

0800c798 <_calloc_r>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	fba1 5402 	umull	r5, r4, r1, r2
 800c79e:	b93c      	cbnz	r4, 800c7b0 <_calloc_r+0x18>
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	f7ff f991 	bl	800bac8 <_malloc_r>
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	b928      	cbnz	r0, 800c7b6 <_calloc_r+0x1e>
 800c7aa:	2600      	movs	r6, #0
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	bd70      	pop	{r4, r5, r6, pc}
 800c7b0:	220c      	movs	r2, #12
 800c7b2:	6002      	str	r2, [r0, #0]
 800c7b4:	e7f9      	b.n	800c7aa <_calloc_r+0x12>
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	f7fe fa42 	bl	800ac42 <memset>
 800c7be:	e7f5      	b.n	800c7ac <_calloc_r+0x14>

0800c7c0 <__ascii_mbtowc>:
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	b901      	cbnz	r1, 800c7c6 <__ascii_mbtowc+0x6>
 800c7c4:	a901      	add	r1, sp, #4
 800c7c6:	b142      	cbz	r2, 800c7da <__ascii_mbtowc+0x1a>
 800c7c8:	b14b      	cbz	r3, 800c7de <__ascii_mbtowc+0x1e>
 800c7ca:	7813      	ldrb	r3, [r2, #0]
 800c7cc:	600b      	str	r3, [r1, #0]
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	1e10      	subs	r0, r2, #0
 800c7d2:	bf18      	it	ne
 800c7d4:	2001      	movne	r0, #1
 800c7d6:	b002      	add	sp, #8
 800c7d8:	4770      	bx	lr
 800c7da:	4610      	mov	r0, r2
 800c7dc:	e7fb      	b.n	800c7d6 <__ascii_mbtowc+0x16>
 800c7de:	f06f 0001 	mvn.w	r0, #1
 800c7e2:	e7f8      	b.n	800c7d6 <__ascii_mbtowc+0x16>

0800c7e4 <_realloc_r>:
 800c7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e8:	4680      	mov	r8, r0
 800c7ea:	4615      	mov	r5, r2
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	b921      	cbnz	r1, 800c7fa <_realloc_r+0x16>
 800c7f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	f7ff b967 	b.w	800bac8 <_malloc_r>
 800c7fa:	b92a      	cbnz	r2, 800c808 <_realloc_r+0x24>
 800c7fc:	f7ff f8f0 	bl	800b9e0 <_free_r>
 800c800:	2400      	movs	r4, #0
 800c802:	4620      	mov	r0, r4
 800c804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c808:	f000 f841 	bl	800c88e <_malloc_usable_size_r>
 800c80c:	4285      	cmp	r5, r0
 800c80e:	4606      	mov	r6, r0
 800c810:	d802      	bhi.n	800c818 <_realloc_r+0x34>
 800c812:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c816:	d8f4      	bhi.n	800c802 <_realloc_r+0x1e>
 800c818:	4629      	mov	r1, r5
 800c81a:	4640      	mov	r0, r8
 800c81c:	f7ff f954 	bl	800bac8 <_malloc_r>
 800c820:	4607      	mov	r7, r0
 800c822:	2800      	cmp	r0, #0
 800c824:	d0ec      	beq.n	800c800 <_realloc_r+0x1c>
 800c826:	42b5      	cmp	r5, r6
 800c828:	462a      	mov	r2, r5
 800c82a:	4621      	mov	r1, r4
 800c82c:	bf28      	it	cs
 800c82e:	4632      	movcs	r2, r6
 800c830:	f7ff ff86 	bl	800c740 <memcpy>
 800c834:	4621      	mov	r1, r4
 800c836:	4640      	mov	r0, r8
 800c838:	f7ff f8d2 	bl	800b9e0 <_free_r>
 800c83c:	463c      	mov	r4, r7
 800c83e:	e7e0      	b.n	800c802 <_realloc_r+0x1e>

0800c840 <__ascii_wctomb>:
 800c840:	4603      	mov	r3, r0
 800c842:	4608      	mov	r0, r1
 800c844:	b141      	cbz	r1, 800c858 <__ascii_wctomb+0x18>
 800c846:	2aff      	cmp	r2, #255	@ 0xff
 800c848:	d904      	bls.n	800c854 <__ascii_wctomb+0x14>
 800c84a:	228a      	movs	r2, #138	@ 0x8a
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	f04f 30ff 	mov.w	r0, #4294967295
 800c852:	4770      	bx	lr
 800c854:	700a      	strb	r2, [r1, #0]
 800c856:	2001      	movs	r0, #1
 800c858:	4770      	bx	lr
	...

0800c85c <fiprintf>:
 800c85c:	b40e      	push	{r1, r2, r3}
 800c85e:	b503      	push	{r0, r1, lr}
 800c860:	4601      	mov	r1, r0
 800c862:	ab03      	add	r3, sp, #12
 800c864:	4805      	ldr	r0, [pc, #20]	@ (800c87c <fiprintf+0x20>)
 800c866:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86a:	6800      	ldr	r0, [r0, #0]
 800c86c:	9301      	str	r3, [sp, #4]
 800c86e:	f000 f83f 	bl	800c8f0 <_vfiprintf_r>
 800c872:	b002      	add	sp, #8
 800c874:	f85d eb04 	ldr.w	lr, [sp], #4
 800c878:	b003      	add	sp, #12
 800c87a:	4770      	bx	lr
 800c87c:	20000108 	.word	0x20000108

0800c880 <abort>:
 800c880:	b508      	push	{r3, lr}
 800c882:	2006      	movs	r0, #6
 800c884:	f000 fa08 	bl	800cc98 <raise>
 800c888:	2001      	movs	r0, #1
 800c88a:	f7f5 fa95 	bl	8001db8 <_exit>

0800c88e <_malloc_usable_size_r>:
 800c88e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c892:	1f18      	subs	r0, r3, #4
 800c894:	2b00      	cmp	r3, #0
 800c896:	bfbc      	itt	lt
 800c898:	580b      	ldrlt	r3, [r1, r0]
 800c89a:	18c0      	addlt	r0, r0, r3
 800c89c:	4770      	bx	lr

0800c89e <__sfputc_r>:
 800c89e:	6893      	ldr	r3, [r2, #8]
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	b410      	push	{r4}
 800c8a6:	6093      	str	r3, [r2, #8]
 800c8a8:	da08      	bge.n	800c8bc <__sfputc_r+0x1e>
 800c8aa:	6994      	ldr	r4, [r2, #24]
 800c8ac:	42a3      	cmp	r3, r4
 800c8ae:	db01      	blt.n	800c8b4 <__sfputc_r+0x16>
 800c8b0:	290a      	cmp	r1, #10
 800c8b2:	d103      	bne.n	800c8bc <__sfputc_r+0x1e>
 800c8b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8b8:	f000 b932 	b.w	800cb20 <__swbuf_r>
 800c8bc:	6813      	ldr	r3, [r2, #0]
 800c8be:	1c58      	adds	r0, r3, #1
 800c8c0:	6010      	str	r0, [r2, #0]
 800c8c2:	7019      	strb	r1, [r3, #0]
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <__sfputs_r>:
 800c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	460f      	mov	r7, r1
 800c8d2:	4614      	mov	r4, r2
 800c8d4:	18d5      	adds	r5, r2, r3
 800c8d6:	42ac      	cmp	r4, r5
 800c8d8:	d101      	bne.n	800c8de <__sfputs_r+0x12>
 800c8da:	2000      	movs	r0, #0
 800c8dc:	e007      	b.n	800c8ee <__sfputs_r+0x22>
 800c8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e2:	463a      	mov	r2, r7
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7ff ffda 	bl	800c89e <__sfputc_r>
 800c8ea:	1c43      	adds	r3, r0, #1
 800c8ec:	d1f3      	bne.n	800c8d6 <__sfputs_r+0xa>
 800c8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8f0 <_vfiprintf_r>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	460d      	mov	r5, r1
 800c8f6:	b09d      	sub	sp, #116	@ 0x74
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	4698      	mov	r8, r3
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	b118      	cbz	r0, 800c908 <_vfiprintf_r+0x18>
 800c900:	6a03      	ldr	r3, [r0, #32]
 800c902:	b90b      	cbnz	r3, 800c908 <_vfiprintf_r+0x18>
 800c904:	f7fe f904 	bl	800ab10 <__sinit>
 800c908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c90a:	07d9      	lsls	r1, r3, #31
 800c90c:	d405      	bmi.n	800c91a <_vfiprintf_r+0x2a>
 800c90e:	89ab      	ldrh	r3, [r5, #12]
 800c910:	059a      	lsls	r2, r3, #22
 800c912:	d402      	bmi.n	800c91a <_vfiprintf_r+0x2a>
 800c914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c916:	f7fe fa12 	bl	800ad3e <__retarget_lock_acquire_recursive>
 800c91a:	89ab      	ldrh	r3, [r5, #12]
 800c91c:	071b      	lsls	r3, r3, #28
 800c91e:	d501      	bpl.n	800c924 <_vfiprintf_r+0x34>
 800c920:	692b      	ldr	r3, [r5, #16]
 800c922:	b99b      	cbnz	r3, 800c94c <_vfiprintf_r+0x5c>
 800c924:	4629      	mov	r1, r5
 800c926:	4630      	mov	r0, r6
 800c928:	f000 f938 	bl	800cb9c <__swsetup_r>
 800c92c:	b170      	cbz	r0, 800c94c <_vfiprintf_r+0x5c>
 800c92e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c930:	07dc      	lsls	r4, r3, #31
 800c932:	d504      	bpl.n	800c93e <_vfiprintf_r+0x4e>
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	b01d      	add	sp, #116	@ 0x74
 800c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	0598      	lsls	r0, r3, #22
 800c942:	d4f7      	bmi.n	800c934 <_vfiprintf_r+0x44>
 800c944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c946:	f7fe f9fb 	bl	800ad40 <__retarget_lock_release_recursive>
 800c94a:	e7f3      	b.n	800c934 <_vfiprintf_r+0x44>
 800c94c:	2300      	movs	r3, #0
 800c94e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c950:	2320      	movs	r3, #32
 800c952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c956:	f8cd 800c 	str.w	r8, [sp, #12]
 800c95a:	2330      	movs	r3, #48	@ 0x30
 800c95c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb0c <_vfiprintf_r+0x21c>
 800c960:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c964:	f04f 0901 	mov.w	r9, #1
 800c968:	4623      	mov	r3, r4
 800c96a:	469a      	mov	sl, r3
 800c96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c970:	b10a      	cbz	r2, 800c976 <_vfiprintf_r+0x86>
 800c972:	2a25      	cmp	r2, #37	@ 0x25
 800c974:	d1f9      	bne.n	800c96a <_vfiprintf_r+0x7a>
 800c976:	ebba 0b04 	subs.w	fp, sl, r4
 800c97a:	d00b      	beq.n	800c994 <_vfiprintf_r+0xa4>
 800c97c:	465b      	mov	r3, fp
 800c97e:	4622      	mov	r2, r4
 800c980:	4629      	mov	r1, r5
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ffa2 	bl	800c8cc <__sfputs_r>
 800c988:	3001      	adds	r0, #1
 800c98a:	f000 80a7 	beq.w	800cadc <_vfiprintf_r+0x1ec>
 800c98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c990:	445a      	add	r2, fp
 800c992:	9209      	str	r2, [sp, #36]	@ 0x24
 800c994:	f89a 3000 	ldrb.w	r3, [sl]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 809f 	beq.w	800cadc <_vfiprintf_r+0x1ec>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9a8:	f10a 0a01 	add.w	sl, sl, #1
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	9307      	str	r3, [sp, #28]
 800c9b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9b6:	4654      	mov	r4, sl
 800c9b8:	2205      	movs	r2, #5
 800c9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9be:	4853      	ldr	r0, [pc, #332]	@ (800cb0c <_vfiprintf_r+0x21c>)
 800c9c0:	f7f3 fc06 	bl	80001d0 <memchr>
 800c9c4:	9a04      	ldr	r2, [sp, #16]
 800c9c6:	b9d8      	cbnz	r0, 800ca00 <_vfiprintf_r+0x110>
 800c9c8:	06d1      	lsls	r1, r2, #27
 800c9ca:	bf44      	itt	mi
 800c9cc:	2320      	movmi	r3, #32
 800c9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9d2:	0713      	lsls	r3, r2, #28
 800c9d4:	bf44      	itt	mi
 800c9d6:	232b      	movmi	r3, #43	@ 0x2b
 800c9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9e2:	d015      	beq.n	800ca10 <_vfiprintf_r+0x120>
 800c9e4:	9a07      	ldr	r2, [sp, #28]
 800c9e6:	4654      	mov	r4, sl
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	f04f 0c0a 	mov.w	ip, #10
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f4:	3b30      	subs	r3, #48	@ 0x30
 800c9f6:	2b09      	cmp	r3, #9
 800c9f8:	d94b      	bls.n	800ca92 <_vfiprintf_r+0x1a2>
 800c9fa:	b1b0      	cbz	r0, 800ca2a <_vfiprintf_r+0x13a>
 800c9fc:	9207      	str	r2, [sp, #28]
 800c9fe:	e014      	b.n	800ca2a <_vfiprintf_r+0x13a>
 800ca00:	eba0 0308 	sub.w	r3, r0, r8
 800ca04:	fa09 f303 	lsl.w	r3, r9, r3
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	46a2      	mov	sl, r4
 800ca0e:	e7d2      	b.n	800c9b6 <_vfiprintf_r+0xc6>
 800ca10:	9b03      	ldr	r3, [sp, #12]
 800ca12:	1d19      	adds	r1, r3, #4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	9103      	str	r1, [sp, #12]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bfbb      	ittet	lt
 800ca1c:	425b      	neglt	r3, r3
 800ca1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca22:	9307      	strge	r3, [sp, #28]
 800ca24:	9307      	strlt	r3, [sp, #28]
 800ca26:	bfb8      	it	lt
 800ca28:	9204      	strlt	r2, [sp, #16]
 800ca2a:	7823      	ldrb	r3, [r4, #0]
 800ca2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca2e:	d10a      	bne.n	800ca46 <_vfiprintf_r+0x156>
 800ca30:	7863      	ldrb	r3, [r4, #1]
 800ca32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca34:	d132      	bne.n	800ca9c <_vfiprintf_r+0x1ac>
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	1d1a      	adds	r2, r3, #4
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	9203      	str	r2, [sp, #12]
 800ca3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca42:	3402      	adds	r4, #2
 800ca44:	9305      	str	r3, [sp, #20]
 800ca46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb1c <_vfiprintf_r+0x22c>
 800ca4a:	7821      	ldrb	r1, [r4, #0]
 800ca4c:	2203      	movs	r2, #3
 800ca4e:	4650      	mov	r0, sl
 800ca50:	f7f3 fbbe 	bl	80001d0 <memchr>
 800ca54:	b138      	cbz	r0, 800ca66 <_vfiprintf_r+0x176>
 800ca56:	9b04      	ldr	r3, [sp, #16]
 800ca58:	eba0 000a 	sub.w	r0, r0, sl
 800ca5c:	2240      	movs	r2, #64	@ 0x40
 800ca5e:	4082      	lsls	r2, r0
 800ca60:	4313      	orrs	r3, r2
 800ca62:	3401      	adds	r4, #1
 800ca64:	9304      	str	r3, [sp, #16]
 800ca66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6a:	4829      	ldr	r0, [pc, #164]	@ (800cb10 <_vfiprintf_r+0x220>)
 800ca6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca70:	2206      	movs	r2, #6
 800ca72:	f7f3 fbad 	bl	80001d0 <memchr>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d03f      	beq.n	800cafa <_vfiprintf_r+0x20a>
 800ca7a:	4b26      	ldr	r3, [pc, #152]	@ (800cb14 <_vfiprintf_r+0x224>)
 800ca7c:	bb1b      	cbnz	r3, 800cac6 <_vfiprintf_r+0x1d6>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	3307      	adds	r3, #7
 800ca82:	f023 0307 	bic.w	r3, r3, #7
 800ca86:	3308      	adds	r3, #8
 800ca88:	9303      	str	r3, [sp, #12]
 800ca8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca8c:	443b      	add	r3, r7
 800ca8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca90:	e76a      	b.n	800c968 <_vfiprintf_r+0x78>
 800ca92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca96:	460c      	mov	r4, r1
 800ca98:	2001      	movs	r0, #1
 800ca9a:	e7a8      	b.n	800c9ee <_vfiprintf_r+0xfe>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	3401      	adds	r4, #1
 800caa0:	9305      	str	r3, [sp, #20]
 800caa2:	4619      	mov	r1, r3
 800caa4:	f04f 0c0a 	mov.w	ip, #10
 800caa8:	4620      	mov	r0, r4
 800caaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caae:	3a30      	subs	r2, #48	@ 0x30
 800cab0:	2a09      	cmp	r2, #9
 800cab2:	d903      	bls.n	800cabc <_vfiprintf_r+0x1cc>
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d0c6      	beq.n	800ca46 <_vfiprintf_r+0x156>
 800cab8:	9105      	str	r1, [sp, #20]
 800caba:	e7c4      	b.n	800ca46 <_vfiprintf_r+0x156>
 800cabc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac0:	4604      	mov	r4, r0
 800cac2:	2301      	movs	r3, #1
 800cac4:	e7f0      	b.n	800caa8 <_vfiprintf_r+0x1b8>
 800cac6:	ab03      	add	r3, sp, #12
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	462a      	mov	r2, r5
 800cacc:	4b12      	ldr	r3, [pc, #72]	@ (800cb18 <_vfiprintf_r+0x228>)
 800cace:	a904      	add	r1, sp, #16
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7fd fbd9 	bl	800a288 <_printf_float>
 800cad6:	4607      	mov	r7, r0
 800cad8:	1c78      	adds	r0, r7, #1
 800cada:	d1d6      	bne.n	800ca8a <_vfiprintf_r+0x19a>
 800cadc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cade:	07d9      	lsls	r1, r3, #31
 800cae0:	d405      	bmi.n	800caee <_vfiprintf_r+0x1fe>
 800cae2:	89ab      	ldrh	r3, [r5, #12]
 800cae4:	059a      	lsls	r2, r3, #22
 800cae6:	d402      	bmi.n	800caee <_vfiprintf_r+0x1fe>
 800cae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caea:	f7fe f929 	bl	800ad40 <__retarget_lock_release_recursive>
 800caee:	89ab      	ldrh	r3, [r5, #12]
 800caf0:	065b      	lsls	r3, r3, #25
 800caf2:	f53f af1f 	bmi.w	800c934 <_vfiprintf_r+0x44>
 800caf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800caf8:	e71e      	b.n	800c938 <_vfiprintf_r+0x48>
 800cafa:	ab03      	add	r3, sp, #12
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	462a      	mov	r2, r5
 800cb00:	4b05      	ldr	r3, [pc, #20]	@ (800cb18 <_vfiprintf_r+0x228>)
 800cb02:	a904      	add	r1, sp, #16
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7fd fe57 	bl	800a7b8 <_printf_i>
 800cb0a:	e7e4      	b.n	800cad6 <_vfiprintf_r+0x1e6>
 800cb0c:	0800db80 	.word	0x0800db80
 800cb10:	0800db8a 	.word	0x0800db8a
 800cb14:	0800a289 	.word	0x0800a289
 800cb18:	0800c8cd 	.word	0x0800c8cd
 800cb1c:	0800db86 	.word	0x0800db86

0800cb20 <__swbuf_r>:
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb22:	460e      	mov	r6, r1
 800cb24:	4614      	mov	r4, r2
 800cb26:	4605      	mov	r5, r0
 800cb28:	b118      	cbz	r0, 800cb32 <__swbuf_r+0x12>
 800cb2a:	6a03      	ldr	r3, [r0, #32]
 800cb2c:	b90b      	cbnz	r3, 800cb32 <__swbuf_r+0x12>
 800cb2e:	f7fd ffef 	bl	800ab10 <__sinit>
 800cb32:	69a3      	ldr	r3, [r4, #24]
 800cb34:	60a3      	str	r3, [r4, #8]
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	071a      	lsls	r2, r3, #28
 800cb3a:	d501      	bpl.n	800cb40 <__swbuf_r+0x20>
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	b943      	cbnz	r3, 800cb52 <__swbuf_r+0x32>
 800cb40:	4621      	mov	r1, r4
 800cb42:	4628      	mov	r0, r5
 800cb44:	f000 f82a 	bl	800cb9c <__swsetup_r>
 800cb48:	b118      	cbz	r0, 800cb52 <__swbuf_r+0x32>
 800cb4a:	f04f 37ff 	mov.w	r7, #4294967295
 800cb4e:	4638      	mov	r0, r7
 800cb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	6922      	ldr	r2, [r4, #16]
 800cb56:	1a98      	subs	r0, r3, r2
 800cb58:	6963      	ldr	r3, [r4, #20]
 800cb5a:	b2f6      	uxtb	r6, r6
 800cb5c:	4283      	cmp	r3, r0
 800cb5e:	4637      	mov	r7, r6
 800cb60:	dc05      	bgt.n	800cb6e <__swbuf_r+0x4e>
 800cb62:	4621      	mov	r1, r4
 800cb64:	4628      	mov	r0, r5
 800cb66:	f7ff fd99 	bl	800c69c <_fflush_r>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d1ed      	bne.n	800cb4a <__swbuf_r+0x2a>
 800cb6e:	68a3      	ldr	r3, [r4, #8]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	60a3      	str	r3, [r4, #8]
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	6022      	str	r2, [r4, #0]
 800cb7a:	701e      	strb	r6, [r3, #0]
 800cb7c:	6962      	ldr	r2, [r4, #20]
 800cb7e:	1c43      	adds	r3, r0, #1
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d004      	beq.n	800cb8e <__swbuf_r+0x6e>
 800cb84:	89a3      	ldrh	r3, [r4, #12]
 800cb86:	07db      	lsls	r3, r3, #31
 800cb88:	d5e1      	bpl.n	800cb4e <__swbuf_r+0x2e>
 800cb8a:	2e0a      	cmp	r6, #10
 800cb8c:	d1df      	bne.n	800cb4e <__swbuf_r+0x2e>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4628      	mov	r0, r5
 800cb92:	f7ff fd83 	bl	800c69c <_fflush_r>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d0d9      	beq.n	800cb4e <__swbuf_r+0x2e>
 800cb9a:	e7d6      	b.n	800cb4a <__swbuf_r+0x2a>

0800cb9c <__swsetup_r>:
 800cb9c:	b538      	push	{r3, r4, r5, lr}
 800cb9e:	4b29      	ldr	r3, [pc, #164]	@ (800cc44 <__swsetup_r+0xa8>)
 800cba0:	4605      	mov	r5, r0
 800cba2:	6818      	ldr	r0, [r3, #0]
 800cba4:	460c      	mov	r4, r1
 800cba6:	b118      	cbz	r0, 800cbb0 <__swsetup_r+0x14>
 800cba8:	6a03      	ldr	r3, [r0, #32]
 800cbaa:	b90b      	cbnz	r3, 800cbb0 <__swsetup_r+0x14>
 800cbac:	f7fd ffb0 	bl	800ab10 <__sinit>
 800cbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb4:	0719      	lsls	r1, r3, #28
 800cbb6:	d422      	bmi.n	800cbfe <__swsetup_r+0x62>
 800cbb8:	06da      	lsls	r2, r3, #27
 800cbba:	d407      	bmi.n	800cbcc <__swsetup_r+0x30>
 800cbbc:	2209      	movs	r2, #9
 800cbbe:	602a      	str	r2, [r5, #0]
 800cbc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbc4:	81a3      	strh	r3, [r4, #12]
 800cbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbca:	e033      	b.n	800cc34 <__swsetup_r+0x98>
 800cbcc:	0758      	lsls	r0, r3, #29
 800cbce:	d512      	bpl.n	800cbf6 <__swsetup_r+0x5a>
 800cbd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbd2:	b141      	cbz	r1, 800cbe6 <__swsetup_r+0x4a>
 800cbd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbd8:	4299      	cmp	r1, r3
 800cbda:	d002      	beq.n	800cbe2 <__swsetup_r+0x46>
 800cbdc:	4628      	mov	r0, r5
 800cbde:	f7fe feff 	bl	800b9e0 <_free_r>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbe6:	89a3      	ldrh	r3, [r4, #12]
 800cbe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbec:	81a3      	strh	r3, [r4, #12]
 800cbee:	2300      	movs	r3, #0
 800cbf0:	6063      	str	r3, [r4, #4]
 800cbf2:	6923      	ldr	r3, [r4, #16]
 800cbf4:	6023      	str	r3, [r4, #0]
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	f043 0308 	orr.w	r3, r3, #8
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	6923      	ldr	r3, [r4, #16]
 800cc00:	b94b      	cbnz	r3, 800cc16 <__swsetup_r+0x7a>
 800cc02:	89a3      	ldrh	r3, [r4, #12]
 800cc04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc0c:	d003      	beq.n	800cc16 <__swsetup_r+0x7a>
 800cc0e:	4621      	mov	r1, r4
 800cc10:	4628      	mov	r0, r5
 800cc12:	f000 f883 	bl	800cd1c <__smakebuf_r>
 800cc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc1a:	f013 0201 	ands.w	r2, r3, #1
 800cc1e:	d00a      	beq.n	800cc36 <__swsetup_r+0x9a>
 800cc20:	2200      	movs	r2, #0
 800cc22:	60a2      	str	r2, [r4, #8]
 800cc24:	6962      	ldr	r2, [r4, #20]
 800cc26:	4252      	negs	r2, r2
 800cc28:	61a2      	str	r2, [r4, #24]
 800cc2a:	6922      	ldr	r2, [r4, #16]
 800cc2c:	b942      	cbnz	r2, 800cc40 <__swsetup_r+0xa4>
 800cc2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc32:	d1c5      	bne.n	800cbc0 <__swsetup_r+0x24>
 800cc34:	bd38      	pop	{r3, r4, r5, pc}
 800cc36:	0799      	lsls	r1, r3, #30
 800cc38:	bf58      	it	pl
 800cc3a:	6962      	ldrpl	r2, [r4, #20]
 800cc3c:	60a2      	str	r2, [r4, #8]
 800cc3e:	e7f4      	b.n	800cc2a <__swsetup_r+0x8e>
 800cc40:	2000      	movs	r0, #0
 800cc42:	e7f7      	b.n	800cc34 <__swsetup_r+0x98>
 800cc44:	20000108 	.word	0x20000108

0800cc48 <_raise_r>:
 800cc48:	291f      	cmp	r1, #31
 800cc4a:	b538      	push	{r3, r4, r5, lr}
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	d904      	bls.n	800cc5c <_raise_r+0x14>
 800cc52:	2316      	movs	r3, #22
 800cc54:	6003      	str	r3, [r0, #0]
 800cc56:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5a:	bd38      	pop	{r3, r4, r5, pc}
 800cc5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc5e:	b112      	cbz	r2, 800cc66 <_raise_r+0x1e>
 800cc60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc64:	b94b      	cbnz	r3, 800cc7a <_raise_r+0x32>
 800cc66:	4628      	mov	r0, r5
 800cc68:	f000 f830 	bl	800cccc <_getpid_r>
 800cc6c:	4622      	mov	r2, r4
 800cc6e:	4601      	mov	r1, r0
 800cc70:	4628      	mov	r0, r5
 800cc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc76:	f000 b817 	b.w	800cca8 <_kill_r>
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d00a      	beq.n	800cc94 <_raise_r+0x4c>
 800cc7e:	1c59      	adds	r1, r3, #1
 800cc80:	d103      	bne.n	800cc8a <_raise_r+0x42>
 800cc82:	2316      	movs	r3, #22
 800cc84:	6003      	str	r3, [r0, #0]
 800cc86:	2001      	movs	r0, #1
 800cc88:	e7e7      	b.n	800cc5a <_raise_r+0x12>
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc90:	4620      	mov	r0, r4
 800cc92:	4798      	blx	r3
 800cc94:	2000      	movs	r0, #0
 800cc96:	e7e0      	b.n	800cc5a <_raise_r+0x12>

0800cc98 <raise>:
 800cc98:	4b02      	ldr	r3, [pc, #8]	@ (800cca4 <raise+0xc>)
 800cc9a:	4601      	mov	r1, r0
 800cc9c:	6818      	ldr	r0, [r3, #0]
 800cc9e:	f7ff bfd3 	b.w	800cc48 <_raise_r>
 800cca2:	bf00      	nop
 800cca4:	20000108 	.word	0x20000108

0800cca8 <_kill_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4d07      	ldr	r5, [pc, #28]	@ (800ccc8 <_kill_r+0x20>)
 800ccac:	2300      	movs	r3, #0
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	f7f5 f86f 	bl	8001d98 <_kill>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d102      	bne.n	800ccc4 <_kill_r+0x1c>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b103      	cbz	r3, 800ccc4 <_kill_r+0x1c>
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	bf00      	nop
 800ccc8:	200021a4 	.word	0x200021a4

0800cccc <_getpid_r>:
 800cccc:	f7f5 b85c 	b.w	8001d88 <_getpid>

0800ccd0 <__swhatbuf_r>:
 800ccd0:	b570      	push	{r4, r5, r6, lr}
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd8:	2900      	cmp	r1, #0
 800ccda:	b096      	sub	sp, #88	@ 0x58
 800ccdc:	4615      	mov	r5, r2
 800ccde:	461e      	mov	r6, r3
 800cce0:	da0d      	bge.n	800ccfe <__swhatbuf_r+0x2e>
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cce8:	f04f 0100 	mov.w	r1, #0
 800ccec:	bf14      	ite	ne
 800ccee:	2340      	movne	r3, #64	@ 0x40
 800ccf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	6031      	str	r1, [r6, #0]
 800ccf8:	602b      	str	r3, [r5, #0]
 800ccfa:	b016      	add	sp, #88	@ 0x58
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	466a      	mov	r2, sp
 800cd00:	f000 f848 	bl	800cd94 <_fstat_r>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	dbec      	blt.n	800cce2 <__swhatbuf_r+0x12>
 800cd08:	9901      	ldr	r1, [sp, #4]
 800cd0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd12:	4259      	negs	r1, r3
 800cd14:	4159      	adcs	r1, r3
 800cd16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd1a:	e7eb      	b.n	800ccf4 <__swhatbuf_r+0x24>

0800cd1c <__smakebuf_r>:
 800cd1c:	898b      	ldrh	r3, [r1, #12]
 800cd1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd20:	079d      	lsls	r5, r3, #30
 800cd22:	4606      	mov	r6, r0
 800cd24:	460c      	mov	r4, r1
 800cd26:	d507      	bpl.n	800cd38 <__smakebuf_r+0x1c>
 800cd28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	6123      	str	r3, [r4, #16]
 800cd30:	2301      	movs	r3, #1
 800cd32:	6163      	str	r3, [r4, #20]
 800cd34:	b003      	add	sp, #12
 800cd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd38:	ab01      	add	r3, sp, #4
 800cd3a:	466a      	mov	r2, sp
 800cd3c:	f7ff ffc8 	bl	800ccd0 <__swhatbuf_r>
 800cd40:	9f00      	ldr	r7, [sp, #0]
 800cd42:	4605      	mov	r5, r0
 800cd44:	4639      	mov	r1, r7
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7fe febe 	bl	800bac8 <_malloc_r>
 800cd4c:	b948      	cbnz	r0, 800cd62 <__smakebuf_r+0x46>
 800cd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd52:	059a      	lsls	r2, r3, #22
 800cd54:	d4ee      	bmi.n	800cd34 <__smakebuf_r+0x18>
 800cd56:	f023 0303 	bic.w	r3, r3, #3
 800cd5a:	f043 0302 	orr.w	r3, r3, #2
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	e7e2      	b.n	800cd28 <__smakebuf_r+0xc>
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	6020      	str	r0, [r4, #0]
 800cd66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	9b01      	ldr	r3, [sp, #4]
 800cd6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd72:	b15b      	cbz	r3, 800cd8c <__smakebuf_r+0x70>
 800cd74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f000 f81d 	bl	800cdb8 <_isatty_r>
 800cd7e:	b128      	cbz	r0, 800cd8c <__smakebuf_r+0x70>
 800cd80:	89a3      	ldrh	r3, [r4, #12]
 800cd82:	f023 0303 	bic.w	r3, r3, #3
 800cd86:	f043 0301 	orr.w	r3, r3, #1
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	431d      	orrs	r5, r3
 800cd90:	81a5      	strh	r5, [r4, #12]
 800cd92:	e7cf      	b.n	800cd34 <__smakebuf_r+0x18>

0800cd94 <_fstat_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4d07      	ldr	r5, [pc, #28]	@ (800cdb4 <_fstat_r+0x20>)
 800cd98:	2300      	movs	r3, #0
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	4608      	mov	r0, r1
 800cd9e:	4611      	mov	r1, r2
 800cda0:	602b      	str	r3, [r5, #0]
 800cda2:	f7f5 f859 	bl	8001e58 <_fstat>
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	d102      	bne.n	800cdb0 <_fstat_r+0x1c>
 800cdaa:	682b      	ldr	r3, [r5, #0]
 800cdac:	b103      	cbz	r3, 800cdb0 <_fstat_r+0x1c>
 800cdae:	6023      	str	r3, [r4, #0]
 800cdb0:	bd38      	pop	{r3, r4, r5, pc}
 800cdb2:	bf00      	nop
 800cdb4:	200021a4 	.word	0x200021a4

0800cdb8 <_isatty_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4d06      	ldr	r5, [pc, #24]	@ (800cdd4 <_isatty_r+0x1c>)
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4608      	mov	r0, r1
 800cdc2:	602b      	str	r3, [r5, #0]
 800cdc4:	f7f5 f858 	bl	8001e78 <_isatty>
 800cdc8:	1c43      	adds	r3, r0, #1
 800cdca:	d102      	bne.n	800cdd2 <_isatty_r+0x1a>
 800cdcc:	682b      	ldr	r3, [r5, #0]
 800cdce:	b103      	cbz	r3, 800cdd2 <_isatty_r+0x1a>
 800cdd0:	6023      	str	r3, [r4, #0]
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
 800cdd4:	200021a4 	.word	0x200021a4

0800cdd8 <cosf>:
 800cdd8:	ee10 3a10 	vmov	r3, s0
 800cddc:	b507      	push	{r0, r1, r2, lr}
 800cdde:	4a1e      	ldr	r2, [pc, #120]	@ (800ce58 <cosf+0x80>)
 800cde0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d806      	bhi.n	800cdf6 <cosf+0x1e>
 800cde8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800ce5c <cosf+0x84>
 800cdec:	b003      	add	sp, #12
 800cdee:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdf2:	f000 b87b 	b.w	800ceec <__kernel_cosf>
 800cdf6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cdfa:	d304      	bcc.n	800ce06 <cosf+0x2e>
 800cdfc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ce00:	b003      	add	sp, #12
 800ce02:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce06:	4668      	mov	r0, sp
 800ce08:	f000 f910 	bl	800d02c <__ieee754_rem_pio2f>
 800ce0c:	f000 0003 	and.w	r0, r0, #3
 800ce10:	2801      	cmp	r0, #1
 800ce12:	d009      	beq.n	800ce28 <cosf+0x50>
 800ce14:	2802      	cmp	r0, #2
 800ce16:	d010      	beq.n	800ce3a <cosf+0x62>
 800ce18:	b9b0      	cbnz	r0, 800ce48 <cosf+0x70>
 800ce1a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce1e:	ed9d 0a00 	vldr	s0, [sp]
 800ce22:	f000 f863 	bl	800ceec <__kernel_cosf>
 800ce26:	e7eb      	b.n	800ce00 <cosf+0x28>
 800ce28:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce2c:	ed9d 0a00 	vldr	s0, [sp]
 800ce30:	f000 f8b4 	bl	800cf9c <__kernel_sinf>
 800ce34:	eeb1 0a40 	vneg.f32	s0, s0
 800ce38:	e7e2      	b.n	800ce00 <cosf+0x28>
 800ce3a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce3e:	ed9d 0a00 	vldr	s0, [sp]
 800ce42:	f000 f853 	bl	800ceec <__kernel_cosf>
 800ce46:	e7f5      	b.n	800ce34 <cosf+0x5c>
 800ce48:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce4c:	ed9d 0a00 	vldr	s0, [sp]
 800ce50:	2001      	movs	r0, #1
 800ce52:	f000 f8a3 	bl	800cf9c <__kernel_sinf>
 800ce56:	e7d3      	b.n	800ce00 <cosf+0x28>
 800ce58:	3f490fd8 	.word	0x3f490fd8
 800ce5c:	00000000 	.word	0x00000000

0800ce60 <sinf>:
 800ce60:	ee10 3a10 	vmov	r3, s0
 800ce64:	b507      	push	{r0, r1, r2, lr}
 800ce66:	4a1f      	ldr	r2, [pc, #124]	@ (800cee4 <sinf+0x84>)
 800ce68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d807      	bhi.n	800ce80 <sinf+0x20>
 800ce70:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800cee8 <sinf+0x88>
 800ce74:	2000      	movs	r0, #0
 800ce76:	b003      	add	sp, #12
 800ce78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce7c:	f000 b88e 	b.w	800cf9c <__kernel_sinf>
 800ce80:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ce84:	d304      	bcc.n	800ce90 <sinf+0x30>
 800ce86:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ce8a:	b003      	add	sp, #12
 800ce8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce90:	4668      	mov	r0, sp
 800ce92:	f000 f8cb 	bl	800d02c <__ieee754_rem_pio2f>
 800ce96:	f000 0003 	and.w	r0, r0, #3
 800ce9a:	2801      	cmp	r0, #1
 800ce9c:	d00a      	beq.n	800ceb4 <sinf+0x54>
 800ce9e:	2802      	cmp	r0, #2
 800cea0:	d00f      	beq.n	800cec2 <sinf+0x62>
 800cea2:	b9c0      	cbnz	r0, 800ced6 <sinf+0x76>
 800cea4:	eddd 0a01 	vldr	s1, [sp, #4]
 800cea8:	ed9d 0a00 	vldr	s0, [sp]
 800ceac:	2001      	movs	r0, #1
 800ceae:	f000 f875 	bl	800cf9c <__kernel_sinf>
 800ceb2:	e7ea      	b.n	800ce8a <sinf+0x2a>
 800ceb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800ceb8:	ed9d 0a00 	vldr	s0, [sp]
 800cebc:	f000 f816 	bl	800ceec <__kernel_cosf>
 800cec0:	e7e3      	b.n	800ce8a <sinf+0x2a>
 800cec2:	eddd 0a01 	vldr	s1, [sp, #4]
 800cec6:	ed9d 0a00 	vldr	s0, [sp]
 800ceca:	2001      	movs	r0, #1
 800cecc:	f000 f866 	bl	800cf9c <__kernel_sinf>
 800ced0:	eeb1 0a40 	vneg.f32	s0, s0
 800ced4:	e7d9      	b.n	800ce8a <sinf+0x2a>
 800ced6:	eddd 0a01 	vldr	s1, [sp, #4]
 800ceda:	ed9d 0a00 	vldr	s0, [sp]
 800cede:	f000 f805 	bl	800ceec <__kernel_cosf>
 800cee2:	e7f5      	b.n	800ced0 <sinf+0x70>
 800cee4:	3f490fd8 	.word	0x3f490fd8
 800cee8:	00000000 	.word	0x00000000

0800ceec <__kernel_cosf>:
 800ceec:	ee10 3a10 	vmov	r3, s0
 800cef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cef4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cef8:	eef0 6a40 	vmov.f32	s13, s0
 800cefc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cf00:	d204      	bcs.n	800cf0c <__kernel_cosf+0x20>
 800cf02:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800cf06:	ee17 2a90 	vmov	r2, s15
 800cf0a:	b342      	cbz	r2, 800cf5e <__kernel_cosf+0x72>
 800cf0c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cf10:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800cf7c <__kernel_cosf+0x90>
 800cf14:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800cf80 <__kernel_cosf+0x94>
 800cf18:	4a1a      	ldr	r2, [pc, #104]	@ (800cf84 <__kernel_cosf+0x98>)
 800cf1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cf88 <__kernel_cosf+0x9c>
 800cf24:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cf28:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800cf8c <__kernel_cosf+0xa0>
 800cf2c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cf30:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800cf90 <__kernel_cosf+0xa4>
 800cf34:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cf38:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800cf94 <__kernel_cosf+0xa8>
 800cf3c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cf40:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800cf44:	ee26 6a07 	vmul.f32	s12, s12, s14
 800cf48:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cf4c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800cf50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf54:	d804      	bhi.n	800cf60 <__kernel_cosf+0x74>
 800cf56:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cf5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf5e:	4770      	bx	lr
 800cf60:	4a0d      	ldr	r2, [pc, #52]	@ (800cf98 <__kernel_cosf+0xac>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bf9a      	itte	ls
 800cf66:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800cf6a:	ee07 3a10 	vmovls	s14, r3
 800cf6e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800cf72:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cf76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf7a:	e7ec      	b.n	800cf56 <__kernel_cosf+0x6a>
 800cf7c:	ad47d74e 	.word	0xad47d74e
 800cf80:	310f74f6 	.word	0x310f74f6
 800cf84:	3e999999 	.word	0x3e999999
 800cf88:	b493f27c 	.word	0xb493f27c
 800cf8c:	37d00d01 	.word	0x37d00d01
 800cf90:	bab60b61 	.word	0xbab60b61
 800cf94:	3d2aaaab 	.word	0x3d2aaaab
 800cf98:	3f480000 	.word	0x3f480000

0800cf9c <__kernel_sinf>:
 800cf9c:	ee10 3a10 	vmov	r3, s0
 800cfa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cfa4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cfa8:	d204      	bcs.n	800cfb4 <__kernel_sinf+0x18>
 800cfaa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cfae:	ee17 3a90 	vmov	r3, s15
 800cfb2:	b35b      	cbz	r3, 800d00c <__kernel_sinf+0x70>
 800cfb4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cfb8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d010 <__kernel_sinf+0x74>
 800cfbc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d014 <__kernel_sinf+0x78>
 800cfc0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cfc4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d018 <__kernel_sinf+0x7c>
 800cfc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cfcc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d01c <__kernel_sinf+0x80>
 800cfd0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cfd4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d020 <__kernel_sinf+0x84>
 800cfd8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cfdc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cfe0:	b930      	cbnz	r0, 800cff0 <__kernel_sinf+0x54>
 800cfe2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d024 <__kernel_sinf+0x88>
 800cfe6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cfea:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cfee:	4770      	bx	lr
 800cff0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cff4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800cff8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cffc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d000:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d028 <__kernel_sinf+0x8c>
 800d004:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d008:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	2f2ec9d3 	.word	0x2f2ec9d3
 800d014:	b2d72f34 	.word	0xb2d72f34
 800d018:	3638ef1b 	.word	0x3638ef1b
 800d01c:	b9500d01 	.word	0xb9500d01
 800d020:	3c088889 	.word	0x3c088889
 800d024:	be2aaaab 	.word	0xbe2aaaab
 800d028:	3e2aaaab 	.word	0x3e2aaaab

0800d02c <__ieee754_rem_pio2f>:
 800d02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02e:	ee10 6a10 	vmov	r6, s0
 800d032:	4b88      	ldr	r3, [pc, #544]	@ (800d254 <__ieee754_rem_pio2f+0x228>)
 800d034:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d038:	429d      	cmp	r5, r3
 800d03a:	b087      	sub	sp, #28
 800d03c:	4604      	mov	r4, r0
 800d03e:	d805      	bhi.n	800d04c <__ieee754_rem_pio2f+0x20>
 800d040:	2300      	movs	r3, #0
 800d042:	ed80 0a00 	vstr	s0, [r0]
 800d046:	6043      	str	r3, [r0, #4]
 800d048:	2000      	movs	r0, #0
 800d04a:	e022      	b.n	800d092 <__ieee754_rem_pio2f+0x66>
 800d04c:	4b82      	ldr	r3, [pc, #520]	@ (800d258 <__ieee754_rem_pio2f+0x22c>)
 800d04e:	429d      	cmp	r5, r3
 800d050:	d83a      	bhi.n	800d0c8 <__ieee754_rem_pio2f+0x9c>
 800d052:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d056:	2e00      	cmp	r6, #0
 800d058:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d25c <__ieee754_rem_pio2f+0x230>
 800d05c:	4a80      	ldr	r2, [pc, #512]	@ (800d260 <__ieee754_rem_pio2f+0x234>)
 800d05e:	f023 030f 	bic.w	r3, r3, #15
 800d062:	dd18      	ble.n	800d096 <__ieee754_rem_pio2f+0x6a>
 800d064:	4293      	cmp	r3, r2
 800d066:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d06a:	bf09      	itett	eq
 800d06c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d264 <__ieee754_rem_pio2f+0x238>
 800d070:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d268 <__ieee754_rem_pio2f+0x23c>
 800d074:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d26c <__ieee754_rem_pio2f+0x240>
 800d078:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d07c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d080:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d084:	ed80 7a00 	vstr	s14, [r0]
 800d088:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d08c:	edc0 7a01 	vstr	s15, [r0, #4]
 800d090:	2001      	movs	r0, #1
 800d092:	b007      	add	sp, #28
 800d094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d096:	4293      	cmp	r3, r2
 800d098:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d09c:	bf09      	itett	eq
 800d09e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d264 <__ieee754_rem_pio2f+0x238>
 800d0a2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d268 <__ieee754_rem_pio2f+0x23c>
 800d0a6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d26c <__ieee754_rem_pio2f+0x240>
 800d0aa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d0ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d0b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0b6:	ed80 7a00 	vstr	s14, [r0]
 800d0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0be:	edc0 7a01 	vstr	s15, [r0, #4]
 800d0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c6:	e7e4      	b.n	800d092 <__ieee754_rem_pio2f+0x66>
 800d0c8:	4b69      	ldr	r3, [pc, #420]	@ (800d270 <__ieee754_rem_pio2f+0x244>)
 800d0ca:	429d      	cmp	r5, r3
 800d0cc:	d873      	bhi.n	800d1b6 <__ieee754_rem_pio2f+0x18a>
 800d0ce:	f000 f8dd 	bl	800d28c <fabsf>
 800d0d2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d274 <__ieee754_rem_pio2f+0x248>
 800d0d6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d0da:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d0de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d0e6:	ee17 0a90 	vmov	r0, s15
 800d0ea:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d25c <__ieee754_rem_pio2f+0x230>
 800d0ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d0f2:	281f      	cmp	r0, #31
 800d0f4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d268 <__ieee754_rem_pio2f+0x23c>
 800d0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fc:	eeb1 6a47 	vneg.f32	s12, s14
 800d100:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d104:	ee16 1a90 	vmov	r1, s13
 800d108:	dc09      	bgt.n	800d11e <__ieee754_rem_pio2f+0xf2>
 800d10a:	4a5b      	ldr	r2, [pc, #364]	@ (800d278 <__ieee754_rem_pio2f+0x24c>)
 800d10c:	1e47      	subs	r7, r0, #1
 800d10e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d112:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d107      	bne.n	800d12e <__ieee754_rem_pio2f+0x102>
 800d11e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d122:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d126:	2a08      	cmp	r2, #8
 800d128:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d12c:	dc14      	bgt.n	800d158 <__ieee754_rem_pio2f+0x12c>
 800d12e:	6021      	str	r1, [r4, #0]
 800d130:	ed94 7a00 	vldr	s14, [r4]
 800d134:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d138:	2e00      	cmp	r6, #0
 800d13a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d13e:	ed84 0a01 	vstr	s0, [r4, #4]
 800d142:	daa6      	bge.n	800d092 <__ieee754_rem_pio2f+0x66>
 800d144:	eeb1 7a47 	vneg.f32	s14, s14
 800d148:	eeb1 0a40 	vneg.f32	s0, s0
 800d14c:	ed84 7a00 	vstr	s14, [r4]
 800d150:	ed84 0a01 	vstr	s0, [r4, #4]
 800d154:	4240      	negs	r0, r0
 800d156:	e79c      	b.n	800d092 <__ieee754_rem_pio2f+0x66>
 800d158:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d264 <__ieee754_rem_pio2f+0x238>
 800d15c:	eef0 6a40 	vmov.f32	s13, s0
 800d160:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d164:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d168:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d16c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d26c <__ieee754_rem_pio2f+0x240>
 800d170:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d174:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d178:	ee15 2a90 	vmov	r2, s11
 800d17c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d180:	1a5b      	subs	r3, r3, r1
 800d182:	2b19      	cmp	r3, #25
 800d184:	dc04      	bgt.n	800d190 <__ieee754_rem_pio2f+0x164>
 800d186:	edc4 5a00 	vstr	s11, [r4]
 800d18a:	eeb0 0a66 	vmov.f32	s0, s13
 800d18e:	e7cf      	b.n	800d130 <__ieee754_rem_pio2f+0x104>
 800d190:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d27c <__ieee754_rem_pio2f+0x250>
 800d194:	eeb0 0a66 	vmov.f32	s0, s13
 800d198:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d19c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d1a0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d280 <__ieee754_rem_pio2f+0x254>
 800d1a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d1a8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d1ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d1b0:	ed84 7a00 	vstr	s14, [r4]
 800d1b4:	e7bc      	b.n	800d130 <__ieee754_rem_pio2f+0x104>
 800d1b6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d1ba:	d306      	bcc.n	800d1ca <__ieee754_rem_pio2f+0x19e>
 800d1bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d1c0:	edc0 7a01 	vstr	s15, [r0, #4]
 800d1c4:	edc0 7a00 	vstr	s15, [r0]
 800d1c8:	e73e      	b.n	800d048 <__ieee754_rem_pio2f+0x1c>
 800d1ca:	15ea      	asrs	r2, r5, #23
 800d1cc:	3a86      	subs	r2, #134	@ 0x86
 800d1ce:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d1da:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d284 <__ieee754_rem_pio2f+0x258>
 800d1de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d1e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d1ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d1ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d1f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d1f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1fa:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d1fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d202:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20a:	edcd 7a05 	vstr	s15, [sp, #20]
 800d20e:	d11e      	bne.n	800d24e <__ieee754_rem_pio2f+0x222>
 800d210:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d218:	bf0c      	ite	eq
 800d21a:	2301      	moveq	r3, #1
 800d21c:	2302      	movne	r3, #2
 800d21e:	491a      	ldr	r1, [pc, #104]	@ (800d288 <__ieee754_rem_pio2f+0x25c>)
 800d220:	9101      	str	r1, [sp, #4]
 800d222:	2102      	movs	r1, #2
 800d224:	9100      	str	r1, [sp, #0]
 800d226:	a803      	add	r0, sp, #12
 800d228:	4621      	mov	r1, r4
 800d22a:	f000 f837 	bl	800d29c <__kernel_rem_pio2f>
 800d22e:	2e00      	cmp	r6, #0
 800d230:	f6bf af2f 	bge.w	800d092 <__ieee754_rem_pio2f+0x66>
 800d234:	edd4 7a00 	vldr	s15, [r4]
 800d238:	eef1 7a67 	vneg.f32	s15, s15
 800d23c:	edc4 7a00 	vstr	s15, [r4]
 800d240:	edd4 7a01 	vldr	s15, [r4, #4]
 800d244:	eef1 7a67 	vneg.f32	s15, s15
 800d248:	edc4 7a01 	vstr	s15, [r4, #4]
 800d24c:	e782      	b.n	800d154 <__ieee754_rem_pio2f+0x128>
 800d24e:	2303      	movs	r3, #3
 800d250:	e7e5      	b.n	800d21e <__ieee754_rem_pio2f+0x1f2>
 800d252:	bf00      	nop
 800d254:	3f490fd8 	.word	0x3f490fd8
 800d258:	4016cbe3 	.word	0x4016cbe3
 800d25c:	3fc90f80 	.word	0x3fc90f80
 800d260:	3fc90fd0 	.word	0x3fc90fd0
 800d264:	37354400 	.word	0x37354400
 800d268:	37354443 	.word	0x37354443
 800d26c:	2e85a308 	.word	0x2e85a308
 800d270:	43490f80 	.word	0x43490f80
 800d274:	3f22f984 	.word	0x3f22f984
 800d278:	0800dcd8 	.word	0x0800dcd8
 800d27c:	2e85a300 	.word	0x2e85a300
 800d280:	248d3132 	.word	0x248d3132
 800d284:	43800000 	.word	0x43800000
 800d288:	0800dd58 	.word	0x0800dd58

0800d28c <fabsf>:
 800d28c:	ee10 3a10 	vmov	r3, s0
 800d290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d294:	ee00 3a10 	vmov	s0, r3
 800d298:	4770      	bx	lr
	...

0800d29c <__kernel_rem_pio2f>:
 800d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	ed2d 8b04 	vpush	{d8-d9}
 800d2a4:	b0d9      	sub	sp, #356	@ 0x164
 800d2a6:	4690      	mov	r8, r2
 800d2a8:	9001      	str	r0, [sp, #4]
 800d2aa:	4ab9      	ldr	r2, [pc, #740]	@ (800d590 <__kernel_rem_pio2f+0x2f4>)
 800d2ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d2ae:	f118 0f04 	cmn.w	r8, #4
 800d2b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d2b6:	460f      	mov	r7, r1
 800d2b8:	f103 3bff 	add.w	fp, r3, #4294967295
 800d2bc:	db27      	blt.n	800d30e <__kernel_rem_pio2f+0x72>
 800d2be:	f1b8 0203 	subs.w	r2, r8, #3
 800d2c2:	bf48      	it	mi
 800d2c4:	f108 0204 	addmi.w	r2, r8, #4
 800d2c8:	10d2      	asrs	r2, r2, #3
 800d2ca:	1c55      	adds	r5, r2, #1
 800d2cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d2ce:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d5a0 <__kernel_rem_pio2f+0x304>
 800d2d2:	00e8      	lsls	r0, r5, #3
 800d2d4:	eba2 060b 	sub.w	r6, r2, fp
 800d2d8:	9002      	str	r0, [sp, #8]
 800d2da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d2de:	eb0a 0c0b 	add.w	ip, sl, fp
 800d2e2:	ac1c      	add	r4, sp, #112	@ 0x70
 800d2e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	4560      	cmp	r0, ip
 800d2ec:	dd11      	ble.n	800d312 <__kernel_rem_pio2f+0x76>
 800d2ee:	a91c      	add	r1, sp, #112	@ 0x70
 800d2f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d2f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d2f8:	f04f 0c00 	mov.w	ip, #0
 800d2fc:	45d4      	cmp	ip, sl
 800d2fe:	dc27      	bgt.n	800d350 <__kernel_rem_pio2f+0xb4>
 800d300:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d304:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d5a0 <__kernel_rem_pio2f+0x304>
 800d308:	4606      	mov	r6, r0
 800d30a:	2400      	movs	r4, #0
 800d30c:	e016      	b.n	800d33c <__kernel_rem_pio2f+0xa0>
 800d30e:	2200      	movs	r2, #0
 800d310:	e7db      	b.n	800d2ca <__kernel_rem_pio2f+0x2e>
 800d312:	42c6      	cmn	r6, r0
 800d314:	bf5d      	ittte	pl
 800d316:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d31a:	ee07 1a90 	vmovpl	s15, r1
 800d31e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d322:	eef0 7a47 	vmovmi.f32	s15, s14
 800d326:	ece4 7a01 	vstmia	r4!, {s15}
 800d32a:	3001      	adds	r0, #1
 800d32c:	e7dd      	b.n	800d2ea <__kernel_rem_pio2f+0x4e>
 800d32e:	ecfe 6a01 	vldmia	lr!, {s13}
 800d332:	ed96 7a00 	vldr	s14, [r6]
 800d336:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d33a:	3401      	adds	r4, #1
 800d33c:	455c      	cmp	r4, fp
 800d33e:	f1a6 0604 	sub.w	r6, r6, #4
 800d342:	ddf4      	ble.n	800d32e <__kernel_rem_pio2f+0x92>
 800d344:	ece9 7a01 	vstmia	r9!, {s15}
 800d348:	f10c 0c01 	add.w	ip, ip, #1
 800d34c:	3004      	adds	r0, #4
 800d34e:	e7d5      	b.n	800d2fc <__kernel_rem_pio2f+0x60>
 800d350:	a908      	add	r1, sp, #32
 800d352:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d356:	9104      	str	r1, [sp, #16]
 800d358:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d35a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d59c <__kernel_rem_pio2f+0x300>
 800d35e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d598 <__kernel_rem_pio2f+0x2fc>
 800d362:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d366:	9203      	str	r2, [sp, #12]
 800d368:	4654      	mov	r4, sl
 800d36a:	00a2      	lsls	r2, r4, #2
 800d36c:	9205      	str	r2, [sp, #20]
 800d36e:	aa58      	add	r2, sp, #352	@ 0x160
 800d370:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d374:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d378:	a944      	add	r1, sp, #272	@ 0x110
 800d37a:	aa08      	add	r2, sp, #32
 800d37c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d380:	4694      	mov	ip, r2
 800d382:	4626      	mov	r6, r4
 800d384:	2e00      	cmp	r6, #0
 800d386:	f1a0 0004 	sub.w	r0, r0, #4
 800d38a:	dc4c      	bgt.n	800d426 <__kernel_rem_pio2f+0x18a>
 800d38c:	4628      	mov	r0, r5
 800d38e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d392:	f000 f9f5 	bl	800d780 <scalbnf>
 800d396:	eeb0 8a40 	vmov.f32	s16, s0
 800d39a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d39e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d3a2:	f000 fa53 	bl	800d84c <floorf>
 800d3a6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d3aa:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d3ae:	2d00      	cmp	r5, #0
 800d3b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d3b8:	ee17 9a90 	vmov	r9, s15
 800d3bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3c0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d3c4:	dd41      	ble.n	800d44a <__kernel_rem_pio2f+0x1ae>
 800d3c6:	f104 3cff 	add.w	ip, r4, #4294967295
 800d3ca:	a908      	add	r1, sp, #32
 800d3cc:	f1c5 0e08 	rsb	lr, r5, #8
 800d3d0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d3d4:	fa46 f00e 	asr.w	r0, r6, lr
 800d3d8:	4481      	add	r9, r0
 800d3da:	fa00 f00e 	lsl.w	r0, r0, lr
 800d3de:	1a36      	subs	r6, r6, r0
 800d3e0:	f1c5 0007 	rsb	r0, r5, #7
 800d3e4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d3e8:	4106      	asrs	r6, r0
 800d3ea:	2e00      	cmp	r6, #0
 800d3ec:	dd3c      	ble.n	800d468 <__kernel_rem_pio2f+0x1cc>
 800d3ee:	f04f 0e00 	mov.w	lr, #0
 800d3f2:	f109 0901 	add.w	r9, r9, #1
 800d3f6:	4670      	mov	r0, lr
 800d3f8:	4574      	cmp	r4, lr
 800d3fa:	dc68      	bgt.n	800d4ce <__kernel_rem_pio2f+0x232>
 800d3fc:	2d00      	cmp	r5, #0
 800d3fe:	dd03      	ble.n	800d408 <__kernel_rem_pio2f+0x16c>
 800d400:	2d01      	cmp	r5, #1
 800d402:	d074      	beq.n	800d4ee <__kernel_rem_pio2f+0x252>
 800d404:	2d02      	cmp	r5, #2
 800d406:	d07d      	beq.n	800d504 <__kernel_rem_pio2f+0x268>
 800d408:	2e02      	cmp	r6, #2
 800d40a:	d12d      	bne.n	800d468 <__kernel_rem_pio2f+0x1cc>
 800d40c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d410:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d414:	b340      	cbz	r0, 800d468 <__kernel_rem_pio2f+0x1cc>
 800d416:	4628      	mov	r0, r5
 800d418:	9306      	str	r3, [sp, #24]
 800d41a:	f000 f9b1 	bl	800d780 <scalbnf>
 800d41e:	9b06      	ldr	r3, [sp, #24]
 800d420:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d424:	e020      	b.n	800d468 <__kernel_rem_pio2f+0x1cc>
 800d426:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d42a:	3e01      	subs	r6, #1
 800d42c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d434:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d438:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d43c:	ecac 0a01 	vstmia	ip!, {s0}
 800d440:	ed90 0a00 	vldr	s0, [r0]
 800d444:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d448:	e79c      	b.n	800d384 <__kernel_rem_pio2f+0xe8>
 800d44a:	d105      	bne.n	800d458 <__kernel_rem_pio2f+0x1bc>
 800d44c:	1e60      	subs	r0, r4, #1
 800d44e:	a908      	add	r1, sp, #32
 800d450:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d454:	11f6      	asrs	r6, r6, #7
 800d456:	e7c8      	b.n	800d3ea <__kernel_rem_pio2f+0x14e>
 800d458:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d45c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d464:	da31      	bge.n	800d4ca <__kernel_rem_pio2f+0x22e>
 800d466:	2600      	movs	r6, #0
 800d468:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d470:	f040 8098 	bne.w	800d5a4 <__kernel_rem_pio2f+0x308>
 800d474:	1e60      	subs	r0, r4, #1
 800d476:	2200      	movs	r2, #0
 800d478:	4550      	cmp	r0, sl
 800d47a:	da4b      	bge.n	800d514 <__kernel_rem_pio2f+0x278>
 800d47c:	2a00      	cmp	r2, #0
 800d47e:	d065      	beq.n	800d54c <__kernel_rem_pio2f+0x2b0>
 800d480:	3c01      	subs	r4, #1
 800d482:	ab08      	add	r3, sp, #32
 800d484:	3d08      	subs	r5, #8
 800d486:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d0f8      	beq.n	800d480 <__kernel_rem_pio2f+0x1e4>
 800d48e:	4628      	mov	r0, r5
 800d490:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d494:	f000 f974 	bl	800d780 <scalbnf>
 800d498:	1c63      	adds	r3, r4, #1
 800d49a:	aa44      	add	r2, sp, #272	@ 0x110
 800d49c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d59c <__kernel_rem_pio2f+0x300>
 800d4a0:	0099      	lsls	r1, r3, #2
 800d4a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d4a6:	4623      	mov	r3, r4
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f280 80a9 	bge.w	800d600 <__kernel_rem_pio2f+0x364>
 800d4ae:	4623      	mov	r3, r4
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f2c0 80c7 	blt.w	800d644 <__kernel_rem_pio2f+0x3a8>
 800d4b6:	aa44      	add	r2, sp, #272	@ 0x110
 800d4b8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d4bc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d594 <__kernel_rem_pio2f+0x2f8>
 800d4c0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d5a0 <__kernel_rem_pio2f+0x304>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	1ae2      	subs	r2, r4, r3
 800d4c8:	e0b1      	b.n	800d62e <__kernel_rem_pio2f+0x392>
 800d4ca:	2602      	movs	r6, #2
 800d4cc:	e78f      	b.n	800d3ee <__kernel_rem_pio2f+0x152>
 800d4ce:	f852 1b04 	ldr.w	r1, [r2], #4
 800d4d2:	b948      	cbnz	r0, 800d4e8 <__kernel_rem_pio2f+0x24c>
 800d4d4:	b121      	cbz	r1, 800d4e0 <__kernel_rem_pio2f+0x244>
 800d4d6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d4da:	f842 1c04 	str.w	r1, [r2, #-4]
 800d4de:	2101      	movs	r1, #1
 800d4e0:	f10e 0e01 	add.w	lr, lr, #1
 800d4e4:	4608      	mov	r0, r1
 800d4e6:	e787      	b.n	800d3f8 <__kernel_rem_pio2f+0x15c>
 800d4e8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d4ec:	e7f5      	b.n	800d4da <__kernel_rem_pio2f+0x23e>
 800d4ee:	f104 3cff 	add.w	ip, r4, #4294967295
 800d4f2:	aa08      	add	r2, sp, #32
 800d4f4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d4f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d4fc:	a908      	add	r1, sp, #32
 800d4fe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d502:	e781      	b.n	800d408 <__kernel_rem_pio2f+0x16c>
 800d504:	f104 3cff 	add.w	ip, r4, #4294967295
 800d508:	aa08      	add	r2, sp, #32
 800d50a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d50e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d512:	e7f3      	b.n	800d4fc <__kernel_rem_pio2f+0x260>
 800d514:	a908      	add	r1, sp, #32
 800d516:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d51a:	3801      	subs	r0, #1
 800d51c:	430a      	orrs	r2, r1
 800d51e:	e7ab      	b.n	800d478 <__kernel_rem_pio2f+0x1dc>
 800d520:	3201      	adds	r2, #1
 800d522:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d526:	2e00      	cmp	r6, #0
 800d528:	d0fa      	beq.n	800d520 <__kernel_rem_pio2f+0x284>
 800d52a:	9905      	ldr	r1, [sp, #20]
 800d52c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d530:	eb0d 0001 	add.w	r0, sp, r1
 800d534:	18e6      	adds	r6, r4, r3
 800d536:	a91c      	add	r1, sp, #112	@ 0x70
 800d538:	f104 0c01 	add.w	ip, r4, #1
 800d53c:	384c      	subs	r0, #76	@ 0x4c
 800d53e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d542:	4422      	add	r2, r4
 800d544:	4562      	cmp	r2, ip
 800d546:	da04      	bge.n	800d552 <__kernel_rem_pio2f+0x2b6>
 800d548:	4614      	mov	r4, r2
 800d54a:	e70e      	b.n	800d36a <__kernel_rem_pio2f+0xce>
 800d54c:	9804      	ldr	r0, [sp, #16]
 800d54e:	2201      	movs	r2, #1
 800d550:	e7e7      	b.n	800d522 <__kernel_rem_pio2f+0x286>
 800d552:	9903      	ldr	r1, [sp, #12]
 800d554:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d558:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d55c:	9105      	str	r1, [sp, #20]
 800d55e:	ee07 1a90 	vmov	s15, r1
 800d562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d566:	2400      	movs	r4, #0
 800d568:	ece6 7a01 	vstmia	r6!, {s15}
 800d56c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d5a0 <__kernel_rem_pio2f+0x304>
 800d570:	46b1      	mov	r9, r6
 800d572:	455c      	cmp	r4, fp
 800d574:	dd04      	ble.n	800d580 <__kernel_rem_pio2f+0x2e4>
 800d576:	ece0 7a01 	vstmia	r0!, {s15}
 800d57a:	f10c 0c01 	add.w	ip, ip, #1
 800d57e:	e7e1      	b.n	800d544 <__kernel_rem_pio2f+0x2a8>
 800d580:	ecfe 6a01 	vldmia	lr!, {s13}
 800d584:	ed39 7a01 	vldmdb	r9!, {s14}
 800d588:	3401      	adds	r4, #1
 800d58a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d58e:	e7f0      	b.n	800d572 <__kernel_rem_pio2f+0x2d6>
 800d590:	0800e09c 	.word	0x0800e09c
 800d594:	0800e070 	.word	0x0800e070
 800d598:	43800000 	.word	0x43800000
 800d59c:	3b800000 	.word	0x3b800000
 800d5a0:	00000000 	.word	0x00000000
 800d5a4:	9b02      	ldr	r3, [sp, #8]
 800d5a6:	eeb0 0a48 	vmov.f32	s0, s16
 800d5aa:	eba3 0008 	sub.w	r0, r3, r8
 800d5ae:	f000 f8e7 	bl	800d780 <scalbnf>
 800d5b2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d598 <__kernel_rem_pio2f+0x2fc>
 800d5b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5be:	db19      	blt.n	800d5f4 <__kernel_rem_pio2f+0x358>
 800d5c0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d59c <__kernel_rem_pio2f+0x300>
 800d5c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d5c8:	aa08      	add	r2, sp, #32
 800d5ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5ce:	3508      	adds	r5, #8
 800d5d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d5d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d5e0:	ee10 3a10 	vmov	r3, s0
 800d5e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d5e8:	ee17 3a90 	vmov	r3, s15
 800d5ec:	3401      	adds	r4, #1
 800d5ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d5f2:	e74c      	b.n	800d48e <__kernel_rem_pio2f+0x1f2>
 800d5f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d5f8:	aa08      	add	r2, sp, #32
 800d5fa:	ee10 3a10 	vmov	r3, s0
 800d5fe:	e7f6      	b.n	800d5ee <__kernel_rem_pio2f+0x352>
 800d600:	a808      	add	r0, sp, #32
 800d602:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d606:	9001      	str	r0, [sp, #4]
 800d608:	ee07 0a90 	vmov	s15, r0
 800d60c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d610:	3b01      	subs	r3, #1
 800d612:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d616:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d61a:	ed62 7a01 	vstmdb	r2!, {s15}
 800d61e:	e743      	b.n	800d4a8 <__kernel_rem_pio2f+0x20c>
 800d620:	ecfc 6a01 	vldmia	ip!, {s13}
 800d624:	ecb5 7a01 	vldmia	r5!, {s14}
 800d628:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d62c:	3001      	adds	r0, #1
 800d62e:	4550      	cmp	r0, sl
 800d630:	dc01      	bgt.n	800d636 <__kernel_rem_pio2f+0x39a>
 800d632:	4282      	cmp	r2, r0
 800d634:	daf4      	bge.n	800d620 <__kernel_rem_pio2f+0x384>
 800d636:	a858      	add	r0, sp, #352	@ 0x160
 800d638:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d63c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d640:	3b01      	subs	r3, #1
 800d642:	e735      	b.n	800d4b0 <__kernel_rem_pio2f+0x214>
 800d644:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d646:	2b02      	cmp	r3, #2
 800d648:	dc09      	bgt.n	800d65e <__kernel_rem_pio2f+0x3c2>
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	dc2b      	bgt.n	800d6a6 <__kernel_rem_pio2f+0x40a>
 800d64e:	d044      	beq.n	800d6da <__kernel_rem_pio2f+0x43e>
 800d650:	f009 0007 	and.w	r0, r9, #7
 800d654:	b059      	add	sp, #356	@ 0x164
 800d656:	ecbd 8b04 	vpop	{d8-d9}
 800d65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d660:	2b03      	cmp	r3, #3
 800d662:	d1f5      	bne.n	800d650 <__kernel_rem_pio2f+0x3b4>
 800d664:	aa30      	add	r2, sp, #192	@ 0xc0
 800d666:	1f0b      	subs	r3, r1, #4
 800d668:	4413      	add	r3, r2
 800d66a:	461a      	mov	r2, r3
 800d66c:	4620      	mov	r0, r4
 800d66e:	2800      	cmp	r0, #0
 800d670:	f1a2 0204 	sub.w	r2, r2, #4
 800d674:	dc52      	bgt.n	800d71c <__kernel_rem_pio2f+0x480>
 800d676:	4622      	mov	r2, r4
 800d678:	2a01      	cmp	r2, #1
 800d67a:	f1a3 0304 	sub.w	r3, r3, #4
 800d67e:	dc5d      	bgt.n	800d73c <__kernel_rem_pio2f+0x4a0>
 800d680:	ab30      	add	r3, sp, #192	@ 0xc0
 800d682:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d5a0 <__kernel_rem_pio2f+0x304>
 800d686:	440b      	add	r3, r1
 800d688:	2c01      	cmp	r4, #1
 800d68a:	dc67      	bgt.n	800d75c <__kernel_rem_pio2f+0x4c0>
 800d68c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d690:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d694:	2e00      	cmp	r6, #0
 800d696:	d167      	bne.n	800d768 <__kernel_rem_pio2f+0x4cc>
 800d698:	edc7 6a00 	vstr	s13, [r7]
 800d69c:	ed87 7a01 	vstr	s14, [r7, #4]
 800d6a0:	edc7 7a02 	vstr	s15, [r7, #8]
 800d6a4:	e7d4      	b.n	800d650 <__kernel_rem_pio2f+0x3b4>
 800d6a6:	ab30      	add	r3, sp, #192	@ 0xc0
 800d6a8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d5a0 <__kernel_rem_pio2f+0x304>
 800d6ac:	440b      	add	r3, r1
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	2a00      	cmp	r2, #0
 800d6b2:	da24      	bge.n	800d6fe <__kernel_rem_pio2f+0x462>
 800d6b4:	b34e      	cbz	r6, 800d70a <__kernel_rem_pio2f+0x46e>
 800d6b6:	eef1 7a47 	vneg.f32	s15, s14
 800d6ba:	edc7 7a00 	vstr	s15, [r7]
 800d6be:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d6c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6c6:	aa31      	add	r2, sp, #196	@ 0xc4
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	429c      	cmp	r4, r3
 800d6cc:	da20      	bge.n	800d710 <__kernel_rem_pio2f+0x474>
 800d6ce:	b10e      	cbz	r6, 800d6d4 <__kernel_rem_pio2f+0x438>
 800d6d0:	eef1 7a67 	vneg.f32	s15, s15
 800d6d4:	edc7 7a01 	vstr	s15, [r7, #4]
 800d6d8:	e7ba      	b.n	800d650 <__kernel_rem_pio2f+0x3b4>
 800d6da:	ab30      	add	r3, sp, #192	@ 0xc0
 800d6dc:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d5a0 <__kernel_rem_pio2f+0x304>
 800d6e0:	440b      	add	r3, r1
 800d6e2:	2c00      	cmp	r4, #0
 800d6e4:	da05      	bge.n	800d6f2 <__kernel_rem_pio2f+0x456>
 800d6e6:	b10e      	cbz	r6, 800d6ec <__kernel_rem_pio2f+0x450>
 800d6e8:	eef1 7a67 	vneg.f32	s15, s15
 800d6ec:	edc7 7a00 	vstr	s15, [r7]
 800d6f0:	e7ae      	b.n	800d650 <__kernel_rem_pio2f+0x3b4>
 800d6f2:	ed33 7a01 	vldmdb	r3!, {s14}
 800d6f6:	3c01      	subs	r4, #1
 800d6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6fc:	e7f1      	b.n	800d6e2 <__kernel_rem_pio2f+0x446>
 800d6fe:	ed73 7a01 	vldmdb	r3!, {s15}
 800d702:	3a01      	subs	r2, #1
 800d704:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d708:	e7d2      	b.n	800d6b0 <__kernel_rem_pio2f+0x414>
 800d70a:	eef0 7a47 	vmov.f32	s15, s14
 800d70e:	e7d4      	b.n	800d6ba <__kernel_rem_pio2f+0x41e>
 800d710:	ecb2 7a01 	vldmia	r2!, {s14}
 800d714:	3301      	adds	r3, #1
 800d716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d71a:	e7d6      	b.n	800d6ca <__kernel_rem_pio2f+0x42e>
 800d71c:	edd2 7a00 	vldr	s15, [r2]
 800d720:	edd2 6a01 	vldr	s13, [r2, #4]
 800d724:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d728:	3801      	subs	r0, #1
 800d72a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d72e:	ed82 7a00 	vstr	s14, [r2]
 800d732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d736:	edc2 7a01 	vstr	s15, [r2, #4]
 800d73a:	e798      	b.n	800d66e <__kernel_rem_pio2f+0x3d2>
 800d73c:	edd3 7a00 	vldr	s15, [r3]
 800d740:	edd3 6a01 	vldr	s13, [r3, #4]
 800d744:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d748:	3a01      	subs	r2, #1
 800d74a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d74e:	ed83 7a00 	vstr	s14, [r3]
 800d752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d756:	edc3 7a01 	vstr	s15, [r3, #4]
 800d75a:	e78d      	b.n	800d678 <__kernel_rem_pio2f+0x3dc>
 800d75c:	ed33 7a01 	vldmdb	r3!, {s14}
 800d760:	3c01      	subs	r4, #1
 800d762:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d766:	e78f      	b.n	800d688 <__kernel_rem_pio2f+0x3ec>
 800d768:	eef1 6a66 	vneg.f32	s13, s13
 800d76c:	eeb1 7a47 	vneg.f32	s14, s14
 800d770:	edc7 6a00 	vstr	s13, [r7]
 800d774:	ed87 7a01 	vstr	s14, [r7, #4]
 800d778:	eef1 7a67 	vneg.f32	s15, s15
 800d77c:	e790      	b.n	800d6a0 <__kernel_rem_pio2f+0x404>
 800d77e:	bf00      	nop

0800d780 <scalbnf>:
 800d780:	ee10 3a10 	vmov	r3, s0
 800d784:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d788:	d02b      	beq.n	800d7e2 <scalbnf+0x62>
 800d78a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d78e:	d302      	bcc.n	800d796 <scalbnf+0x16>
 800d790:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d794:	4770      	bx	lr
 800d796:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d79a:	d123      	bne.n	800d7e4 <scalbnf+0x64>
 800d79c:	4b24      	ldr	r3, [pc, #144]	@ (800d830 <scalbnf+0xb0>)
 800d79e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d834 <scalbnf+0xb4>
 800d7a2:	4298      	cmp	r0, r3
 800d7a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d7a8:	db17      	blt.n	800d7da <scalbnf+0x5a>
 800d7aa:	ee10 3a10 	vmov	r3, s0
 800d7ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d7b2:	3a19      	subs	r2, #25
 800d7b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d7b8:	4288      	cmp	r0, r1
 800d7ba:	dd15      	ble.n	800d7e8 <scalbnf+0x68>
 800d7bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d838 <scalbnf+0xb8>
 800d7c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d83c <scalbnf+0xbc>
 800d7c4:	ee10 3a10 	vmov	r3, s0
 800d7c8:	eeb0 7a67 	vmov.f32	s14, s15
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	bfb8      	it	lt
 800d7d0:	eef0 7a66 	vmovlt.f32	s15, s13
 800d7d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d7d8:	4770      	bx	lr
 800d7da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d840 <scalbnf+0xc0>
 800d7de:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d7e2:	4770      	bx	lr
 800d7e4:	0dd2      	lsrs	r2, r2, #23
 800d7e6:	e7e5      	b.n	800d7b4 <scalbnf+0x34>
 800d7e8:	4410      	add	r0, r2
 800d7ea:	28fe      	cmp	r0, #254	@ 0xfe
 800d7ec:	dce6      	bgt.n	800d7bc <scalbnf+0x3c>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	dd06      	ble.n	800d800 <scalbnf+0x80>
 800d7f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d7f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d7fa:	ee00 3a10 	vmov	s0, r3
 800d7fe:	4770      	bx	lr
 800d800:	f110 0f16 	cmn.w	r0, #22
 800d804:	da09      	bge.n	800d81a <scalbnf+0x9a>
 800d806:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d840 <scalbnf+0xc0>
 800d80a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d844 <scalbnf+0xc4>
 800d80e:	ee10 3a10 	vmov	r3, s0
 800d812:	eeb0 7a67 	vmov.f32	s14, s15
 800d816:	2b00      	cmp	r3, #0
 800d818:	e7d9      	b.n	800d7ce <scalbnf+0x4e>
 800d81a:	3019      	adds	r0, #25
 800d81c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d820:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d824:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d848 <scalbnf+0xc8>
 800d828:	ee07 3a90 	vmov	s15, r3
 800d82c:	e7d7      	b.n	800d7de <scalbnf+0x5e>
 800d82e:	bf00      	nop
 800d830:	ffff3cb0 	.word	0xffff3cb0
 800d834:	4c000000 	.word	0x4c000000
 800d838:	7149f2ca 	.word	0x7149f2ca
 800d83c:	f149f2ca 	.word	0xf149f2ca
 800d840:	0da24260 	.word	0x0da24260
 800d844:	8da24260 	.word	0x8da24260
 800d848:	33000000 	.word	0x33000000

0800d84c <floorf>:
 800d84c:	ee10 3a10 	vmov	r3, s0
 800d850:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d854:	3a7f      	subs	r2, #127	@ 0x7f
 800d856:	2a16      	cmp	r2, #22
 800d858:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d85c:	dc2b      	bgt.n	800d8b6 <floorf+0x6a>
 800d85e:	2a00      	cmp	r2, #0
 800d860:	da12      	bge.n	800d888 <floorf+0x3c>
 800d862:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d8c8 <floorf+0x7c>
 800d866:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d86a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d872:	dd06      	ble.n	800d882 <floorf+0x36>
 800d874:	2b00      	cmp	r3, #0
 800d876:	da24      	bge.n	800d8c2 <floorf+0x76>
 800d878:	2900      	cmp	r1, #0
 800d87a:	4b14      	ldr	r3, [pc, #80]	@ (800d8cc <floorf+0x80>)
 800d87c:	bf08      	it	eq
 800d87e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d882:	ee00 3a10 	vmov	s0, r3
 800d886:	4770      	bx	lr
 800d888:	4911      	ldr	r1, [pc, #68]	@ (800d8d0 <floorf+0x84>)
 800d88a:	4111      	asrs	r1, r2
 800d88c:	420b      	tst	r3, r1
 800d88e:	d0fa      	beq.n	800d886 <floorf+0x3a>
 800d890:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d8c8 <floorf+0x7c>
 800d894:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d898:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a0:	ddef      	ble.n	800d882 <floorf+0x36>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	bfbe      	ittt	lt
 800d8a6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d8aa:	fa40 f202 	asrlt.w	r2, r0, r2
 800d8ae:	189b      	addlt	r3, r3, r2
 800d8b0:	ea23 0301 	bic.w	r3, r3, r1
 800d8b4:	e7e5      	b.n	800d882 <floorf+0x36>
 800d8b6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d8ba:	d3e4      	bcc.n	800d886 <floorf+0x3a>
 800d8bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d8c0:	4770      	bx	lr
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e7dd      	b.n	800d882 <floorf+0x36>
 800d8c6:	bf00      	nop
 800d8c8:	7149f2ca 	.word	0x7149f2ca
 800d8cc:	bf800000 	.word	0xbf800000
 800d8d0:	007fffff 	.word	0x007fffff

0800d8d4 <_init>:
 800d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d6:	bf00      	nop
 800d8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8da:	bc08      	pop	{r3}
 800d8dc:	469e      	mov	lr, r3
 800d8de:	4770      	bx	lr

0800d8e0 <_fini>:
 800d8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e2:	bf00      	nop
 800d8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8e6:	bc08      	pop	{r3}
 800d8e8:	469e      	mov	lr, r3
 800d8ea:	4770      	bx	lr
