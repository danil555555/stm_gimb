
f405gimb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffa0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08010130  08010130  00011130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010978  08010978  00012338  2**0
                  CONTENTS
  4 .ARM          00000008  08010978  08010978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010980  08010980  00012338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010980  08010980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010984  08010984  00011984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  08010988  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012338  2**0
                  CONTENTS
 10 .bss          00002014  20000338  20000338  00012338  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000234c  2000234c  00012338  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1ef  00000000  00000000  00012368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042b0  00000000  00000000  0002d557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00031808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d6  00000000  00000000  00033068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b47  00000000  00000000  0003433e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020962  00000000  00000000  00059e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5a19  00000000  00000000  0007a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150200  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a34  00000000  00000000  00150244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00157c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010118 	.word	0x08010118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	08010118 	.word	0x08010118

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <USB_ProcessCommand>:

static uint8_t TxBuf[5];
static uint8_t RxBuf[5];

void USB_ProcessCommand(uint8_t *buf)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    uint8_t cmd = buf[0];
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	75fb      	strb	r3, [r7, #23]
    float val = *((float*)(buf + 1));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	613b      	str	r3, [r7, #16]

    switch(cmd)
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	2b31      	cmp	r3, #49	@ 0x31
 8000f54:	f200 80b2 	bhi.w	80010bc <USB_ProcessCommand+0x184>
 8000f58:	a201      	add	r2, pc, #4	@ (adr r2, 8000f60 <USB_ProcessCommand+0x28>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	080010bd 	.word	0x080010bd
 8000f64:	080010bd 	.word	0x080010bd
 8000f68:	080010bd 	.word	0x080010bd
 8000f6c:	080010bd 	.word	0x080010bd
 8000f70:	080010bd 	.word	0x080010bd
 8000f74:	080010bd 	.word	0x080010bd
 8000f78:	080010bd 	.word	0x080010bd
 8000f7c:	080010bd 	.word	0x080010bd
 8000f80:	080010bd 	.word	0x080010bd
 8000f84:	080010bd 	.word	0x080010bd
 8000f88:	080010bd 	.word	0x080010bd
 8000f8c:	080010bd 	.word	0x080010bd
 8000f90:	080010bd 	.word	0x080010bd
 8000f94:	080010bd 	.word	0x080010bd
 8000f98:	080010bd 	.word	0x080010bd
 8000f9c:	080010bd 	.word	0x080010bd
 8000fa0:	080010bd 	.word	0x080010bd
 8000fa4:	080010bd 	.word	0x080010bd
 8000fa8:	080010bd 	.word	0x080010bd
 8000fac:	080010bd 	.word	0x080010bd
 8000fb0:	080010bd 	.word	0x080010bd
 8000fb4:	080010bd 	.word	0x080010bd
 8000fb8:	080010bd 	.word	0x080010bd
 8000fbc:	080010bd 	.word	0x080010bd
 8000fc0:	080010bd 	.word	0x080010bd
 8000fc4:	080010bd 	.word	0x080010bd
 8000fc8:	080010bd 	.word	0x080010bd
 8000fcc:	080010bd 	.word	0x080010bd
 8000fd0:	080010bd 	.word	0x080010bd
 8000fd4:	080010bd 	.word	0x080010bd
 8000fd8:	080010bd 	.word	0x080010bd
 8000fdc:	080010bd 	.word	0x080010bd
 8000fe0:	08001029 	.word	0x08001029
 8000fe4:	0800103f 	.word	0x0800103f
 8000fe8:	08001055 	.word	0x08001055
 8000fec:	0800106b 	.word	0x0800106b
 8000ff0:	080010bd 	.word	0x080010bd
 8000ff4:	080010bd 	.word	0x080010bd
 8000ff8:	080010bd 	.word	0x080010bd
 8000ffc:	080010bd 	.word	0x080010bd
 8001000:	080010bd 	.word	0x080010bd
 8001004:	080010bd 	.word	0x080010bd
 8001008:	080010bd 	.word	0x080010bd
 800100c:	080010bd 	.word	0x080010bd
 8001010:	080010bd 	.word	0x080010bd
 8001014:	080010bd 	.word	0x080010bd
 8001018:	080010bd 	.word	0x080010bd
 800101c:	08001081 	.word	0x08001081
 8001020:	0800109f 	.word	0x0800109f
 8001024:	080010bd 	.word	0x080010bd
        case 0x01:

            break;

        case 0x21:
        	Kp += 0.05f;
 8001028:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <USB_ProcessCommand+0x190>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80010cc <USB_ProcessCommand+0x194>
 8001032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001036:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <USB_ProcessCommand+0x190>)
 8001038:	edc3 7a00 	vstr	s15, [r3]
            break;
 800103c:	e03f      	b.n	80010be <USB_ProcessCommand+0x186>

        case 0x22:
        	Kp -= 0.05f;
 800103e:	4b22      	ldr	r3, [pc, #136]	@ (80010c8 <USB_ProcessCommand+0x190>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80010cc <USB_ProcessCommand+0x194>
 8001048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800104c:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <USB_ProcessCommand+0x190>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001052:	e034      	b.n	80010be <USB_ProcessCommand+0x186>

        case 0x23:
        {
        	Ki += 0.0001f;
 8001054:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <USB_ProcessCommand+0x198>)
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80010d4 <USB_ProcessCommand+0x19c>
 800105e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <USB_ProcessCommand+0x198>)
 8001064:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001068:	e029      	b.n	80010be <USB_ProcessCommand+0x186>
        }
        case 0x24:
        {
        	Ki -= 0.0001f;
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <USB_ProcessCommand+0x198>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80010d4 <USB_ProcessCommand+0x19c>
 8001074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <USB_ProcessCommand+0x198>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800107e:	e01e      	b.n	80010be <USB_ProcessCommand+0x186>
        }


        case 0x30:
        {
            float sendVal = vq;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <USB_ProcessCommand+0x1a0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
            TxBuf[0] = cmd;
 8001086:	4a15      	ldr	r2, [pc, #84]	@ (80010dc <USB_ProcessCommand+0x1a4>)
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	7013      	strb	r3, [r2, #0]
            memcpy(&TxBuf[1], &sendVal, 4);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4a13      	ldr	r2, [pc, #76]	@ (80010dc <USB_ProcessCommand+0x1a4>)
 8001090:	f8c2 3001 	str.w	r3, [r2, #1]
            CDC_Transmit_FS(TxBuf, 5);
 8001094:	2105      	movs	r1, #5
 8001096:	4811      	ldr	r0, [pc, #68]	@ (80010dc <USB_ProcessCommand+0x1a4>)
 8001098:	f00a fe12 	bl	800bcc0 <CDC_Transmit_FS>
            break;
 800109c:	e00f      	b.n	80010be <USB_ProcessCommand+0x186>
        }

        case 0x31:
        {
            float sendVal = vd;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <USB_ProcessCommand+0x1a8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	60bb      	str	r3, [r7, #8]
            TxBuf[0] = cmd;
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <USB_ProcessCommand+0x1a4>)
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	7013      	strb	r3, [r2, #0]
            memcpy(&TxBuf[1], &sendVal, 4);
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <USB_ProcessCommand+0x1a4>)
 80010ae:	f8c2 3001 	str.w	r3, [r2, #1]
            CDC_Transmit_FS(TxBuf, 5);
 80010b2:	2105      	movs	r1, #5
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <USB_ProcessCommand+0x1a4>)
 80010b6:	f00a fe03 	bl	800bcc0 <CDC_Transmit_FS>
            break;
 80010ba:	e000      	b.n	80010be <USB_ProcessCommand+0x186>
            break;
        }

        default:

            break;
 80010bc:	bf00      	nop
    }
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	3d4ccccd 	.word	0x3d4ccccd
 80010d0:	200003d0 	.word	0x200003d0
 80010d4:	38d1b717 	.word	0x38d1b717
 80010d8:	200003dc 	.word	0x200003dc
 80010dc:	20000354 	.word	0x20000354
 80010e0:	200003d8 	.word	0x200003d8

080010e4 <AS5048_Transfer>:

extern SPI_HandleTypeDef hspi1;
extern TIM_HandleTypeDef htim1;

uint16_t AS5048_Transfer(uint16_t data)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
    uint8_t tx[2] = { data >> 8, data & 0xFF };
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	733b      	strb	r3, [r7, #12]
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2] = {0};
 80010fe:	2300      	movs	r3, #0
 8001100:	813b      	strh	r3, [r7, #8]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 8001102:	2200      	movs	r2, #0
 8001104:	2110      	movs	r1, #16
 8001106:	480f      	ldr	r0, [pc, #60]	@ (8001144 <AS5048_Transfer+0x60>)
 8001108:	f003 f8de 	bl	80042c8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, HAL_MAX_DELAY);
 800110c:	f107 0208 	add.w	r2, r7, #8
 8001110:	f107 010c 	add.w	r1, r7, #12
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2302      	movs	r3, #2
 800111c:	480a      	ldr	r0, [pc, #40]	@ (8001148 <AS5048_Transfer+0x64>)
 800111e:	f006 f870 	bl	8007202 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
 8001122:	2201      	movs	r2, #1
 8001124:	2110      	movs	r1, #16
 8001126:	4807      	ldr	r0, [pc, #28]	@ (8001144 <AS5048_Transfer+0x60>)
 8001128:	f003 f8ce 	bl	80042c8 <HAL_GPIO_WritePin>

    return ((uint16_t)rx[0] << 8) | rx[1];
 800112c:	7a3b      	ldrb	r3, [r7, #8]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	7a7b      	ldrb	r3, [r7, #9]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	b29b      	uxth	r3, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020000 	.word	0x40020000
 8001148:	20000530 	.word	0x20000530

0800114c <AS5048_ReadAngle>:

// Чтение угла
uint16_t AS5048_ReadAngle(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	AS5048_Transfer(AS5048_CMD_READ_ANGLE | 0x4000); // бит R=1 (чтение)
 8001152:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8001156:	f7ff ffc5 	bl	80010e4 <AS5048_Transfer>
	    // Вторая транзакция — получение результата
	    uint16_t res = AS5048_Transfer(0x0000);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ffc2 	bl	80010e4 <AS5048_Transfer>
 8001160:	4603      	mov	r3, r0
 8001162:	80fb      	strh	r3, [r7, #6]
	    return res & 0x3FFF;
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800116a:	b29b      	uxth	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_normalizeAngle>:

float _normalizeAngle(float angle) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle > 2.0f * (float)M_PI) {
 800117e:	e007      	b.n	8001190 <_normalizeAngle+0x1c>
        angle -= 2.0f * (float)M_PI;
 8001180:	edd7 7a01 	vldr	s15, [r7, #4]
 8001184:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80011d8 <_normalizeAngle+0x64>
 8001188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800118c:	edc7 7a01 	vstr	s15, [r7, #4]
    while (angle > 2.0f * (float)M_PI) {
 8001190:	edd7 7a01 	vldr	s15, [r7, #4]
 8001194:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80011d8 <_normalizeAngle+0x64>
 8001198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	dcee      	bgt.n	8001180 <_normalizeAngle+0xc>
    }
    while (angle < 0) {
 80011a2:	e007      	b.n	80011b4 <_normalizeAngle+0x40>
        angle += 2.0f * (float)M_PI;
 80011a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a8:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80011d8 <_normalizeAngle+0x64>
 80011ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b0:	edc7 7a01 	vstr	s15, [r7, #4]
    while (angle < 0) {
 80011b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d4f0      	bmi.n	80011a4 <_normalizeAngle+0x30>
    }
    return angle;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ee07 3a90 	vmov	s15, r3
}
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40c90fdb 	.word	0x40c90fdb
 80011dc:	00000000 	.word	0x00000000

080011e0 <Sensor_Init>:

void Sensor_Init()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
    float mecAngleNum   = AS5048_ReadAngle() / 8192.0f * 360.0f;
 80011e6:	f7ff ffb1 	bl	800114c <AS5048_ReadAngle>
 80011ea:	4603      	mov	r3, r0
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001258 <Sensor_Init+0x78>
 80011f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800125c <Sensor_Init+0x7c>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a01 	vstr	s15, [r7, #4]
    prev_angle_rad      = mecAngleNum * M_PI / 180.0f;
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f99d 	bl	8000548 <__aeabi_f2d>
 800120e:	a310      	add	r3, pc, #64	@ (adr r3, 8001250 <Sensor_Init+0x70>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff f9f0 	bl	80005f8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <Sensor_Init+0x80>)
 8001226:	f7ff fb11 	bl	800084c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcb9 	bl	8000ba8 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <Sensor_Init+0x84>)
 800123a:	6013      	str	r3, [r2, #0]
    full_rotations      = 0.0f;
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <Sensor_Init+0x88>)
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	f3af 8000 	nop.w
 8001250:	54442d18 	.word	0x54442d18
 8001254:	400921fb 	.word	0x400921fb
 8001258:	46000000 	.word	0x46000000
 800125c:	43b40000 	.word	0x43b40000
 8001260:	40668000 	.word	0x40668000
 8001264:	2000035c 	.word	0x2000035c
 8001268:	20000360 	.word	0x20000360
 800126c:	00000000 	.word	0x00000000

08001270 <SensorUpdate>:

void SensorUpdate()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
    float mecAngleNum   = AS5048_ReadAngle() / 8192.0f * 360.0f;
 8001276:	f7ff ff69 	bl	800114c <AS5048_ReadAngle>
 800127a:	4603      	mov	r3, r0
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001284:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001388 <SensorUpdate+0x118>
 8001288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800138c <SensorUpdate+0x11c>
 8001290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001294:	edc7 7a03 	vstr	s15, [r7, #12]
    float angle_rad = mecAngleNum * M_PI / 180.0f;
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	@ (adr r3, 8001380 <SensorUpdate+0x110>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9a8 	bl	80005f8 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <SensorUpdate+0x120>)
 80012b6:	f7ff fac9 	bl	800084c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fc71 	bl	8000ba8 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	60bb      	str	r3, [r7, #8]

    float delta_angle = angle_rad - prev_angle_rad;
 80012ca:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <SensorUpdate+0x124>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(delta_angle) > 0.8f * 2.0f * (float)M_PI) {
 80012dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e0:	eef0 7ae7 	vabs.f32	s15, s15
 80012e4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001398 <SensorUpdate+0x128>
 80012e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	dd13      	ble.n	800131a <SensorUpdate+0xaa>
        full_rotations += (delta_angle > 0.0f) ? -1 : 1;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dd02      	ble.n	8001306 <SensorUpdate+0x96>
 8001300:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001304:	e001      	b.n	800130a <SensorUpdate+0x9a>
 8001306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800130a:	4b24      	ldr	r3, [pc, #144]	@ (800139c <SensorUpdate+0x12c>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001314:	4b21      	ldr	r3, [pc, #132]	@ (800139c <SensorUpdate+0x12c>)
 8001316:	edc3 7a00 	vstr	s15, [r3]
    }
    prev_angle_rad = angle_rad;
 800131a:	4a1e      	ldr	r2, [pc, #120]	@ (8001394 <SensorUpdate+0x124>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	6013      	str	r3, [r2, #0]

    angle_el = _normalizeAngle( (float)(sensor_direction * pole_pairs) * prev_angle_rad  - zero_electric_angle );
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <SensorUpdate+0x130>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1f      	ldr	r2, [pc, #124]	@ (80013a4 <SensorUpdate+0x134>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <SensorUpdate+0x124>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <SensorUpdate+0x138>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	f7ff ff12 	bl	8001174 <_normalizeAngle>
 8001350:	eef0 7a40 	vmov.f32	s15, s0
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <SensorUpdate+0x13c>)
 8001356:	edc3 7a00 	vstr	s15, [r3]

    now_angle = ( ( 2.0f * (float)M_PI ) * full_rotations ) + prev_angle_rad;
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <SensorUpdate+0x12c>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80013b0 <SensorUpdate+0x140>
 8001364:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <SensorUpdate+0x124>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <SensorUpdate+0x144>)
 8001374:	edc3 7a00 	vstr	s15, [r3]
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	54442d18 	.word	0x54442d18
 8001384:	400921fb 	.word	0x400921fb
 8001388:	46000000 	.word	0x46000000
 800138c:	43b40000 	.word	0x43b40000
 8001390:	40668000 	.word	0x40668000
 8001394:	2000035c 	.word	0x2000035c
 8001398:	40a0d97c 	.word	0x40a0d97c
 800139c:	20000360 	.word	0x20000360
 80013a0:	20000004 	.word	0x20000004
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000364 	.word	0x20000364
 80013ac:	2000036c 	.word	0x2000036c
 80013b0:	40c90fdb 	.word	0x40c90fdb
 80013b4:	20000368 	.word	0x20000368

080013b8 <electricalAngle>:

float electricalAngle(void){
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	return angle_el;
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <electricalAngle+0x18>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	ee07 3a90 	vmov	s15, r3
}
 80013c4:	eeb0 0a67 	vmov.f32	s0, s15
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	2000036c 	.word	0x2000036c

080013d4 <alignSensor>:
    return full_rotations;
}


void alignSensor()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    foc_direct(0.0f, 1.0f, 3.0f * M_PI / 2.0f, &htim1);
 80013d8:	4815      	ldr	r0, [pc, #84]	@ (8001430 <alignSensor+0x5c>)
 80013da:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 8001434 <alignSensor+0x60>
 80013de:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80013e2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001438 <alignSensor+0x64>
 80013e6:	f000 fa0b 	bl	8001800 <foc_direct>
    HAL_Delay(700);
 80013ea:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80013ee:	f002 f957 	bl	80036a0 <HAL_Delay>
    SensorUpdate();
 80013f2:	f7ff ff3d 	bl	8001270 <SensorUpdate>
    zero_electric_angle = 0;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <alignSensor+0x68>)
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
    zero_electric_angle = electricalAngle();
 80013fe:	f7ff ffdb 	bl	80013b8 <electricalAngle>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <alignSensor+0x68>)
 8001408:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(20);
 800140c:	2014      	movs	r0, #20
 800140e:	f002 f947 	bl	80036a0 <HAL_Delay>
    foc_direct(0.0f, 0.0f, 0.0f, &htim1);
 8001412:	4807      	ldr	r0, [pc, #28]	@ (8001430 <alignSensor+0x5c>)
 8001414:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8001438 <alignSensor+0x64>
 8001418:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8001438 <alignSensor+0x64>
 800141c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001438 <alignSensor+0x64>
 8001420:	f000 f9ee 	bl	8001800 <foc_direct>
    HAL_Delay(100);
 8001424:	2064      	movs	r0, #100	@ 0x64
 8001426:	f002 f93b 	bl	80036a0 <HAL_Delay>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000588 	.word	0x20000588
 8001434:	4096cbe4 	.word	0x4096cbe4
 8001438:	00000000 	.word	0x00000000
 800143c:	20000364 	.word	0x20000364

08001440 <LPF_current_q>:
float dc_a = 0;
float dc_b = 0;
float dc_c = 0;

float LPF_current_q(float in)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a01 	vstr	s0, [r7, #4]
    static float prev_q = 0.0f;   //syokai dake syokika
    float tau_q = 0.01f;         // tau > 0
 800144a:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <LPF_current_q+0x88>)
 800144c:	617b      	str	r3, [r7, #20]
    float alpha = dt / (tau_q + dt);
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff f87a 	bl	8000548 <__aeabi_f2d>
 8001454:	a31a      	add	r3, pc, #104	@ (adr r3, 80014c0 <LPF_current_q+0x80>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7fe ff17 	bl	800028c <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	a117      	add	r1, pc, #92	@ (adr r1, 80014c0 <LPF_current_q+0x80>)
 8001464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001468:	f7ff f9f0 	bl	800084c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb98 	bl	8000ba8 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	613b      	str	r3, [r7, #16]
    alpha = 0.2;
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <LPF_current_q+0x8c>)
 800147e:	613b      	str	r3, [r7, #16]

    float out = prev_q + alpha * (in - prev_q);
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <LPF_current_q+0x90>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ed97 7a01 	vldr	s14, [r7, #4]
 800148a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800148e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <LPF_current_q+0x90>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	edc7 7a03 	vstr	s15, [r7, #12]
    prev_q = out;
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <LPF_current_q+0x90>)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6013      	str	r3, [r2, #0]
    return out;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	ee07 3a90 	vmov	s15, r3
}
 80014b0:	eeb0 0a67 	vmov.f32	s0, s15
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w
 80014c0:	eb1c432d 	.word	0xeb1c432d
 80014c4:	3f1a36e2 	.word	0x3f1a36e2
 80014c8:	3c23d70a 	.word	0x3c23d70a
 80014cc:	3e4ccccd 	.word	0x3e4ccccd
 80014d0:	2000038c 	.word	0x2000038c
 80014d4:	00000000 	.word	0x00000000

080014d8 <LPF_current_d>:

float LPF_current_d(float in)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	ed87 0a01 	vstr	s0, [r7, #4]
    static float prev_d = 0.0f;//syokai dake syokika
    float tau_d = 0.01f;         // tau > 0
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <LPF_current_d+0x88>)
 80014e4:	617b      	str	r3, [r7, #20]
    float alpha = dt / (tau_d + dt);
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	a31a      	add	r3, pc, #104	@ (adr r3, 8001558 <LPF_current_d+0x80>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe fecb 	bl	800028c <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	a117      	add	r1, pc, #92	@ (adr r1, 8001558 <LPF_current_d+0x80>)
 80014fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001500:	f7ff f9a4 	bl	800084c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb4c 	bl	8000ba8 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	613b      	str	r3, [r7, #16]
    alpha = 0.2;
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <LPF_current_d+0x8c>)
 8001516:	613b      	str	r3, [r7, #16]

    float out = prev_d + alpha * (in - prev_d);
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <LPF_current_d+0x90>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001522:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001526:	edd7 7a04 	vldr	s15, [r7, #16]
 800152a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <LPF_current_d+0x90>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	edc7 7a03 	vstr	s15, [r7, #12]
    prev_d = out;
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <LPF_current_d+0x90>)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6013      	str	r3, [r2, #0]
    return out;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	ee07 3a90 	vmov	s15, r3
}
 8001548:	eeb0 0a67 	vmov.f32	s0, s15
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	eb1c432d 	.word	0xeb1c432d
 800155c:	3f1a36e2 	.word	0x3f1a36e2
 8001560:	3c23d70a 	.word	0x3c23d70a
 8001564:	3e4ccccd 	.word	0x3e4ccccd
 8001568:	20000390 	.word	0x20000390
 800156c:	00000000 	.word	0x00000000

08001570 <foc_callback>:

Current foc_callback(uint16_t adc1_value, uint16_t adc2_value, float theta_electric_rad)
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	ed2d 8b02 	vpush	{d8}
 8001576:	b098      	sub	sp, #96	@ 0x60
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001582:	82fb      	strh	r3, [r7, #22]
 8001584:	4613      	mov	r3, r2
 8001586:	82bb      	strh	r3, [r7, #20]
	Current current;
	float voltageA = (adc1_value/4095.0) * 3.265 - 3.265/2.0;
 8001588:	8afb      	ldrh	r3, [r7, #22]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffca 	bl	8000524 <__aeabi_i2d>
 8001590:	a392      	add	r3, pc, #584	@ (adr r3, 80017dc <foc_callback+0x26c>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff f959 	bl	800084c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	a390      	add	r3, pc, #576	@ (adr r3, 80017e4 <foc_callback+0x274>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f826 	bl	80005f8 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	a38d      	add	r3, pc, #564	@ (adr r3, 80017ec <foc_callback+0x27c>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe fe65 	bl	8000288 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff faef 	bl	8000ba8 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float voltageB = (adc2_value/4095.0) * 3.265 - 3.265/2.0;
 80015ce:	8abb      	ldrh	r3, [r7, #20]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffa7 	bl	8000524 <__aeabi_i2d>
 80015d6:	a381      	add	r3, pc, #516	@ (adr r3, 80017dc <foc_callback+0x26c>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7ff f936 	bl	800084c <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	a37e      	add	r3, pc, #504	@ (adr r3, 80017e4 <foc_callback+0x274>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7ff f803 	bl	80005f8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	a37c      	add	r3, pc, #496	@ (adr r3, 80017ec <foc_callback+0x27c>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fe42 	bl	8000288 <__aeabi_dsub>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff facc 	bl	8000ba8 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	65bb      	str	r3, [r7, #88]	@ 0x58
	float currentA_measure = voltageA/(0.005 * 40.0);
 8001614:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001616:	f7fe ff97 	bl	8000548 <__aeabi_f2d>
 800161a:	a376      	add	r3, pc, #472	@ (adr r3, 80017f4 <foc_callback+0x284>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff f914 	bl	800084c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fabc 	bl	8000ba8 <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	657b      	str	r3, [r7, #84]	@ 0x54
	float currentB_measure = voltageB/(0.005 * 40.0);
 8001634:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001636:	f7fe ff87 	bl	8000548 <__aeabi_f2d>
 800163a:	a36e      	add	r3, pc, #440	@ (adr r3, 80017f4 <foc_callback+0x284>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7ff f904 	bl	800084c <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff faac 	bl	8000ba8 <__aeabi_d2f>
 8001650:	4603      	mov	r3, r0
 8001652:	653b      	str	r3, [r7, #80]	@ 0x50

    current.value1 = currentA_measure;
 8001654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001656:	61bb      	str	r3, [r7, #24]
	current.value2 = currentB_measure;
 8001658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800165a:	61fb      	str	r3, [r7, #28]
	float phasa_B_callback = current.value2;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float phasa_A_callback = current.value1;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	64bb      	str	r3, [r7, #72]	@ 0x48
	float phasa_C_callback = -(phasa_B_callback + phasa_A_callback);
 8001664:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001668:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eef1 7a67 	vneg.f32	s15, s15
 8001674:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	float mid = (1.f/3)*(phasa_B_callback + phasa_A_callback + phasa_C_callback);
 8001678:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800167c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001684:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80017d8 <foc_callback+0x268>
 8001690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001694:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	phasa_A_callback = phasa_A_callback - mid;
 8001698:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800169c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80016a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	phasa_B_callback = phasa_B_callback - mid;
 80016a8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80016ac:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80016b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	float alpha_callback = phasa_A_callback;
 80016b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float betta_callback = 1.0/sqrt(3)*(phasa_A_callback + 2.0*phasa_B_callback);
 80016bc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80016be:	f7fe ff43 	bl	8000548 <__aeabi_f2d>
 80016c2:	4604      	mov	r4, r0
 80016c4:	460d      	mov	r5, r1
 80016c6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016c8:	f7fe ff3e 	bl	8000548 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	f7fe fddc 	bl	800028c <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe fdd6 	bl	800028c <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	a339      	add	r3, pc, #228	@ (adr r3, 80017d0 <foc_callback+0x260>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff83 	bl	80005f8 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa55 	bl	8000ba8 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38


	current.id_callback = alpha_callback * cosf(theta_electric_rad) + betta_callback * sinf(theta_electric_rad);
 8001702:	ed97 0a04 	vldr	s0, [r7, #16]
 8001706:	f00d fc47 	bl	800ef98 <cosf>
 800170a:	eeb0 7a40 	vmov.f32	s14, s0
 800170e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001712:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001716:	ed97 0a04 	vldr	s0, [r7, #16]
 800171a:	f00d fc81 	bl	800f020 <sinf>
 800171e:	eeb0 7a40 	vmov.f32	s14, s0
 8001722:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800172e:	edc7 7a08 	vstr	s15, [r7, #32]
	current.iq_callback = -alpha_callback * sinf(theta_electric_rad) + betta_callback * cosf(theta_electric_rad);
 8001732:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001736:	eeb1 8a67 	vneg.f32	s16, s15
 800173a:	ed97 0a04 	vldr	s0, [r7, #16]
 800173e:	f00d fc6f 	bl	800f020 <sinf>
 8001742:	eef0 7a40 	vmov.f32	s15, s0
 8001746:	ee28 8a27 	vmul.f32	s16, s16, s15
 800174a:	ed97 0a04 	vldr	s0, [r7, #16]
 800174e:	f00d fc23 	bl	800ef98 <cosf>
 8001752:	eeb0 7a40 	vmov.f32	s14, s0
 8001756:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001762:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	current.iq_callback = LPF_current_q(current.iq_callback);
 8001766:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	f7ff fe67 	bl	8001440 <LPF_current_q>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	current.id_callback = LPF_current_d(current.id_callback);
 800177a:	edd7 7a08 	vldr	s15, [r7, #32]
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	f7ff fea9 	bl	80014d8 <LPF_current_d>
 8001786:	eef0 7a40 	vmov.f32	s15, s0
 800178a:	edc7 7a08 	vstr	s15, [r7, #32]

	return current;
 800178e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800179c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800179e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a4:	ee06 0a10 	vmov	s12, r0
 80017a8:	ee06 1a90 	vmov	s13, r1
 80017ac:	ee07 2a10 	vmov	s14, r2
 80017b0:	ee07 3a90 	vmov	s15, r3
}
 80017b4:	eeb0 0a46 	vmov.f32	s0, s12
 80017b8:	eef0 0a66 	vmov.f32	s1, s13
 80017bc:	eeb0 1a47 	vmov.f32	s2, s14
 80017c0:	eef0 1a67 	vmov.f32	s3, s15
 80017c4:	3760      	adds	r7, #96	@ 0x60
 80017c6:	46bd      	mov	sp, r7
 80017c8:	ecbd 8b02 	vpop	{d8}
 80017cc:	bdb0      	pop	{r4, r5, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	4590331d 	.word	0x4590331d
 80017d4:	3fe279a7 	.word	0x3fe279a7
 80017d8:	3eaaaaab 	.word	0x3eaaaaab
 80017dc:	00000000 	.word	0x00000000
 80017e0:	40affe00 	.word	0x40affe00
 80017e4:	51eb851f 	.word	0x51eb851f
 80017e8:	400a1eb8 	.word	0x400a1eb8
 80017ec:	51eb851f 	.word	0x51eb851f
 80017f0:	3ffa1eb8 	.word	0x3ffa1eb8
 80017f4:	9999999a 	.word	0x9999999a
 80017f8:	3fc99999 	.word	0x3fc99999
 80017fc:	00000000 	.word	0x00000000

08001800 <foc_direct>:

Phasa foc_direct(float id_ref, float iq_ref, float angle_electric_rad, TIM_HandleTypeDef *htim)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	ed2d 8b02 	vpush	{d8}
 8001806:	b094      	sub	sp, #80	@ 0x50
 8001808:	af00      	add	r7, sp, #0
 800180a:	ed87 0a07 	vstr	s0, [r7, #28]
 800180e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001812:	ed87 1a05 	vstr	s2, [r7, #20]
 8001816:	6138      	str	r0, [r7, #16]
	Phasa phasa;
	float alpha = (id_ref * cosf(angle_electric_rad)) - (iq_ref * sinf(angle_electric_rad));
 8001818:	ed97 0a05 	vldr	s0, [r7, #20]
 800181c:	f00d fbbc 	bl	800ef98 <cosf>
 8001820:	eeb0 7a40 	vmov.f32	s14, s0
 8001824:	edd7 7a07 	vldr	s15, [r7, #28]
 8001828:	ee27 8a27 	vmul.f32	s16, s14, s15
 800182c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001830:	f00d fbf6 	bl	800f020 <sinf>
 8001834:	eeb0 7a40 	vmov.f32	s14, s0
 8001838:	edd7 7a06 	vldr	s15, [r7, #24]
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001844:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	float betta = (id_ref * sinf(angle_electric_rad)) + (iq_ref * cosf(angle_electric_rad));
 8001848:	ed97 0a05 	vldr	s0, [r7, #20]
 800184c:	f00d fbe8 	bl	800f020 <sinf>
 8001850:	eeb0 7a40 	vmov.f32	s14, s0
 8001854:	edd7 7a07 	vldr	s15, [r7, #28]
 8001858:	ee27 8a27 	vmul.f32	s16, s14, s15
 800185c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001860:	f00d fb9a 	bl	800ef98 <cosf>
 8001864:	eeb0 7a40 	vmov.f32	s14, s0
 8001868:	edd7 7a06 	vldr	s15, [r7, #24]
 800186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001870:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001874:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	phasa.phasa_A = alpha;
 8001878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
	phasa.phasa_B = (-0.5 * alpha) + (sqrt(3)/2 * betta);
 800187c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800187e:	f7fe fe63 	bl	8000548 <__aeabi_f2d>
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	4bb4      	ldr	r3, [pc, #720]	@ (8001b58 <foc_direct+0x358>)
 8001888:	f7fe feb6 	bl	80005f8 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4614      	mov	r4, r2
 8001892:	461d      	mov	r5, r3
 8001894:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001896:	f7fe fe57 	bl	8000548 <__aeabi_f2d>
 800189a:	a3ad      	add	r3, pc, #692	@ (adr r3, 8001b50 <foc_direct+0x350>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fcee 	bl	800028c <__adddf3>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f976 	bl	8000ba8 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
	phasa.phasa_C = (-0.5 * alpha) - (sqrt(3)/2 * betta);
 80018c0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80018c2:	f7fe fe41 	bl	8000548 <__aeabi_f2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4ba3      	ldr	r3, [pc, #652]	@ (8001b58 <foc_direct+0x358>)
 80018cc:	f7fe fe94 	bl	80005f8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4614      	mov	r4, r2
 80018d6:	461d      	mov	r5, r3
 80018d8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	a39c      	add	r3, pc, #624	@ (adr r3, 8001b50 <foc_direct+0x350>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe88 	bl	80005f8 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fcca 	bl	8000288 <__aeabi_dsub>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f954 	bl	8000ba8 <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//phasa.phasa_A = phasa.phasa_A * 0.5 + 0.5;
	//phasa.phasa_B = phasa.phasa_B * 0.5 + 0.5;
	//phasa.phasa_C = phasa.phasa_C * 0.5 + 0.5;

    center = VOLTAGE_LIMIT / 2;
 8001904:	4b95      	ldr	r3, [pc, #596]	@ (8001b5c <foc_direct+0x35c>)
 8001906:	4a96      	ldr	r2, [pc, #600]	@ (8001b60 <foc_direct+0x360>)
 8001908:	601a      	str	r2, [r3, #0]
    float Umin = min(Ua, min(Ub, Uc));
 800190a:	4b96      	ldr	r3, [pc, #600]	@ (8001b64 <foc_direct+0x364>)
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	4b95      	ldr	r3, [pc, #596]	@ (8001b68 <foc_direct+0x368>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191e:	d503      	bpl.n	8001928 <foc_direct+0x128>
 8001920:	4b90      	ldr	r3, [pc, #576]	@ (8001b64 <foc_direct+0x364>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	e002      	b.n	800192e <foc_direct+0x12e>
 8001928:	4b8f      	ldr	r3, [pc, #572]	@ (8001b68 <foc_direct+0x368>)
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	4b8f      	ldr	r3, [pc, #572]	@ (8001b6c <foc_direct+0x36c>)
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	dd02      	ble.n	8001944 <foc_direct+0x144>
 800193e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b6c <foc_direct+0x36c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	e00f      	b.n	8001964 <foc_direct+0x164>
 8001944:	4b87      	ldr	r3, [pc, #540]	@ (8001b64 <foc_direct+0x364>)
 8001946:	ed93 7a00 	vldr	s14, [r3]
 800194a:	4b87      	ldr	r3, [pc, #540]	@ (8001b68 <foc_direct+0x368>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	d502      	bpl.n	8001960 <foc_direct+0x160>
 800195a:	4b82      	ldr	r3, [pc, #520]	@ (8001b64 <foc_direct+0x364>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e001      	b.n	8001964 <foc_direct+0x164>
 8001960:	4b81      	ldr	r3, [pc, #516]	@ (8001b68 <foc_direct+0x368>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	647b      	str	r3, [r7, #68]	@ 0x44
    float Umax = max(Ua, max(Ub, Uc));
 8001966:	4b7f      	ldr	r3, [pc, #508]	@ (8001b64 <foc_direct+0x364>)
 8001968:	ed93 7a00 	vldr	s14, [r3]
 800196c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b68 <foc_direct+0x368>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	dd03      	ble.n	8001984 <foc_direct+0x184>
 800197c:	4b79      	ldr	r3, [pc, #484]	@ (8001b64 <foc_direct+0x364>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	e002      	b.n	800198a <foc_direct+0x18a>
 8001984:	4b78      	ldr	r3, [pc, #480]	@ (8001b68 <foc_direct+0x368>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	4b78      	ldr	r3, [pc, #480]	@ (8001b6c <foc_direct+0x36c>)
 800198c:	ed93 7a00 	vldr	s14, [r3]
 8001990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	d502      	bpl.n	80019a0 <foc_direct+0x1a0>
 800199a:	4b74      	ldr	r3, [pc, #464]	@ (8001b6c <foc_direct+0x36c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	e00f      	b.n	80019c0 <foc_direct+0x1c0>
 80019a0:	4b70      	ldr	r3, [pc, #448]	@ (8001b64 <foc_direct+0x364>)
 80019a2:	ed93 7a00 	vldr	s14, [r3]
 80019a6:	4b70      	ldr	r3, [pc, #448]	@ (8001b68 <foc_direct+0x368>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	dd02      	ble.n	80019bc <foc_direct+0x1bc>
 80019b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001b64 <foc_direct+0x364>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e001      	b.n	80019c0 <foc_direct+0x1c0>
 80019bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b68 <foc_direct+0x368>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	643b      	str	r3, [r7, #64]	@ 0x40
    center -= (Umax + Umin) / 2;
 80019c2:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <foc_direct+0x35c>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80019cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019d4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80019d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b5c <foc_direct+0x35c>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
    Ua += center;
 80019e6:	4b61      	ldr	r3, [pc, #388]	@ (8001b6c <foc_direct+0x36c>)
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	4b5b      	ldr	r3, [pc, #364]	@ (8001b5c <foc_direct+0x35c>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b6c <foc_direct+0x36c>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]
    Ub += center;
 80019fc:	4b59      	ldr	r3, [pc, #356]	@ (8001b64 <foc_direct+0x364>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	4b56      	ldr	r3, [pc, #344]	@ (8001b5c <foc_direct+0x35c>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	4b55      	ldr	r3, [pc, #340]	@ (8001b64 <foc_direct+0x364>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
    Uc += center;
 8001a12:	4b55      	ldr	r3, [pc, #340]	@ (8001b68 <foc_direct+0x368>)
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <foc_direct+0x35c>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	4b51      	ldr	r3, [pc, #324]	@ (8001b68 <foc_direct+0x368>)
 8001a24:	edc3 7a00 	vstr	s15, [r3]

    Ua = _constrain(phasa.phasa_A, 0, VOLTAGE_LIMIT);
 8001a28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d502      	bpl.n	8001a3c <foc_direct+0x23c>
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e00b      	b.n	8001a54 <foc_direct+0x254>
 8001a3c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a40:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001b70 <foc_direct+0x370>
 8001a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	dd01      	ble.n	8001a52 <foc_direct+0x252>
 8001a4e:	4b49      	ldr	r3, [pc, #292]	@ (8001b74 <foc_direct+0x374>)
 8001a50:	e000      	b.n	8001a54 <foc_direct+0x254>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	4a45      	ldr	r2, [pc, #276]	@ (8001b6c <foc_direct+0x36c>)
 8001a56:	6013      	str	r3, [r2, #0]
    Ub = _constrain(phasa.phasa_B, 0, VOLTAGE_LIMIT);
 8001a58:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d502      	bpl.n	8001a6c <foc_direct+0x26c>
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e00b      	b.n	8001a84 <foc_direct+0x284>
 8001a6c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a70:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001b70 <foc_direct+0x370>
 8001a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	dd01      	ble.n	8001a82 <foc_direct+0x282>
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <foc_direct+0x374>)
 8001a80:	e000      	b.n	8001a84 <foc_direct+0x284>
 8001a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a84:	4a37      	ldr	r2, [pc, #220]	@ (8001b64 <foc_direct+0x364>)
 8001a86:	6013      	str	r3, [r2, #0]
    Uc = _constrain(phasa.phasa_C, 0, VOLTAGE_LIMIT);
 8001a88:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	d502      	bpl.n	8001a9c <foc_direct+0x29c>
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e00b      	b.n	8001ab4 <foc_direct+0x2b4>
 8001a9c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001aa0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001b70 <foc_direct+0x370>
 8001aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	dd01      	ble.n	8001ab2 <foc_direct+0x2b2>
 8001aae:	4b31      	ldr	r3, [pc, #196]	@ (8001b74 <foc_direct+0x374>)
 8001ab0:	e000      	b.n	8001ab4 <foc_direct+0x2b4>
 8001ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8001b68 <foc_direct+0x368>)
 8001ab6:	6013      	str	r3, [r2, #0]

    dc_a = _constrain(Ua / VOLTAGE_POWER_SUPPLY, 0.0f, 1.0f);
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <foc_direct+0x36c>)
 8001aba:	ed93 7a00 	vldr	s14, [r3]
 8001abe:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ace:	d502      	bpl.n	8001ad6 <foc_direct+0x2d6>
 8001ad0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8001b78 <foc_direct+0x378>
 8001ad4:	e017      	b.n	8001b06 <foc_direct+0x306>
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <foc_direct+0x36c>)
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	dd02      	ble.n	8001af8 <foc_direct+0x2f8>
 8001af2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001af6:	e006      	b.n	8001b06 <foc_direct+0x306>
 8001af8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <foc_direct+0x36c>)
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b06:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <foc_direct+0x37c>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]
    dc_b = _constrain(Ub / VOLTAGE_POWER_SUPPLY, 0.0f, 1.0f);
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <foc_direct+0x364>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	d502      	bpl.n	8001b2a <foc_direct+0x32a>
 8001b24:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8001b78 <foc_direct+0x378>
 8001b28:	e031      	b.n	8001b8e <foc_direct+0x38e>
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <foc_direct+0x364>)
 8001b2c:	ed93 7a00 	vldr	s14, [r3]
 8001b30:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b44:	dd1c      	ble.n	8001b80 <foc_direct+0x380>
 8001b46:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001b4a:	e020      	b.n	8001b8e <foc_direct+0x38e>
 8001b4c:	f3af 8000 	nop.w
 8001b50:	e8584caa 	.word	0xe8584caa
 8001b54:	3febb67a 	.word	0x3febb67a
 8001b58:	bfe00000 	.word	0xbfe00000
 8001b5c:	2000037c 	.word	0x2000037c
 8001b60:	40a645a2 	.word	0x40a645a2
 8001b64:	20000374 	.word	0x20000374
 8001b68:	20000378 	.word	0x20000378
 8001b6c:	20000370 	.word	0x20000370
 8001b70:	412645a2 	.word	0x412645a2
 8001b74:	412645a2 	.word	0x412645a2
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	20000380 	.word	0x20000380
 8001b80:	4b42      	ldr	r3, [pc, #264]	@ (8001c8c <foc_direct+0x48c>)
 8001b82:	ed93 7a00 	vldr	s14, [r3]
 8001b86:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8e:	4b40      	ldr	r3, [pc, #256]	@ (8001c90 <foc_direct+0x490>)
 8001b90:	edc3 7a00 	vstr	s15, [r3]
    dc_c = _constrain(Uc / VOLTAGE_POWER_SUPPLY, 0.0f, 1.0f);
 8001b94:	4b3f      	ldr	r3, [pc, #252]	@ (8001c94 <foc_direct+0x494>)
 8001b96:	ed93 7a00 	vldr	s14, [r3]
 8001b9a:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d502      	bpl.n	8001bb2 <foc_direct+0x3b2>
 8001bac:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8001c98 <foc_direct+0x498>
 8001bb0:	e017      	b.n	8001be2 <foc_direct+0x3e2>
 8001bb2:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <foc_direct+0x494>)
 8001bb4:	ed93 7a00 	vldr	s14, [r3]
 8001bb8:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	dd02      	ble.n	8001bd4 <foc_direct+0x3d4>
 8001bce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001bd2:	e006      	b.n	8001be2 <foc_direct+0x3e2>
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <foc_direct+0x494>)
 8001bd6:	ed93 7a00 	vldr	s14, [r3]
 8001bda:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <foc_direct+0x49c>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]

    uint32_t period = __HAL_TIM_GET_AUTORELOAD(htim);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	63fb      	str	r3, [r7, #60]	@ 0x3c



    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (uint32_t)(dc_a * (float)period) );
 8001bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <foc_direct+0x4a0>)
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
 8001c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0c:	ee17 2a90 	vmov	r2, s15
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (uint32_t)(dc_b * (float)period) );
 8001c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <foc_direct+0x490>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2e:	ee17 2a90 	vmov	r2, s15
 8001c32:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (uint32_t)(dc_c * (float)period) );
 8001c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <foc_direct+0x49c>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c50:	ee17 2a90 	vmov	r2, s15
 8001c54:	63da      	str	r2, [r3, #60]	@ 0x3c
	return phasa;
 8001c56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c5a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c6a:	ee06 1a90 	vmov	s13, r1
 8001c6e:	ee07 2a10 	vmov	s14, r2
 8001c72:	ee07 3a90 	vmov	s15, r3


	//TIM1->CCR1 = TIM1->ARR*phasa_A;
	//TIM1->CCR2 = TIM1->ARR*phasa_B;
	//TIM1->CCR3 = TIM1->ARR*phasa_C;
}
 8001c76:	eeb0 0a66 	vmov.f32	s0, s13
 8001c7a:	eef0 0a47 	vmov.f32	s1, s14
 8001c7e:	eeb0 1a67 	vmov.f32	s2, s15
 8001c82:	3750      	adds	r7, #80	@ 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	ecbd 8b02 	vpop	{d8}
 8001c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8c:	20000374 	.word	0x20000374
 8001c90:	20000384 	.word	0x20000384
 8001c94:	20000378 	.word	0x20000378
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	20000388 	.word	0x20000388
 8001ca0:	20000380 	.word	0x20000380

08001ca4 <PI_Controller_Iq>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float PI_Controller_Iq(float iq_ref, float iq_callback )
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cae:	edc7 0a00 	vstr	s1, [r7]
	float err;
	float output;
	err = iq_ref - iq_callback;
 8001cb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cb6:	edd7 7a00 	vldr	s15, [r7]
 8001cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbe:	edc7 7a03 	vstr	s15, [r7, #12]
	integralq += err*dt;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <PI_Controller_Iq+0x78>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <PI_Controller_Iq+0x7c>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cda:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <PI_Controller_Iq+0x7c>)
 8001cdc:	edc3 7a00 	vstr	s15, [r3]
	output = Kp*err + Ki*integralq;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <PI_Controller_Iq+0x80>)
 8001ce2:	ed93 7a00 	vldr	s14, [r3]
 8001ce6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <PI_Controller_Iq+0x84>)
 8001cf0:	edd3 6a00 	vldr	s13, [r3]
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <PI_Controller_Iq+0x7c>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc7 7a02 	vstr	s15, [r7, #8]
	//if(output>1) output = 1;
	//if(output > pid->max) output = pid->max;
	//if(output < 0) output = 0;
	return output;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	ee07 3a90 	vmov	s15, r3
}
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	2000000c 	.word	0x2000000c
 8001d20:	200003a8 	.word	0x200003a8
 8001d24:	20000008 	.word	0x20000008
 8001d28:	200003d0 	.word	0x200003d0

08001d2c <PI_Controller_Id>:

float PI_Controller_Id(float id_ref, float id_callback )
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d36:	edc7 0a00 	vstr	s1, [r7]
	float err;
	float output;
	err = id_ref - id_callback;
 8001d3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d3e:	edd7 7a00 	vldr	s15, [r7]
 8001d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d46:	edc7 7a03 	vstr	s15, [r7, #12]
	integrald += err*dt;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <PI_Controller_Id+0x78>)
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <PI_Controller_Id+0x7c>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <PI_Controller_Id+0x7c>)
 8001d64:	edc3 7a00 	vstr	s15, [r3]
	output = Kp*err + Ki*integrald;
 8001d68:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <PI_Controller_Id+0x80>)
 8001d6a:	ed93 7a00 	vldr	s14, [r3]
 8001d6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <PI_Controller_Id+0x84>)
 8001d78:	edd3 6a00 	vldr	s13, [r3]
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <PI_Controller_Id+0x7c>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8a:	edc7 7a02 	vstr	s15, [r7, #8]
	//if(output<-0.5) output = -0.5;
	//if(output > 0.5) output = 0.5;
	//if(output < pid->min) output = pid->min;
	return output;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	ee07 3a90 	vmov	s15, r3
}
 8001d94:	eeb0 0a67 	vmov.f32	s0, s15
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	2000000c 	.word	0x2000000c
 8001da8:	200003a4 	.word	0x200003a4
 8001dac:	20000008 	.word	0x20000008
 8001db0:	200003d0 	.word	0x200003d0

08001db4 <PID_Controller_Angle>:

float PID_Controller_Angle(float angle_ref, float angle)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dbe:	edc7 0a00 	vstr	s1, [r7]
	float err;
	float output;
	err = (angle_ref - angle);
 8001dc2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dc6:	edd7 7a00 	vldr	s15, [r7]
 8001dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dce:	edc7 7a05 	vstr	s15, [r7, #20]
	float P = err * kp;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <PID_Controller_Angle+0x88>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de0:	edc7 7a04 	vstr	s15, [r7, #16]
	integral_angle_d += err*dt;
 8001de4:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <PID_Controller_Angle+0x8c>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <PID_Controller_Angle+0x90>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <PID_Controller_Angle+0x90>)
 8001dfe:	edc3 7a00 	vstr	s15, [r3]
	float I = ki * integral_angle_d;
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <PID_Controller_Angle+0x94>)
 8001e04:	ed93 7a00 	vldr	s14, [r3]
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <PID_Controller_Angle+0x90>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	edc7 7a03 	vstr	s15, [r7, #12]
	output = (P + I);
 8001e16:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	edc7 7a02 	vstr	s15, [r7, #8]
	return output;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	ee07 3a90 	vmov	s15, r3
}
 8001e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000010 	.word	0x20000010
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	200003f8 	.word	0x200003f8
 8001e48:	200003e4 	.word	0x200003e4

08001e4c <PID_Controller_Speed>:

float PID_Controller_Speed(float speed_ref, float speed_now)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e56:	edc7 0a00 	vstr	s1, [r7]
	float err;
	float output;
	err = (speed_ref - speed_now);
 8001e5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e5e:	edd7 7a00 	vldr	s15, [r7]
 8001e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e66:	edc7 7a05 	vstr	s15, [r7, #20]
	float P = err * kp_speed;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <PID_Controller_Speed+0x88>)
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	edc7 7a04 	vstr	s15, [r7, #16]
	integral_speed_d += err*dt;
 8001e7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <PID_Controller_Speed+0x8c>)
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <PID_Controller_Speed+0x90>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <PID_Controller_Speed+0x90>)
 8001e96:	edc3 7a00 	vstr	s15, [r3]
	float I = ki_speed * integral_speed_d;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <PID_Controller_Speed+0x94>)
 8001e9c:	ed93 7a00 	vldr	s14, [r3]
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <PID_Controller_Speed+0x90>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	edc7 7a03 	vstr	s15, [r7, #12]
	output = (P + I);
 8001eae:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eba:	edc7 7a02 	vstr	s15, [r7, #8]
	return output;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	ee07 3a90 	vmov	s15, r3
}
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000014 	.word	0x20000014
 8001ed8:	2000000c 	.word	0x2000000c
 8001edc:	200003fc 	.word	0x200003fc
 8001ee0:	200003f4 	.word	0x200003f4

08001ee4 <DWT_Init>:


void DWT_Init(void) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <DWT_Init+0x28>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a07      	ldr	r2, [pc, #28]	@ (8001f0c <DWT_Init+0x28>)
 8001eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef2:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <DWT_Init+0x2c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <DWT_Init+0x2c>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000edf0 	.word	0xe000edf0
 8001f10:	e0001000 	.word	0xe0001000
 8001f14:	00000000 	.word	0x00000000

08001f18 <speed_control_FOC>:
    vq = PI_Controller_Iq(iq_ref, current.iq_callback);
    phasa = foc_direct(vd, vq, angle_el , &htim1);
}

void speed_control_FOC()
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
	SensorUpdate();
 8001f1e:	f7ff f9a7 	bl	8001270 <SensorUpdate>
    angle_el = electricalAngle();
 8001f22:	f7ff fa49 	bl	80013b8 <electricalAngle>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	4b91      	ldr	r3, [pc, #580]	@ (8002170 <speed_control_FOC+0x258>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Start(&hadc1);
 8001f30:	4890      	ldr	r0, [pc, #576]	@ (8002174 <speed_control_FOC+0x25c>)
 8001f32:	f001 fc1d 	bl	8003770 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8001f36:	4890      	ldr	r0, [pc, #576]	@ (8002178 <speed_control_FOC+0x260>)
 8001f38:	f001 fc1a 	bl	8003770 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc3);
 8001f3c:	488f      	ldr	r0, [pc, #572]	@ (800217c <speed_control_FOC+0x264>)
 8001f3e:	f001 fc17 	bl	8003770 <HAL_ADC_Start>
	adc1 = HAL_ADC_GetValue(&hadc1);
 8001f42:	488c      	ldr	r0, [pc, #560]	@ (8002174 <speed_control_FOC+0x25c>)
 8001f44:	f001 fce6 	bl	8003914 <HAL_ADC_GetValue>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002180 <speed_control_FOC+0x268>)
 8001f4e:	801a      	strh	r2, [r3, #0]
	adc2 = HAL_ADC_GetValue(&hadc2);
 8001f50:	4889      	ldr	r0, [pc, #548]	@ (8002178 <speed_control_FOC+0x260>)
 8001f52:	f001 fcdf 	bl	8003914 <HAL_ADC_GetValue>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8002184 <speed_control_FOC+0x26c>)
 8001f5c:	801a      	strh	r2, [r3, #0]
	adc3 = HAL_ADC_GetValue(&hadc3);
 8001f5e:	4887      	ldr	r0, [pc, #540]	@ (800217c <speed_control_FOC+0x264>)
 8001f60:	f001 fcd8 	bl	8003914 <HAL_ADC_GetValue>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b87      	ldr	r3, [pc, #540]	@ (8002188 <speed_control_FOC+0x270>)
 8001f6a:	801a      	strh	r2, [r3, #0]
	angle_ref = 0.0;
 8001f6c:	4b87      	ldr	r3, [pc, #540]	@ (800218c <speed_control_FOC+0x274>)
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
	//angle_now = -kalman_angle;


    angle_now = -kalman_angle;
 8001f74:	4b86      	ldr	r3, [pc, #536]	@ (8002190 <speed_control_FOC+0x278>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	eef1 7a67 	vneg.f32	s15, s15
 8001f7e:	4b85      	ldr	r3, [pc, #532]	@ (8002194 <speed_control_FOC+0x27c>)
 8001f80:	edc3 7a00 	vstr	s15, [r3]
    speed_ref = PID_Controller_Angle(angle_ref, angle_now);
 8001f84:	4b81      	ldr	r3, [pc, #516]	@ (800218c <speed_control_FOC+0x274>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	4b82      	ldr	r3, [pc, #520]	@ (8002194 <speed_control_FOC+0x27c>)
 8001f8c:	ed93 7a00 	vldr	s14, [r3]
 8001f90:	eef0 0a47 	vmov.f32	s1, s14
 8001f94:	eeb0 0a67 	vmov.f32	s0, s15
 8001f98:	f7ff ff0c 	bl	8001db4 <PID_Controller_Angle>
 8001f9c:	eef0 7a40 	vmov.f32	s15, s0
 8001fa0:	4b7d      	ldr	r3, [pc, #500]	@ (8002198 <speed_control_FOC+0x280>)
 8001fa2:	edc3 7a00 	vstr	s15, [r3]

    float mecAngleNum   = AS5048_ReadAngle() / 8192.0f * 360.0f;
 8001fa6:	f7ff f8d1 	bl	800114c <AS5048_ReadAngle>
 8001faa:	4603      	mov	r3, r0
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb4:	eddf 6a79 	vldr	s13, [pc, #484]	@ 800219c <speed_control_FOC+0x284>
 8001fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fbc:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80021a0 <speed_control_FOC+0x288>
 8001fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc4:	edc7 7a03 	vstr	s15, [r7, #12]
    float angle_rad = mecAngleNum * M_PI / 180.0f;
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7fe fabd 	bl	8000548 <__aeabi_f2d>
 8001fce:	a364      	add	r3, pc, #400	@ (adr r3, 8002160 <speed_control_FOC+0x248>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fb10 	bl	80005f8 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80021a4 <speed_control_FOC+0x28c>)
 8001fe6:	f7fe fc31 	bl	800084c <__aeabi_ddiv>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fdd9 	bl	8000ba8 <__aeabi_d2f>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	60bb      	str	r3, [r7, #8]

    float delta_angle = angle_rad - prev_angle;
 8001ffa:	4b6b      	ldr	r3, [pc, #428]	@ (80021a8 <speed_control_FOC+0x290>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ed97 7a02 	vldr	s14, [r7, #8]
 8002004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002008:	edc7 7a01 	vstr	s15, [r7, #4]
    prev_angle = angle_rad;
 800200c:	4a66      	ldr	r2, [pc, #408]	@ (80021a8 <speed_control_FOC+0x290>)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	6013      	str	r3, [r2, #0]
    speed = (delta_angle/dt) / (2.0 * M_PI);
 8002012:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <speed_control_FOC+0x294>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ed97 7a01 	vldr	s14, [r7, #4]
 800201c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002020:	ee16 0a90 	vmov	r0, s13
 8002024:	f7fe fa90 	bl	8000548 <__aeabi_f2d>
 8002028:	a34f      	add	r3, pc, #316	@ (adr r3, 8002168 <speed_control_FOC+0x250>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fc0d 	bl	800084c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fdb5 	bl	8000ba8 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	4a5b      	ldr	r2, [pc, #364]	@ (80021b0 <speed_control_FOC+0x298>)
 8002042:	6013      	str	r3, [r2, #0]
    iq_ref = PID_Controller_Speed(speed_ref, speed);
 8002044:	4b54      	ldr	r3, [pc, #336]	@ (8002198 <speed_control_FOC+0x280>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	4b59      	ldr	r3, [pc, #356]	@ (80021b0 <speed_control_FOC+0x298>)
 800204c:	ed93 7a00 	vldr	s14, [r3]
 8002050:	eef0 0a47 	vmov.f32	s1, s14
 8002054:	eeb0 0a67 	vmov.f32	s0, s15
 8002058:	f7ff fef8 	bl	8001e4c <PID_Controller_Speed>
 800205c:	eef0 7a40 	vmov.f32	s15, s0
 8002060:	4b54      	ldr	r3, [pc, #336]	@ (80021b4 <speed_control_FOC+0x29c>)
 8002062:	edc3 7a00 	vstr	s15, [r3]
    current = foc_callback(adc1, adc2, angle_el);
 8002066:	4b46      	ldr	r3, [pc, #280]	@ (8002180 <speed_control_FOC+0x268>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	4a46      	ldr	r2, [pc, #280]	@ (8002184 <speed_control_FOC+0x26c>)
 800206c:	8812      	ldrh	r2, [r2, #0]
 800206e:	4940      	ldr	r1, [pc, #256]	@ (8002170 <speed_control_FOC+0x258>)
 8002070:	edd1 7a00 	vldr	s15, [r1]
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fa78 	bl	8001570 <foc_callback>
 8002080:	eeb0 6a40 	vmov.f32	s12, s0
 8002084:	eef0 6a60 	vmov.f32	s13, s1
 8002088:	eeb0 7a41 	vmov.f32	s14, s2
 800208c:	eef0 7a61 	vmov.f32	s15, s3
 8002090:	4b49      	ldr	r3, [pc, #292]	@ (80021b8 <speed_control_FOC+0x2a0>)
 8002092:	ed83 6a00 	vstr	s12, [r3]
 8002096:	edc3 6a01 	vstr	s13, [r3, #4]
 800209a:	ed83 7a02 	vstr	s14, [r3, #8]
 800209e:	edc3 7a03 	vstr	s15, [r3, #12]


    if (iq_ref > 9.5f) iq_ref = 9.5f;
 80020a2:	4b44      	ldr	r3, [pc, #272]	@ (80021b4 <speed_control_FOC+0x29c>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	eeb2 7a03 	vmov.f32	s14, #35	@ 0x41180000  9.5
 80020ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b4:	dd02      	ble.n	80020bc <speed_control_FOC+0x1a4>
 80020b6:	4b3f      	ldr	r3, [pc, #252]	@ (80021b4 <speed_control_FOC+0x29c>)
 80020b8:	4a40      	ldr	r2, [pc, #256]	@ (80021bc <speed_control_FOC+0x2a4>)
 80020ba:	601a      	str	r2, [r3, #0]
    if (iq_ref < -9.5f) iq_ref = -9.5f;
 80020bc:	4b3d      	ldr	r3, [pc, #244]	@ (80021b4 <speed_control_FOC+0x29c>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eeba 7a03 	vmov.f32	s14, #163	@ 0xc1180000 -9.5
 80020c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ce:	d502      	bpl.n	80020d6 <speed_control_FOC+0x1be>
 80020d0:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <speed_control_FOC+0x29c>)
 80020d2:	4a3b      	ldr	r2, [pc, #236]	@ (80021c0 <speed_control_FOC+0x2a8>)
 80020d4:	601a      	str	r2, [r3, #0]
    float id_ref = 0.0f;
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	603b      	str	r3, [r7, #0]
    vd = PI_Controller_Id(id_ref, current.id_callback);
 80020dc:	4b36      	ldr	r3, [pc, #216]	@ (80021b8 <speed_control_FOC+0x2a0>)
 80020de:	edd3 7a02 	vldr	s15, [r3, #8]
 80020e2:	eef0 0a67 	vmov.f32	s1, s15
 80020e6:	ed97 0a00 	vldr	s0, [r7]
 80020ea:	f7ff fe1f 	bl	8001d2c <PI_Controller_Id>
 80020ee:	eef0 7a40 	vmov.f32	s15, s0
 80020f2:	4b34      	ldr	r3, [pc, #208]	@ (80021c4 <speed_control_FOC+0x2ac>)
 80020f4:	edc3 7a00 	vstr	s15, [r3]
    vq = PI_Controller_Iq(iq_ref, current.iq_callback);
 80020f8:	4b2e      	ldr	r3, [pc, #184]	@ (80021b4 <speed_control_FOC+0x29c>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	4b2e      	ldr	r3, [pc, #184]	@ (80021b8 <speed_control_FOC+0x2a0>)
 8002100:	ed93 7a03 	vldr	s14, [r3, #12]
 8002104:	eef0 0a47 	vmov.f32	s1, s14
 8002108:	eeb0 0a67 	vmov.f32	s0, s15
 800210c:	f7ff fdca 	bl	8001ca4 <PI_Controller_Iq>
 8002110:	eef0 7a40 	vmov.f32	s15, s0
 8002114:	4b2c      	ldr	r3, [pc, #176]	@ (80021c8 <speed_control_FOC+0x2b0>)
 8002116:	edc3 7a00 	vstr	s15, [r3]
    phasa = foc_direct(vd, vq, angle_el , &htim1);
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <speed_control_FOC+0x2ac>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <speed_control_FOC+0x2b0>)
 8002122:	ed93 7a00 	vldr	s14, [r3]
 8002126:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <speed_control_FOC+0x258>)
 8002128:	edd3 6a00 	vldr	s13, [r3]
 800212c:	4827      	ldr	r0, [pc, #156]	@ (80021cc <speed_control_FOC+0x2b4>)
 800212e:	eeb0 1a66 	vmov.f32	s2, s13
 8002132:	eef0 0a47 	vmov.f32	s1, s14
 8002136:	eeb0 0a67 	vmov.f32	s0, s15
 800213a:	f7ff fb61 	bl	8001800 <foc_direct>
 800213e:	eef0 6a40 	vmov.f32	s13, s0
 8002142:	eeb0 7a60 	vmov.f32	s14, s1
 8002146:	eef0 7a41 	vmov.f32	s15, s2
 800214a:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <speed_control_FOC+0x2b8>)
 800214c:	edc3 6a00 	vstr	s13, [r3]
 8002150:	ed83 7a01 	vstr	s14, [r3, #4]
 8002154:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	54442d18 	.word	0x54442d18
 8002164:	400921fb 	.word	0x400921fb
 8002168:	54442d18 	.word	0x54442d18
 800216c:	401921fb 	.word	0x401921fb
 8002170:	20000394 	.word	0x20000394
 8002174:	20000404 	.word	0x20000404
 8002178:	2000044c 	.word	0x2000044c
 800217c:	20000494 	.word	0x20000494
 8002180:	200003b8 	.word	0x200003b8
 8002184:	200003ba 	.word	0x200003ba
 8002188:	200003bc 	.word	0x200003bc
 800218c:	200003ec 	.word	0x200003ec
 8002190:	20000398 	.word	0x20000398
 8002194:	200003e8 	.word	0x200003e8
 8002198:	20000400 	.word	0x20000400
 800219c:	46000000 	.word	0x46000000
 80021a0:	43b40000 	.word	0x43b40000
 80021a4:	40668000 	.word	0x40668000
 80021a8:	200003a0 	.word	0x200003a0
 80021ac:	2000000c 	.word	0x2000000c
 80021b0:	2000039c 	.word	0x2000039c
 80021b4:	200003d4 	.word	0x200003d4
 80021b8:	200003c0 	.word	0x200003c0
 80021bc:	41180000 	.word	0x41180000
 80021c0:	c1180000 	.word	0xc1180000
 80021c4:	200003d8 	.word	0x200003d8
 80021c8:	200003dc 	.word	0x200003dc
 80021cc:	20000588 	.word	0x20000588
 80021d0:	200003ac 	.word	0x200003ac
 80021d4:	00000000 	.word	0x00000000

080021d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
                                                                                                                                                                                                                              HAL_Init();
 80021de:	f001 f9ed 	bl	80035bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e2:	f000 f881 	bl	80022e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e6:	f000 fafb 	bl	80027e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80021ea:	f009 fca9 	bl	800bb40 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80021ee:	f000 f8e5 	bl	80023bc <MX_ADC1_Init>
  MX_ADC2_Init();
 80021f2:	f000 f935 	bl	8002460 <MX_ADC2_Init>
  MX_TIM1_Init();
 80021f6:	f000 fa3b 	bl	8002670 <MX_TIM1_Init>
  MX_ADC3_Init();
 80021fa:	f000 f983 	bl	8002504 <MX_ADC3_Init>
  MX_SPI1_Init();
 80021fe:	f000 fa01 	bl	8002604 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002202:	f000 f9d1 	bl	80025a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002206:	2100      	movs	r1, #0
 8002208:	482f      	ldr	r0, [pc, #188]	@ (80022c8 <main+0xf0>)
 800220a:	f005 fb27 	bl	800785c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800220e:	2104      	movs	r1, #4
 8002210:	482d      	ldr	r0, [pc, #180]	@ (80022c8 <main+0xf0>)
 8002212:	f005 fb23 	bl	800785c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002216:	2108      	movs	r1, #8
 8002218:	482b      	ldr	r0, [pc, #172]	@ (80022c8 <main+0xf0>)
 800221a:	f005 fb1f 	bl	800785c <HAL_TIM_PWM_Start>


  uint32_t last_tick1 = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  DWT_Init();
 8002222:	f7ff fe5f 	bl	8001ee4 <DWT_Init>
  MPU6050_Init(&MPU6050);
 8002226:	4829      	ldr	r0, [pc, #164]	@ (80022cc <main+0xf4>)
 8002228:	f000 fb54 	bl	80028d4 <MPU6050_Init>
  Sensor_Init();
 800222c:	f7fe ffd8 	bl	80011e0 <Sensor_Init>
  alignSensor();
 8002230:	f7ff f8d0 	bl	80013d4 <alignSensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

			  if (HAL_GetTick() - last_tick >= 1)
 8002234:	f001 fa28 	bl	8003688 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <main+0xf8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d0f8      	beq.n	8002234 <main+0x5c>
			 	  {
				  last_tick = HAL_GetTick();
 8002242:	f001 fa21 	bl	8003688 <HAL_GetTick>
 8002246:	4603      	mov	r3, r0
 8002248:	4a21      	ldr	r2, [pc, #132]	@ (80022d0 <main+0xf8>)
 800224a:	6013      	str	r3, [r2, #0]
				  MPU6050_Read_Gyro(&MPU6050);
 800224c:	481f      	ldr	r0, [pc, #124]	@ (80022cc <main+0xf4>)
 800224e:	f000 fd03 	bl	8002c58 <MPU6050_Read_Gyro>
				  kalman_angle = MPU6050.KalmanAngleY * M_PI / 180.0;
 8002252:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <main+0xf4>)
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f976 	bl	8000548 <__aeabi_f2d>
 800225c:	a318      	add	r3, pc, #96	@ (adr r3, 80022c0 <main+0xe8>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fe f9c9 	bl	80005f8 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <main+0xfc>)
 8002274:	f7fe faea 	bl	800084c <__aeabi_ddiv>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fc92 	bl	8000ba8 <__aeabi_d2f>
 8002284:	4603      	mov	r3, r0
 8002286:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <main+0x100>)
 8002288:	6013      	str	r3, [r2, #0]
				  dt = (float) (HAL_GetTick() - timer1) / 1000;
 800228a:	f001 f9fd 	bl	8003688 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <main+0x104>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80022e0 <main+0x108>
 80022a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a6:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <main+0x10c>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]
				  timer1 = HAL_GetTick();
 80022ac:	f001 f9ec 	bl	8003688 <HAL_GetTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <main+0x104>)
 80022b4:	6013      	str	r3, [r2, #0]
				  speed_control_FOC();
 80022b6:	f7ff fe2f 	bl	8001f18 <speed_control_FOC>
			  if (HAL_GetTick() - last_tick >= 1)
 80022ba:	e7bb      	b.n	8002234 <main+0x5c>
 80022bc:	f3af 8000 	nop.w
 80022c0:	54442d18 	.word	0x54442d18
 80022c4:	400921fb 	.word	0x400921fb
 80022c8:	20000588 	.word	0x20000588
 80022cc:	200005d0 	.word	0x200005d0
 80022d0:	200003e0 	.word	0x200003e0
 80022d4:	40668000 	.word	0x40668000
 80022d8:	20000398 	.word	0x20000398
 80022dc:	200003f0 	.word	0x200003f0
 80022e0:	447a0000 	.word	0x447a0000
 80022e4:	2000000c 	.word	0x2000000c

080022e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b094      	sub	sp, #80	@ 0x50
 80022ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ee:	f107 0320 	add.w	r3, r7, #32
 80022f2:	2230      	movs	r2, #48	@ 0x30
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00a ff90 	bl	800d21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	4b28      	ldr	r3, [pc, #160]	@ (80023b4 <SystemClock_Config+0xcc>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	4a27      	ldr	r2, [pc, #156]	@ (80023b4 <SystemClock_Config+0xcc>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231a:	6413      	str	r3, [r2, #64]	@ 0x40
 800231c:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <SystemClock_Config+0xcc>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <SystemClock_Config+0xd0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a21      	ldr	r2, [pc, #132]	@ (80023b8 <SystemClock_Config+0xd0>)
 8002332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <SystemClock_Config+0xd0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002344:	2301      	movs	r3, #1
 8002346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800234e:	2302      	movs	r3, #2
 8002350:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002352:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002358:	2304      	movs	r3, #4
 800235a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800235c:	23a8      	movs	r3, #168	@ 0xa8
 800235e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002360:	2302      	movs	r3, #2
 8002362:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002364:	2307      	movs	r3, #7
 8002366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002368:	f107 0320 	add.w	r3, r7, #32
 800236c:	4618      	mov	r0, r3
 800236e:	f004 fa3b 	bl	80067e8 <HAL_RCC_OscConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002378:	f000 faa6 	bl	80028c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800237c:	230f      	movs	r3, #15
 800237e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002380:	2302      	movs	r3, #2
 8002382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800238e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fc9c 	bl	8006cd8 <HAL_RCC_ClockConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023a6:	f000 fa8f 	bl	80028c8 <Error_Handler>
  }
}
 80023aa:	bf00      	nop
 80023ac:	3750      	adds	r7, #80	@ 0x50
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000

080023bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023c2:	463b      	mov	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <MX_ADC1_Init+0x98>)
 80023d0:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <MX_ADC1_Init+0x9c>)
 80023d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <MX_ADC1_Init+0x98>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <MX_ADC1_Init+0x98>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <MX_ADC1_Init+0x98>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <MX_ADC1_Init+0x98>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <MX_ADC1_Init+0x98>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023f4:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <MX_ADC1_Init+0x98>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023fa:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <MX_ADC1_Init+0x98>)
 80023fc:	4a17      	ldr	r2, [pc, #92]	@ (800245c <MX_ADC1_Init+0xa0>)
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002400:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <MX_ADC1_Init+0x98>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <MX_ADC1_Init+0x98>)
 8002408:	2201      	movs	r2, #1
 800240a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800240c:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <MX_ADC1_Init+0x98>)
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002414:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <MX_ADC1_Init+0x98>)
 8002416:	2201      	movs	r2, #1
 8002418:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800241a:	480e      	ldr	r0, [pc, #56]	@ (8002454 <MX_ADC1_Init+0x98>)
 800241c:	f001 f964 	bl	80036e8 <HAL_ADC_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002426:	f000 fa4f 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800242e:	2301      	movs	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002436:	463b      	mov	r3, r7
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	@ (8002454 <MX_ADC1_Init+0x98>)
 800243c:	f001 fa78 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002446:	f000 fa3f 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000404 	.word	0x20000404
 8002458:	40012000 	.word	0x40012000
 800245c:	0f000001 	.word	0x0f000001

08002460 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002466:	463b      	mov	r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002472:	4b21      	ldr	r3, [pc, #132]	@ (80024f8 <MX_ADC2_Init+0x98>)
 8002474:	4a21      	ldr	r2, [pc, #132]	@ (80024fc <MX_ADC2_Init+0x9c>)
 8002476:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002478:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <MX_ADC2_Init+0x98>)
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <MX_ADC2_Init+0x98>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <MX_ADC2_Init+0x98>)
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <MX_ADC2_Init+0x98>)
 800248c:	2201      	movs	r2, #1
 800248e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <MX_ADC2_Init+0x98>)
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002498:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <MX_ADC2_Init+0x98>)
 800249a:	2200      	movs	r2, #0
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800249e:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <MX_ADC2_Init+0x98>)
 80024a0:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <MX_ADC2_Init+0xa0>)
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024a4:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <MX_ADC2_Init+0x98>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80024aa:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <MX_ADC2_Init+0x98>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80024b0:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <MX_ADC2_Init+0x98>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <MX_ADC2_Init+0x98>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80024be:	480e      	ldr	r0, [pc, #56]	@ (80024f8 <MX_ADC2_Init+0x98>)
 80024c0:	f001 f912 	bl	80036e8 <HAL_ADC_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80024ca:	f000 f9fd 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024da:	463b      	mov	r3, r7
 80024dc:	4619      	mov	r1, r3
 80024de:	4806      	ldr	r0, [pc, #24]	@ (80024f8 <MX_ADC2_Init+0x98>)
 80024e0:	f001 fa26 	bl	8003930 <HAL_ADC_ConfigChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80024ea:	f000 f9ed 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000044c 	.word	0x2000044c
 80024fc:	40012100 	.word	0x40012100
 8002500:	0f000001 	.word	0x0f000001

08002504 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800250a:	463b      	mov	r3, r7
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002516:	4b21      	ldr	r3, [pc, #132]	@ (800259c <MX_ADC3_Init+0x98>)
 8002518:	4a21      	ldr	r2, [pc, #132]	@ (80025a0 <MX_ADC3_Init+0x9c>)
 800251a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800251c:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <MX_ADC3_Init+0x98>)
 800251e:	2200      	movs	r2, #0
 8002520:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002522:	4b1e      	ldr	r3, [pc, #120]	@ (800259c <MX_ADC3_Init+0x98>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002528:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <MX_ADC3_Init+0x98>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800252e:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <MX_ADC3_Init+0x98>)
 8002530:	2201      	movs	r2, #1
 8002532:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002534:	4b19      	ldr	r3, [pc, #100]	@ (800259c <MX_ADC3_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800253c:	4b17      	ldr	r3, [pc, #92]	@ (800259c <MX_ADC3_Init+0x98>)
 800253e:	2200      	movs	r2, #0
 8002540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <MX_ADC3_Init+0x98>)
 8002544:	4a17      	ldr	r2, [pc, #92]	@ (80025a4 <MX_ADC3_Init+0xa0>)
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <MX_ADC3_Init+0x98>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <MX_ADC3_Init+0x98>)
 8002550:	2201      	movs	r2, #1
 8002552:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <MX_ADC3_Init+0x98>)
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <MX_ADC3_Init+0x98>)
 800255e:	2201      	movs	r2, #1
 8002560:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002562:	480e      	ldr	r0, [pc, #56]	@ (800259c <MX_ADC3_Init+0x98>)
 8002564:	f001 f8c0 	bl	80036e8 <HAL_ADC_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800256e:	f000 f9ab 	bl	80028c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002572:	2302      	movs	r3, #2
 8002574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800257e:	463b      	mov	r3, r7
 8002580:	4619      	mov	r1, r3
 8002582:	4806      	ldr	r0, [pc, #24]	@ (800259c <MX_ADC3_Init+0x98>)
 8002584:	f001 f9d4 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800258e:	f000 f99b 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000494 	.word	0x20000494
 80025a0:	40012200 	.word	0x40012200
 80025a4:	0f000001 	.word	0x0f000001

080025a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025ac:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025ae:	4a13      	ldr	r2, [pc, #76]	@ (80025fc <MX_I2C1_Init+0x54>)
 80025b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025b2:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025b4:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <MX_I2C1_Init+0x58>)
 80025b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025b8:	4b0f      	ldr	r3, [pc, #60]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025be:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d8:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025e4:	4804      	ldr	r0, [pc, #16]	@ (80025f8 <MX_I2C1_Init+0x50>)
 80025e6:	f001 fe89 	bl	80042fc <HAL_I2C_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025f0:	f000 f96a 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200004dc 	.word	0x200004dc
 80025fc:	40005400 	.word	0x40005400
 8002600:	000186a0 	.word	0x000186a0

08002604 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <MX_SPI1_Init+0x64>)
 800260a:	4a18      	ldr	r2, [pc, #96]	@ (800266c <MX_SPI1_Init+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002610:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002614:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002616:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800261c:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <MX_SPI1_Init+0x64>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002624:	2202      	movs	r2, #2
 8002626:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <MX_SPI1_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002634:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002636:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800263c:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <MX_SPI1_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002648:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <MX_SPI1_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002650:	220a      	movs	r2, #10
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002654:	4804      	ldr	r0, [pc, #16]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002656:	f004 fd4b 	bl	80070f0 <HAL_SPI_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002660:	f000 f932 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000530 	.word	0x20000530
 800266c:	40013000 	.word	0x40013000

08002670 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b096      	sub	sp, #88	@ 0x58
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002676:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002684:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800268e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]
 800269e:	615a      	str	r2, [r3, #20]
 80026a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2220      	movs	r2, #32
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00a fdb7 	bl	800d21c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026ae:	4b4a      	ldr	r3, [pc, #296]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026b0:	4a4a      	ldr	r2, [pc, #296]	@ (80027dc <MX_TIM1_Init+0x16c>)
 80026b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026b4:	4b48      	ldr	r3, [pc, #288]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80026ba:	4b47      	ldr	r3, [pc, #284]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026bc:	2220      	movs	r2, #32
 80026be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80026c0:	4b45      	ldr	r3, [pc, #276]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026c2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80026c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c8:	4b43      	ldr	r3, [pc, #268]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026ce:	4b42      	ldr	r3, [pc, #264]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d4:	4b40      	ldr	r3, [pc, #256]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026da:	483f      	ldr	r0, [pc, #252]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026dc:	f005 f816 	bl	800770c <HAL_TIM_Base_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80026e6:	f000 f8ef 	bl	80028c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80026f4:	4619      	mov	r1, r3
 80026f6:	4838      	ldr	r0, [pc, #224]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80026f8:	f005 fa3a 	bl	8007b70 <HAL_TIM_ConfigClockSource>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002702:	f000 f8e1 	bl	80028c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002706:	4834      	ldr	r0, [pc, #208]	@ (80027d8 <MX_TIM1_Init+0x168>)
 8002708:	f005 f84f 	bl	80077aa <HAL_TIM_PWM_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002712:	f000 f8d9 	bl	80028c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800271e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002722:	4619      	mov	r1, r3
 8002724:	482c      	ldr	r0, [pc, #176]	@ (80027d8 <MX_TIM1_Init+0x168>)
 8002726:	f005 fe01 	bl	800832c <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002730:	f000 f8ca 	bl	80028c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002734:	2360      	movs	r3, #96	@ 0x60
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273c:	2300      	movs	r3, #0
 800273e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002740:	2300      	movs	r3, #0
 8002742:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	481f      	ldr	r0, [pc, #124]	@ (80027d8 <MX_TIM1_Init+0x168>)
 800275a:	f005 f947 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002764:	f000 f8b0 	bl	80028c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276c:	2204      	movs	r2, #4
 800276e:	4619      	mov	r1, r3
 8002770:	4819      	ldr	r0, [pc, #100]	@ (80027d8 <MX_TIM1_Init+0x168>)
 8002772:	f005 f93b 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800277c:	f000 f8a4 	bl	80028c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002784:	2208      	movs	r2, #8
 8002786:	4619      	mov	r1, r3
 8002788:	4813      	ldr	r0, [pc, #76]	@ (80027d8 <MX_TIM1_Init+0x168>)
 800278a:	f005 f92f 	bl	80079ec <HAL_TIM_PWM_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002794:	f000 f898 	bl	80028c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4807      	ldr	r0, [pc, #28]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80027bc:	f005 fe32 	bl	8008424 <HAL_TIMEx_ConfigBreakDeadTime>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80027c6:	f000 f87f 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027ca:	4803      	ldr	r0, [pc, #12]	@ (80027d8 <MX_TIM1_Init+0x168>)
 80027cc:	f000 fd80 	bl	80032d0 <HAL_TIM_MspPostInit>

}
 80027d0:	bf00      	nop
 80027d2:	3758      	adds	r7, #88	@ 0x58
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000588 	.word	0x20000588
 80027dc:	40010000 	.word	0x40010000

080027e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	@ 0x28
 80027e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b30      	ldr	r3, [pc, #192]	@ (80028bc <MX_GPIO_Init+0xdc>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	4a2f      	ldr	r2, [pc, #188]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6313      	str	r3, [r2, #48]	@ 0x30
 8002806:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a28      	ldr	r2, [pc, #160]	@ (80028bc <MX_GPIO_Init+0xdc>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b22      	ldr	r3, [pc, #136]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a21      	ldr	r2, [pc, #132]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a1a      	ldr	r2, [pc, #104]	@ (80028bc <MX_GPIO_Init+0xdc>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <MX_GPIO_Init+0xdc>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002866:	2200      	movs	r2, #0
 8002868:	2110      	movs	r1, #16
 800286a:	4815      	ldr	r0, [pc, #84]	@ (80028c0 <MX_GPIO_Init+0xe0>)
 800286c:	f001 fd2c 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002870:	2200      	movs	r2, #0
 8002872:	2104      	movs	r1, #4
 8002874:	4813      	ldr	r0, [pc, #76]	@ (80028c4 <MX_GPIO_Init+0xe4>)
 8002876:	f001 fd27 	bl	80042c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800287a:	2310      	movs	r3, #16
 800287c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	2301      	movs	r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	480b      	ldr	r0, [pc, #44]	@ (80028c0 <MX_GPIO_Init+0xe0>)
 8002892:	f001 fb7d 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002896:	2304      	movs	r3, #4
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_GPIO_Init+0xe4>)
 80028ae:	f001 fb6f 	bl	8003f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	@ 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40020400 	.word	0x40020400

080028c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028cc:	b672      	cpsid	i
}
 80028ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <Error_Handler+0x8>

080028d4 <MPU6050_Init>:
const float Accel_Z_corrector = 14418.0;
MPU6050_t MPU6050;
uint32_t timer;

void MPU6050_Init(MPU6050_t *MPUDataStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	@ 0x30
 80028d8:	af04      	add	r7, sp, #16
 80028da:	6078      	str	r0, [r7, #4]
	uint8_t check, data;
	uint8_t buffer[6];
	int sumX = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
	int sumY = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61bb      	str	r3, [r7, #24]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 80028e4:	2364      	movs	r3, #100	@ 0x64
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	2301      	movs	r3, #1
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	f107 0313 	add.w	r3, r7, #19
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	2301      	movs	r3, #1
 80028f4:	2275      	movs	r2, #117	@ 0x75
 80028f6:	21d0      	movs	r1, #208	@ 0xd0
 80028f8:	4855      	ldr	r0, [pc, #340]	@ (8002a50 <MPU6050_Init+0x17c>)
 80028fa:	f001 ff3d 	bl	8004778 <HAL_I2C_Mem_Read>
    if (check == 0x68) {
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b68      	cmp	r3, #104	@ 0x68
 8002902:	d141      	bne.n	8002988 <MPU6050_Init+0xb4>
        printf("MPU6050 connect!\n");
 8002904:	4853      	ldr	r0, [pc, #332]	@ (8002a54 <MPU6050_Init+0x180>)
 8002906:	f00a fba9 	bl	800d05c <puts>
    } else {
        printf("MPU6050 no connect! (OUT: 0x%02X)\n", check);
        while(1);
    }
    data = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	74bb      	strb	r3, [r7, #18]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 800290e:	2364      	movs	r3, #100	@ 0x64
 8002910:	9302      	str	r3, [sp, #8]
 8002912:	2301      	movs	r3, #1
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	f107 0312 	add.w	r3, r7, #18
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2301      	movs	r3, #1
 800291e:	226b      	movs	r2, #107	@ 0x6b
 8002920:	21d0      	movs	r1, #208	@ 0xd0
 8002922:	484b      	ldr	r0, [pc, #300]	@ (8002a50 <MPU6050_Init+0x17c>)
 8002924:	f001 fe2e 	bl	8004584 <HAL_I2C_Mem_Write>
    data = 0x07;
 8002928:	2307      	movs	r3, #7
 800292a:	74bb      	strb	r3, [r7, #18]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 800292c:	2364      	movs	r3, #100	@ 0x64
 800292e:	9302      	str	r3, [sp, #8]
 8002930:	2301      	movs	r3, #1
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	f107 0312 	add.w	r3, r7, #18
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2301      	movs	r3, #1
 800293c:	2219      	movs	r2, #25
 800293e:	21d0      	movs	r1, #208	@ 0xd0
 8002940:	4843      	ldr	r0, [pc, #268]	@ (8002a50 <MPU6050_Init+0x17c>)
 8002942:	f001 fe1f 	bl	8004584 <HAL_I2C_Mem_Write>
    data = 0x00;
 8002946:	2300      	movs	r3, #0
 8002948:	74bb      	strb	r3, [r7, #18]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 800294a:	2364      	movs	r3, #100	@ 0x64
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	2301      	movs	r3, #1
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	f107 0312 	add.w	r3, r7, #18
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	221b      	movs	r2, #27
 800295c:	21d0      	movs	r1, #208	@ 0xd0
 800295e:	483c      	ldr	r0, [pc, #240]	@ (8002a50 <MPU6050_Init+0x17c>)
 8002960:	f001 fe10 	bl	8004584 <HAL_I2C_Mem_Write>
	data = 0x00;
 8002964:	2300      	movs	r3, #0
 8002966:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 8002968:	2364      	movs	r3, #100	@ 0x64
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	2301      	movs	r3, #1
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	f107 0312 	add.w	r3, r7, #18
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2301      	movs	r3, #1
 8002978:	221c      	movs	r2, #28
 800297a:	21d0      	movs	r1, #208	@ 0xd0
 800297c:	4834      	ldr	r0, [pc, #208]	@ (8002a50 <MPU6050_Init+0x17c>)
 800297e:	f001 fe01 	bl	8004584 <HAL_I2C_Mem_Write>

    for(int i = 0; i < 500; i++)
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e039      	b.n	80029fc <MPU6050_Init+0x128>
        printf("MPU6050 no connect! (OUT: 0x%02X)\n", check);
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	4619      	mov	r1, r3
 800298c:	4832      	ldr	r0, [pc, #200]	@ (8002a58 <MPU6050_Init+0x184>)
 800298e:	f00a fafd 	bl	800cf8c <iprintf>
        while(1);
 8002992:	bf00      	nop
 8002994:	e7fd      	b.n	8002992 <MPU6050_Init+0xbe>
    {
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x43, 1, buffer, 6, 100);
 8002996:	2364      	movs	r3, #100	@ 0x64
 8002998:	9302      	str	r3, [sp, #8]
 800299a:	2306      	movs	r3, #6
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2301      	movs	r3, #1
 80029a6:	2243      	movs	r2, #67	@ 0x43
 80029a8:	21d0      	movs	r1, #208	@ 0xd0
 80029aa:	4829      	ldr	r0, [pc, #164]	@ (8002a50 <MPU6050_Init+0x17c>)
 80029ac:	f001 fee4 	bl	8004778 <HAL_I2C_Mem_Read>
        MPUDataStruct->gyroX = (uint16_t)(buffer[0] << 8 | buffer[1]);
 80029b0:	7b3b      	ldrb	r3, [r7, #12]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	7b7b      	ldrb	r3, [r7, #13]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b21a      	sxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	801a      	strh	r2, [r3, #0]
        MPUDataStruct->gyroY = (uint16_t)(buffer[2] << 8 | buffer[3]);
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	b21a      	sxth	r2, r3
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	805a      	strh	r2, [r3, #2]
        sumX += MPUDataStruct->gyroX;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029da:	461a      	mov	r2, r3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	61fb      	str	r3, [r7, #28]
        sumY += MPUDataStruct->gyroY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029e8:	461a      	mov	r2, r3
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4413      	add	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        HAL_Delay(10);
 80029f0:	200a      	movs	r0, #10
 80029f2:	f000 fe55 	bl	80036a0 <HAL_Delay>
    for(int i = 0; i < 500; i++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a02:	dbc8      	blt.n	8002996 <MPU6050_Init+0xc2>
    }

    MPUDataStruct->correctForRoll = sumX / 500.0;
 8002a04:	69f8      	ldr	r0, [r7, #28]
 8002a06:	f7fd fd8d 	bl	8000524 <__aeabi_i2d>
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <MPU6050_Init+0x188>)
 8002a10:	f7fd ff1c 	bl	800084c <__aeabi_ddiv>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f7fe f8c4 	bl	8000ba8 <__aeabi_d2f>
 8002a20:	4602      	mov	r2, r0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	631a      	str	r2, [r3, #48]	@ 0x30
    MPUDataStruct->correctForPitch = sumY / 500.0;
 8002a26:	69b8      	ldr	r0, [r7, #24]
 8002a28:	f7fd fd7c 	bl	8000524 <__aeabi_i2d>
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <MPU6050_Init+0x188>)
 8002a32:	f7fd ff0b 	bl	800084c <__aeabi_ddiv>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f8b3 	bl	8000ba8 <__aeabi_d2f>
 8002a42:	4602      	mov	r2, r0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	635a      	str	r2, [r3, #52]	@ 0x34


}
 8002a48:	bf00      	nop
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200004dc 	.word	0x200004dc
 8002a54:	08010130 	.word	0x08010130
 8002a58:	08010144 	.word	0x08010144
 8002a5c:	407f4000 	.word	0x407f4000

08002a60 <Kalman_getAngle>:
float Kalman_getAngle(Kalman_t *Kalman, float newAngle, float newRate, float dt)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b08d      	sub	sp, #52	@ 0x34
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a6c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a70:	ed87 1a00 	vstr	s2, [r7]
	float rate = newRate - Kalman->bias;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a82:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	Kalman->angle += dt * rate;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a8c:	edd7 6a00 	vldr	s13, [r7]
 8002a90:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	edc3 7a03 	vstr	s15, [r3, #12]

	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	edd3 6a08 	vldr	s13, [r3, #32]
 8002aae:	edd7 7a00 	vldr	s15, [r7]
 8002ab2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002abc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ac6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ad4:	edd7 7a00 	vldr	s15, [r7]
 8002ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	edc3 7a05 	vstr	s15, [r3, #20]
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	ed93 7a06 	vldr	s14, [r3, #24]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	edd3 6a08 	vldr	s13, [r3, #32]
 8002af2:	edd7 7a00 	vldr	s15, [r7]
 8002af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	edc3 7a06 	vstr	s15, [r3, #24]
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b10:	edd7 7a00 	vldr	s15, [r7]
 8002b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	edc3 7a07 	vstr	s15, [r3, #28]
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b2e:	edd7 7a00 	vldr	s15, [r7]
 8002b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	edc3 7a08 	vstr	s15, [r3, #32]

    float S = Kalman->P[0][0] + Kalman->R_measure;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float K[2];
    K[0] = Kalman->P[0][0] / S;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b5a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b62:	edc7 7a05 	vstr	s15, [r7, #20]
    K[1] = Kalman->P[1][0] / S;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b6c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b74:	edc7 7a06 	vstr	s15, [r7, #24]

    float y = newAngle - Kalman->angle;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    Kalman->angle += K[0] * y;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b90:	edd7 6a05 	vldr	s13, [r7, #20]
 8002b94:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	edc3 7a03 	vstr	s15, [r3, #12]
    Kalman->bias += K[1] * y;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002bac:	edd7 6a06 	vldr	s13, [r7, #24]
 8002bb0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	edc3 7a04 	vstr	s15, [r3, #16]

    float P00_temp = Kalman->P[0][0];
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	623b      	str	r3, [r7, #32]
    float P01_temp = Kalman->P[0][1];
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	61fb      	str	r3, [r7, #28]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bd4:	edd7 6a05 	vldr	s13, [r7, #20]
 8002bd8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	edc3 7a05 	vstr	s15, [r3, #20]
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	ed93 7a06 	vldr	s14, [r3, #24]
 8002bf0:	edd7 6a05 	vldr	s13, [r7, #20]
 8002bf4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	edc3 7a06 	vstr	s15, [r3, #24]
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c0c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c10:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	edc3 7a07 	vstr	s15, [r3, #28]
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c28:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	edc3 7a08 	vstr	s15, [r3, #32]

    return Kalman->angle;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	ee07 3a90 	vmov	s15, r3
}
 8002c46:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4a:	3734      	adds	r7, #52	@ 0x34
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	0000      	movs	r0, r0
	...

08002c58 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro(MPU6050_t *MPUDataStruct) {
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b090      	sub	sp, #64	@ 0x40
 8002c5c:	af04      	add	r7, sp, #16
 8002c5e:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	uint8_t buffer[6];


	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, data, 6, 100);
 8002c60:	2364      	movs	r3, #100	@ 0x64
 8002c62:	9302      	str	r3, [sp, #8]
 8002c64:	2306      	movs	r3, #6
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	223b      	movs	r2, #59	@ 0x3b
 8002c72:	21d0      	movs	r1, #208	@ 0xd0
 8002c74:	48ba      	ldr	r0, [pc, #744]	@ (8002f60 <MPU6050_Read_Gyro+0x308>)
 8002c76:	f001 fd7f 	bl	8004778 <HAL_I2C_Mem_Read>
	MPUDataStruct->accelX = (data[0] << 8) | data[1];
 8002c7a:	7d3b      	ldrb	r3, [r7, #20]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	7d7b      	ldrb	r3, [r7, #21]
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	80da      	strh	r2, [r3, #6]
	MPUDataStruct->accelY = (data[2] << 8) | data[3];
 8002c8c:	7dbb      	ldrb	r3, [r7, #22]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	811a      	strh	r2, [r3, #8]
	MPUDataStruct->accelZ = (data[4] << 8) | data[5];
 8002c9e:	7e3b      	ldrb	r3, [r7, #24]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	b21a      	sxth	r2, r3
 8002ca4:	7e7b      	ldrb	r3, [r7, #25]
 8002ca6:	b21b      	sxth	r3, r3
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	b21a      	sxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	815a      	strh	r2, [r3, #10]

	MPUDataStruct->Ax = MPUDataStruct->accelX / 16384.0;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc34 	bl	8000524 <__aeabi_i2d>
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	4ba8      	ldr	r3, [pc, #672]	@ (8002f64 <MPU6050_Read_Gyro+0x30c>)
 8002cc2:	f7fd fdc3 	bl	800084c <__aeabi_ddiv>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f7fd ff6b 	bl	8000ba8 <__aeabi_d2f>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
	MPUDataStruct->Ay = MPUDataStruct->accelY / 16384.0;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fc20 	bl	8000524 <__aeabi_i2d>
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	4b9e      	ldr	r3, [pc, #632]	@ (8002f64 <MPU6050_Read_Gyro+0x30c>)
 8002cea:	f7fd fdaf 	bl	800084c <__aeabi_ddiv>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd ff57 	bl	8000ba8 <__aeabi_d2f>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	611a      	str	r2, [r3, #16]
	MPUDataStruct->Az = MPUDataStruct->accelZ / Accel_Z_corrector;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0e:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8002f68 <MPU6050_Read_Gyro+0x310>
 8002d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	edc3 7a05 	vstr	s15, [r3, #20]

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x43, 1, buffer, 6, 100);
 8002d1c:	2364      	movs	r3, #100	@ 0x64
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	2306      	movs	r3, #6
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	2243      	movs	r2, #67	@ 0x43
 8002d2e:	21d0      	movs	r1, #208	@ 0xd0
 8002d30:	488b      	ldr	r0, [pc, #556]	@ (8002f60 <MPU6050_Read_Gyro+0x308>)
 8002d32:	f001 fd21 	bl	8004778 <HAL_I2C_Mem_Read>
    MPUDataStruct->gyroX = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8002d36:	7b3b      	ldrb	r3, [r7, #12]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	b21a      	sxth	r2, r3
 8002d3c:	7b7b      	ldrb	r3, [r7, #13]
 8002d3e:	b21b      	sxth	r3, r3
 8002d40:	4313      	orrs	r3, r2
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	801a      	strh	r2, [r3, #0]
    MPUDataStruct->gyroY = (uint16_t)(buffer[2] << 8 | buffer[3]);
 8002d48:	7bbb      	ldrb	r3, [r7, #14]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	b21b      	sxth	r3, r3
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b21a      	sxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	805a      	strh	r2, [r3, #2]
    MPUDataStruct->gyroZ = (uint16_t)(buffer[4] << 8 | buffer[5]);
 8002d5a:	7c3b      	ldrb	r3, [r7, #16]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b21a      	sxth	r2, r3
 8002d60:	7c7b      	ldrb	r3, [r7, #17]
 8002d62:	b21b      	sxth	r3, r3
 8002d64:	4313      	orrs	r3, r2
 8002d66:	b21a      	sxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	809a      	strh	r2, [r3, #4]

    MPUDataStruct->Gx = (MPUDataStruct->gyroX - MPUDataStruct->correctForRoll) / 131.0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002d80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d84:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002f6c <MPU6050_Read_Gyro+0x314>
 8002d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	edc3 7a06 	vstr	s15, [r3, #24]
    MPUDataStruct->Gy = (MPUDataStruct->gyroY - MPUDataStruct->correctForPitch) / 131.0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002daa:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002f6c <MPU6050_Read_Gyro+0x314>
 8002dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	edc3 7a07 	vstr	s15, [r3, #28]
    MPUDataStruct->Gz = MPUDataStruct->gyroZ / 131.0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fbb0 	bl	8000524 <__aeabi_i2d>
 8002dc4:	a362      	add	r3, pc, #392	@ (adr r3, 8002f50 <MPU6050_Read_Gyro+0x2f8>)
 8002dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dca:	f7fd fd3f 	bl	800084c <__aeabi_ddiv>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f7fd fee7 	bl	8000ba8 <__aeabi_d2f>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	621a      	str	r2, [r3, #32]

    float dt = (float) (HAL_GetTick() - timer) / 1000;
 8002de0:	f000 fc52 	bl	8003688 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b62      	ldr	r3, [pc, #392]	@ (8002f70 <MPU6050_Read_Gyro+0x318>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002df4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002f74 <MPU6050_Read_Gyro+0x31c>
 8002df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dfc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    timer = HAL_GetTick();
 8002e00:	f000 fc42 	bl	8003688 <HAL_GetTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4a5a      	ldr	r2, [pc, #360]	@ (8002f70 <MPU6050_Read_Gyro+0x318>)
 8002e08:	6013      	str	r3, [r2, #0]
    dt = (now - *lastTimeGyro) / 1000.0;
    *lastTimeGyro = now;
    MPUDataStruct->Roll_gyro += (MPUDataStruct->Gx * dt);
    MPUDataStruct->Pitch_gyro += (MPUDataStruct->Gy * dt);*/
    float roll;
    float rollSqrt = sqrt((MPUDataStruct->accelX * MPUDataStruct->accelX) + (MPUDataStruct->accelZ * MPUDataStruct->accelZ));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e10:	461a      	mov	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e18:	fb03 f202 	mul.w	r2, r3, r2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e22:	4619      	mov	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fb77 	bl	8000524 <__aeabi_i2d>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	ec43 2b10 	vmov	d0, r2, r3
 8002e3e:	f00c f87f 	bl	800ef40 <sqrt>
 8002e42:	ec53 2b10 	vmov	r2, r3, d0
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f7fd fead 	bl	8000ba8 <__aeabi_d2f>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	623b      	str	r3, [r7, #32]
    if(rollSqrt != 0)
 8002e52:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d023      	beq.n	8002ea8 <MPU6050_Read_Gyro+0x250>
    {
    	roll = atan2(-MPUDataStruct->accelY, rollSqrt) * RAD_TO_DEG;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e66:	425b      	negs	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb5b 	bl	8000524 <__aeabi_i2d>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	460d      	mov	r5, r1
 8002e72:	6a38      	ldr	r0, [r7, #32]
 8002e74:	f7fd fb68 	bl	8000548 <__aeabi_f2d>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	ec43 2b11 	vmov	d1, r2, r3
 8002e80:	ec45 4b10 	vmov	d0, r4, r5
 8002e84:	f00c f85a 	bl	800ef3c <atan2>
 8002e88:	ec51 0b10 	vmov	r0, r1, d0
 8002e8c:	a332      	add	r3, pc, #200	@ (adr r3, 8002f58 <MPU6050_Read_Gyro+0x300>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fbb1 	bl	80005f8 <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd fe83 	bl	8000ba8 <__aeabi_d2f>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea6:	e002      	b.n	8002eae <MPU6050_Read_Gyro+0x256>
    }
    else
    {
    	roll = 0;
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    float pitchSqrt = sqrt((MPUDataStruct->accelY * MPUDataStruct->accelY) + (MPUDataStruct->accelZ * MPUDataStruct->accelZ));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ebc:	fb03 f202 	mul.w	r2, r3, r2
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb25 	bl	8000524 <__aeabi_i2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	ec43 2b10 	vmov	d0, r2, r3
 8002ee2:	f00c f82d 	bl	800ef40 <sqrt>
 8002ee6:	ec53 2b10 	vmov	r2, r3, d0
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	f7fd fe5b 	bl	8000ba8 <__aeabi_d2f>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	61fb      	str	r3, [r7, #28]
    float pitch;
    if(pitchSqrt != 0)
 8002ef6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002efa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f02:	d039      	beq.n	8002f78 <MPU6050_Read_Gyro+0x320>
    {
    	pitch = atan2(-MPUDataStruct->accelX, pitchSqrt) * RAD_TO_DEG;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f0a:	425b      	negs	r3, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fb09 	bl	8000524 <__aeabi_i2d>
 8002f12:	4604      	mov	r4, r0
 8002f14:	460d      	mov	r5, r1
 8002f16:	69f8      	ldr	r0, [r7, #28]
 8002f18:	f7fd fb16 	bl	8000548 <__aeabi_f2d>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	ec43 2b11 	vmov	d1, r2, r3
 8002f24:	ec45 4b10 	vmov	d0, r4, r5
 8002f28:	f00c f808 	bl	800ef3c <atan2>
 8002f2c:	ec51 0b10 	vmov	r0, r1, d0
 8002f30:	a309      	add	r3, pc, #36	@ (adr r3, 8002f58 <MPU6050_Read_Gyro+0x300>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd fb5f 	bl	80005f8 <__aeabi_dmul>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7fd fe31 	bl	8000ba8 <__aeabi_d2f>
 8002f46:	4603      	mov	r3, r0
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f4a:	e018      	b.n	8002f7e <MPU6050_Read_Gyro+0x326>
 8002f4c:	f3af 8000 	nop.w
 8002f50:	00000000 	.word	0x00000000
 8002f54:	40606000 	.word	0x40606000
 8002f58:	1a63c1f8 	.word	0x1a63c1f8
 8002f5c:	404ca5dc 	.word	0x404ca5dc
 8002f60:	200004dc 	.word	0x200004dc
 8002f64:	40d00000 	.word	0x40d00000
 8002f68:	46614800 	.word	0x46614800
 8002f6c:	43030000 	.word	0x43030000
 8002f70:	20000610 	.word	0x20000610
 8002f74:	447a0000 	.word	0x447a0000
    }
    else
    {
    	pitch = 0;
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    MPUDataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,MPUDataStruct->Gx, dt);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f84:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8002f88:	eef0 0a67 	vmov.f32	s1, s15
 8002f8c:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002f90:	480e      	ldr	r0, [pc, #56]	@ (8002fcc <MPU6050_Read_Gyro+0x374>)
 8002f92:	f7ff fd65 	bl	8002a60 <Kalman_getAngle>
 8002f96:	eef0 7a40 	vmov.f32	s15, s0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    MPUDataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll,MPUDataStruct->Gy, dt);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fa6:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8002faa:	eef0 0a67 	vmov.f32	s1, s15
 8002fae:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8002fb2:	4807      	ldr	r0, [pc, #28]	@ (8002fd0 <MPU6050_Read_Gyro+0x378>)
 8002fb4:	f7ff fd54 	bl	8002a60 <Kalman_getAngle>
 8002fb8:	eef0 7a40 	vmov.f32	s15, s0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

}
 8002fc2:	bf00      	nop
 8002fc4:	3730      	adds	r7, #48	@ 0x30
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000003c 	.word	0x2000003c
 8002fd0:	20000018 	.word	0x20000018

08002fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <HAL_MspInit+0x4c>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8003020 <HAL_MspInit+0x4c>)
 8002fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fea:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <HAL_MspInit+0x4c>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_MspInit+0x4c>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	4a08      	ldr	r2, [pc, #32]	@ (8003020 <HAL_MspInit+0x4c>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	@ 0x40
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_MspInit+0x4c>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	@ 0x38
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a45      	ldr	r2, [pc, #276]	@ (8003158 <HAL_ADC_MspInit+0x134>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d128      	bne.n	8003098 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	4b44      	ldr	r3, [pc, #272]	@ (800315c <HAL_ADC_MspInit+0x138>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	4a43      	ldr	r2, [pc, #268]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003054:	6453      	str	r3, [r2, #68]	@ 0x44
 8003056:	4b41      	ldr	r3, [pc, #260]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a3c      	ldr	r2, [pc, #240]	@ (800315c <HAL_ADC_MspInit+0x138>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b3a      	ldr	r3, [pc, #232]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800307e:	2301      	movs	r3, #1
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003082:	2303      	movs	r3, #3
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800308e:	4619      	mov	r1, r3
 8003090:	4833      	ldr	r0, [pc, #204]	@ (8003160 <HAL_ADC_MspInit+0x13c>)
 8003092:	f000 ff7d 	bl	8003f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003096:	e05a      	b.n	800314e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a31      	ldr	r2, [pc, #196]	@ (8003164 <HAL_ADC_MspInit+0x140>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d128      	bne.n	80030f4 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	4b2d      	ldr	r3, [pc, #180]	@ (800315c <HAL_ADC_MspInit+0x138>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	4a2c      	ldr	r2, [pc, #176]	@ (800315c <HAL_ADC_MspInit+0x138>)
 80030ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030b2:	4b2a      	ldr	r3, [pc, #168]	@ (800315c <HAL_ADC_MspInit+0x138>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	4b26      	ldr	r3, [pc, #152]	@ (800315c <HAL_ADC_MspInit+0x138>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	4a25      	ldr	r2, [pc, #148]	@ (800315c <HAL_ADC_MspInit+0x138>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ce:	4b23      	ldr	r3, [pc, #140]	@ (800315c <HAL_ADC_MspInit+0x138>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030da:	2302      	movs	r3, #2
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030de:	2303      	movs	r3, #3
 80030e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ea:	4619      	mov	r1, r3
 80030ec:	481c      	ldr	r0, [pc, #112]	@ (8003160 <HAL_ADC_MspInit+0x13c>)
 80030ee:	f000 ff4f 	bl	8003f90 <HAL_GPIO_Init>
}
 80030f2:	e02c      	b.n	800314e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003168 <HAL_ADC_MspInit+0x144>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d127      	bne.n	800314e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	4a15      	ldr	r2, [pc, #84]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003108:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800310c:	6453      	str	r3, [r2, #68]	@ 0x44
 800310e:	4b13      	ldr	r3, [pc, #76]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	4a0e      	ldr	r2, [pc, #56]	@ (800315c <HAL_ADC_MspInit+0x138>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6313      	str	r3, [r2, #48]	@ 0x30
 800312a:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <HAL_ADC_MspInit+0x138>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003136:	2304      	movs	r3, #4
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800313a:	2303      	movs	r3, #3
 800313c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003146:	4619      	mov	r1, r3
 8003148:	4805      	ldr	r0, [pc, #20]	@ (8003160 <HAL_ADC_MspInit+0x13c>)
 800314a:	f000 ff21 	bl	8003f90 <HAL_GPIO_Init>
}
 800314e:	bf00      	nop
 8003150:	3738      	adds	r7, #56	@ 0x38
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40012000 	.word	0x40012000
 800315c:	40023800 	.word	0x40023800
 8003160:	40020000 	.word	0x40020000
 8003164:	40012100 	.word	0x40012100
 8003168:	40012200 	.word	0x40012200

0800316c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	@ 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	@ (80031f0 <HAL_I2C_MspInit+0x84>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d12b      	bne.n	80031e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	4b18      	ldr	r3, [pc, #96]	@ (80031f4 <HAL_I2C_MspInit+0x88>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	4a17      	ldr	r2, [pc, #92]	@ (80031f4 <HAL_I2C_MspInit+0x88>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6313      	str	r3, [r2, #48]	@ 0x30
 800319e:	4b15      	ldr	r3, [pc, #84]	@ (80031f4 <HAL_I2C_MspInit+0x88>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031aa:	23c0      	movs	r3, #192	@ 0xc0
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ae:	2312      	movs	r3, #18
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031ba:	2304      	movs	r3, #4
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	480c      	ldr	r0, [pc, #48]	@ (80031f8 <HAL_I2C_MspInit+0x8c>)
 80031c6:	f000 fee3 	bl	8003f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b09      	ldr	r3, [pc, #36]	@ (80031f4 <HAL_I2C_MspInit+0x88>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	4a08      	ldr	r2, [pc, #32]	@ (80031f4 <HAL_I2C_MspInit+0x88>)
 80031d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_I2C_MspInit+0x88>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031e6:	bf00      	nop
 80031e8:	3728      	adds	r7, #40	@ 0x28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40005400 	.word	0x40005400
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020400 	.word	0x40020400

080031fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	@ (8003280 <HAL_SPI_MspInit+0x84>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d12b      	bne.n	8003276 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <HAL_SPI_MspInit+0x88>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	4a17      	ldr	r2, [pc, #92]	@ (8003284 <HAL_SPI_MspInit+0x88>)
 8003228:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800322c:	6453      	str	r3, [r2, #68]	@ 0x44
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_SPI_MspInit+0x88>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <HAL_SPI_MspInit+0x88>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	4a10      	ldr	r2, [pc, #64]	@ (8003284 <HAL_SPI_MspInit+0x88>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6313      	str	r3, [r2, #48]	@ 0x30
 800324a:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <HAL_SPI_MspInit+0x88>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003256:	23e0      	movs	r3, #224	@ 0xe0
 8003258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003262:	2303      	movs	r3, #3
 8003264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003266:	2305      	movs	r3, #5
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	4805      	ldr	r0, [pc, #20]	@ (8003288 <HAL_SPI_MspInit+0x8c>)
 8003272:	f000 fe8d 	bl	8003f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003276:	bf00      	nop
 8003278:	3728      	adds	r7, #40	@ 0x28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40013000 	.word	0x40013000
 8003284:	40023800 	.word	0x40023800
 8003288:	40020000 	.word	0x40020000

0800328c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0b      	ldr	r2, [pc, #44]	@ (80032c8 <HAL_TIM_Base_MspInit+0x3c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10d      	bne.n	80032ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_TIM_Base_MspInit+0x40>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <HAL_TIM_Base_MspInit+0x40>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ae:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <HAL_TIM_Base_MspInit+0x40>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 030c 	add.w	r3, r7, #12
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <HAL_TIM_MspPostInit+0x68>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d11e      	bne.n	8003330 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	4b11      	ldr	r3, [pc, #68]	@ (800333c <HAL_TIM_MspPostInit+0x6c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	4a10      	ldr	r2, [pc, #64]	@ (800333c <HAL_TIM_MspPostInit+0x6c>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6313      	str	r3, [r2, #48]	@ 0x30
 8003302:	4b0e      	ldr	r3, [pc, #56]	@ (800333c <HAL_TIM_MspPostInit+0x6c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800330e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003312:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003320:	2301      	movs	r3, #1
 8003322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003324:	f107 030c 	add.w	r3, r7, #12
 8003328:	4619      	mov	r1, r3
 800332a:	4805      	ldr	r0, [pc, #20]	@ (8003340 <HAL_TIM_MspPostInit+0x70>)
 800332c:	f000 fe30 	bl	8003f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003330:	bf00      	nop
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40010000 	.word	0x40010000
 800333c:	40023800 	.word	0x40023800
 8003340:	40020000 	.word	0x40020000

08003344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <NMI_Handler+0x4>

0800334c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <HardFault_Handler+0x4>

08003354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <MemManage_Handler+0x4>

0800335c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <BusFault_Handler+0x4>

08003364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <UsageFault_Handler+0x4>

0800336c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800339a:	f000 f961 	bl	8003660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80033a8:	4802      	ldr	r0, [pc, #8]	@ (80033b4 <OTG_FS_IRQHandler+0x10>)
 80033aa:	f002 f90f 	bl	80055cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20001afc 	.word	0x20001afc

080033b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return 1;
 80033bc:	2301      	movs	r3, #1
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <_kill>:

int _kill(int pid, int sig)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033d2:	f009 ff75 	bl	800d2c0 <__errno>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2216      	movs	r2, #22
 80033da:	601a      	str	r2, [r3, #0]
  return -1;
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_exit>:

void _exit (int status)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ffe7 	bl	80033c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033fa:	bf00      	nop
 80033fc:	e7fd      	b.n	80033fa <_exit+0x12>

080033fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e00a      	b.n	8003426 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003410:	f3af 8000 	nop.w
 8003414:	4601      	mov	r1, r0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	60ba      	str	r2, [r7, #8]
 800341c:	b2ca      	uxtb	r2, r1
 800341e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3301      	adds	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	429a      	cmp	r2, r3
 800342c:	dbf0      	blt.n	8003410 <_read+0x12>
  }

  return len;
 800342e:	687b      	ldr	r3, [r7, #4]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e009      	b.n	800345e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	60ba      	str	r2, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3301      	adds	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	dbf1      	blt.n	800344a <_write+0x12>
  }
  return len;
 8003466:	687b      	ldr	r3, [r7, #4]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_close>:

int _close(int file)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003498:	605a      	str	r2, [r3, #4]
  return 0;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_isatty>:

int _isatty(int file)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034b0:	2301      	movs	r3, #1
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e0:	4a14      	ldr	r2, [pc, #80]	@ (8003534 <_sbrk+0x5c>)
 80034e2:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <_sbrk+0x60>)
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ec:	4b13      	ldr	r3, [pc, #76]	@ (800353c <_sbrk+0x64>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <_sbrk+0x64>)
 80034f6:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <_sbrk+0x68>)
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034fa:	4b10      	ldr	r3, [pc, #64]	@ (800353c <_sbrk+0x64>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d207      	bcs.n	8003518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003508:	f009 feda 	bl	800d2c0 <__errno>
 800350c:	4603      	mov	r3, r0
 800350e:	220c      	movs	r2, #12
 8003510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e009      	b.n	800352c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003518:	4b08      	ldr	r3, [pc, #32]	@ (800353c <_sbrk+0x64>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800351e:	4b07      	ldr	r3, [pc, #28]	@ (800353c <_sbrk+0x64>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	4a05      	ldr	r2, [pc, #20]	@ (800353c <_sbrk+0x64>)
 8003528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20020000 	.word	0x20020000
 8003538:	00000400 	.word	0x00000400
 800353c:	20000614 	.word	0x20000614
 8003540:	20002350 	.word	0x20002350

08003544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <SystemInit+0x20>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	4a05      	ldr	r2, [pc, #20]	@ (8003564 <SystemInit+0x20>)
 8003550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800356c:	f7ff ffea 	bl	8003544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003570:	480c      	ldr	r0, [pc, #48]	@ (80035a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003572:	490d      	ldr	r1, [pc, #52]	@ (80035a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003574:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003578:	e002      	b.n	8003580 <LoopCopyDataInit>

0800357a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800357c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357e:	3304      	adds	r3, #4

08003580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003584:	d3f9      	bcc.n	800357a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003588:	4c0a      	ldr	r4, [pc, #40]	@ (80035b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800358c:	e001      	b.n	8003592 <LoopFillZerobss>

0800358e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003590:	3204      	adds	r2, #4

08003592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003594:	d3fb      	bcc.n	800358e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003596:	f009 fe99 	bl	800d2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800359a:	f7fe fe1d 	bl	80021d8 <main>
  bx  lr    
 800359e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a8:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 80035ac:	08010988 	.word	0x08010988
  ldr r2, =_sbss
 80035b0:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 80035b4:	2000234c 	.word	0x2000234c

080035b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b8:	e7fe      	b.n	80035b8 <ADC_IRQHandler>
	...

080035bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035c0:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0d      	ldr	r2, [pc, #52]	@ (80035fc <HAL_Init+0x40>)
 80035c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <HAL_Init+0x40>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	@ (80035fc <HAL_Init+0x40>)
 80035d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d8:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <HAL_Init+0x40>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a07      	ldr	r2, [pc, #28]	@ (80035fc <HAL_Init+0x40>)
 80035de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e4:	2003      	movs	r0, #3
 80035e6:	f000 fc91 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ea:	200f      	movs	r0, #15
 80035ec:	f000 f808 	bl	8003600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035f0:	f7ff fcf0 	bl	8002fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023c00 	.word	0x40023c00

08003600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003608:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <HAL_InitTick+0x54>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <HAL_InitTick+0x58>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4619      	mov	r1, r3
 8003612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003616:	fbb3 f3f1 	udiv	r3, r3, r1
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fca9 	bl	8003f76 <HAL_SYSTICK_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e00e      	b.n	800364c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b0f      	cmp	r3, #15
 8003632:	d80a      	bhi.n	800364a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003634:	2200      	movs	r2, #0
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f000 fc71 	bl	8003f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003640:	4a06      	ldr	r2, [pc, #24]	@ (800365c <HAL_InitTick+0x5c>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e000      	b.n	800364c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000060 	.word	0x20000060
 8003658:	20000068 	.word	0x20000068
 800365c:	20000064 	.word	0x20000064

08003660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_IncTick+0x20>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_IncTick+0x24>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4413      	add	r3, r2
 8003670:	4a04      	ldr	r2, [pc, #16]	@ (8003684 <HAL_IncTick+0x24>)
 8003672:	6013      	str	r3, [r2, #0]
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000068 	.word	0x20000068
 8003684:	20000618 	.word	0x20000618

08003688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return uwTick;
 800368c:	4b03      	ldr	r3, [pc, #12]	@ (800369c <HAL_GetTick+0x14>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000618 	.word	0x20000618

080036a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036a8:	f7ff ffee 	bl	8003688 <HAL_GetTick>
 80036ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d005      	beq.n	80036c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ba:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <HAL_Delay+0x44>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036c6:	bf00      	nop
 80036c8:	f7ff ffde 	bl	8003688 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d8f7      	bhi.n	80036c8 <HAL_Delay+0x28>
  {
  }
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000068 	.word	0x20000068

080036e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e033      	b.n	8003766 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff fc8c 	bl	8003024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	d118      	bne.n	8003758 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800372e:	f023 0302 	bic.w	r3, r3, #2
 8003732:	f043 0202 	orr.w	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa1a 	bl	8003b74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	@ 0x40
 8003756:	e001      	b.n	800375c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_ADC_Start+0x1a>
 8003786:	2302      	movs	r3, #2
 8003788:	e0b2      	b.n	80038f0 <HAL_ADC_Start+0x180>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d018      	beq.n	80037d2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037b0:	4b52      	ldr	r3, [pc, #328]	@ (80038fc <HAL_ADC_Start+0x18c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a52      	ldr	r2, [pc, #328]	@ (8003900 <HAL_ADC_Start+0x190>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0c9a      	lsrs	r2, r3, #18
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80037c4:	e002      	b.n	80037cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f9      	bne.n	80037c6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d17a      	bne.n	80038d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800380a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800381a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800381e:	d106      	bne.n	800382e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003824:	f023 0206 	bic.w	r2, r3, #6
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	645a      	str	r2, [r3, #68]	@ 0x44
 800382c:	e002      	b.n	8003834 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800383c:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <HAL_ADC_Start+0x194>)
 800383e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003848:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2b00      	cmp	r3, #0
 8003854:	d12a      	bne.n	80038ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <HAL_ADC_Start+0x198>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d015      	beq.n	800388c <HAL_ADC_Start+0x11c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a29      	ldr	r2, [pc, #164]	@ (800390c <HAL_ADC_Start+0x19c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d105      	bne.n	8003876 <HAL_ADC_Start+0x106>
 800386a:	4b26      	ldr	r3, [pc, #152]	@ (8003904 <HAL_ADC_Start+0x194>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a25      	ldr	r2, [pc, #148]	@ (8003910 <HAL_ADC_Start+0x1a0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d136      	bne.n	80038ee <HAL_ADC_Start+0x17e>
 8003880:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <HAL_ADC_Start+0x194>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d130      	bne.n	80038ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d129      	bne.n	80038ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	e020      	b.n	80038ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a15      	ldr	r2, [pc, #84]	@ (8003908 <HAL_ADC_Start+0x198>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d11b      	bne.n	80038ee <HAL_ADC_Start+0x17e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d114      	bne.n	80038ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	e00b      	b.n	80038ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f043 0210 	orr.w	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	20000060 	.word	0x20000060
 8003900:	431bde83 	.word	0x431bde83
 8003904:	40012300 	.word	0x40012300
 8003908:	40012000 	.word	0x40012000
 800390c:	40012100 	.word	0x40012100
 8003910:	40012200 	.word	0x40012200

08003914 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1c>
 8003948:	2302      	movs	r3, #2
 800394a:	e105      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x228>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b09      	cmp	r3, #9
 800395a:	d925      	bls.n	80039a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	3b1e      	subs	r3, #30
 8003972:	2207      	movs	r2, #7
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43da      	mvns	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	400a      	ands	r2, r1
 8003980:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68d9      	ldr	r1, [r3, #12]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	4618      	mov	r0, r3
 8003994:	4603      	mov	r3, r0
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4403      	add	r3, r0
 800399a:	3b1e      	subs	r3, #30
 800399c:	409a      	lsls	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e022      	b.n	80039ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6919      	ldr	r1, [r3, #16]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	2207      	movs	r2, #7
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	400a      	ands	r2, r1
 80039ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4618      	mov	r0, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4403      	add	r3, r0
 80039e4:	409a      	lsls	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d824      	bhi.n	8003a40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	3b05      	subs	r3, #5
 8003a08:	221f      	movs	r2, #31
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	400a      	ands	r2, r1
 8003a16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b05      	subs	r3, #5
 8003a32:	fa00 f203 	lsl.w	r2, r0, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a3e:	e04c      	b.n	8003ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d824      	bhi.n	8003a92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	3b23      	subs	r3, #35	@ 0x23
 8003a5a:	221f      	movs	r2, #31
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43da      	mvns	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	400a      	ands	r2, r1
 8003a68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	3b23      	subs	r3, #35	@ 0x23
 8003a84:	fa00 f203 	lsl.w	r2, r0, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a90:	e023      	b.n	8003ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3b41      	subs	r3, #65	@ 0x41
 8003aa4:	221f      	movs	r2, #31
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	3b41      	subs	r3, #65	@ 0x41
 8003ace:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ada:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <HAL_ADC_ConfigChannel+0x234>)
 8003adc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a21      	ldr	r2, [pc, #132]	@ (8003b68 <HAL_ADC_ConfigChannel+0x238>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d109      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x1cc>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b12      	cmp	r3, #18
 8003aee:	d105      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <HAL_ADC_ConfigChannel+0x238>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d123      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x21e>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d003      	beq.n	8003b16 <HAL_ADC_ConfigChannel+0x1e6>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b11      	cmp	r3, #17
 8003b14:	d11b      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d111      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b2a:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <HAL_ADC_ConfigChannel+0x23c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a10      	ldr	r2, [pc, #64]	@ (8003b70 <HAL_ADC_ConfigChannel+0x240>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	0c9a      	lsrs	r2, r3, #18
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b40:	e002      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f9      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40012300 	.word	0x40012300
 8003b68:	40012000 	.word	0x40012000
 8003b6c:	20000060 	.word	0x20000060
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b7c:	4b79      	ldr	r3, [pc, #484]	@ (8003d64 <ADC_Init+0x1f0>)
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	021a      	lsls	r2, r3, #8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	4a58      	ldr	r2, [pc, #352]	@ (8003d68 <ADC_Init+0x1f4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e00f      	b.n	8003c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0202 	bic.w	r2, r2, #2
 8003c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7e1b      	ldrb	r3, [r3, #24]
 8003c8c:	005a      	lsls	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01b      	beq.n	8003cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	035a      	lsls	r2, r3, #13
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e007      	b.n	8003ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	051a      	lsls	r2, r3, #20
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6899      	ldr	r1, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d2a:	025a      	lsls	r2, r3, #9
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	029a      	lsls	r2, r3, #10
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012300 	.word	0x40012300
 8003d68:	0f000001 	.word	0x0f000001

08003d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9e:	4a04      	ldr	r2, [pc, #16]	@ (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db8:	4b04      	ldr	r3, [pc, #16]	@ (8003dcc <__NVIC_GetPriorityGrouping+0x18>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0307 	and.w	r3, r3, #7
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db0b      	blt.n	8003dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	4907      	ldr	r1, [pc, #28]	@ (8003e08 <__NVIC_EnableIRQ+0x38>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2001      	movs	r0, #1
 8003df2:	fa00 f202 	lsl.w	r2, r0, r2
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0a      	blt.n	8003e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	490c      	ldr	r1, [pc, #48]	@ (8003e58 <__NVIC_SetPriority+0x4c>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e34:	e00a      	b.n	8003e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4908      	ldr	r1, [pc, #32]	@ (8003e5c <__NVIC_SetPriority+0x50>)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3b04      	subs	r3, #4
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	761a      	strb	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	@ 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f1c3 0307 	rsb	r3, r3, #7
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	2304      	movcs	r3, #4
 8003e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d902      	bls.n	8003e90 <NVIC_EncodePriority+0x30>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <NVIC_EncodePriority+0x32>
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	4313      	orrs	r3, r2
         );
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	@ 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ed8:	d301      	bcc.n	8003ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00f      	b.n	8003efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ede:	4a0a      	ldr	r2, [pc, #40]	@ (8003f08 <SysTick_Config+0x40>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee6:	210f      	movs	r1, #15
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f7ff ff8e 	bl	8003e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef0:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <SysTick_Config+0x40>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef6:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <SysTick_Config+0x40>)
 8003ef8:	2207      	movs	r2, #7
 8003efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000e010 	.word	0xe000e010

08003f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff29 	bl	8003d6c <__NVIC_SetPriorityGrouping>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	4603      	mov	r3, r0
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f34:	f7ff ff3e 	bl	8003db4 <__NVIC_GetPriorityGrouping>
 8003f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7ff ff8e 	bl	8003e60 <NVIC_EncodePriority>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff5d 	bl	8003e0c <__NVIC_SetPriority>
}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff31 	bl	8003dd0 <__NVIC_EnableIRQ>
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ffa2 	bl	8003ec8 <SysTick_Config>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	@ 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e16b      	b.n	8004284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fac:	2201      	movs	r2, #1
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f040 815a 	bne.w	800427e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d005      	beq.n	8003fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d130      	bne.n	8004044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2203      	movs	r2, #3
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 0201 	and.w	r2, r3, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b03      	cmp	r3, #3
 800404e:	d017      	beq.n	8004080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d123      	bne.n	80040d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	69b9      	ldr	r1, [r7, #24]
 80040d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0203 	and.w	r2, r3, #3
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80b4 	beq.w	800427e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	4b60      	ldr	r3, [pc, #384]	@ (800429c <HAL_GPIO_Init+0x30c>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411e:	4a5f      	ldr	r2, [pc, #380]	@ (800429c <HAL_GPIO_Init+0x30c>)
 8004120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004124:	6453      	str	r3, [r2, #68]	@ 0x44
 8004126:	4b5d      	ldr	r3, [pc, #372]	@ (800429c <HAL_GPIO_Init+0x30c>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004132:	4a5b      	ldr	r2, [pc, #364]	@ (80042a0 <HAL_GPIO_Init+0x310>)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	3302      	adds	r3, #2
 800413a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	220f      	movs	r2, #15
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a52      	ldr	r2, [pc, #328]	@ (80042a4 <HAL_GPIO_Init+0x314>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02b      	beq.n	80041b6 <HAL_GPIO_Init+0x226>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a51      	ldr	r2, [pc, #324]	@ (80042a8 <HAL_GPIO_Init+0x318>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d025      	beq.n	80041b2 <HAL_GPIO_Init+0x222>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a50      	ldr	r2, [pc, #320]	@ (80042ac <HAL_GPIO_Init+0x31c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01f      	beq.n	80041ae <HAL_GPIO_Init+0x21e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a4f      	ldr	r2, [pc, #316]	@ (80042b0 <HAL_GPIO_Init+0x320>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d019      	beq.n	80041aa <HAL_GPIO_Init+0x21a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4e      	ldr	r2, [pc, #312]	@ (80042b4 <HAL_GPIO_Init+0x324>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_GPIO_Init+0x216>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4d      	ldr	r2, [pc, #308]	@ (80042b8 <HAL_GPIO_Init+0x328>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00d      	beq.n	80041a2 <HAL_GPIO_Init+0x212>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4c      	ldr	r2, [pc, #304]	@ (80042bc <HAL_GPIO_Init+0x32c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <HAL_GPIO_Init+0x20e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4b      	ldr	r2, [pc, #300]	@ (80042c0 <HAL_GPIO_Init+0x330>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_GPIO_Init+0x20a>
 8004196:	2307      	movs	r3, #7
 8004198:	e00e      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 800419a:	2308      	movs	r3, #8
 800419c:	e00c      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 800419e:	2306      	movs	r3, #6
 80041a0:	e00a      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041a2:	2305      	movs	r3, #5
 80041a4:	e008      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041a6:	2304      	movs	r3, #4
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041aa:	2303      	movs	r3, #3
 80041ac:	e004      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e002      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_GPIO_Init+0x228>
 80041b6:	2300      	movs	r3, #0
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	f002 0203 	and.w	r2, r2, #3
 80041be:	0092      	lsls	r2, r2, #2
 80041c0:	4093      	lsls	r3, r2
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c8:	4935      	ldr	r1, [pc, #212]	@ (80042a0 <HAL_GPIO_Init+0x310>)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	3302      	adds	r3, #2
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041d6:	4b3b      	ldr	r3, [pc, #236]	@ (80042c4 <HAL_GPIO_Init+0x334>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041fa:	4a32      	ldr	r2, [pc, #200]	@ (80042c4 <HAL_GPIO_Init+0x334>)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004200:	4b30      	ldr	r3, [pc, #192]	@ (80042c4 <HAL_GPIO_Init+0x334>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004224:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <HAL_GPIO_Init+0x334>)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800422a:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <HAL_GPIO_Init+0x334>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800424e:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_GPIO_Init+0x334>)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004254:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_GPIO_Init+0x334>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004278:	4a12      	ldr	r2, [pc, #72]	@ (80042c4 <HAL_GPIO_Init+0x334>)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3301      	adds	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	f67f ae90 	bls.w	8003fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3724      	adds	r7, #36	@ 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	40013800 	.word	0x40013800
 80042a4:	40020000 	.word	0x40020000
 80042a8:	40020400 	.word	0x40020400
 80042ac:	40020800 	.word	0x40020800
 80042b0:	40020c00 	.word	0x40020c00
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40021400 	.word	0x40021400
 80042bc:	40021800 	.word	0x40021800
 80042c0:	40021c00 	.word	0x40021c00
 80042c4:	40013c00 	.word	0x40013c00

080042c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
 80042d4:	4613      	mov	r3, r2
 80042d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042d8:	787b      	ldrb	r3, [r7, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042e4:	e003      	b.n	80042ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042e6:	887b      	ldrh	r3, [r7, #2]
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	619a      	str	r2, [r3, #24]
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e12b      	b.n	8004566 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fe ff22 	bl	800316c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	@ 0x24
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800434e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800435e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004360:	f002 feb2 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 8004364:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4a81      	ldr	r2, [pc, #516]	@ (8004570 <HAL_I2C_Init+0x274>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d807      	bhi.n	8004380 <HAL_I2C_Init+0x84>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a80      	ldr	r2, [pc, #512]	@ (8004574 <HAL_I2C_Init+0x278>)
 8004374:	4293      	cmp	r3, r2
 8004376:	bf94      	ite	ls
 8004378:	2301      	movls	r3, #1
 800437a:	2300      	movhi	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e006      	b.n	800438e <HAL_I2C_Init+0x92>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a7d      	ldr	r2, [pc, #500]	@ (8004578 <HAL_I2C_Init+0x27c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	bf94      	ite	ls
 8004388:	2301      	movls	r3, #1
 800438a:	2300      	movhi	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0e7      	b.n	8004566 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a78      	ldr	r2, [pc, #480]	@ (800457c <HAL_I2C_Init+0x280>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	0c9b      	lsrs	r3, r3, #18
 80043a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004570 <HAL_I2C_Init+0x274>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d802      	bhi.n	80043d0 <HAL_I2C_Init+0xd4>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	3301      	adds	r3, #1
 80043ce:	e009      	b.n	80043e4 <HAL_I2C_Init+0xe8>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	4a69      	ldr	r2, [pc, #420]	@ (8004580 <HAL_I2C_Init+0x284>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	3301      	adds	r3, #1
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	495c      	ldr	r1, [pc, #368]	@ (8004570 <HAL_I2C_Init+0x274>)
 8004400:	428b      	cmp	r3, r1
 8004402:	d819      	bhi.n	8004438 <HAL_I2C_Init+0x13c>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e59      	subs	r1, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004412:	1c59      	adds	r1, r3, #1
 8004414:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004418:	400b      	ands	r3, r1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_I2C_Init+0x138>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1e59      	subs	r1, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	fbb1 f3f3 	udiv	r3, r1, r3
 800442c:	3301      	adds	r3, #1
 800442e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004432:	e051      	b.n	80044d8 <HAL_I2C_Init+0x1dc>
 8004434:	2304      	movs	r3, #4
 8004436:	e04f      	b.n	80044d8 <HAL_I2C_Init+0x1dc>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d111      	bne.n	8004464 <HAL_I2C_Init+0x168>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1e58      	subs	r0, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	440b      	add	r3, r1
 800444e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004452:	3301      	adds	r3, #1
 8004454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e012      	b.n	800448a <HAL_I2C_Init+0x18e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e58      	subs	r0, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	0099      	lsls	r1, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	fbb0 f3f3 	udiv	r3, r0, r3
 800447a:	3301      	adds	r3, #1
 800447c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Init+0x196>
 800448e:	2301      	movs	r3, #1
 8004490:	e022      	b.n	80044d8 <HAL_I2C_Init+0x1dc>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10e      	bne.n	80044b8 <HAL_I2C_Init+0x1bc>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1e58      	subs	r0, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	440b      	add	r3, r1
 80044a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ac:	3301      	adds	r3, #1
 80044ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044b6:	e00f      	b.n	80044d8 <HAL_I2C_Init+0x1dc>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1e58      	subs	r0, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	0099      	lsls	r1, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ce:	3301      	adds	r3, #1
 80044d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	6809      	ldr	r1, [r1, #0]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69da      	ldr	r2, [r3, #28]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004506:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6911      	ldr	r1, [r2, #16]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68d2      	ldr	r2, [r2, #12]
 8004512:	4311      	orrs	r1, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	430b      	orrs	r3, r1
 800451a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	000186a0 	.word	0x000186a0
 8004574:	001e847f 	.word	0x001e847f
 8004578:	003d08ff 	.word	0x003d08ff
 800457c:	431bde83 	.word	0x431bde83
 8004580:	10624dd3 	.word	0x10624dd3

08004584 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	4608      	mov	r0, r1
 800458e:	4611      	mov	r1, r2
 8004590:	461a      	mov	r2, r3
 8004592:	4603      	mov	r3, r0
 8004594:	817b      	strh	r3, [r7, #10]
 8004596:	460b      	mov	r3, r1
 8004598:	813b      	strh	r3, [r7, #8]
 800459a:	4613      	mov	r3, r2
 800459c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800459e:	f7ff f873 	bl	8003688 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	f040 80d9 	bne.w	8004764 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2319      	movs	r3, #25
 80045b8:	2201      	movs	r2, #1
 80045ba:	496d      	ldr	r1, [pc, #436]	@ (8004770 <HAL_I2C_Mem_Write+0x1ec>)
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fc8b 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0cc      	b.n	8004766 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_I2C_Mem_Write+0x56>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e0c5      	b.n	8004766 <HAL_I2C_Mem_Write+0x1e2>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d007      	beq.n	8004600 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800460e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2221      	movs	r2, #33	@ 0x21
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2240      	movs	r2, #64	@ 0x40
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004630:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a4d      	ldr	r2, [pc, #308]	@ (8004774 <HAL_I2C_Mem_Write+0x1f0>)
 8004640:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004642:	88f8      	ldrh	r0, [r7, #6]
 8004644:	893a      	ldrh	r2, [r7, #8]
 8004646:	8979      	ldrh	r1, [r7, #10]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	4603      	mov	r3, r0
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fac2 	bl	8004bdc <I2C_RequestMemoryWrite>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d052      	beq.n	8004704 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e081      	b.n	8004766 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fd50 	bl	800510c <I2C_WaitOnTXEFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	2b04      	cmp	r3, #4
 8004678:	d107      	bne.n	800468a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06b      	b.n	8004766 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d11b      	bne.n	8004704 <HAL_I2C_Mem_Write+0x180>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d017      	beq.n	8004704 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1aa      	bne.n	8004662 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fd43 	bl	800519c <I2C_WaitOnBTFFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	2b04      	cmp	r3, #4
 8004722:	d107      	bne.n	8004734 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004732:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e016      	b.n	8004766 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	e000      	b.n	8004766 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	00100002 	.word	0x00100002
 8004774:	ffff0000 	.word	0xffff0000

08004778 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	@ 0x30
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	4608      	mov	r0, r1
 8004782:	4611      	mov	r1, r2
 8004784:	461a      	mov	r2, r3
 8004786:	4603      	mov	r3, r0
 8004788:	817b      	strh	r3, [r7, #10]
 800478a:	460b      	mov	r3, r1
 800478c:	813b      	strh	r3, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004792:	f7fe ff79 	bl	8003688 <HAL_GetTick>
 8004796:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	f040 8214 	bne.w	8004bce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	2319      	movs	r3, #25
 80047ac:	2201      	movs	r2, #1
 80047ae:	497b      	ldr	r1, [pc, #492]	@ (800499c <HAL_I2C_Mem_Read+0x224>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fb91 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
 80047be:	e207      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_I2C_Mem_Read+0x56>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e200      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d007      	beq.n	80047f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2222      	movs	r2, #34	@ 0x22
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2240      	movs	r2, #64	@ 0x40
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800481e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a5b      	ldr	r2, [pc, #364]	@ (80049a0 <HAL_I2C_Mem_Read+0x228>)
 8004834:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004836:	88f8      	ldrh	r0, [r7, #6]
 8004838:	893a      	ldrh	r2, [r7, #8]
 800483a:	8979      	ldrh	r1, [r7, #10]
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	4603      	mov	r3, r0
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fa5e 	bl	8004d08 <I2C_RequestMemoryRead>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e1bc      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d113      	bne.n	8004886 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	623b      	str	r3, [r7, #32]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e190      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488a:	2b01      	cmp	r3, #1
 800488c:	d11b      	bne.n	80048c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800489c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e170      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d11b      	bne.n	8004906 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	e150      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800491c:	e144      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004922:	2b03      	cmp	r3, #3
 8004924:	f200 80f1 	bhi.w	8004b0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492c:	2b01      	cmp	r3, #1
 800492e:	d123      	bne.n	8004978 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004932:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fc79 	bl	800522c <I2C_WaitOnRXNEFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e145      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004976:	e117      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497c:	2b02      	cmp	r3, #2
 800497e:	d14e      	bne.n	8004a1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004986:	2200      	movs	r2, #0
 8004988:	4906      	ldr	r1, [pc, #24]	@ (80049a4 <HAL_I2C_Mem_Read+0x22c>)
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 faa4 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e11a      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
 800499a:	bf00      	nop
 800499c:	00100002 	.word	0x00100002
 80049a0:	ffff0000 	.word	0xffff0000
 80049a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a1c:	e0c4      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a24:	2200      	movs	r2, #0
 8004a26:	496c      	ldr	r1, [pc, #432]	@ (8004bd8 <HAL_I2C_Mem_Read+0x460>)
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fa55 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0cb      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a80:	2200      	movs	r2, #0
 8004a82:	4955      	ldr	r1, [pc, #340]	@ (8004bd8 <HAL_I2C_Mem_Read+0x460>)
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fa27 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e09d      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b08:	e04e      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fb8c 	bl	800522c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e058      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d124      	bne.n	8004ba8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d107      	bne.n	8004b76 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b74:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f47f aeb6 	bne.w	800491e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e000      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
  }
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3728      	adds	r7, #40	@ 0x28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	00010004 	.word	0x00010004

08004bdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	817b      	strh	r3, [r7, #10]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	813b      	strh	r3, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f960 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2c:	d103      	bne.n	8004c36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e05f      	b.n	8004cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c3a:	897b      	ldrh	r3, [r7, #10]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	492d      	ldr	r1, [pc, #180]	@ (8004d04 <I2C_RequestMemoryWrite+0x128>)
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f9bb 	bl	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e04c      	b.n	8004cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c78:	6a39      	ldr	r1, [r7, #32]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fa46 	bl	800510c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00d      	beq.n	8004ca2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d107      	bne.n	8004c9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e02b      	b.n	8004cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca8:	893b      	ldrh	r3, [r7, #8]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	611a      	str	r2, [r3, #16]
 8004cb2:	e021      	b.n	8004cf8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cb4:	893b      	ldrh	r3, [r7, #8]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc4:	6a39      	ldr	r1, [r7, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa20 	bl	800510c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d107      	bne.n	8004cea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e005      	b.n	8004cfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cee:	893b      	ldrh	r3, [r7, #8]
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	00010002 	.word	0x00010002

08004d08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	461a      	mov	r2, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	817b      	strh	r3, [r7, #10]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	813b      	strh	r3, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f8c2 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d68:	d103      	bne.n	8004d72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0aa      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d76:	897b      	ldrh	r3, [r7, #10]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	6a3a      	ldr	r2, [r7, #32]
 8004d8a:	4952      	ldr	r1, [pc, #328]	@ (8004ed4 <I2C_RequestMemoryRead+0x1cc>)
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f91d 	bl	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e097      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db4:	6a39      	ldr	r1, [r7, #32]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f9a8 	bl	800510c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d107      	bne.n	8004dda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e076      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d105      	bne.n	8004df0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004de4:	893b      	ldrh	r3, [r7, #8]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	611a      	str	r2, [r3, #16]
 8004dee:	e021      	b.n	8004e34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004df0:	893b      	ldrh	r3, [r7, #8]
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e00:	6a39      	ldr	r1, [r7, #32]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f982 	bl	800510c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d107      	bne.n	8004e26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e050      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e2a:	893b      	ldrh	r3, [r7, #8]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e36:	6a39      	ldr	r1, [r7, #32]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f967 	bl	800510c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d107      	bne.n	8004e5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e035      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f82b 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e96:	d103      	bne.n	8004ea0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e013      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ea4:	897b      	ldrh	r3, [r7, #10]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	4906      	ldr	r1, [pc, #24]	@ (8004ed4 <I2C_RequestMemoryRead+0x1cc>)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f886 	bl	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	00010002 	.word	0x00010002

08004ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee8:	e048      	b.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d044      	beq.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef2:	f7fe fbc9 	bl	8003688 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d139      	bne.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10d      	bne.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	43da      	mvns	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	e00c      	b.n	8004f48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	43da      	mvns	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d116      	bne.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	f043 0220 	orr.w	r2, r3, #32
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e023      	b.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	0c1b      	lsrs	r3, r3, #16
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d10d      	bne.n	8004fa2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	43da      	mvns	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	e00c      	b.n	8004fbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d093      	beq.n	8004eea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fda:	e071      	b.n	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fea:	d123      	bne.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ffa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005004:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	f043 0204 	orr.w	r2, r3, #4
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e067      	b.n	8005104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d041      	beq.n	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503c:	f7fe fb24 	bl	8003688 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d136      	bne.n	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10c      	bne.n	8005076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	43da      	mvns	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	bf14      	ite	ne
 800506e:	2301      	movne	r3, #1
 8005070:	2300      	moveq	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	e00b      	b.n	800508e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	43da      	mvns	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d016      	beq.n	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e021      	b.n	8005104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d10c      	bne.n	80050e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	43da      	mvns	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e00b      	b.n	80050fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	43da      	mvns	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf14      	ite	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2300      	moveq	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f47f af6d 	bne.w	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005118:	e034      	b.n	8005184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f8e3 	bl	80052e6 <I2C_IsAcknowledgeFailed>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e034      	b.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d028      	beq.n	8005184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fe faa9 	bl	8003688 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11d      	bne.n	8005184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005152:	2b80      	cmp	r3, #128	@ 0x80
 8005154:	d016      	beq.n	8005184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e007      	b.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518e:	2b80      	cmp	r3, #128	@ 0x80
 8005190:	d1c3      	bne.n	800511a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051a8:	e034      	b.n	8005214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f89b 	bl	80052e6 <I2C_IsAcknowledgeFailed>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e034      	b.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d028      	beq.n	8005214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fe fa61 	bl	8003688 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d11d      	bne.n	8005214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d016      	beq.n	8005214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005200:	f043 0220 	orr.w	r2, r3, #32
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e007      	b.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b04      	cmp	r3, #4
 8005220:	d1c3      	bne.n	80051aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005238:	e049      	b.n	80052ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b10      	cmp	r3, #16
 8005246:	d119      	bne.n	800527c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0210 	mvn.w	r2, #16
 8005250:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e030      	b.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527c:	f7fe fa04 	bl	8003688 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11d      	bne.n	80052ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529c:	2b40      	cmp	r3, #64	@ 0x40
 800529e:	d016      	beq.n	80052ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e007      	b.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d8:	2b40      	cmp	r3, #64	@ 0x40
 80052da:	d1ae      	bne.n	800523a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fc:	d11b      	bne.n	8005336 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005306:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	f043 0204 	orr.w	r2, r3, #4
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e101      	b.n	800555a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f006 fddd 	bl	800bf30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2203      	movs	r2, #3
 800537a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005384:	d102      	bne.n	800538c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f003 f9b0 	bl	80086f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7c1a      	ldrb	r2, [r3, #16]
 800539e:	f88d 2000 	strb.w	r2, [sp]
 80053a2:	3304      	adds	r3, #4
 80053a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053a6:	f003 f88f 	bl	80084c8 <USB_CoreInit>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0ce      	b.n	800555a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f003 f9a8 	bl	8008718 <USB_SetCurrentMode>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0bf      	b.n	800555a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]
 80053de:	e04a      	b.n	8005476 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053e0:	7bfa      	ldrb	r2, [r7, #15]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	3315      	adds	r3, #21
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	3314      	adds	r3, #20
 8005404:	7bfa      	ldrb	r2, [r7, #15]
 8005406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005408:	7bfa      	ldrb	r2, [r7, #15]
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	b298      	uxth	r0, r3
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	332e      	adds	r3, #46	@ 0x2e
 800541c:	4602      	mov	r2, r0
 800541e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005420:	7bfa      	ldrb	r2, [r7, #15]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	3318      	adds	r3, #24
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005434:	7bfa      	ldrb	r2, [r7, #15]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	331c      	adds	r3, #28
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005448:	7bfa      	ldrb	r2, [r7, #15]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3320      	adds	r3, #32
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800545c:	7bfa      	ldrb	r2, [r7, #15]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	3324      	adds	r3, #36	@ 0x24
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	3301      	adds	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	791b      	ldrb	r3, [r3, #4]
 800547a:	7bfa      	ldrb	r2, [r7, #15]
 800547c:	429a      	cmp	r2, r3
 800547e:	d3af      	bcc.n	80053e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005480:	2300      	movs	r3, #0
 8005482:	73fb      	strb	r3, [r7, #15]
 8005484:	e044      	b.n	8005510 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005486:	7bfa      	ldrb	r2, [r7, #15]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800549c:	7bfa      	ldrb	r2, [r7, #15]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80054ae:	7bfa      	ldrb	r2, [r7, #15]
 80054b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054b2:	7bfa      	ldrb	r2, [r7, #15]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054c8:	7bfa      	ldrb	r2, [r7, #15]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054de:	7bfa      	ldrb	r2, [r7, #15]
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054f4:	7bfa      	ldrb	r2, [r7, #15]
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	3301      	adds	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	7bfa      	ldrb	r2, [r7, #15]
 8005516:	429a      	cmp	r2, r3
 8005518:	d3b5      	bcc.n	8005486 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7c1a      	ldrb	r2, [r3, #16]
 8005522:	f88d 2000 	strb.w	r2, [sp]
 8005526:	3304      	adds	r3, #4
 8005528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800552a:	f003 f941 	bl	80087b0 <USB_DevInit>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e00c      	b.n	800555a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f004 f98b 	bl	800986e <USB_DevDisconnect>

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_PCD_Start+0x1c>
 800557a:	2302      	movs	r3, #2
 800557c:	e022      	b.n	80055c4 <HAL_PCD_Start+0x62>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005596:	2b01      	cmp	r3, #1
 8005598:	d105      	bne.n	80055a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f003 f892 	bl	80086d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f004 f939 	bl	800982c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055cc:	b590      	push	{r4, r7, lr}
 80055ce:	b08d      	sub	sp, #52	@ 0x34
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f004 f9f7 	bl	80099d6 <USB_GetMode>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f040 848c 	bne.w	8005f08 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f004 f95b 	bl	80098b0 <USB_ReadInterrupts>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8482 	beq.w	8005f06 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f004 f948 	bl	80098b0 <USB_ReadInterrupts>
 8005620:	4603      	mov	r3, r0
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b02      	cmp	r3, #2
 8005628:	d107      	bne.n	800563a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695a      	ldr	r2, [r3, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f002 0202 	and.w	r2, r2, #2
 8005638:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f004 f936 	bl	80098b0 <USB_ReadInterrupts>
 8005644:	4603      	mov	r3, r0
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b10      	cmp	r3, #16
 800564c:	d161      	bne.n	8005712 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0210 	bic.w	r2, r2, #16
 800565c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f003 020f 	and.w	r2, r3, #15
 800566a:	4613      	mov	r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	3304      	adds	r3, #4
 800567c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	0c5b      	lsrs	r3, r3, #17
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	2b02      	cmp	r3, #2
 8005688:	d124      	bne.n	80056d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d035      	beq.n	8005702 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	6a38      	ldr	r0, [r7, #32]
 80056aa:	f003 ff6d 	bl	8009588 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ba:	441a      	add	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	091b      	lsrs	r3, r3, #4
 80056c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056cc:	441a      	add	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	615a      	str	r2, [r3, #20]
 80056d2:	e016      	b.n	8005702 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	0c5b      	lsrs	r3, r3, #17
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	2b06      	cmp	r3, #6
 80056de:	d110      	bne.n	8005702 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056e6:	2208      	movs	r2, #8
 80056e8:	4619      	mov	r1, r3
 80056ea:	6a38      	ldr	r0, [r7, #32]
 80056ec:	f003 ff4c 	bl	8009588 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	091b      	lsrs	r3, r3, #4
 80056f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056fc:	441a      	add	r2, r3
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0210 	orr.w	r2, r2, #16
 8005710:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f004 f8ca 	bl	80098b0 <USB_ReadInterrupts>
 800571c:	4603      	mov	r3, r0
 800571e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005722:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005726:	f040 80a7 	bne.w	8005878 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f004 f8cf 	bl	80098d6 <USB_ReadDevAllOutEpInterrupt>
 8005738:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800573a:	e099      	b.n	8005870 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 808e 	beq.w	8005864 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f004 f8f3 	bl	800993e <USB_ReadDevOutEPInterrupt>
 8005758:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00c      	beq.n	800577e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005770:	461a      	mov	r2, r3
 8005772:	2301      	movs	r3, #1
 8005774:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005776:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fea3 	bl	80064c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00c      	beq.n	80057a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005794:	461a      	mov	r2, r3
 8005796:	2308      	movs	r3, #8
 8005798:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800579a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 ff79 	bl	8006694 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b8:	461a      	mov	r2, r3
 80057ba:	2310      	movs	r3, #16
 80057bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d030      	beq.n	800582a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d0:	2b80      	cmp	r3, #128	@ 0x80
 80057d2:	d109      	bne.n	80057e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80057e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	3304      	adds	r3, #4
 80057fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	78db      	ldrb	r3, [r3, #3]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d108      	bne.n	8005818 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	b2db      	uxtb	r3, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f006 fc92 	bl	800c13c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	2302      	movs	r3, #2
 8005828:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005840:	461a      	mov	r2, r3
 8005842:	2320      	movs	r3, #32
 8005844:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585c:	461a      	mov	r2, r3
 800585e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005862:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	3301      	adds	r3, #1
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f af62 	bne.w	800573c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f004 f817 	bl	80098b0 <USB_ReadInterrupts>
 8005882:	4603      	mov	r3, r0
 8005884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005888:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800588c:	f040 80db 	bne.w	8005a46 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f004 f838 	bl	800990a <USB_ReadDevAllInEpInterrupt>
 800589a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80058a0:	e0cd      	b.n	8005a3e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80c2 	beq.w	8005a32 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f004 f85e 	bl	800997a <USB_ReadDevInEPInterrupt>
 80058be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d057      	beq.n	800597a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	2201      	movs	r2, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	43db      	mvns	r3, r3
 80058e4:	69f9      	ldr	r1, [r7, #28]
 80058e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058ea:	4013      	ands	r3, r2
 80058ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fa:	461a      	mov	r2, r3
 80058fc:	2301      	movs	r3, #1
 80058fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	799b      	ldrb	r3, [r3, #6]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d132      	bne.n	800596e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	3320      	adds	r3, #32
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4403      	add	r3, r0
 8005928:	331c      	adds	r3, #28
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4419      	add	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4403      	add	r3, r0
 800593c:	3320      	adds	r3, #32
 800593e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d113      	bne.n	800596e <HAL_PCD_IRQHandler+0x3a2>
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800594a:	4613      	mov	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	3324      	adds	r3, #36	@ 0x24
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005966:	461a      	mov	r2, r3
 8005968:	2101      	movs	r1, #1
 800596a:	f004 f865 	bl	8009a38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	b2db      	uxtb	r3, r3
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f006 fb5c 	bl	800c032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005990:	461a      	mov	r2, r3
 8005992:	2308      	movs	r3, #8
 8005994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ac:	461a      	mov	r2, r3
 80059ae:	2310      	movs	r3, #16
 80059b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c8:	461a      	mov	r2, r3
 80059ca:	2340      	movs	r3, #64	@ 0x40
 80059cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d023      	beq.n	8005a20 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80059d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059da:	6a38      	ldr	r0, [r7, #32]
 80059dc:	f003 f84c 	bl	8008a78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80059e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	3310      	adds	r3, #16
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	4413      	add	r3, r2
 80059f0:	3304      	adds	r3, #4
 80059f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d108      	bne.n	8005a0e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2200      	movs	r2, #0
 8005a00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f006 fba9 	bl	800c160 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fcbd 	bl	80063ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	3301      	adds	r3, #1
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f47f af2e 	bne.w	80058a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f003 ff30 	bl	80098b0 <USB_ReadInterrupts>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a5a:	d122      	bne.n	8005aa2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d108      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a82:	2100      	movs	r1, #0
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fea3 	bl	80067d0 <HAL_PCDEx_LPM_Callback>
 8005a8a:	e002      	b.n	8005a92 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f006 fb47 	bl	800c120 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f003 ff02 	bl	80098b0 <USB_ReadInterrupts>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab6:	d112      	bne.n	8005ade <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d102      	bne.n	8005ace <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f006 fb03 	bl	800c0d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005adc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f003 fee4 	bl	80098b0 <USB_ReadInterrupts>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af2:	f040 80b7 	bne.w	8005c64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2110      	movs	r1, #16
 8005b10:	4618      	mov	r0, r3
 8005b12:	f002 ffb1 	bl	8008a78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b1a:	e046      	b.n	8005baa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ba2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	791b      	ldrb	r3, [r3, #4]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d3b2      	bcc.n	8005b1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bc4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005bc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7bdb      	ldrb	r3, [r3, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d016      	beq.n	8005c00 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005be2:	f043 030b 	orr.w	r3, r3, #11
 8005be6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bf8:	f043 030b 	orr.w	r3, r3, #11
 8005bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bfe:	e015      	b.n	8005c2c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c12:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005c16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c26:	f043 030b 	orr.w	r3, r3, #11
 8005c2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f003 fef2 	bl	8009a38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f003 fe21 	bl	80098b0 <USB_ReadInterrupts>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c78:	d123      	bne.n	8005cc2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f003 feb7 	bl	80099f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f002 ff6e 	bl	8008b6a <USB_GetDevSpeed>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681c      	ldr	r4, [r3, #0]
 8005c9a:	f001 fa09 	bl	80070b0 <HAL_RCC_GetHCLKFreq>
 8005c9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f002 fc72 	bl	8008590 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f006 f9e8 	bl	800c082 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f003 fdf2 	bl	80098b0 <USB_ReadInterrupts>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d10a      	bne.n	8005cec <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f006 f9c5 	bl	800c066 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695a      	ldr	r2, [r3, #20]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f002 0208 	and.w	r2, r2, #8
 8005cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f003 fddd 	bl	80098b0 <USB_ReadInterrupts>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cfc:	2b80      	cmp	r3, #128	@ 0x80
 8005cfe:	d123      	bne.n	8005d48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d10:	e014      	b.n	8005d3c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d16:	4613      	mov	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fb0a 	bl	800634a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	3301      	adds	r3, #1
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	791b      	ldrb	r3, [r3, #4]
 8005d40:	461a      	mov	r2, r3
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d3e4      	bcc.n	8005d12 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f003 fdaf 	bl	80098b0 <USB_ReadInterrupts>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d5c:	d13c      	bne.n	8005dd8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d5e:	2301      	movs	r3, #1
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d62:	e02b      	b.n	8005dbc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3318      	adds	r3, #24
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d115      	bne.n	8005db6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	da12      	bge.n	8005db6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3317      	adds	r3, #23
 8005da0:	2201      	movs	r2, #1
 8005da2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 faca 	bl	800634a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	3301      	adds	r3, #1
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	791b      	ldrb	r3, [r3, #4]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d3cd      	bcc.n	8005d64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f003 fd67 	bl	80098b0 <USB_ReadInterrupts>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005de8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dec:	d156      	bne.n	8005e9c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dee:	2301      	movs	r3, #1
 8005df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df2:	e045      	b.n	8005e80 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e08:	4613      	mov	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d12e      	bne.n	8005e7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da2b      	bge.n	8005e7a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	0c1a      	lsrs	r2, r3, #16
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005e2c:	4053      	eors	r3, r2
 8005e2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d121      	bne.n	8005e7a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e76:	6053      	str	r3, [r2, #4]
            break;
 8005e78:	e008      	b.n	8005e8c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	791b      	ldrb	r3, [r3, #4]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d3b3      	bcc.n	8005df4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f003 fd05 	bl	80098b0 <USB_ReadInterrupts>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb0:	d10a      	bne.n	8005ec8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f006 f966 	bl	800c184 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f003 fcef 	bl	80098b0 <USB_ReadInterrupts>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d115      	bne.n	8005f08 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f006 f956 	bl	800c1a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6859      	ldr	r1, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	e000      	b.n	8005f08 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005f06:	bf00      	nop
    }
  }
}
 8005f08:	3734      	adds	r7, #52	@ 0x34
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd90      	pop	{r4, r7, pc}

08005f0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_PCD_SetAddress+0x1a>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e012      	b.n	8005f4e <HAL_PCD_SetAddress+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f003 fc4e 	bl	80097e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4611      	mov	r1, r2
 8005f62:	461a      	mov	r2, r3
 8005f64:	4603      	mov	r3, r0
 8005f66:	70fb      	strb	r3, [r7, #3]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	803b      	strh	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	da0f      	bge.n	8005f9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	f003 020f 	and.w	r2, r3, #15
 8005f82:	4613      	mov	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	3310      	adds	r3, #16
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	3304      	adds	r3, #4
 8005f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	705a      	strb	r2, [r3, #1]
 8005f9a:	e00f      	b.n	8005fbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	f003 020f 	and.w	r2, r3, #15
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005fc8:	883b      	ldrh	r3, [r7, #0]
 8005fca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	78ba      	ldrb	r2, [r7, #2]
 8005fd6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fea:	78bb      	ldrb	r3, [r7, #2]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d102      	bne.n	8005ff6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_PCD_EP_Open+0xae>
 8006000:	2302      	movs	r3, #2
 8006002:	e00e      	b.n	8006022 <HAL_PCD_EP_Open+0xcc>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	4618      	mov	r0, r3
 8006014:	f002 fdce 	bl	8008bb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006020:	7afb      	ldrb	r3, [r7, #11]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	da0f      	bge.n	800605e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	f003 020f 	and.w	r2, r3, #15
 8006044:	4613      	mov	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	3310      	adds	r3, #16
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4413      	add	r3, r2
 8006052:	3304      	adds	r3, #4
 8006054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	705a      	strb	r2, [r3, #1]
 800605c:	e00f      	b.n	800607e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	f003 020f 	and.w	r2, r3, #15
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	4413      	add	r3, r2
 8006074:	3304      	adds	r3, #4
 8006076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	b2da      	uxtb	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_PCD_EP_Close+0x6e>
 8006094:	2302      	movs	r3, #2
 8006096:	e00e      	b.n	80060b6 <HAL_PCD_EP_Close+0x8c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68f9      	ldr	r1, [r7, #12]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f002 fe0c 	bl	8008cc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	460b      	mov	r3, r1
 80060cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	f003 020f 	and.w	r2, r3, #15
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	3304      	adds	r3, #4
 80060e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2200      	movs	r2, #0
 80060f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006100:	7afb      	ldrb	r3, [r7, #11]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	b2da      	uxtb	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	799b      	ldrb	r3, [r3, #6]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d102      	bne.n	800611a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	799b      	ldrb	r3, [r3, #6]
 8006122:	461a      	mov	r2, r3
 8006124:	6979      	ldr	r1, [r7, #20]
 8006126:	f002 fea9 	bl	8008e7c <USB_EPStartXfer>

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	f003 020f 	and.w	r2, r3, #15
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006156:	681b      	ldr	r3, [r3, #0]
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	460b      	mov	r3, r1
 8006172:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	f003 020f 	and.w	r2, r3, #15
 800617a:	4613      	mov	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	3310      	adds	r3, #16
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	3304      	adds	r3, #4
 800618a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2200      	movs	r2, #0
 800619c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2201      	movs	r2, #1
 80061a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a4:	7afb      	ldrb	r3, [r7, #11]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	799b      	ldrb	r3, [r3, #6]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d102      	bne.n	80061be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	799b      	ldrb	r3, [r3, #6]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6979      	ldr	r1, [r7, #20]
 80061ca:	f002 fe57 	bl	8008e7c <USB_EPStartXfer>

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	7912      	ldrb	r2, [r2, #4]
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e04f      	b.n	8006296 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da0f      	bge.n	800621e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	4613      	mov	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	3310      	adds	r3, #16
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	3304      	adds	r3, #4
 8006214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	705a      	strb	r2, [r3, #1]
 800621c:	e00d      	b.n	800623a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800621e:	78fa      	ldrb	r2, [r7, #3]
 8006220:	4613      	mov	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	3304      	adds	r3, #4
 8006232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_PCD_EP_SetStall+0x82>
 8006256:	2302      	movs	r3, #2
 8006258:	e01d      	b.n	8006296 <HAL_PCD_EP_SetStall+0xbe>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	4618      	mov	r0, r3
 800626a:	f003 f9e5 	bl	8009638 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	7999      	ldrb	r1, [r3, #6]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006286:	461a      	mov	r2, r3
 8006288:	f003 fbd6 	bl	8009a38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	7912      	ldrb	r2, [r2, #4]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e042      	b.n	8006342 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da0f      	bge.n	80062e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	f003 020f 	and.w	r2, r3, #15
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	3310      	adds	r3, #16
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	3304      	adds	r3, #4
 80062da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	705a      	strb	r2, [r3, #1]
 80062e2:	e00f      	b.n	8006304 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	f003 020f 	and.w	r2, r3, #15
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4413      	add	r3, r2
 80062fa:	3304      	adds	r3, #4
 80062fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	b2da      	uxtb	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_PCD_EP_ClrStall+0x86>
 8006320:	2302      	movs	r3, #2
 8006322:	e00e      	b.n	8006342 <HAL_PCD_EP_ClrStall+0xa4>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68f9      	ldr	r1, [r7, #12]
 8006332:	4618      	mov	r0, r3
 8006334:	f003 f9ee 	bl	8009714 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800635a:	2b00      	cmp	r3, #0
 800635c:	da0c      	bge.n	8006378 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	3310      	adds	r3, #16
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	3304      	adds	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e00c      	b.n	8006392 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	3304      	adds	r3, #4
 8006390:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	4618      	mov	r0, r3
 800639a:	f003 f80d 	bl	80093b8 <USB_EPStopXfer>
 800639e:	4603      	mov	r3, r0
 80063a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80063a2:	7afb      	ldrb	r3, [r7, #11]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	@ 0x28
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	4613      	mov	r3, r2
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	3310      	adds	r3, #16
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4413      	add	r3, r2
 80063d0:	3304      	adds	r3, #4
 80063d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	695a      	ldr	r2, [r3, #20]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d901      	bls.n	80063e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e06b      	b.n	80064bc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d902      	bls.n	8006400 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	3303      	adds	r3, #3
 8006404:	089b      	lsrs	r3, r3, #2
 8006406:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006408:	e02a      	b.n	8006460 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	429a      	cmp	r2, r3
 800641e:	d902      	bls.n	8006426 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3303      	adds	r3, #3
 800642a:	089b      	lsrs	r3, r3, #2
 800642c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68d9      	ldr	r1, [r3, #12]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	4603      	mov	r3, r0
 8006442:	6978      	ldr	r0, [r7, #20]
 8006444:	f003 f862 	bl	800950c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	441a      	add	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	695a      	ldr	r2, [r3, #20]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	441a      	add	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	429a      	cmp	r2, r3
 8006474:	d809      	bhi.n	800648a <PCD_WriteEmptyTxFifo+0xde>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800647e:	429a      	cmp	r2, r3
 8006480:	d203      	bcs.n	800648a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1bf      	bne.n	800640a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	429a      	cmp	r2, r3
 8006494:	d811      	bhi.n	80064ba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	2201      	movs	r2, #1
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	43db      	mvns	r3, r3
 80064b0:	6939      	ldr	r1, [r7, #16]
 80064b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064b6:	4013      	ands	r3, r2
 80064b8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	333c      	adds	r3, #60	@ 0x3c
 80064dc:	3304      	adds	r3, #4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	799b      	ldrb	r3, [r3, #6]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d17b      	bne.n	80065f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4a61      	ldr	r2, [pc, #388]	@ (800668c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	f240 80b9 	bls.w	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80b3 	beq.w	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006526:	461a      	mov	r2, r3
 8006528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800652c:	6093      	str	r3, [r2, #8]
 800652e:	e0a7      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006546:	461a      	mov	r2, r3
 8006548:	2320      	movs	r3, #32
 800654a:	6093      	str	r3, [r2, #8]
 800654c:	e098      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	f040 8093 	bne.w	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4a4b      	ldr	r2, [pc, #300]	@ (800668c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d90f      	bls.n	8006582 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006578:	461a      	mov	r2, r3
 800657a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657e:	6093      	str	r3, [r2, #8]
 8006580:	e07e      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	3304      	adds	r3, #4
 8006596:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	0159      	lsls	r1, r3, #5
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	440b      	add	r3, r1
 80065a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ae:	1ad2      	subs	r2, r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d114      	bne.n	80065e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065cc:	461a      	mov	r2, r3
 80065ce:	2101      	movs	r1, #1
 80065d0:	f003 fa32 	bl	8009a38 <USB_EP0_OutStart>
 80065d4:	e006      	b.n	80065e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	441a      	add	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f005 fd06 	bl	800bffc <HAL_PCD_DataOutStageCallback>
 80065f0:	e046      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4a26      	ldr	r2, [pc, #152]	@ (8006690 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d124      	bne.n	8006644 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006610:	461a      	mov	r2, r3
 8006612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006616:	6093      	str	r3, [r2, #8]
 8006618:	e032      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006630:	461a      	mov	r2, r3
 8006632:	2320      	movs	r3, #32
 8006634:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f005 fcdd 	bl	800bffc <HAL_PCD_DataOutStageCallback>
 8006642:	e01d      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d114      	bne.n	8006674 <PCD_EP_OutXfrComplete_int+0x1b0>
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d108      	bne.n	8006674 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800666c:	461a      	mov	r2, r3
 800666e:	2100      	movs	r1, #0
 8006670:	f003 f9e2 	bl	8009a38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f005 fcbe 	bl	800bffc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	4f54300a 	.word	0x4f54300a
 8006690:	4f54310a 	.word	0x4f54310a

08006694 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	333c      	adds	r3, #60	@ 0x3c
 80066ac:	3304      	adds	r3, #4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4a15      	ldr	r2, [pc, #84]	@ (800671c <PCD_EP_OutSetupPacket_int+0x88>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d90e      	bls.n	80066e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e0:	461a      	mov	r2, r3
 80066e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f005 fc75 	bl	800bfd8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	@ (800671c <PCD_EP_OutSetupPacket_int+0x88>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d90c      	bls.n	8006710 <PCD_EP_OutSetupPacket_int+0x7c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	799b      	ldrb	r3, [r3, #6]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d108      	bne.n	8006710 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006708:	461a      	mov	r2, r3
 800670a:	2101      	movs	r1, #1
 800670c:	f003 f994 	bl	8009a38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	4f54300a 	.word	0x4f54300a

08006720 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
 800672c:	4613      	mov	r3, r2
 800672e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800673e:	883b      	ldrh	r3, [r7, #0]
 8006740:	0419      	lsls	r1, r3, #16
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	430a      	orrs	r2, r1
 800674a:	629a      	str	r2, [r3, #40]	@ 0x28
 800674c:	e028      	b.n	80067a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4413      	add	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800675c:	2300      	movs	r3, #0
 800675e:	73fb      	strb	r3, [r7, #15]
 8006760:	e00d      	b.n	800677e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	3340      	adds	r3, #64	@ 0x40
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4413      	add	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	3301      	adds	r3, #1
 800677c:	73fb      	strb	r3, [r7, #15]
 800677e:	7bfa      	ldrb	r2, [r7, #15]
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	3b01      	subs	r3, #1
 8006784:	429a      	cmp	r2, r3
 8006786:	d3ec      	bcc.n	8006762 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006788:	883b      	ldrh	r3, [r7, #0]
 800678a:	0418      	lsls	r0, r3, #16
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	3b01      	subs	r3, #1
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	4302      	orrs	r2, r0
 8006798:	3340      	adds	r3, #64	@ 0x40
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e267      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d075      	beq.n	80068f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006806:	4b88      	ldr	r3, [pc, #544]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 030c 	and.w	r3, r3, #12
 800680e:	2b04      	cmp	r3, #4
 8006810:	d00c      	beq.n	800682c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006812:	4b85      	ldr	r3, [pc, #532]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800681a:	2b08      	cmp	r3, #8
 800681c:	d112      	bne.n	8006844 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800681e:	4b82      	ldr	r3, [pc, #520]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006826:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800682a:	d10b      	bne.n	8006844 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800682c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d05b      	beq.n	80068f0 <HAL_RCC_OscConfig+0x108>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d157      	bne.n	80068f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e242      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800684c:	d106      	bne.n	800685c <HAL_RCC_OscConfig+0x74>
 800684e:	4b76      	ldr	r3, [pc, #472]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a75      	ldr	r2, [pc, #468]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	e01d      	b.n	8006898 <HAL_RCC_OscConfig+0xb0>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006864:	d10c      	bne.n	8006880 <HAL_RCC_OscConfig+0x98>
 8006866:	4b70      	ldr	r3, [pc, #448]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a6f      	ldr	r2, [pc, #444]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 800686c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4b6d      	ldr	r3, [pc, #436]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a6c      	ldr	r2, [pc, #432]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e00b      	b.n	8006898 <HAL_RCC_OscConfig+0xb0>
 8006880:	4b69      	ldr	r3, [pc, #420]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a68      	ldr	r2, [pc, #416]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	4b66      	ldr	r3, [pc, #408]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a65      	ldr	r2, [pc, #404]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d013      	beq.n	80068c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a0:	f7fc fef2 	bl	8003688 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a8:	f7fc feee 	bl	8003688 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	@ 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e207      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ba:	4b5b      	ldr	r3, [pc, #364]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0xc0>
 80068c6:	e014      	b.n	80068f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fc fede 	bl	8003688 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d0:	f7fc feda 	bl	8003688 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b64      	cmp	r3, #100	@ 0x64
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e1f3      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e2:	4b51      	ldr	r3, [pc, #324]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0xe8>
 80068ee:	e000      	b.n	80068f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d063      	beq.n	80069c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690a:	4b47      	ldr	r3, [pc, #284]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006912:	2b08      	cmp	r3, #8
 8006914:	d11c      	bne.n	8006950 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006916:	4b44      	ldr	r3, [pc, #272]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d116      	bne.n	8006950 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006922:	4b41      	ldr	r3, [pc, #260]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_RCC_OscConfig+0x152>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d001      	beq.n	800693a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e1c7      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4937      	ldr	r1, [pc, #220]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 800694a:	4313      	orrs	r3, r2
 800694c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694e:	e03a      	b.n	80069c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d020      	beq.n	800699a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006958:	4b34      	ldr	r3, [pc, #208]	@ (8006a2c <HAL_RCC_OscConfig+0x244>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fc fe93 	bl	8003688 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006966:	f7fc fe8f 	bl	8003688 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e1a8      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006978:	4b2b      	ldr	r3, [pc, #172]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006984:	4b28      	ldr	r3, [pc, #160]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4925      	ldr	r1, [pc, #148]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 8006994:	4313      	orrs	r3, r2
 8006996:	600b      	str	r3, [r1, #0]
 8006998:	e015      	b.n	80069c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699a:	4b24      	ldr	r3, [pc, #144]	@ (8006a2c <HAL_RCC_OscConfig+0x244>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fc fe72 	bl	8003688 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a8:	f7fc fe6e 	bl	8003688 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e187      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d036      	beq.n	8006a40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069da:	4b15      	ldr	r3, [pc, #84]	@ (8006a30 <HAL_RCC_OscConfig+0x248>)
 80069dc:	2201      	movs	r2, #1
 80069de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e0:	f7fc fe52 	bl	8003688 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e8:	f7fc fe4e 	bl	8003688 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e167      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <HAL_RCC_OscConfig+0x240>)
 80069fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f0      	beq.n	80069e8 <HAL_RCC_OscConfig+0x200>
 8006a06:	e01b      	b.n	8006a40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a08:	4b09      	ldr	r3, [pc, #36]	@ (8006a30 <HAL_RCC_OscConfig+0x248>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a0e:	f7fc fe3b 	bl	8003688 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a14:	e00e      	b.n	8006a34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a16:	f7fc fe37 	bl	8003688 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d907      	bls.n	8006a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e150      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
 8006a28:	40023800 	.word	0x40023800
 8006a2c:	42470000 	.word	0x42470000
 8006a30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a34:	4b88      	ldr	r3, [pc, #544]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ea      	bne.n	8006a16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8097 	beq.w	8006b7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a52:	4b81      	ldr	r3, [pc, #516]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10f      	bne.n	8006a7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	4b7d      	ldr	r3, [pc, #500]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	4a7c      	ldr	r2, [pc, #496]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a76:	60bb      	str	r3, [r7, #8]
 8006a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7e:	4b77      	ldr	r3, [pc, #476]	@ (8006c5c <HAL_RCC_OscConfig+0x474>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d118      	bne.n	8006abc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a8a:	4b74      	ldr	r3, [pc, #464]	@ (8006c5c <HAL_RCC_OscConfig+0x474>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a73      	ldr	r2, [pc, #460]	@ (8006c5c <HAL_RCC_OscConfig+0x474>)
 8006a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a96:	f7fc fdf7 	bl	8003688 <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9e:	f7fc fdf3 	bl	8003688 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e10c      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8006c5c <HAL_RCC_OscConfig+0x474>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d106      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x2ea>
 8006ac4:	4b64      	ldr	r3, [pc, #400]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac8:	4a63      	ldr	r2, [pc, #396]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad0:	e01c      	b.n	8006b0c <HAL_RCC_OscConfig+0x324>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d10c      	bne.n	8006af4 <HAL_RCC_OscConfig+0x30c>
 8006ada:	4b5f      	ldr	r3, [pc, #380]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ade:	4a5e      	ldr	r2, [pc, #376]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006ae0:	f043 0304 	orr.w	r3, r3, #4
 8006ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aea:	4a5b      	ldr	r2, [pc, #364]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af2:	e00b      	b.n	8006b0c <HAL_RCC_OscConfig+0x324>
 8006af4:	4b58      	ldr	r3, [pc, #352]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af8:	4a57      	ldr	r2, [pc, #348]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b00:	4b55      	ldr	r3, [pc, #340]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b04:	4a54      	ldr	r2, [pc, #336]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006b06:	f023 0304 	bic.w	r3, r3, #4
 8006b0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d015      	beq.n	8006b40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b14:	f7fc fdb8 	bl	8003688 <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1a:	e00a      	b.n	8006b32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1c:	f7fc fdb4 	bl	8003688 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e0cb      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b32:	4b49      	ldr	r3, [pc, #292]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0ee      	beq.n	8006b1c <HAL_RCC_OscConfig+0x334>
 8006b3e:	e014      	b.n	8006b6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b40:	f7fc fda2 	bl	8003688 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b46:	e00a      	b.n	8006b5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b48:	f7fc fd9e 	bl	8003688 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e0b5      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1ee      	bne.n	8006b48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d105      	bne.n	8006b7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b70:	4b39      	ldr	r3, [pc, #228]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	4a38      	ldr	r2, [pc, #224]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 80a1 	beq.w	8006cc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b86:	4b34      	ldr	r3, [pc, #208]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 030c 	and.w	r3, r3, #12
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d05c      	beq.n	8006c4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d141      	bne.n	8006c1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b9a:	4b31      	ldr	r3, [pc, #196]	@ (8006c60 <HAL_RCC_OscConfig+0x478>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba0:	f7fc fd72 	bl	8003688 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba8:	f7fc fd6e 	bl	8003688 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e087      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bba:	4b27      	ldr	r3, [pc, #156]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69da      	ldr	r2, [r3, #28]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	019b      	lsls	r3, r3, #6
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	3b01      	subs	r3, #1
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	061b      	lsls	r3, r3, #24
 8006bea:	491b      	ldr	r1, [pc, #108]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <HAL_RCC_OscConfig+0x478>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf6:	f7fc fd47 	bl	8003688 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfe:	f7fc fd43 	bl	8003688 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e05c      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c10:	4b11      	ldr	r3, [pc, #68]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x416>
 8006c1c:	e054      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1e:	4b10      	ldr	r3, [pc, #64]	@ (8006c60 <HAL_RCC_OscConfig+0x478>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c24:	f7fc fd30 	bl	8003688 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fc fd2c 	bl	8003688 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e045      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3e:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <HAL_RCC_OscConfig+0x470>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0x444>
 8006c4a:	e03d      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d107      	bne.n	8006c64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e038      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	40007000 	.word	0x40007000
 8006c60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c64:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd4 <HAL_RCC_OscConfig+0x4ec>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d028      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d121      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d11a      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c94:	4013      	ands	r3, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d111      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	3b01      	subs	r3, #1
 8006cae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d107      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40023800 	.word	0x40023800

08006cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0cc      	b.n	8006e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cec:	4b68      	ldr	r3, [pc, #416]	@ (8006e90 <HAL_RCC_ClockConfig+0x1b8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d90c      	bls.n	8006d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfa:	4b65      	ldr	r3, [pc, #404]	@ (8006e90 <HAL_RCC_ClockConfig+0x1b8>)
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d02:	4b63      	ldr	r3, [pc, #396]	@ (8006e90 <HAL_RCC_ClockConfig+0x1b8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d001      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e0b8      	b.n	8006e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d020      	beq.n	8006d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d2c:	4b59      	ldr	r3, [pc, #356]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	4a58      	ldr	r2, [pc, #352]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d44:	4b53      	ldr	r3, [pc, #332]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	4a52      	ldr	r2, [pc, #328]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d50:	4b50      	ldr	r3, [pc, #320]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	494d      	ldr	r1, [pc, #308]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d044      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d107      	bne.n	8006d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d76:	4b47      	ldr	r3, [pc, #284]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d119      	bne.n	8006db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e07f      	b.n	8006e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d003      	beq.n	8006d96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d107      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d96:	4b3f      	ldr	r3, [pc, #252]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e06f      	b.n	8006e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006da6:	4b3b      	ldr	r3, [pc, #236]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e067      	b.n	8006e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006db6:	4b37      	ldr	r3, [pc, #220]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f023 0203 	bic.w	r2, r3, #3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4934      	ldr	r1, [pc, #208]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dc8:	f7fc fc5e 	bl	8003688 <HAL_GetTick>
 8006dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dce:	e00a      	b.n	8006de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd0:	f7fc fc5a 	bl	8003688 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e04f      	b.n	8006e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 020c 	and.w	r2, r3, #12
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d1eb      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006df8:	4b25      	ldr	r3, [pc, #148]	@ (8006e90 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d20c      	bcs.n	8006e20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e06:	4b22      	ldr	r3, [pc, #136]	@ (8006e90 <HAL_RCC_ClockConfig+0x1b8>)
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0e:	4b20      	ldr	r3, [pc, #128]	@ (8006e90 <HAL_RCC_ClockConfig+0x1b8>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d001      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e032      	b.n	8006e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e2c:	4b19      	ldr	r3, [pc, #100]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	4916      	ldr	r1, [pc, #88]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e4a:	4b12      	ldr	r3, [pc, #72]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	490e      	ldr	r1, [pc, #56]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e5e:	f000 f821 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
 8006e62:	4602      	mov	r2, r0
 8006e64:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	091b      	lsrs	r3, r3, #4
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	490a      	ldr	r1, [pc, #40]	@ (8006e98 <HAL_RCC_ClockConfig+0x1c0>)
 8006e70:	5ccb      	ldrb	r3, [r1, r3]
 8006e72:	fa22 f303 	lsr.w	r3, r2, r3
 8006e76:	4a09      	ldr	r2, [pc, #36]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fc fbbe 	bl	8003600 <HAL_InitTick>

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40023c00 	.word	0x40023c00
 8006e94:	40023800 	.word	0x40023800
 8006e98:	080101b0 	.word	0x080101b0
 8006e9c:	20000060 	.word	0x20000060
 8006ea0:	20000064 	.word	0x20000064

08006ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ea8:	b094      	sub	sp, #80	@ 0x50
 8006eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ebc:	4b79      	ldr	r3, [pc, #484]	@ (80070a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 030c 	and.w	r3, r3, #12
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d00d      	beq.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	f200 80e1 	bhi.w	8007090 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d003      	beq.n	8006ede <HAL_RCC_GetSysClockFreq+0x3a>
 8006ed6:	e0db      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ed8:	4b73      	ldr	r3, [pc, #460]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006eda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006edc:	e0db      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ede:	4b73      	ldr	r3, [pc, #460]	@ (80070ac <HAL_RCC_GetSysClockFreq+0x208>)
 8006ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ee2:	e0d8      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80070a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006eec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eee:	4b6d      	ldr	r3, [pc, #436]	@ (80070a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d063      	beq.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006efa:	4b6a      	ldr	r3, [pc, #424]	@ (80070a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	099b      	lsrs	r3, r3, #6
 8006f00:	2200      	movs	r2, #0
 8006f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f0e:	2300      	movs	r3, #0
 8006f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f16:	4622      	mov	r2, r4
 8006f18:	462b      	mov	r3, r5
 8006f1a:	f04f 0000 	mov.w	r0, #0
 8006f1e:	f04f 0100 	mov.w	r1, #0
 8006f22:	0159      	lsls	r1, r3, #5
 8006f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f28:	0150      	lsls	r0, r2, #5
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4621      	mov	r1, r4
 8006f30:	1a51      	subs	r1, r2, r1
 8006f32:	6139      	str	r1, [r7, #16]
 8006f34:	4629      	mov	r1, r5
 8006f36:	eb63 0301 	sbc.w	r3, r3, r1
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f48:	4659      	mov	r1, fp
 8006f4a:	018b      	lsls	r3, r1, #6
 8006f4c:	4651      	mov	r1, sl
 8006f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f52:	4651      	mov	r1, sl
 8006f54:	018a      	lsls	r2, r1, #6
 8006f56:	4651      	mov	r1, sl
 8006f58:	ebb2 0801 	subs.w	r8, r2, r1
 8006f5c:	4659      	mov	r1, fp
 8006f5e:	eb63 0901 	sbc.w	r9, r3, r1
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f76:	4690      	mov	r8, r2
 8006f78:	4699      	mov	r9, r3
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	eb18 0303 	adds.w	r3, r8, r3
 8006f80:	60bb      	str	r3, [r7, #8]
 8006f82:	462b      	mov	r3, r5
 8006f84:	eb49 0303 	adc.w	r3, r9, r3
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f96:	4629      	mov	r1, r5
 8006f98:	024b      	lsls	r3, r1, #9
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	024a      	lsls	r2, r1, #9
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006faa:	2200      	movs	r2, #0
 8006fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fb4:	f7f9 fe48 	bl	8000c48 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc0:	e058      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fc2:	4b38      	ldr	r3, [pc, #224]	@ (80070a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	099b      	lsrs	r3, r3, #6
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	4611      	mov	r1, r2
 8006fce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fd2:	623b      	str	r3, [r7, #32]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	f04f 0000 	mov.w	r0, #0
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	0159      	lsls	r1, r3, #5
 8006fea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fee:	0150      	lsls	r0, r2, #5
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	eb63 0b01 	sbc.w	fp, r3, r1
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800700c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007010:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007014:	ebb2 040a 	subs.w	r4, r2, sl
 8007018:	eb63 050b 	sbc.w	r5, r3, fp
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	00eb      	lsls	r3, r5, #3
 8007026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800702a:	00e2      	lsls	r2, r4, #3
 800702c:	4614      	mov	r4, r2
 800702e:	461d      	mov	r5, r3
 8007030:	4643      	mov	r3, r8
 8007032:	18e3      	adds	r3, r4, r3
 8007034:	603b      	str	r3, [r7, #0]
 8007036:	464b      	mov	r3, r9
 8007038:	eb45 0303 	adc.w	r3, r5, r3
 800703c:	607b      	str	r3, [r7, #4]
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800704a:	4629      	mov	r1, r5
 800704c:	028b      	lsls	r3, r1, #10
 800704e:	4621      	mov	r1, r4
 8007050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007054:	4621      	mov	r1, r4
 8007056:	028a      	lsls	r2, r1, #10
 8007058:	4610      	mov	r0, r2
 800705a:	4619      	mov	r1, r3
 800705c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800705e:	2200      	movs	r2, #0
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	61fa      	str	r2, [r7, #28]
 8007064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007068:	f7f9 fdee 	bl	8000c48 <__aeabi_uldivmod>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4613      	mov	r3, r2
 8007072:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007074:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	3301      	adds	r3, #1
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007084:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800708e:	e002      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007090:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007092:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007098:	4618      	mov	r0, r3
 800709a:	3750      	adds	r7, #80	@ 0x50
 800709c:	46bd      	mov	sp, r7
 800709e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a2:	bf00      	nop
 80070a4:	40023800 	.word	0x40023800
 80070a8:	00f42400 	.word	0x00f42400
 80070ac:	007a1200 	.word	0x007a1200

080070b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b4:	4b03      	ldr	r3, [pc, #12]	@ (80070c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070b6:	681b      	ldr	r3, [r3, #0]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000060 	.word	0x20000060

080070c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070cc:	f7ff fff0 	bl	80070b0 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	0a9b      	lsrs	r3, r3, #10
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4903      	ldr	r1, [pc, #12]	@ (80070ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40023800 	.word	0x40023800
 80070ec:	080101c0 	.word	0x080101c0

080070f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e07b      	b.n	80071fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d108      	bne.n	800711c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007112:	d009      	beq.n	8007128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	61da      	str	r2, [r3, #28]
 800711a:	e005      	b.n	8007128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fc f85a 	bl	80031fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800715e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ac:	ea42 0103 	orr.w	r1, r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	f003 0104 	and.w	r1, r3, #4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	f003 0210 	and.w	r2, r3, #16
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b08a      	sub	sp, #40	@ 0x28
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007210:	2301      	movs	r3, #1
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007214:	f7fc fa38 	bl	8003688 <HAL_GetTick>
 8007218:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007220:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007228:	887b      	ldrh	r3, [r7, #2]
 800722a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800722c:	7ffb      	ldrb	r3, [r7, #31]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d00c      	beq.n	800724c <HAL_SPI_TransmitReceive+0x4a>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007238:	d106      	bne.n	8007248 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <HAL_SPI_TransmitReceive+0x46>
 8007242:	7ffb      	ldrb	r3, [r7, #31]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d001      	beq.n	800724c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007248:	2302      	movs	r3, #2
 800724a:	e17f      	b.n	800754c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_SPI_TransmitReceive+0x5c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <HAL_SPI_TransmitReceive+0x5c>
 8007258:	887b      	ldrh	r3, [r7, #2]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e174      	b.n	800754c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_SPI_TransmitReceive+0x6e>
 800726c:	2302      	movs	r3, #2
 800726e:	e16d      	b.n	800754c <HAL_SPI_TransmitReceive+0x34a>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b04      	cmp	r3, #4
 8007282:	d003      	beq.n	800728c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2205      	movs	r2, #5
 8007288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	887a      	ldrh	r2, [r7, #2]
 800729c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	887a      	ldrh	r2, [r7, #2]
 80072a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	887a      	ldrh	r2, [r7, #2]
 80072ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	887a      	ldrh	r2, [r7, #2]
 80072b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072cc:	2b40      	cmp	r3, #64	@ 0x40
 80072ce:	d007      	beq.n	80072e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e8:	d17e      	bne.n	80073e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0xf6>
 80072f2:	8afb      	ldrh	r3, [r7, #22]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d16c      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fc:	881a      	ldrh	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007308:	1c9a      	adds	r2, r3, #2
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800731c:	e059      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b02      	cmp	r3, #2
 800732a:	d11b      	bne.n	8007364 <HAL_SPI_TransmitReceive+0x162>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d016      	beq.n	8007364 <HAL_SPI_TransmitReceive+0x162>
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	2b01      	cmp	r3, #1
 800733a:	d113      	bne.n	8007364 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007340:	881a      	ldrh	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734c:	1c9a      	adds	r2, r3, #2
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b01      	cmp	r3, #1
 8007370:	d119      	bne.n	80073a6 <HAL_SPI_TransmitReceive+0x1a4>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d014      	beq.n	80073a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007386:	b292      	uxth	r2, r2
 8007388:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738e:	1c9a      	adds	r2, r3, #2
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073a2:	2301      	movs	r3, #1
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073a6:	f7fc f96f 	bl	8003688 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d80d      	bhi.n	80073d2 <HAL_SPI_TransmitReceive+0x1d0>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073bc:	d009      	beq.n	80073d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e0bc      	b.n	800754c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1a0      	bne.n	800731e <HAL_SPI_TransmitReceive+0x11c>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d19b      	bne.n	800731e <HAL_SPI_TransmitReceive+0x11c>
 80073e6:	e082      	b.n	80074ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_SPI_TransmitReceive+0x1f4>
 80073f0:	8afb      	ldrh	r3, [r7, #22]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d171      	bne.n	80074da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800741c:	e05d      	b.n	80074da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d11c      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x264>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d017      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x264>
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	2b01      	cmp	r3, #1
 800743a:	d114      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330c      	adds	r3, #12
 8007446:	7812      	ldrb	r2, [r2, #0]
 8007448:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b01      	cmp	r3, #1
 8007472:	d119      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x2a6>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d014      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074a4:	2301      	movs	r3, #1
 80074a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074a8:	f7fc f8ee 	bl	8003688 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d803      	bhi.n	80074c0 <HAL_SPI_TransmitReceive+0x2be>
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d102      	bne.n	80074c6 <HAL_SPI_TransmitReceive+0x2c4>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e038      	b.n	800754c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d19c      	bne.n	800741e <HAL_SPI_TransmitReceive+0x21c>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d197      	bne.n	800741e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f8b6 	bl	8007664 <SPI_EndRxTxTransaction>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d008      	beq.n	8007510 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e01d      	b.n	800754c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	613b      	str	r3, [r7, #16]
 800752c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800754a:	2300      	movs	r3, #0
  }
}
 800754c:	4618      	mov	r0, r3
 800754e:	3728      	adds	r7, #40	@ 0x28
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007564:	f7fc f890 	bl	8003688 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4413      	add	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007574:	f7fc f888 	bl	8003688 <HAL_GetTick>
 8007578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800757a:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	015b      	lsls	r3, r3, #5
 8007580:	0d1b      	lsrs	r3, r3, #20
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800758a:	e055      	b.n	8007638 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d051      	beq.n	8007638 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007594:	f7fc f878 	bl	8003688 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d902      	bls.n	80075aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d13d      	bne.n	8007626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c2:	d111      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075cc:	d004      	beq.n	80075d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d6:	d107      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f0:	d10f      	bne.n	8007612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e018      	b.n	8007658 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
 8007630:	e002      	b.n	8007638 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3b01      	subs	r3, #1
 8007636:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4013      	ands	r3, r2
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	429a      	cmp	r2, r3
 8007646:	bf0c      	ite	eq
 8007648:	2301      	moveq	r3, #1
 800764a:	2300      	movne	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	429a      	cmp	r2, r3
 8007654:	d19a      	bne.n	800758c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20000060 	.word	0x20000060

08007664 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2201      	movs	r2, #1
 8007678:	2102      	movs	r1, #2
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff ff6a 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768a:	f043 0220 	orr.w	r2, r3, #32
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e032      	b.n	80076fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007696:	4b1b      	ldr	r3, [pc, #108]	@ (8007704 <SPI_EndRxTxTransaction+0xa0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1b      	ldr	r2, [pc, #108]	@ (8007708 <SPI_EndRxTxTransaction+0xa4>)
 800769c:	fba2 2303 	umull	r2, r3, r2, r3
 80076a0:	0d5b      	lsrs	r3, r3, #21
 80076a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80076a6:	fb02 f303 	mul.w	r3, r2, r3
 80076aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076b4:	d112      	bne.n	80076dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	@ 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff ff47 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d016      	beq.n	80076fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e00f      	b.n	80076fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f2:	2b80      	cmp	r3, #128	@ 0x80
 80076f4:	d0f2      	beq.n	80076dc <SPI_EndRxTxTransaction+0x78>
 80076f6:	e000      	b.n	80076fa <SPI_EndRxTxTransaction+0x96>
        break;
 80076f8:	bf00      	nop
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000060 	.word	0x20000060
 8007708:	165e9f81 	.word	0x165e9f81

0800770c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e041      	b.n	80077a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fb fdaa 	bl	800328c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3304      	adds	r3, #4
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f000 fad8 	bl	8007d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e041      	b.n	8007840 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d106      	bne.n	80077d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f839 	bl	8007848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4619      	mov	r1, r3
 80077e8:	4610      	mov	r0, r2
 80077ea:	f000 fa89 	bl	8007d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <HAL_TIM_PWM_Start+0x24>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	bf14      	ite	ne
 8007878:	2301      	movne	r3, #1
 800787a:	2300      	moveq	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	e022      	b.n	80078c6 <HAL_TIM_PWM_Start+0x6a>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b04      	cmp	r3, #4
 8007884:	d109      	bne.n	800789a <HAL_TIM_PWM_Start+0x3e>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	e015      	b.n	80078c6 <HAL_TIM_PWM_Start+0x6a>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d109      	bne.n	80078b4 <HAL_TIM_PWM_Start+0x58>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	bf14      	ite	ne
 80078ac:	2301      	movne	r3, #1
 80078ae:	2300      	moveq	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	e008      	b.n	80078c6 <HAL_TIM_PWM_Start+0x6a>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	bf14      	ite	ne
 80078c0:	2301      	movne	r3, #1
 80078c2:	2300      	moveq	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e07c      	b.n	80079c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <HAL_TIM_PWM_Start+0x82>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078dc:	e013      	b.n	8007906 <HAL_TIM_PWM_Start+0xaa>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d104      	bne.n	80078ee <HAL_TIM_PWM_Start+0x92>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078ec:	e00b      	b.n	8007906 <HAL_TIM_PWM_Start+0xaa>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d104      	bne.n	80078fe <HAL_TIM_PWM_Start+0xa2>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078fc:	e003      	b.n	8007906 <HAL_TIM_PWM_Start+0xaa>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2201      	movs	r2, #1
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fce6 	bl	80082e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2d      	ldr	r2, [pc, #180]	@ (80079d0 <HAL_TIM_PWM_Start+0x174>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_TIM_PWM_Start+0xcc>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2c      	ldr	r2, [pc, #176]	@ (80079d4 <HAL_TIM_PWM_Start+0x178>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d101      	bne.n	800792c <HAL_TIM_PWM_Start+0xd0>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <HAL_TIM_PWM_Start+0xd2>
 800792c:	2300      	movs	r3, #0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d007      	beq.n	8007942 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007940:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a22      	ldr	r2, [pc, #136]	@ (80079d0 <HAL_TIM_PWM_Start+0x174>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d022      	beq.n	8007992 <HAL_TIM_PWM_Start+0x136>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007954:	d01d      	beq.n	8007992 <HAL_TIM_PWM_Start+0x136>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1f      	ldr	r2, [pc, #124]	@ (80079d8 <HAL_TIM_PWM_Start+0x17c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d018      	beq.n	8007992 <HAL_TIM_PWM_Start+0x136>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1d      	ldr	r2, [pc, #116]	@ (80079dc <HAL_TIM_PWM_Start+0x180>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d013      	beq.n	8007992 <HAL_TIM_PWM_Start+0x136>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1c      	ldr	r2, [pc, #112]	@ (80079e0 <HAL_TIM_PWM_Start+0x184>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00e      	beq.n	8007992 <HAL_TIM_PWM_Start+0x136>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a16      	ldr	r2, [pc, #88]	@ (80079d4 <HAL_TIM_PWM_Start+0x178>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d009      	beq.n	8007992 <HAL_TIM_PWM_Start+0x136>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a18      	ldr	r2, [pc, #96]	@ (80079e4 <HAL_TIM_PWM_Start+0x188>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d004      	beq.n	8007992 <HAL_TIM_PWM_Start+0x136>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a16      	ldr	r2, [pc, #88]	@ (80079e8 <HAL_TIM_PWM_Start+0x18c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d111      	bne.n	80079b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b06      	cmp	r3, #6
 80079a2:	d010      	beq.n	80079c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b4:	e007      	b.n	80079c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40010400 	.word	0x40010400
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40001800 	.word	0x40001800

080079ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d101      	bne.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a06:	2302      	movs	r3, #2
 8007a08:	e0ae      	b.n	8007b68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b0c      	cmp	r3, #12
 8007a16:	f200 809f 	bhi.w	8007b58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a55 	.word	0x08007a55
 8007a24:	08007b59 	.word	0x08007b59
 8007a28:	08007b59 	.word	0x08007b59
 8007a2c:	08007b59 	.word	0x08007b59
 8007a30:	08007a95 	.word	0x08007a95
 8007a34:	08007b59 	.word	0x08007b59
 8007a38:	08007b59 	.word	0x08007b59
 8007a3c:	08007b59 	.word	0x08007b59
 8007a40:	08007ad7 	.word	0x08007ad7
 8007a44:	08007b59 	.word	0x08007b59
 8007a48:	08007b59 	.word	0x08007b59
 8007a4c:	08007b59 	.word	0x08007b59
 8007a50:	08007b17 	.word	0x08007b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68b9      	ldr	r1, [r7, #8]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 f9f6 	bl	8007e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0208 	orr.w	r2, r2, #8
 8007a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0204 	bic.w	r2, r2, #4
 8007a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6999      	ldr	r1, [r3, #24]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	619a      	str	r2, [r3, #24]
      break;
 8007a92:	e064      	b.n	8007b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fa46 	bl	8007f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6999      	ldr	r1, [r3, #24]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	021a      	lsls	r2, r3, #8
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	619a      	str	r2, [r3, #24]
      break;
 8007ad4:	e043      	b.n	8007b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fa9b 	bl	8008018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0208 	orr.w	r2, r2, #8
 8007af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0204 	bic.w	r2, r2, #4
 8007b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69d9      	ldr	r1, [r3, #28]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	61da      	str	r2, [r3, #28]
      break;
 8007b14:	e023      	b.n	8007b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 faef 	bl	8008100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69da      	ldr	r2, [r3, #28]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69d9      	ldr	r1, [r3, #28]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	021a      	lsls	r2, r3, #8
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	61da      	str	r2, [r3, #28]
      break;
 8007b56:	e002      	b.n	8007b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_TIM_ConfigClockSource+0x1c>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e0b4      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x186>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bc4:	d03e      	beq.n	8007c44 <HAL_TIM_ConfigClockSource+0xd4>
 8007bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bca:	f200 8087 	bhi.w	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
 8007bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd2:	f000 8086 	beq.w	8007ce2 <HAL_TIM_ConfigClockSource+0x172>
 8007bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bda:	d87f      	bhi.n	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
 8007bdc:	2b70      	cmp	r3, #112	@ 0x70
 8007bde:	d01a      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0xa6>
 8007be0:	2b70      	cmp	r3, #112	@ 0x70
 8007be2:	d87b      	bhi.n	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
 8007be4:	2b60      	cmp	r3, #96	@ 0x60
 8007be6:	d050      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x11a>
 8007be8:	2b60      	cmp	r3, #96	@ 0x60
 8007bea:	d877      	bhi.n	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
 8007bec:	2b50      	cmp	r3, #80	@ 0x50
 8007bee:	d03c      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0xfa>
 8007bf0:	2b50      	cmp	r3, #80	@ 0x50
 8007bf2:	d873      	bhi.n	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
 8007bf4:	2b40      	cmp	r3, #64	@ 0x40
 8007bf6:	d058      	beq.n	8007caa <HAL_TIM_ConfigClockSource+0x13a>
 8007bf8:	2b40      	cmp	r3, #64	@ 0x40
 8007bfa:	d86f      	bhi.n	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
 8007bfc:	2b30      	cmp	r3, #48	@ 0x30
 8007bfe:	d064      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0x15a>
 8007c00:	2b30      	cmp	r3, #48	@ 0x30
 8007c02:	d86b      	bhi.n	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d060      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0x15a>
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d867      	bhi.n	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d05c      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0x15a>
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d05a      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0x15a>
 8007c14:	e062      	b.n	8007cdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c26:	f000 fb3b 	bl	80082a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	609a      	str	r2, [r3, #8]
      break;
 8007c42:	e04f      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c54:	f000 fb24 	bl	80082a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c66:	609a      	str	r2, [r3, #8]
      break;
 8007c68:	e03c      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c76:	461a      	mov	r2, r3
 8007c78:	f000 fa98 	bl	80081ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2150      	movs	r1, #80	@ 0x50
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 faf1 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007c88:	e02c      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c96:	461a      	mov	r2, r3
 8007c98:	f000 fab7 	bl	800820a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2160      	movs	r1, #96	@ 0x60
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fae1 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007ca8:	e01c      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f000 fa78 	bl	80081ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2140      	movs	r1, #64	@ 0x40
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fad1 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007cc8:	e00c      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f000 fac8 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007cda:	e003      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce0:	e000      	b.n	8007ce4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a43      	ldr	r2, [pc, #268]	@ (8007e20 <TIM_Base_SetConfig+0x120>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d013      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1e:	d00f      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a40      	ldr	r2, [pc, #256]	@ (8007e24 <TIM_Base_SetConfig+0x124>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00b      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8007e28 <TIM_Base_SetConfig+0x128>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d007      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a3e      	ldr	r2, [pc, #248]	@ (8007e2c <TIM_Base_SetConfig+0x12c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a3d      	ldr	r2, [pc, #244]	@ (8007e30 <TIM_Base_SetConfig+0x130>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d108      	bne.n	8007d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a32      	ldr	r2, [pc, #200]	@ (8007e20 <TIM_Base_SetConfig+0x120>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d02b      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d60:	d027      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2f      	ldr	r2, [pc, #188]	@ (8007e24 <TIM_Base_SetConfig+0x124>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d023      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8007e28 <TIM_Base_SetConfig+0x128>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d01f      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2d      	ldr	r2, [pc, #180]	@ (8007e2c <TIM_Base_SetConfig+0x12c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01b      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8007e30 <TIM_Base_SetConfig+0x130>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d017      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a2b      	ldr	r2, [pc, #172]	@ (8007e34 <TIM_Base_SetConfig+0x134>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8007e38 <TIM_Base_SetConfig+0x138>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00f      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a29      	ldr	r2, [pc, #164]	@ (8007e3c <TIM_Base_SetConfig+0x13c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a28      	ldr	r2, [pc, #160]	@ (8007e40 <TIM_Base_SetConfig+0x140>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a27      	ldr	r2, [pc, #156]	@ (8007e44 <TIM_Base_SetConfig+0x144>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d003      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a26      	ldr	r2, [pc, #152]	@ (8007e48 <TIM_Base_SetConfig+0x148>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d108      	bne.n	8007dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a0e      	ldr	r2, [pc, #56]	@ (8007e20 <TIM_Base_SetConfig+0x120>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <TIM_Base_SetConfig+0xf2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a10      	ldr	r2, [pc, #64]	@ (8007e30 <TIM_Base_SetConfig+0x130>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d103      	bne.n	8007dfa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	691a      	ldr	r2, [r3, #16]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f043 0204 	orr.w	r2, r3, #4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	601a      	str	r2, [r3, #0]
}
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40010000 	.word	0x40010000
 8007e24:	40000400 	.word	0x40000400
 8007e28:	40000800 	.word	0x40000800
 8007e2c:	40000c00 	.word	0x40000c00
 8007e30:	40010400 	.word	0x40010400
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40014400 	.word	0x40014400
 8007e3c:	40014800 	.word	0x40014800
 8007e40:	40001800 	.word	0x40001800
 8007e44:	40001c00 	.word	0x40001c00
 8007e48:	40002000 	.word	0x40002000

08007e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	f023 0201 	bic.w	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f023 0302 	bic.w	r3, r3, #2
 8007e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a20      	ldr	r2, [pc, #128]	@ (8007f24 <TIM_OC1_SetConfig+0xd8>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_OC1_SetConfig+0x64>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8007f28 <TIM_OC1_SetConfig+0xdc>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10c      	bne.n	8007eca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f023 0308 	bic.w	r3, r3, #8
 8007eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f023 0304 	bic.w	r3, r3, #4
 8007ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a15      	ldr	r2, [pc, #84]	@ (8007f24 <TIM_OC1_SetConfig+0xd8>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d003      	beq.n	8007eda <TIM_OC1_SetConfig+0x8e>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a14      	ldr	r2, [pc, #80]	@ (8007f28 <TIM_OC1_SetConfig+0xdc>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d111      	bne.n	8007efe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40010000 	.word	0x40010000
 8007f28:	40010400 	.word	0x40010400

08007f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	f023 0210 	bic.w	r2, r3, #16
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f023 0320 	bic.w	r3, r3, #32
 8007f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a22      	ldr	r2, [pc, #136]	@ (8008010 <TIM_OC2_SetConfig+0xe4>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d003      	beq.n	8007f94 <TIM_OC2_SetConfig+0x68>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a21      	ldr	r2, [pc, #132]	@ (8008014 <TIM_OC2_SetConfig+0xe8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d10d      	bne.n	8007fb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a17      	ldr	r2, [pc, #92]	@ (8008010 <TIM_OC2_SetConfig+0xe4>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <TIM_OC2_SetConfig+0x94>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <TIM_OC2_SetConfig+0xe8>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d113      	bne.n	8007fe8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	621a      	str	r2, [r3, #32]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40010000 	.word	0x40010000
 8008014:	40010400 	.word	0x40010400

08008018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0303 	bic.w	r3, r3, #3
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a21      	ldr	r2, [pc, #132]	@ (80080f8 <TIM_OC3_SetConfig+0xe0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d003      	beq.n	800807e <TIM_OC3_SetConfig+0x66>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a20      	ldr	r2, [pc, #128]	@ (80080fc <TIM_OC3_SetConfig+0xe4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d10d      	bne.n	800809a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	4313      	orrs	r3, r2
 8008090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a16      	ldr	r2, [pc, #88]	@ (80080f8 <TIM_OC3_SetConfig+0xe0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d003      	beq.n	80080aa <TIM_OC3_SetConfig+0x92>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a15      	ldr	r2, [pc, #84]	@ (80080fc <TIM_OC3_SetConfig+0xe4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d113      	bne.n	80080d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	621a      	str	r2, [r3, #32]
}
 80080ec:	bf00      	nop
 80080ee:	371c      	adds	r7, #28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	40010000 	.word	0x40010000
 80080fc:	40010400 	.word	0x40010400

08008100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800812e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4313      	orrs	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800814a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	031b      	lsls	r3, r3, #12
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a12      	ldr	r2, [pc, #72]	@ (80081a4 <TIM_OC4_SetConfig+0xa4>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_OC4_SetConfig+0x68>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a11      	ldr	r2, [pc, #68]	@ (80081a8 <TIM_OC4_SetConfig+0xa8>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d109      	bne.n	800817c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800816e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	019b      	lsls	r3, r3, #6
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	4313      	orrs	r3, r2
 800817a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	621a      	str	r2, [r3, #32]
}
 8008196:	bf00      	nop
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	40010000 	.word	0x40010000
 80081a8:	40010400 	.word	0x40010400

080081ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f023 0201 	bic.w	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f023 030a 	bic.w	r3, r3, #10
 80081e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	621a      	str	r2, [r3, #32]
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800820a:	b480      	push	{r7}
 800820c:	b087      	sub	sp, #28
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	f023 0210 	bic.w	r2, r3, #16
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	031b      	lsls	r3, r3, #12
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008246:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4313      	orrs	r3, r2
 8008250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800826a:	b480      	push	{r7}
 800826c:	b085      	sub	sp, #20
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	f043 0307 	orr.w	r3, r3, #7
 800828c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	609a      	str	r2, [r3, #8]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	021a      	lsls	r2, r3, #8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	609a      	str	r2, [r3, #8]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f003 031f 	and.w	r3, r3, #31
 80082f2:	2201      	movs	r2, #1
 80082f4:	fa02 f303 	lsl.w	r3, r2, r3
 80082f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a1a      	ldr	r2, [r3, #32]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	43db      	mvns	r3, r3
 8008302:	401a      	ands	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a1a      	ldr	r2, [r3, #32]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f003 031f 	and.w	r3, r3, #31
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	fa01 f303 	lsl.w	r3, r1, r3
 8008318:	431a      	orrs	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	621a      	str	r2, [r3, #32]
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
	...

0800832c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008340:	2302      	movs	r3, #2
 8008342:	e05a      	b.n	80083fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800836a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a21      	ldr	r2, [pc, #132]	@ (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d022      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008390:	d01d      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a1d      	ldr	r2, [pc, #116]	@ (800840c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d018      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d013      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1a      	ldr	r2, [pc, #104]	@ (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00e      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a18      	ldr	r2, [pc, #96]	@ (8008418 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d009      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a17      	ldr	r2, [pc, #92]	@ (800841c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d004      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a15      	ldr	r2, [pc, #84]	@ (8008420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d10c      	bne.n	80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	40010000 	.word	0x40010000
 800840c:	40000400 	.word	0x40000400
 8008410:	40000800 	.word	0x40000800
 8008414:	40000c00 	.word	0x40000c00
 8008418:	40010400 	.word	0x40010400
 800841c:	40014000 	.word	0x40014000
 8008420:	40001800 	.word	0x40001800

08008424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800843c:	2302      	movs	r3, #2
 800843e:	e03d      	b.n	80084bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084c8:	b084      	sub	sp, #16
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	f107 001c 	add.w	r0, r7, #28
 80084d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d123      	bne.n	800852a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80084f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800850a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800850e:	2b01      	cmp	r3, #1
 8008510:	d105      	bne.n	800851e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 fae8 	bl	8009af4 <USB_CoreReset>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]
 8008528:	e01b      	b.n	8008562 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 fadc 	bl	8009af4 <USB_CoreReset>
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008540:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008544:	2b00      	cmp	r3, #0
 8008546:	d106      	bne.n	8008556 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	639a      	str	r2, [r3, #56]	@ 0x38
 8008554:	e005      	b.n	8008562 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008562:	7fbb      	ldrb	r3, [r7, #30]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d10b      	bne.n	8008580 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f043 0206 	orr.w	r2, r3, #6
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800858c:	b004      	add	sp, #16
 800858e:	4770      	bx	lr

08008590 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d165      	bne.n	8008670 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a41      	ldr	r2, [pc, #260]	@ (80086ac <USB_SetTurnaroundTime+0x11c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d906      	bls.n	80085ba <USB_SetTurnaroundTime+0x2a>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a40      	ldr	r2, [pc, #256]	@ (80086b0 <USB_SetTurnaroundTime+0x120>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d202      	bcs.n	80085ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80085b4:	230f      	movs	r3, #15
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	e062      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4a3c      	ldr	r2, [pc, #240]	@ (80086b0 <USB_SetTurnaroundTime+0x120>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d306      	bcc.n	80085d0 <USB_SetTurnaroundTime+0x40>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a3b      	ldr	r2, [pc, #236]	@ (80086b4 <USB_SetTurnaroundTime+0x124>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d202      	bcs.n	80085d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80085ca:	230e      	movs	r3, #14
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e057      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4a38      	ldr	r2, [pc, #224]	@ (80086b4 <USB_SetTurnaroundTime+0x124>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d306      	bcc.n	80085e6 <USB_SetTurnaroundTime+0x56>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4a37      	ldr	r2, [pc, #220]	@ (80086b8 <USB_SetTurnaroundTime+0x128>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d202      	bcs.n	80085e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80085e0:	230d      	movs	r3, #13
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e04c      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	4a33      	ldr	r2, [pc, #204]	@ (80086b8 <USB_SetTurnaroundTime+0x128>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d306      	bcc.n	80085fc <USB_SetTurnaroundTime+0x6c>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	4a32      	ldr	r2, [pc, #200]	@ (80086bc <USB_SetTurnaroundTime+0x12c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d802      	bhi.n	80085fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085f6:	230c      	movs	r3, #12
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	e041      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4a2f      	ldr	r2, [pc, #188]	@ (80086bc <USB_SetTurnaroundTime+0x12c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d906      	bls.n	8008612 <USB_SetTurnaroundTime+0x82>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4a2e      	ldr	r2, [pc, #184]	@ (80086c0 <USB_SetTurnaroundTime+0x130>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d802      	bhi.n	8008612 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800860c:	230b      	movs	r3, #11
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e036      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4a2a      	ldr	r2, [pc, #168]	@ (80086c0 <USB_SetTurnaroundTime+0x130>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d906      	bls.n	8008628 <USB_SetTurnaroundTime+0x98>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4a29      	ldr	r2, [pc, #164]	@ (80086c4 <USB_SetTurnaroundTime+0x134>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d802      	bhi.n	8008628 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008622:	230a      	movs	r3, #10
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	e02b      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4a26      	ldr	r2, [pc, #152]	@ (80086c4 <USB_SetTurnaroundTime+0x134>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d906      	bls.n	800863e <USB_SetTurnaroundTime+0xae>
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	4a25      	ldr	r2, [pc, #148]	@ (80086c8 <USB_SetTurnaroundTime+0x138>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d202      	bcs.n	800863e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008638:	2309      	movs	r3, #9
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e020      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	4a21      	ldr	r2, [pc, #132]	@ (80086c8 <USB_SetTurnaroundTime+0x138>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d306      	bcc.n	8008654 <USB_SetTurnaroundTime+0xc4>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	4a20      	ldr	r2, [pc, #128]	@ (80086cc <USB_SetTurnaroundTime+0x13c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d802      	bhi.n	8008654 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800864e:	2308      	movs	r3, #8
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	e015      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	4a1d      	ldr	r2, [pc, #116]	@ (80086cc <USB_SetTurnaroundTime+0x13c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d906      	bls.n	800866a <USB_SetTurnaroundTime+0xda>
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4a1c      	ldr	r2, [pc, #112]	@ (80086d0 <USB_SetTurnaroundTime+0x140>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d202      	bcs.n	800866a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008664:	2307      	movs	r3, #7
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	e00a      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800866a:	2306      	movs	r3, #6
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	e007      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008676:	2309      	movs	r3, #9
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	e001      	b.n	8008680 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800867c:	2309      	movs	r3, #9
 800867e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	029b      	lsls	r3, r3, #10
 8008694:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008698:	431a      	orrs	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	371c      	adds	r7, #28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	00d8acbf 	.word	0x00d8acbf
 80086b0:	00e4e1c0 	.word	0x00e4e1c0
 80086b4:	00f42400 	.word	0x00f42400
 80086b8:	01067380 	.word	0x01067380
 80086bc:	011a499f 	.word	0x011a499f
 80086c0:	01312cff 	.word	0x01312cff
 80086c4:	014ca43f 	.word	0x014ca43f
 80086c8:	016e3600 	.word	0x016e3600
 80086cc:	01a6ab1f 	.word	0x01a6ab1f
 80086d0:	01e84800 	.word	0x01e84800

080086d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f043 0201 	orr.w	r2, r3, #1
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f023 0201 	bic.w	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d115      	bne.n	8008766 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008746:	200a      	movs	r0, #10
 8008748:	f7fa ffaa 	bl	80036a0 <HAL_Delay>
      ms += 10U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	330a      	adds	r3, #10
 8008750:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 f93f 	bl	80099d6 <USB_GetMode>
 8008758:	4603      	mov	r3, r0
 800875a:	2b01      	cmp	r3, #1
 800875c:	d01e      	beq.n	800879c <USB_SetCurrentMode+0x84>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2bc7      	cmp	r3, #199	@ 0xc7
 8008762:	d9f0      	bls.n	8008746 <USB_SetCurrentMode+0x2e>
 8008764:	e01a      	b.n	800879c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008766:	78fb      	ldrb	r3, [r7, #3]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d115      	bne.n	8008798 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008778:	200a      	movs	r0, #10
 800877a:	f7fa ff91 	bl	80036a0 <HAL_Delay>
      ms += 10U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	330a      	adds	r3, #10
 8008782:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 f926 	bl	80099d6 <USB_GetMode>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <USB_SetCurrentMode+0x84>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2bc7      	cmp	r3, #199	@ 0xc7
 8008794:	d9f0      	bls.n	8008778 <USB_SetCurrentMode+0x60>
 8008796:	e001      	b.n	800879c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e005      	b.n	80087a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2bc8      	cmp	r3, #200	@ 0xc8
 80087a0:	d101      	bne.n	80087a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087b0:	b084      	sub	sp, #16
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80087be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087ca:	2300      	movs	r3, #0
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	e009      	b.n	80087e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	3340      	adds	r3, #64	@ 0x40
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	2200      	movs	r2, #0
 80087dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	3301      	adds	r3, #1
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2b0e      	cmp	r3, #14
 80087e8:	d9f2      	bls.n	80087d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d11c      	bne.n	800882c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008800:	f043 0302 	orr.w	r3, r3, #2
 8008804:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008816:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008822:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	639a      	str	r2, [r3, #56]	@ 0x38
 800882a:	e00b      	b.n	8008844 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008830:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800884a:	461a      	mov	r2, r3
 800884c:	2300      	movs	r3, #0
 800884e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008850:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008854:	2b01      	cmp	r3, #1
 8008856:	d10d      	bne.n	8008874 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008860:	2100      	movs	r1, #0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f968 	bl	8008b38 <USB_SetDevSpeed>
 8008868:	e008      	b.n	800887c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800886a:	2101      	movs	r1, #1
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f963 	bl	8008b38 <USB_SetDevSpeed>
 8008872:	e003      	b.n	800887c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008874:	2103      	movs	r1, #3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f95e 	bl	8008b38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800887c:	2110      	movs	r1, #16
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f8fa 	bl	8008a78 <USB_FlushTxFifo>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f924 	bl	8008adc <USB_FlushRxFifo>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a4:	461a      	mov	r2, r3
 80088a6:	2300      	movs	r3, #0
 80088a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088b0:	461a      	mov	r2, r3
 80088b2:	2300      	movs	r3, #0
 80088b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088bc:	461a      	mov	r2, r3
 80088be:	2300      	movs	r3, #0
 80088c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c2:	2300      	movs	r3, #0
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	e043      	b.n	8008950 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088de:	d118      	bne.n	8008912 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f2:	461a      	mov	r2, r3
 80088f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	e013      	b.n	8008924 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008908:	461a      	mov	r2, r3
 800890a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	e008      	b.n	8008924 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891e:	461a      	mov	r2, r3
 8008920:	2300      	movs	r3, #0
 8008922:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008930:	461a      	mov	r2, r3
 8008932:	2300      	movs	r3, #0
 8008934:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008942:	461a      	mov	r2, r3
 8008944:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008948:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3301      	adds	r3, #1
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008954:	461a      	mov	r2, r3
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4293      	cmp	r3, r2
 800895a:	d3b5      	bcc.n	80088c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800895c:	2300      	movs	r3, #0
 800895e:	613b      	str	r3, [r7, #16]
 8008960:	e043      	b.n	80089ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008974:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008978:	d118      	bne.n	80089ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898c:	461a      	mov	r2, r3
 800898e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	e013      	b.n	80089be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a2:	461a      	mov	r2, r3
 80089a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	e008      	b.n	80089be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b8:	461a      	mov	r2, r3
 80089ba:	2300      	movs	r3, #0
 80089bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ca:	461a      	mov	r2, r3
 80089cc:	2300      	movs	r3, #0
 80089ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089dc:	461a      	mov	r2, r3
 80089de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80089e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	3301      	adds	r3, #1
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80089ee:	461a      	mov	r2, r3
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d3b5      	bcc.n	8008962 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008a16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d105      	bne.n	8008a2c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	f043 0210 	orr.w	r2, r3, #16
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699a      	ldr	r2, [r3, #24]
 8008a30:	4b10      	ldr	r3, [pc, #64]	@ (8008a74 <USB_DevInit+0x2c4>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f043 0208 	orr.w	r2, r3, #8
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d107      	bne.n	8008a64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a5c:	f043 0304 	orr.w	r3, r3, #4
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a70:	b004      	add	sp, #16
 8008a72:	4770      	bx	lr
 8008a74:	803c3800 	.word	0x803c3800

08008a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a92:	d901      	bls.n	8008a98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e01b      	b.n	8008ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	daf2      	bge.n	8008a86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	019b      	lsls	r3, r3, #6
 8008aa8:	f043 0220 	orr.w	r2, r3, #32
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008abc:	d901      	bls.n	8008ac2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e006      	b.n	8008ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b20      	cmp	r3, #32
 8008acc:	d0f0      	beq.n	8008ab0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008af4:	d901      	bls.n	8008afa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e018      	b.n	8008b2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	daf2      	bge.n	8008ae8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2210      	movs	r2, #16
 8008b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b18:	d901      	bls.n	8008b1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e006      	b.n	8008b2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 0310 	and.w	r3, r3, #16
 8008b26:	2b10      	cmp	r3, #16
 8008b28:	d0f0      	beq.n	8008b0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	68f9      	ldr	r1, [r7, #12]
 8008b54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b087      	sub	sp, #28
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f003 0306 	and.w	r3, r3, #6
 8008b82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]
 8008b8e:	e00a      	b.n	8008ba6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d002      	beq.n	8008b9c <USB_GetDevSpeed+0x32>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b06      	cmp	r3, #6
 8008b9a:	d102      	bne.n	8008ba2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	75fb      	strb	r3, [r7, #23]
 8008ba0:	e001      	b.n	8008ba6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ba2:	230f      	movs	r3, #15
 8008ba4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d13a      	bne.n	8008c46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd6:	69da      	ldr	r2, [r3, #28]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	2101      	movs	r1, #1
 8008be2:	fa01 f303 	lsl.w	r3, r1, r3
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	68f9      	ldr	r1, [r7, #12]
 8008bea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d155      	bne.n	8008cb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	791b      	ldrb	r3, [r3, #4]
 8008c22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	059b      	lsls	r3, r3, #22
 8008c2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	0151      	lsls	r1, r2, #5
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	440a      	add	r2, r1
 8008c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	e036      	b.n	8008cb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c4c:	69da      	ldr	r2, [r3, #28]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	2101      	movs	r1, #1
 8008c58:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5c:	041b      	lsls	r3, r3, #16
 8008c5e:	68f9      	ldr	r1, [r7, #12]
 8008c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c64:	4313      	orrs	r3, r2
 8008c66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d11a      	bne.n	8008cb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	791b      	ldrb	r3, [r3, #4]
 8008c98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	785b      	ldrb	r3, [r3, #1]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d161      	bne.n	8008da4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cf6:	d11f      	bne.n	8008d38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	2101      	movs	r1, #1
 8008d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	43db      	mvns	r3, r3
 8008d52:	68f9      	ldr	r1, [r7, #12]
 8008d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d58:	4013      	ands	r3, r2
 8008d5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d62:	69da      	ldr	r2, [r3, #28]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	43db      	mvns	r3, r3
 8008d76:	68f9      	ldr	r1, [r7, #12]
 8008d78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	0159      	lsls	r1, r3, #5
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	440b      	add	r3, r1
 8008d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4b35      	ldr	r3, [pc, #212]	@ (8008e74 <USB_DeactivateEndpoint+0x1b0>)
 8008d9e:	4013      	ands	r3, r2
 8008da0:	600b      	str	r3, [r1, #0]
 8008da2:	e060      	b.n	8008e66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dba:	d11f      	bne.n	8008dfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008dda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e12:	041b      	lsls	r3, r3, #16
 8008e14:	43db      	mvns	r3, r3
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e26:	69da      	ldr	r2, [r3, #28]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	f003 030f 	and.w	r3, r3, #15
 8008e30:	2101      	movs	r1, #1
 8008e32:	fa01 f303 	lsl.w	r3, r1, r3
 8008e36:	041b      	lsls	r3, r3, #16
 8008e38:	43db      	mvns	r3, r3
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e40:	4013      	ands	r3, r2
 8008e42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	0159      	lsls	r1, r3, #5
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	440b      	add	r3, r1
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4b05      	ldr	r3, [pc, #20]	@ (8008e78 <USB_DeactivateEndpoint+0x1b4>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	ec337800 	.word	0xec337800
 8008e78:	eff37800 	.word	0xeff37800

08008e7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08a      	sub	sp, #40	@ 0x28
 8008e80:	af02      	add	r7, sp, #8
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	f040 817f 	bne.w	800919c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d132      	bne.n	8008f0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	0151      	lsls	r1, r2, #5
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	440a      	add	r2, r1
 8008ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ec0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ec4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	0151      	lsls	r1, r2, #5
 8008edc:	69fa      	ldr	r2, [r7, #28]
 8008ede:	440a      	add	r2, r1
 8008ee0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ee4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	0151      	lsls	r1, r2, #5
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	440a      	add	r2, r1
 8008f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f04:	0cdb      	lsrs	r3, r3, #19
 8008f06:	04db      	lsls	r3, r3, #19
 8008f08:	6113      	str	r3, [r2, #16]
 8008f0a:	e097      	b.n	800903c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	0151      	lsls	r1, r2, #5
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	440a      	add	r2, r1
 8008f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f26:	0cdb      	lsrs	r3, r3, #19
 8008f28:	04db      	lsls	r3, r3, #19
 8008f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f4e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d11a      	bne.n	8008f8c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	691a      	ldr	r2, [r3, #16]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d903      	bls.n	8008f6a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f88:	6113      	str	r3, [r2, #16]
 8008f8a:	e044      	b.n	8009016 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	691a      	ldr	r2, [r3, #16]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	4413      	add	r3, r2
 8008f96:	1e5a      	subs	r2, r3, #1
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fae:	691a      	ldr	r2, [r3, #16]
 8008fb0:	8afb      	ldrh	r3, [r7, #22]
 8008fb2:	04d9      	lsls	r1, r3, #19
 8008fb4:	4ba4      	ldr	r3, [pc, #656]	@ (8009248 <USB_EPStartXfer+0x3cc>)
 8008fb6:	400b      	ands	r3, r1
 8008fb8:	69b9      	ldr	r1, [r7, #24]
 8008fba:	0148      	lsls	r0, r1, #5
 8008fbc:	69f9      	ldr	r1, [r7, #28]
 8008fbe:	4401      	add	r1, r0
 8008fc0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	791b      	ldrb	r3, [r3, #4]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d122      	bne.n	8009016 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008fee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ffc:	691a      	ldr	r2, [r3, #16]
 8008ffe:	8afb      	ldrh	r3, [r7, #22]
 8009000:	075b      	lsls	r3, r3, #29
 8009002:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009006:	69b9      	ldr	r1, [r7, #24]
 8009008:	0148      	lsls	r0, r1, #5
 800900a:	69f9      	ldr	r1, [r7, #28]
 800900c:	4401      	add	r1, r0
 800900e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009012:	4313      	orrs	r3, r2
 8009014:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009022:	691a      	ldr	r2, [r3, #16]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800902c:	69b9      	ldr	r1, [r7, #24]
 800902e:	0148      	lsls	r0, r1, #5
 8009030:	69f9      	ldr	r1, [r7, #28]
 8009032:	4401      	add	r1, r0
 8009034:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009038:	4313      	orrs	r3, r2
 800903a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d14b      	bne.n	80090da <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009056:	461a      	mov	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	791b      	ldrb	r3, [r3, #4]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d128      	bne.n	80090b8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009072:	2b00      	cmp	r3, #0
 8009074:	d110      	bne.n	8009098 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	69fa      	ldr	r2, [r7, #28]
 800908a:	440a      	add	r2, r1
 800908c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009090:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	e00f      	b.n	80090b8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090b6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	e166      	b.n	80093a8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80090f8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	791b      	ldrb	r3, [r3, #4]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d015      	beq.n	800912e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 814e 	beq.w	80093a8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	f003 030f 	and.w	r3, r3, #15
 800911c:	2101      	movs	r1, #1
 800911e:	fa01 f303 	lsl.w	r3, r1, r3
 8009122:	69f9      	ldr	r1, [r7, #28]
 8009124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009128:	4313      	orrs	r3, r2
 800912a:	634b      	str	r3, [r1, #52]	@ 0x34
 800912c:	e13c      	b.n	80093a8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800913a:	2b00      	cmp	r3, #0
 800913c:	d110      	bne.n	8009160 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	440a      	add	r2, r1
 8009154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009158:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	e00f      	b.n	8009180 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	0151      	lsls	r1, r2, #5
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	440a      	add	r2, r1
 8009176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800917a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800917e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	68d9      	ldr	r1, [r3, #12]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	781a      	ldrb	r2, [r3, #0]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	b298      	uxth	r0, r3
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	4603      	mov	r3, r0
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f9b9 	bl	800950c <USB_WritePacket>
 800919a:	e105      	b.n	80093a8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091b6:	0cdb      	lsrs	r3, r3, #19
 80091b8:	04db      	lsls	r3, r3, #19
 80091ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	440a      	add	r2, r1
 80091d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80091da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80091de:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d132      	bne.n	800924c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800920a:	691a      	ldr	r2, [r3, #16]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009214:	69b9      	ldr	r1, [r7, #24]
 8009216:	0148      	lsls	r0, r1, #5
 8009218:	69f9      	ldr	r1, [r7, #28]
 800921a:	4401      	add	r1, r0
 800921c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009220:	4313      	orrs	r3, r2
 8009222:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	0151      	lsls	r1, r2, #5
 8009236:	69fa      	ldr	r2, [r7, #28]
 8009238:	440a      	add	r2, r1
 800923a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800923e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009242:	6113      	str	r3, [r2, #16]
 8009244:	e062      	b.n	800930c <USB_EPStartXfer+0x490>
 8009246:	bf00      	nop
 8009248:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d123      	bne.n	800929c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009260:	691a      	ldr	r2, [r3, #16]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800926a:	69b9      	ldr	r1, [r7, #24]
 800926c:	0148      	lsls	r0, r1, #5
 800926e:	69f9      	ldr	r1, [r7, #28]
 8009270:	4401      	add	r1, r0
 8009272:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009276:	4313      	orrs	r3, r2
 8009278:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	440a      	add	r2, r1
 8009290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009294:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009298:	6113      	str	r3, [r2, #16]
 800929a:	e037      	b.n	800930c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	691a      	ldr	r2, [r3, #16]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	4413      	add	r3, r2
 80092a6:	1e5a      	subs	r2, r3, #1
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	8afa      	ldrh	r2, [r7, #22]
 80092b8:	fb03 f202 	mul.w	r2, r3, r2
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092cc:	691a      	ldr	r2, [r3, #16]
 80092ce:	8afb      	ldrh	r3, [r7, #22]
 80092d0:	04d9      	lsls	r1, r3, #19
 80092d2:	4b38      	ldr	r3, [pc, #224]	@ (80093b4 <USB_EPStartXfer+0x538>)
 80092d4:	400b      	ands	r3, r1
 80092d6:	69b9      	ldr	r1, [r7, #24]
 80092d8:	0148      	lsls	r0, r1, #5
 80092da:	69f9      	ldr	r1, [r7, #28]
 80092dc:	4401      	add	r1, r0
 80092de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80092e2:	4313      	orrs	r3, r2
 80092e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f2:	691a      	ldr	r2, [r3, #16]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092fc:	69b9      	ldr	r1, [r7, #24]
 80092fe:	0148      	lsls	r0, r1, #5
 8009300:	69f9      	ldr	r1, [r7, #28]
 8009302:	4401      	add	r1, r0
 8009304:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009308:	4313      	orrs	r3, r2
 800930a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d10d      	bne.n	800932e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d009      	beq.n	800932e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	68d9      	ldr	r1, [r3, #12]
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800932a:	460a      	mov	r2, r1
 800932c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	791b      	ldrb	r3, [r3, #4]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d128      	bne.n	8009388 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009342:	2b00      	cmp	r3, #0
 8009344:	d110      	bne.n	8009368 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009360:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	e00f      	b.n	8009388 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	0151      	lsls	r1, r2, #5
 800937a:	69fa      	ldr	r2, [r7, #28]
 800937c:	440a      	add	r2, r1
 800937e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009386:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	69fa      	ldr	r2, [r7, #28]
 800939c:	440a      	add	r2, r1
 800939e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80093a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	1ff80000 	.word	0x1ff80000

080093b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	785b      	ldrb	r3, [r3, #1]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d14a      	bne.n	800946c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093ee:	f040 8086 	bne.w	80094fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	7812      	ldrb	r2, [r2, #0]
 8009406:	0151      	lsls	r1, r2, #5
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	440a      	add	r2, r1
 800940c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009410:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009414:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	7812      	ldrb	r2, [r2, #0]
 800942a:	0151      	lsls	r1, r2, #5
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	440a      	add	r2, r1
 8009430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009434:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009438:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009446:	4293      	cmp	r3, r2
 8009448:	d902      	bls.n	8009450 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	75fb      	strb	r3, [r7, #23]
          break;
 800944e:	e056      	b.n	80094fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009468:	d0e7      	beq.n	800943a <USB_EPStopXfer+0x82>
 800946a:	e048      	b.n	80094fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009480:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009484:	d13b      	bne.n	80094fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	7812      	ldrb	r2, [r2, #0]
 800949a:	0151      	lsls	r1, r2, #5
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	440a      	add	r2, r1
 80094a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	7812      	ldrb	r2, [r2, #0]
 80094be:	0151      	lsls	r1, r2, #5
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	440a      	add	r2, r1
 80094c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3301      	adds	r3, #1
 80094d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80094da:	4293      	cmp	r3, r2
 80094dc:	d902      	bls.n	80094e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
          break;
 80094e2:	e00c      	b.n	80094fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094fc:	d0e7      	beq.n	80094ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009500:	4618      	mov	r0, r3
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800950c:	b480      	push	{r7}
 800950e:	b089      	sub	sp, #36	@ 0x24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4611      	mov	r1, r2
 8009518:	461a      	mov	r2, r3
 800951a:	460b      	mov	r3, r1
 800951c:	71fb      	strb	r3, [r7, #7]
 800951e:	4613      	mov	r3, r2
 8009520:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800952a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d123      	bne.n	800957a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009532:	88bb      	ldrh	r3, [r7, #4]
 8009534:	3303      	adds	r3, #3
 8009536:	089b      	lsrs	r3, r3, #2
 8009538:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800953a:	2300      	movs	r3, #0
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	e018      	b.n	8009572 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	031a      	lsls	r2, r3, #12
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	4413      	add	r3, r2
 8009548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800954c:	461a      	mov	r2, r3
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	3301      	adds	r3, #1
 8009558:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	3301      	adds	r3, #1
 800955e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	3301      	adds	r3, #1
 8009564:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	3301      	adds	r3, #1
 800956a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	3301      	adds	r3, #1
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	429a      	cmp	r2, r3
 8009578:	d3e2      	bcc.n	8009540 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3724      	adds	r7, #36	@ 0x24
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009588:	b480      	push	{r7}
 800958a:	b08b      	sub	sp, #44	@ 0x2c
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	089b      	lsrs	r3, r3, #2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095a6:	88fb      	ldrh	r3, [r7, #6]
 80095a8:	f003 0303 	and.w	r3, r3, #3
 80095ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095ae:	2300      	movs	r3, #0
 80095b0:	623b      	str	r3, [r7, #32]
 80095b2:	e014      	b.n	80095de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095be:	601a      	str	r2, [r3, #0]
    pDest++;
 80095c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c2:	3301      	adds	r3, #1
 80095c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	3301      	adds	r3, #1
 80095ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	3301      	adds	r3, #1
 80095d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	3301      	adds	r3, #1
 80095d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	3301      	adds	r3, #1
 80095dc:	623b      	str	r3, [r7, #32]
 80095de:	6a3a      	ldr	r2, [r7, #32]
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d3e6      	bcc.n	80095b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095e6:	8bfb      	ldrh	r3, [r7, #30]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d01e      	beq.n	800962a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095f6:	461a      	mov	r2, r3
 80095f8:	f107 0310 	add.w	r3, r7, #16
 80095fc:	6812      	ldr	r2, [r2, #0]
 80095fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	b2db      	uxtb	r3, r3
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
 800960c:	b2da      	uxtb	r2, r3
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009610:	701a      	strb	r2, [r3, #0]
      i++;
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	3301      	adds	r3, #1
 8009616:	623b      	str	r3, [r7, #32]
      pDest++;
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	3301      	adds	r3, #1
 800961c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800961e:	8bfb      	ldrh	r3, [r7, #30]
 8009620:	3b01      	subs	r3, #1
 8009622:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009624:	8bfb      	ldrh	r3, [r7, #30]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1ea      	bne.n	8009600 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800962c:	4618      	mov	r0, r3
 800962e:	372c      	adds	r7, #44	@ 0x2c
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	785b      	ldrb	r3, [r3, #1]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d12c      	bne.n	80096ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	db12      	blt.n	800968c <USB_EPSetStall+0x54>
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00f      	beq.n	800968c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009686:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800968a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	e02b      	b.n	8009706 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	db12      	blt.n	80096e6 <USB_EPSetStall+0xae>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00f      	beq.n	80096e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	0151      	lsls	r1, r2, #5
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	440a      	add	r2, r1
 80096dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	0151      	lsls	r1, r2, #5
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	440a      	add	r2, r1
 80096fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009700:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009704:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d128      	bne.n	8009782 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	440a      	add	r2, r1
 8009746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800974a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800974e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	791b      	ldrb	r3, [r3, #4]
 8009754:	2b03      	cmp	r3, #3
 8009756:	d003      	beq.n	8009760 <USB_EPClearStall+0x4c>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	791b      	ldrb	r3, [r3, #4]
 800975c:	2b02      	cmp	r3, #2
 800975e:	d138      	bne.n	80097d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800977a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	e027      	b.n	80097d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800979c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	791b      	ldrb	r3, [r3, #4]
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d003      	beq.n	80097b2 <USB_EPClearStall+0x9e>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	791b      	ldrb	r3, [r3, #4]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d10f      	bne.n	80097d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009802:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009814:	68f9      	ldr	r1, [r7, #12]
 8009816:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800981a:	4313      	orrs	r3, r2
 800981c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009846:	f023 0303 	bic.w	r3, r3, #3
 800984a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800985a:	f023 0302 	bic.w	r3, r3, #2
 800985e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800986e:	b480      	push	{r7}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009888:	f023 0303 	bic.w	r3, r3, #3
 800988c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800989c:	f043 0302 	orr.w	r3, r3, #2
 80098a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4013      	ands	r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b085      	sub	sp, #20
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	4013      	ands	r3, r2
 80098f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	0c1b      	lsrs	r3, r3, #16
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	4013      	ands	r3, r2
 800992c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	b29b      	uxth	r3, r3
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	4013      	ands	r3, r2
 800996a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800996c:	68bb      	ldr	r3, [r7, #8]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800997a:	b480      	push	{r7}
 800997c:	b087      	sub	sp, #28
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800999a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800999c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800999e:	78fb      	ldrb	r3, [r7, #3]
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	fa22 f303 	lsr.w	r3, r2, r3
 80099aa:	01db      	lsls	r3, r3, #7
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4013      	ands	r3, r2
 80099c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099c8:	68bb      	ldr	r3, [r7, #8]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	371c      	adds	r7, #28
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	f003 0301 	and.w	r3, r3, #1
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a0c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009a10:	f023 0307 	bic.w	r3, r3, #7
 8009a14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	460b      	mov	r3, r1
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	333c      	adds	r3, #60	@ 0x3c
 8009a4e:	3304      	adds	r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	4a26      	ldr	r2, [pc, #152]	@ (8009af0 <USB_EP0_OutStart+0xb8>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d90a      	bls.n	8009a72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a6c:	d101      	bne.n	8009a72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e037      	b.n	8009ae2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a78:	461a      	mov	r2, r3
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aa0:	f043 0318 	orr.w	r3, r3, #24
 8009aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ab4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009ab8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d10f      	bne.n	8009ae0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ada:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009ade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	371c      	adds	r7, #28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	4f54300a 	.word	0x4f54300a

08009af4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3301      	adds	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b0c:	d901      	bls.n	8009b12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e022      	b.n	8009b58 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	daf2      	bge.n	8009b00 <USB_CoreReset+0xc>

  count = 10U;
 8009b1a:	230a      	movs	r3, #10
 8009b1c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009b1e:	e002      	b.n	8009b26 <USB_CoreReset+0x32>
  {
    count--;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1f9      	bne.n	8009b20 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	f043 0201 	orr.w	r2, r3, #1
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b44:	d901      	bls.n	8009b4a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e006      	b.n	8009b58 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d0f0      	beq.n	8009b38 <USB_CoreReset+0x44>

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009b74:	f002 fcac 	bl	800c4d0 <USBD_static_malloc>
 8009b78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d109      	bne.n	8009b94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	32b0      	adds	r2, #176	@ 0xb0
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b90:	2302      	movs	r3, #2
 8009b92:	e0d4      	b.n	8009d3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b94:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009b98:	2100      	movs	r1, #0
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f003 fb3e 	bl	800d21c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	32b0      	adds	r2, #176	@ 0xb0
 8009baa:	68f9      	ldr	r1, [r7, #12]
 8009bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	32b0      	adds	r2, #176	@ 0xb0
 8009bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7c1b      	ldrb	r3, [r3, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d138      	bne.n	8009c3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8009d48 <USBD_CDC_Init+0x1e4>)
 8009bce:	7819      	ldrb	r1, [r3, #0]
 8009bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f002 fb57 	bl	800c28a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8009d48 <USBD_CDC_Init+0x1e4>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	f003 020f 	and.w	r2, r3, #15
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	440b      	add	r3, r1
 8009bf0:	3323      	adds	r3, #35	@ 0x23
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bf6:	4b55      	ldr	r3, [pc, #340]	@ (8009d4c <USBD_CDC_Init+0x1e8>)
 8009bf8:	7819      	ldrb	r1, [r3, #0]
 8009bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bfe:	2202      	movs	r2, #2
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f002 fb42 	bl	800c28a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c06:	4b51      	ldr	r3, [pc, #324]	@ (8009d4c <USBD_CDC_Init+0x1e8>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	f003 020f 	and.w	r2, r3, #15
 8009c0e:	6879      	ldr	r1, [r7, #4]
 8009c10:	4613      	mov	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	440b      	add	r3, r1
 8009c1a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009c1e:	2201      	movs	r2, #1
 8009c20:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c22:	4b4b      	ldr	r3, [pc, #300]	@ (8009d50 <USBD_CDC_Init+0x1ec>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 020f 	and.w	r2, r3, #15
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	331c      	adds	r3, #28
 8009c38:	2210      	movs	r2, #16
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	e035      	b.n	8009caa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c3e:	4b42      	ldr	r3, [pc, #264]	@ (8009d48 <USBD_CDC_Init+0x1e4>)
 8009c40:	7819      	ldrb	r1, [r3, #0]
 8009c42:	2340      	movs	r3, #64	@ 0x40
 8009c44:	2202      	movs	r2, #2
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f002 fb1f 	bl	800c28a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8009d48 <USBD_CDC_Init+0x1e4>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	440b      	add	r3, r1
 8009c60:	3323      	adds	r3, #35	@ 0x23
 8009c62:	2201      	movs	r2, #1
 8009c64:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c66:	4b39      	ldr	r3, [pc, #228]	@ (8009d4c <USBD_CDC_Init+0x1e8>)
 8009c68:	7819      	ldrb	r1, [r3, #0]
 8009c6a:	2340      	movs	r3, #64	@ 0x40
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f002 fb0b 	bl	800c28a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c74:	4b35      	ldr	r3, [pc, #212]	@ (8009d4c <USBD_CDC_Init+0x1e8>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	f003 020f 	and.w	r2, r3, #15
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c90:	4b2f      	ldr	r3, [pc, #188]	@ (8009d50 <USBD_CDC_Init+0x1ec>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 020f 	and.w	r2, r3, #15
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	331c      	adds	r3, #28
 8009ca6:	2210      	movs	r2, #16
 8009ca8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009caa:	4b29      	ldr	r3, [pc, #164]	@ (8009d50 <USBD_CDC_Init+0x1ec>)
 8009cac:	7819      	ldrb	r1, [r3, #0]
 8009cae:	2308      	movs	r3, #8
 8009cb0:	2203      	movs	r2, #3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f002 fae9 	bl	800c28a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cb8:	4b25      	ldr	r3, [pc, #148]	@ (8009d50 <USBD_CDC_Init+0x1ec>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	f003 020f 	and.w	r2, r3, #15
 8009cc0:	6879      	ldr	r1, [r7, #4]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	440b      	add	r3, r1
 8009ccc:	3323      	adds	r3, #35	@ 0x23
 8009cce:	2201      	movs	r2, #1
 8009cd0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	33b0      	adds	r3, #176	@ 0xb0
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d08:	2302      	movs	r3, #2
 8009d0a:	e018      	b.n	8009d3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7c1b      	ldrb	r3, [r3, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d14:	4b0d      	ldr	r3, [pc, #52]	@ (8009d4c <USBD_CDC_Init+0x1e8>)
 8009d16:	7819      	ldrb	r1, [r3, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f002 fba0 	bl	800c468 <USBD_LL_PrepareReceive>
 8009d28:	e008      	b.n	8009d3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d2a:	4b08      	ldr	r3, [pc, #32]	@ (8009d4c <USBD_CDC_Init+0x1e8>)
 8009d2c:	7819      	ldrb	r1, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d34:	2340      	movs	r3, #64	@ 0x40
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f002 fb96 	bl	800c468 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	200000f3 	.word	0x200000f3
 8009d4c:	200000f4 	.word	0x200000f4
 8009d50:	200000f5 	.word	0x200000f5

08009d54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d60:	4b3a      	ldr	r3, [pc, #232]	@ (8009e4c <USBD_CDC_DeInit+0xf8>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f002 fab5 	bl	800c2d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d6c:	4b37      	ldr	r3, [pc, #220]	@ (8009e4c <USBD_CDC_DeInit+0xf8>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	f003 020f 	and.w	r2, r3, #15
 8009d74:	6879      	ldr	r1, [r7, #4]
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	440b      	add	r3, r1
 8009d80:	3323      	adds	r3, #35	@ 0x23
 8009d82:	2200      	movs	r2, #0
 8009d84:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d86:	4b32      	ldr	r3, [pc, #200]	@ (8009e50 <USBD_CDC_DeInit+0xfc>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f002 faa2 	bl	800c2d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d92:	4b2f      	ldr	r3, [pc, #188]	@ (8009e50 <USBD_CDC_DeInit+0xfc>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 020f 	and.w	r2, r3, #15
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	440b      	add	r3, r1
 8009da6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009daa:	2200      	movs	r2, #0
 8009dac:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009dae:	4b29      	ldr	r3, [pc, #164]	@ (8009e54 <USBD_CDC_DeInit+0x100>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f002 fa8e 	bl	800c2d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dba:	4b26      	ldr	r3, [pc, #152]	@ (8009e54 <USBD_CDC_DeInit+0x100>)
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	f003 020f 	and.w	r2, r3, #15
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	440b      	add	r3, r1
 8009dce:	3323      	adds	r3, #35	@ 0x23
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8009e54 <USBD_CDC_DeInit+0x100>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	f003 020f 	and.w	r2, r3, #15
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	440b      	add	r3, r1
 8009de8:	331c      	adds	r3, #28
 8009dea:	2200      	movs	r2, #0
 8009dec:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	32b0      	adds	r2, #176	@ 0xb0
 8009df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d01f      	beq.n	8009e40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	33b0      	adds	r3, #176	@ 0xb0
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	32b0      	adds	r2, #176	@ 0xb0
 8009e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f002 fb62 	bl	800c4ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	32b0      	adds	r2, #176	@ 0xb0
 8009e32:	2100      	movs	r1, #0
 8009e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	200000f3 	.word	0x200000f3
 8009e50:	200000f4 	.word	0x200000f4
 8009e54:	200000f5 	.word	0x200000f5

08009e58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	32b0      	adds	r2, #176	@ 0xb0
 8009e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e0bf      	b.n	800a008 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d050      	beq.n	8009f36 <USBD_CDC_Setup+0xde>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	f040 80af 	bne.w	8009ff8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	88db      	ldrh	r3, [r3, #6]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d03a      	beq.n	8009f18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	b25b      	sxtb	r3, r3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	da1b      	bge.n	8009ee4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	33b0      	adds	r3, #176	@ 0xb0
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009ec2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	88d2      	ldrh	r2, [r2, #6]
 8009ec8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	88db      	ldrh	r3, [r3, #6]
 8009ece:	2b07      	cmp	r3, #7
 8009ed0:	bf28      	it	cs
 8009ed2:	2307      	movcs	r3, #7
 8009ed4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	89fa      	ldrh	r2, [r7, #14]
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 fda7 	bl	800ba30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009ee2:	e090      	b.n	800a006 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	785a      	ldrb	r2, [r3, #1]
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	88db      	ldrh	r3, [r3, #6]
 8009ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8009ef4:	d803      	bhi.n	8009efe <USBD_CDC_Setup+0xa6>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	88db      	ldrh	r3, [r3, #6]
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	e000      	b.n	8009f00 <USBD_CDC_Setup+0xa8>
 8009efe:	2240      	movs	r2, #64	@ 0x40
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f06:	6939      	ldr	r1, [r7, #16]
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 fdbc 	bl	800ba8e <USBD_CtlPrepareRx>
      break;
 8009f16:	e076      	b.n	800a006 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	33b0      	adds	r3, #176	@ 0xb0
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	7850      	ldrb	r0, [r2, #1]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	4798      	blx	r3
      break;
 8009f34:	e067      	b.n	800a006 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	2b0b      	cmp	r3, #11
 8009f3c:	d851      	bhi.n	8009fe2 <USBD_CDC_Setup+0x18a>
 8009f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f44 <USBD_CDC_Setup+0xec>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f75 	.word	0x08009f75
 8009f48:	08009ff1 	.word	0x08009ff1
 8009f4c:	08009fe3 	.word	0x08009fe3
 8009f50:	08009fe3 	.word	0x08009fe3
 8009f54:	08009fe3 	.word	0x08009fe3
 8009f58:	08009fe3 	.word	0x08009fe3
 8009f5c:	08009fe3 	.word	0x08009fe3
 8009f60:	08009fe3 	.word	0x08009fe3
 8009f64:	08009fe3 	.word	0x08009fe3
 8009f68:	08009fe3 	.word	0x08009fe3
 8009f6c:	08009f9f 	.word	0x08009f9f
 8009f70:	08009fc9 	.word	0x08009fc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d107      	bne.n	8009f90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f80:	f107 030a 	add.w	r3, r7, #10
 8009f84:	2202      	movs	r2, #2
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 fd51 	bl	800ba30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f8e:	e032      	b.n	8009ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f001 fccf 	bl	800b936 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8009f9c:	e02b      	b.n	8009ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d107      	bne.n	8009fba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009faa:	f107 030d 	add.w	r3, r7, #13
 8009fae:	2201      	movs	r2, #1
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f001 fd3c 	bl	800ba30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fb8:	e01d      	b.n	8009ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 fcba 	bl	800b936 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fc6:	e016      	b.n	8009ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d00f      	beq.n	8009ff4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f001 fcad 	bl	800b936 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fe0:	e008      	b.n	8009ff4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 fca6 	bl	800b936 <USBD_CtlError>
          ret = USBD_FAIL;
 8009fea:	2303      	movs	r3, #3
 8009fec:	75fb      	strb	r3, [r7, #23]
          break;
 8009fee:	e002      	b.n	8009ff6 <USBD_CDC_Setup+0x19e>
          break;
 8009ff0:	bf00      	nop
 8009ff2:	e008      	b.n	800a006 <USBD_CDC_Setup+0x1ae>
          break;
 8009ff4:	bf00      	nop
      }
      break;
 8009ff6:	e006      	b.n	800a006 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 fc9b 	bl	800b936 <USBD_CtlError>
      ret = USBD_FAIL;
 800a000:	2303      	movs	r3, #3
 800a002:	75fb      	strb	r3, [r7, #23]
      break;
 800a004:	bf00      	nop
  }

  return (uint8_t)ret;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a022:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	32b0      	adds	r2, #176	@ 0xb0
 800a02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a036:	2303      	movs	r3, #3
 800a038:	e065      	b.n	800a106 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	32b0      	adds	r2, #176	@ 0xb0
 800a044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a048:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	f003 020f 	and.w	r2, r3, #15
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	440b      	add	r3, r1
 800a05c:	3314      	adds	r3, #20
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d02f      	beq.n	800a0c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	f003 020f 	and.w	r2, r3, #15
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	4613      	mov	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	440b      	add	r3, r1
 800a076:	3314      	adds	r3, #20
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	f003 010f 	and.w	r1, r3, #15
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	460b      	mov	r3, r1
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	440b      	add	r3, r1
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4403      	add	r3, r0
 800a08c:	331c      	adds	r3, #28
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	fbb2 f1f3 	udiv	r1, r2, r3
 800a094:	fb01 f303 	mul.w	r3, r1, r3
 800a098:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d112      	bne.n	800a0c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a09e:	78fb      	ldrb	r3, [r7, #3]
 800a0a0:	f003 020f 	and.w	r2, r3, #15
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	440b      	add	r3, r1
 800a0b0:	3314      	adds	r3, #20
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0b6:	78f9      	ldrb	r1, [r7, #3]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f002 f9b2 	bl	800c426 <USBD_LL_Transmit>
 800a0c2:	e01f      	b.n	800a104 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	33b0      	adds	r3, #176	@ 0xb0
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d010      	beq.n	800a104 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	33b0      	adds	r3, #176	@ 0xb0
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	32b0      	adds	r2, #176	@ 0xb0
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	32b0      	adds	r2, #176	@ 0xb0
 800a134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e01a      	b.n	800a176 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f002 f9b0 	bl	800c4aa <USBD_LL_GetRxDataSize>
 800a14a:	4602      	mov	r2, r0
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	33b0      	adds	r3, #176	@ 0xb0
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a170:	4611      	mov	r1, r2
 800a172:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	32b0      	adds	r2, #176	@ 0xb0
 800a190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a194:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e024      	b.n	800a1ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	33b0      	adds	r3, #176	@ 0xb0
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d019      	beq.n	800a1e8 <USBD_CDC_EP0_RxReady+0x6a>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a1ba:	2bff      	cmp	r3, #255	@ 0xff
 800a1bc:	d014      	beq.n	800a1e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	33b0      	adds	r3, #176	@ 0xb0
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	22ff      	movs	r2, #255	@ 0xff
 800a1e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1fc:	2182      	movs	r1, #130	@ 0x82
 800a1fe:	4818      	ldr	r0, [pc, #96]	@ (800a260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a200:	f000 fd62 	bl	800acc8 <USBD_GetEpDesc>
 800a204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a206:	2101      	movs	r1, #1
 800a208:	4815      	ldr	r0, [pc, #84]	@ (800a260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a20a:	f000 fd5d 	bl	800acc8 <USBD_GetEpDesc>
 800a20e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a210:	2181      	movs	r1, #129	@ 0x81
 800a212:	4813      	ldr	r0, [pc, #76]	@ (800a260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a214:	f000 fd58 	bl	800acc8 <USBD_GetEpDesc>
 800a218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2210      	movs	r2, #16
 800a224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d006      	beq.n	800a23a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	2200      	movs	r2, #0
 800a230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a234:	711a      	strb	r2, [r3, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d006      	beq.n	800a24e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a248:	711a      	strb	r2, [r3, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2243      	movs	r2, #67	@ 0x43
 800a252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a254:	4b02      	ldr	r3, [pc, #8]	@ (800a260 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	200000b0 	.word	0x200000b0

0800a264 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a26c:	2182      	movs	r1, #130	@ 0x82
 800a26e:	4818      	ldr	r0, [pc, #96]	@ (800a2d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a270:	f000 fd2a 	bl	800acc8 <USBD_GetEpDesc>
 800a274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a276:	2101      	movs	r1, #1
 800a278:	4815      	ldr	r0, [pc, #84]	@ (800a2d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a27a:	f000 fd25 	bl	800acc8 <USBD_GetEpDesc>
 800a27e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a280:	2181      	movs	r1, #129	@ 0x81
 800a282:	4813      	ldr	r0, [pc, #76]	@ (800a2d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a284:	f000 fd20 	bl	800acc8 <USBD_GetEpDesc>
 800a288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	2210      	movs	r2, #16
 800a294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d006      	beq.n	800a2aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	711a      	strb	r2, [r3, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f042 0202 	orr.w	r2, r2, #2
 800a2a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d006      	beq.n	800a2be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	711a      	strb	r2, [r3, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f042 0202 	orr.w	r2, r2, #2
 800a2bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2243      	movs	r2, #67	@ 0x43
 800a2c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2c4:	4b02      	ldr	r3, [pc, #8]	@ (800a2d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	200000b0 	.word	0x200000b0

0800a2d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2dc:	2182      	movs	r1, #130	@ 0x82
 800a2de:	4818      	ldr	r0, [pc, #96]	@ (800a340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2e0:	f000 fcf2 	bl	800acc8 <USBD_GetEpDesc>
 800a2e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4815      	ldr	r0, [pc, #84]	@ (800a340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2ea:	f000 fced 	bl	800acc8 <USBD_GetEpDesc>
 800a2ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2f0:	2181      	movs	r1, #129	@ 0x81
 800a2f2:	4813      	ldr	r0, [pc, #76]	@ (800a340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2f4:	f000 fce8 	bl	800acc8 <USBD_GetEpDesc>
 800a2f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2210      	movs	r2, #16
 800a304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d006      	beq.n	800a31a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	2200      	movs	r2, #0
 800a310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a314:	711a      	strb	r2, [r3, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d006      	beq.n	800a32e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a328:	711a      	strb	r2, [r3, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2243      	movs	r2, #67	@ 0x43
 800a332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a334:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200000b0 	.word	0x200000b0

0800a344 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	220a      	movs	r2, #10
 800a350:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a352:	4b03      	ldr	r3, [pc, #12]	@ (800a360 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	2000006c 	.word	0x2000006c

0800a364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a374:	2303      	movs	r3, #3
 800a376:	e009      	b.n	800a38c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	33b0      	adds	r3, #176	@ 0xb0
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	32b0      	adds	r2, #176	@ 0xb0
 800a3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e008      	b.n	800a3d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	371c      	adds	r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	32b0      	adds	r2, #176	@ 0xb0
 800a3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e004      	b.n	800a40a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
	...

0800a418 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	32b0      	adds	r2, #176	@ 0xb0
 800a42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a430:	2301      	movs	r3, #1
 800a432:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e025      	b.n	800a48a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a444:	2b00      	cmp	r3, #0
 800a446:	d11f      	bne.n	800a488 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a450:	4b10      	ldr	r3, [pc, #64]	@ (800a494 <USBD_CDC_TransmitPacket+0x7c>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	f003 020f 	and.w	r2, r3, #15
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4403      	add	r3, r0
 800a46a:	3314      	adds	r3, #20
 800a46c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a46e:	4b09      	ldr	r3, [pc, #36]	@ (800a494 <USBD_CDC_TransmitPacket+0x7c>)
 800a470:	7819      	ldrb	r1, [r3, #0]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 ffd1 	bl	800c426 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a488:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200000f3 	.word	0x200000f3

0800a498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	32b0      	adds	r2, #176	@ 0xb0
 800a4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32b0      	adds	r2, #176	@ 0xb0
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e018      	b.n	800a4f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7c1b      	ldrb	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <USBD_CDC_ReceivePacket+0x68>)
 800a4d0:	7819      	ldrb	r1, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 ffc3 	bl	800c468 <USBD_LL_PrepareReceive>
 800a4e2:	e008      	b.n	800a4f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4e4:	4b06      	ldr	r3, [pc, #24]	@ (800a500 <USBD_CDC_ReceivePacket+0x68>)
 800a4e6:	7819      	ldrb	r1, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4ee:	2340      	movs	r3, #64	@ 0x40
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 ffb9 	bl	800c468 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	200000f4 	.word	0x200000f4

0800a504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4613      	mov	r3, r2
 800a510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	e01f      	b.n	800a55c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	79fa      	ldrb	r2, [r7, #7]
 800a54e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f001 fe33 	bl	800c1bc <USBD_LL_Init>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e025      	b.n	800a5c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	32ae      	adds	r2, #174	@ 0xae
 800a58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00f      	beq.n	800a5b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	32ae      	adds	r2, #174	@ 0xae
 800a5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a8:	f107 020e 	add.w	r2, r7, #14
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 fe3b 	bl	800c254 <USBD_LL_Start>
 800a5de:	4603      	mov	r3, r0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a614:	2b00      	cmp	r3, #0
 800a616:	d009      	beq.n	800a62c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	4611      	mov	r1, r2
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	4798      	blx	r3
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	4611      	mov	r1, r2
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	4798      	blx	r3
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a65c:	2303      	movs	r3, #3
 800a65e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 f920 	bl	800b8c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a690:	461a      	mov	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a69e:	f003 031f 	and.w	r3, r3, #31
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d01a      	beq.n	800a6dc <USBD_LL_SetupStage+0x72>
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d822      	bhi.n	800a6f0 <USBD_LL_SetupStage+0x86>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <USBD_LL_SetupStage+0x4a>
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d00a      	beq.n	800a6c8 <USBD_LL_SetupStage+0x5e>
 800a6b2:	e01d      	b.n	800a6f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fb75 	bl	800adac <USBD_StdDevReq>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c6:	e020      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fbdd 	bl	800ae90 <USBD_StdItfReq>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a6da:	e016      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fc3f 	bl	800af68 <USBD_StdEPReq>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ee:	e00c      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 fe08 	bl	800c314 <USBD_LL_StallEP>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]
      break;
 800a708:	bf00      	nop
  }

  return ret;
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	460b      	mov	r3, r1
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a726:	7afb      	ldrb	r3, [r7, #11]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d177      	bne.n	800a81c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	f040 80a1 	bne.w	800a882 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	8992      	ldrh	r2, [r2, #12]
 800a748:	4293      	cmp	r3, r2
 800a74a:	d91c      	bls.n	800a786 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	8992      	ldrh	r2, [r2, #12]
 800a754:	1a9a      	subs	r2, r3, r2
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	8992      	ldrh	r2, [r2, #12]
 800a762:	441a      	add	r2, r3
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6919      	ldr	r1, [r3, #16]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	899b      	ldrh	r3, [r3, #12]
 800a770:	461a      	mov	r2, r3
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	4293      	cmp	r3, r2
 800a778:	bf38      	it	cc
 800a77a:	4613      	movcc	r3, r2
 800a77c:	461a      	mov	r2, r3
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f001 f9a6 	bl	800bad0 <USBD_CtlContinueRx>
 800a784:	e07d      	b.n	800a882 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a78c:	f003 031f 	and.w	r3, r3, #31
 800a790:	2b02      	cmp	r3, #2
 800a792:	d014      	beq.n	800a7be <USBD_LL_DataOutStage+0xaa>
 800a794:	2b02      	cmp	r3, #2
 800a796:	d81d      	bhi.n	800a7d4 <USBD_LL_DataOutStage+0xc0>
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <USBD_LL_DataOutStage+0x8e>
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d003      	beq.n	800a7a8 <USBD_LL_DataOutStage+0x94>
 800a7a0:	e018      	b.n	800a7d4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	75bb      	strb	r3, [r7, #22]
            break;
 800a7a6:	e018      	b.n	800a7da <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f000 fa6e 	bl	800ac94 <USBD_CoreFindIF>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	75bb      	strb	r3, [r7, #22]
            break;
 800a7bc:	e00d      	b.n	800a7da <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 fa70 	bl	800acae <USBD_CoreFindEP>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	75bb      	strb	r3, [r7, #22]
            break;
 800a7d2:	e002      	b.n	800a7da <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	75bb      	strb	r3, [r7, #22]
            break;
 800a7d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7da:	7dbb      	ldrb	r3, [r7, #22]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d119      	bne.n	800a814 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d113      	bne.n	800a814 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7ec:	7dba      	ldrb	r2, [r7, #22]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	32ae      	adds	r2, #174	@ 0xae
 800a7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00b      	beq.n	800a814 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a7fc:	7dba      	ldrb	r2, [r7, #22]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a804:	7dba      	ldrb	r2, [r7, #22]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	32ae      	adds	r2, #174	@ 0xae
 800a80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f001 f96c 	bl	800baf2 <USBD_CtlSendStatus>
 800a81a:	e032      	b.n	800a882 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a81c:	7afb      	ldrb	r3, [r7, #11]
 800a81e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a822:	b2db      	uxtb	r3, r3
 800a824:	4619      	mov	r1, r3
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 fa41 	bl	800acae <USBD_CoreFindEP>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a830:	7dbb      	ldrb	r3, [r7, #22]
 800a832:	2bff      	cmp	r3, #255	@ 0xff
 800a834:	d025      	beq.n	800a882 <USBD_LL_DataOutStage+0x16e>
 800a836:	7dbb      	ldrb	r3, [r7, #22]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d122      	bne.n	800a882 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b03      	cmp	r3, #3
 800a846:	d117      	bne.n	800a878 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a848:	7dba      	ldrb	r2, [r7, #22]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	32ae      	adds	r2, #174	@ 0xae
 800a84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00f      	beq.n	800a878 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a858:	7dba      	ldrb	r2, [r7, #22]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a860:	7dba      	ldrb	r2, [r7, #22]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	32ae      	adds	r2, #174	@ 0xae
 800a866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	7afa      	ldrb	r2, [r7, #11]
 800a86e:	4611      	mov	r1, r2
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	4798      	blx	r3
 800a874:	4603      	mov	r3, r0
 800a876:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a878:	7dfb      	ldrb	r3, [r7, #23]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	e000      	b.n	800a884 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	460b      	mov	r3, r1
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d178      	bne.n	800a992 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3314      	adds	r3, #20
 800a8a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d163      	bne.n	800a978 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	8992      	ldrh	r2, [r2, #12]
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d91c      	bls.n	800a8f6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	8992      	ldrh	r2, [r2, #12]
 800a8c4:	1a9a      	subs	r2, r3, r2
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	8992      	ldrh	r2, [r2, #12]
 800a8d2:	441a      	add	r2, r3
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	6919      	ldr	r1, [r3, #16]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f001 f8c2 	bl	800ba6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f001 fdba 	bl	800c468 <USBD_LL_PrepareReceive>
 800a8f4:	e040      	b.n	800a978 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	899b      	ldrh	r3, [r3, #12]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	429a      	cmp	r2, r3
 800a902:	d11c      	bne.n	800a93e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d316      	bcc.n	800a93e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d20f      	bcs.n	800a93e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a91e:	2200      	movs	r2, #0
 800a920:	2100      	movs	r1, #0
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f001 f8a2 	bl	800ba6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a930:	2300      	movs	r3, #0
 800a932:	2200      	movs	r2, #0
 800a934:	2100      	movs	r1, #0
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f001 fd96 	bl	800c468 <USBD_LL_PrepareReceive>
 800a93c:	e01c      	b.n	800a978 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b03      	cmp	r3, #3
 800a948:	d10f      	bne.n	800a96a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d009      	beq.n	800a96a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a96a:	2180      	movs	r1, #128	@ 0x80
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f001 fcd1 	bl	800c314 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f001 f8d0 	bl	800bb18 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d03a      	beq.n	800a9f8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fe30 	bl	800a5e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a990:	e032      	b.n	800a9f8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a992:	7afb      	ldrb	r3, [r7, #11]
 800a994:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	4619      	mov	r1, r3
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f986 	bl	800acae <USBD_CoreFindEP>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9a6:	7dfb      	ldrb	r3, [r7, #23]
 800a9a8:	2bff      	cmp	r3, #255	@ 0xff
 800a9aa:	d025      	beq.n	800a9f8 <USBD_LL_DataInStage+0x16c>
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d122      	bne.n	800a9f8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d11c      	bne.n	800a9f8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9be:	7dfa      	ldrb	r2, [r7, #23]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	32ae      	adds	r2, #174	@ 0xae
 800a9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d014      	beq.n	800a9f8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a9ce:	7dfa      	ldrb	r2, [r7, #23]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9d6:	7dfa      	ldrb	r2, [r7, #23]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	32ae      	adds	r2, #174	@ 0xae
 800a9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	7afa      	ldrb	r2, [r7, #11]
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	4798      	blx	r3
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9ee:	7dbb      	ldrb	r3, [r7, #22]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a9f4:	7dbb      	ldrb	r3, [r7, #22]
 800a9f6:	e000      	b.n	800a9fa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d014      	beq.n	800aa68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00e      	beq.n	800aa68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6852      	ldr	r2, [r2, #4]
 800aa56:	b2d2      	uxtb	r2, r2
 800aa58:	4611      	mov	r1, r2
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	4798      	blx	r3
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa64:	2303      	movs	r3, #3
 800aa66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa68:	2340      	movs	r3, #64	@ 0x40
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 fc0b 	bl	800c28a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2240      	movs	r2, #64	@ 0x40
 800aa80:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa84:	2340      	movs	r3, #64	@ 0x40
 800aa86:	2200      	movs	r2, #0
 800aa88:	2180      	movs	r1, #128	@ 0x80
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 fbfd 	bl	800c28a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2240      	movs	r2, #64	@ 0x40
 800aa9c:	841a      	strh	r2, [r3, #32]

  return ret;
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	78fa      	ldrb	r2, [r7, #3]
 800aab8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d006      	beq.n	800aaea <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2204      	movs	r2, #4
 800aaee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	d106      	bne.n	800ab22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d110      	bne.n	800ab66 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00b      	beq.n	800ab66 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d005      	beq.n	800ab66 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	32ae      	adds	r2, #174	@ 0xae
 800ab86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e01c      	b.n	800abcc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d115      	bne.n	800abca <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	32ae      	adds	r2, #174	@ 0xae
 800aba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00b      	beq.n	800abca <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	32ae      	adds	r2, #174	@ 0xae
 800abbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	78fa      	ldrb	r2, [r7, #3]
 800abc4:	4611      	mov	r1, r2
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	32ae      	adds	r2, #174	@ 0xae
 800abea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e01c      	b.n	800ac30 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d115      	bne.n	800ac2e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	32ae      	adds	r2, #174	@ 0xae
 800ac0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00b      	beq.n	800ac2e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	32ae      	adds	r2, #174	@ 0xae
 800ac20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac26:	78fa      	ldrb	r2, [r7, #3]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00e      	beq.n	800ac8a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6852      	ldr	r2, [r2, #4]
 800ac78:	b2d2      	uxtb	r2, r2
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	4798      	blx	r3
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac86:	2303      	movs	r3, #3
 800ac88:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aca0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	460b      	mov	r3, r1
 800acb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800acdc:	2300      	movs	r3, #0
 800acde:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	885b      	ldrh	r3, [r3, #2]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	7812      	ldrb	r2, [r2, #0]
 800acea:	4293      	cmp	r3, r2
 800acec:	d91f      	bls.n	800ad2e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800acf4:	e013      	b.n	800ad1e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800acf6:	f107 030a 	add.w	r3, r7, #10
 800acfa:	4619      	mov	r1, r3
 800acfc:	6978      	ldr	r0, [r7, #20]
 800acfe:	f000 f81b 	bl	800ad38 <USBD_GetNextDesc>
 800ad02:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	785b      	ldrb	r3, [r3, #1]
 800ad08:	2b05      	cmp	r3, #5
 800ad0a:	d108      	bne.n	800ad1e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	789b      	ldrb	r3, [r3, #2]
 800ad14:	78fa      	ldrb	r2, [r7, #3]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d008      	beq.n	800ad2c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	885b      	ldrh	r3, [r3, #2]
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	897b      	ldrh	r3, [r7, #10]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d8e5      	bhi.n	800acf6 <USBD_GetEpDesc+0x2e>
 800ad2a:	e000      	b.n	800ad2e <USBD_GetEpDesc+0x66>
          break;
 800ad2c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad2e:	693b      	ldr	r3, [r7, #16]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	7812      	ldrb	r2, [r2, #0]
 800ad4e:	4413      	add	r3, r2
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4413      	add	r3, r2
 800ad60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad62:	68fb      	ldr	r3, [r7, #12]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	3301      	adds	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad8e:	8a3b      	ldrh	r3, [r7, #16]
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	b21a      	sxth	r2, r3
 800ad94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	b21b      	sxth	r3, r3
 800ad9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad9e:	89fb      	ldrh	r3, [r7, #14]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	371c      	adds	r7, #28
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adc2:	2b40      	cmp	r3, #64	@ 0x40
 800adc4:	d005      	beq.n	800add2 <USBD_StdDevReq+0x26>
 800adc6:	2b40      	cmp	r3, #64	@ 0x40
 800adc8:	d857      	bhi.n	800ae7a <USBD_StdDevReq+0xce>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00f      	beq.n	800adee <USBD_StdDevReq+0x42>
 800adce:	2b20      	cmp	r3, #32
 800add0:	d153      	bne.n	800ae7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	32ae      	adds	r2, #174	@ 0xae
 800addc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	4798      	blx	r3
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]
      break;
 800adec:	e04a      	b.n	800ae84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	2b09      	cmp	r3, #9
 800adf4:	d83b      	bhi.n	800ae6e <USBD_StdDevReq+0xc2>
 800adf6:	a201      	add	r2, pc, #4	@ (adr r2, 800adfc <USBD_StdDevReq+0x50>)
 800adf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfc:	0800ae51 	.word	0x0800ae51
 800ae00:	0800ae65 	.word	0x0800ae65
 800ae04:	0800ae6f 	.word	0x0800ae6f
 800ae08:	0800ae5b 	.word	0x0800ae5b
 800ae0c:	0800ae6f 	.word	0x0800ae6f
 800ae10:	0800ae2f 	.word	0x0800ae2f
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae6f 	.word	0x0800ae6f
 800ae1c:	0800ae47 	.word	0x0800ae47
 800ae20:	0800ae39 	.word	0x0800ae39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fa3e 	bl	800b2a8 <USBD_GetDescriptor>
          break;
 800ae2c:	e024      	b.n	800ae78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fba3 	bl	800b57c <USBD_SetAddress>
          break;
 800ae36:	e01f      	b.n	800ae78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fbe2 	bl	800b604 <USBD_SetConfig>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]
          break;
 800ae44:	e018      	b.n	800ae78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fc85 	bl	800b758 <USBD_GetConfig>
          break;
 800ae4e:	e013      	b.n	800ae78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fcb6 	bl	800b7c4 <USBD_GetStatus>
          break;
 800ae58:	e00e      	b.n	800ae78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae5a:	6839      	ldr	r1, [r7, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fce5 	bl	800b82c <USBD_SetFeature>
          break;
 800ae62:	e009      	b.n	800ae78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fd09 	bl	800b87e <USBD_ClrFeature>
          break;
 800ae6c:	e004      	b.n	800ae78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fd60 	bl	800b936 <USBD_CtlError>
          break;
 800ae76:	bf00      	nop
      }
      break;
 800ae78:	e004      	b.n	800ae84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fd5a 	bl	800b936 <USBD_CtlError>
      break;
 800ae82:	bf00      	nop
  }

  return ret;
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop

0800ae90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aea6:	2b40      	cmp	r3, #64	@ 0x40
 800aea8:	d005      	beq.n	800aeb6 <USBD_StdItfReq+0x26>
 800aeaa:	2b40      	cmp	r3, #64	@ 0x40
 800aeac:	d852      	bhi.n	800af54 <USBD_StdItfReq+0xc4>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <USBD_StdItfReq+0x26>
 800aeb2:	2b20      	cmp	r3, #32
 800aeb4:	d14e      	bne.n	800af54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	3b01      	subs	r3, #1
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d840      	bhi.n	800af46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	889b      	ldrh	r3, [r3, #4]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d836      	bhi.n	800af3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	889b      	ldrh	r3, [r3, #4]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff fedc 	bl	800ac94 <USBD_CoreFindIF>
 800aedc:	4603      	mov	r3, r0
 800aede:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	2bff      	cmp	r3, #255	@ 0xff
 800aee4:	d01d      	beq.n	800af22 <USBD_StdItfReq+0x92>
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d11a      	bne.n	800af22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aeec:	7bba      	ldrb	r2, [r7, #14]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	32ae      	adds	r2, #174	@ 0xae
 800aef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00f      	beq.n	800af1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aefc:	7bba      	ldrb	r2, [r7, #14]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af04:	7bba      	ldrb	r2, [r7, #14]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	32ae      	adds	r2, #174	@ 0xae
 800af0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	4798      	blx	r3
 800af16:	4603      	mov	r3, r0
 800af18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af1a:	e004      	b.n	800af26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af1c:	2303      	movs	r3, #3
 800af1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af20:	e001      	b.n	800af26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af22:	2303      	movs	r3, #3
 800af24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	88db      	ldrh	r3, [r3, #6]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d110      	bne.n	800af50 <USBD_StdItfReq+0xc0>
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10d      	bne.n	800af50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fddc 	bl	800baf2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af3a:	e009      	b.n	800af50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fcf9 	bl	800b936 <USBD_CtlError>
          break;
 800af44:	e004      	b.n	800af50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fcf4 	bl	800b936 <USBD_CtlError>
          break;
 800af4e:	e000      	b.n	800af52 <USBD_StdItfReq+0xc2>
          break;
 800af50:	bf00      	nop
      }
      break;
 800af52:	e004      	b.n	800af5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fced 	bl	800b936 <USBD_CtlError>
      break;
 800af5c:	bf00      	nop
  }

  return ret;
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	889b      	ldrh	r3, [r3, #4]
 800af7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af84:	2b40      	cmp	r3, #64	@ 0x40
 800af86:	d007      	beq.n	800af98 <USBD_StdEPReq+0x30>
 800af88:	2b40      	cmp	r3, #64	@ 0x40
 800af8a:	f200 8181 	bhi.w	800b290 <USBD_StdEPReq+0x328>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d02a      	beq.n	800afe8 <USBD_StdEPReq+0x80>
 800af92:	2b20      	cmp	r3, #32
 800af94:	f040 817c 	bne.w	800b290 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af98:	7bbb      	ldrb	r3, [r7, #14]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7ff fe86 	bl	800acae <USBD_CoreFindEP>
 800afa2:	4603      	mov	r3, r0
 800afa4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afa6:	7b7b      	ldrb	r3, [r7, #13]
 800afa8:	2bff      	cmp	r3, #255	@ 0xff
 800afaa:	f000 8176 	beq.w	800b29a <USBD_StdEPReq+0x332>
 800afae:	7b7b      	ldrb	r3, [r7, #13]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f040 8172 	bne.w	800b29a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800afb6:	7b7a      	ldrb	r2, [r7, #13]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800afbe:	7b7a      	ldrb	r2, [r7, #13]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	32ae      	adds	r2, #174	@ 0xae
 800afc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 8165 	beq.w	800b29a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afd0:	7b7a      	ldrb	r2, [r7, #13]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	32ae      	adds	r2, #174	@ 0xae
 800afd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	4798      	blx	r3
 800afe2:	4603      	mov	r3, r0
 800afe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afe6:	e158      	b.n	800b29a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	785b      	ldrb	r3, [r3, #1]
 800afec:	2b03      	cmp	r3, #3
 800afee:	d008      	beq.n	800b002 <USBD_StdEPReq+0x9a>
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	f300 8147 	bgt.w	800b284 <USBD_StdEPReq+0x31c>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 809b 	beq.w	800b132 <USBD_StdEPReq+0x1ca>
 800affc:	2b01      	cmp	r3, #1
 800affe:	d03c      	beq.n	800b07a <USBD_StdEPReq+0x112>
 800b000:	e140      	b.n	800b284 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d002      	beq.n	800b014 <USBD_StdEPReq+0xac>
 800b00e:	2b03      	cmp	r3, #3
 800b010:	d016      	beq.n	800b040 <USBD_StdEPReq+0xd8>
 800b012:	e02c      	b.n	800b06e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00d      	beq.n	800b036 <USBD_StdEPReq+0xce>
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	2b80      	cmp	r3, #128	@ 0x80
 800b01e:	d00a      	beq.n	800b036 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f001 f975 	bl	800c314 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b02a:	2180      	movs	r1, #128	@ 0x80
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 f971 	bl	800c314 <USBD_LL_StallEP>
 800b032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b034:	e020      	b.n	800b078 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fc7c 	bl	800b936 <USBD_CtlError>
              break;
 800b03e:	e01b      	b.n	800b078 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	885b      	ldrh	r3, [r3, #2]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10e      	bne.n	800b066 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b048:	7bbb      	ldrb	r3, [r7, #14]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <USBD_StdEPReq+0xfe>
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	2b80      	cmp	r3, #128	@ 0x80
 800b052:	d008      	beq.n	800b066 <USBD_StdEPReq+0xfe>
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	88db      	ldrh	r3, [r3, #6]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d104      	bne.n	800b066 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f001 f957 	bl	800c314 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fd43 	bl	800baf2 <USBD_CtlSendStatus>

              break;
 800b06c:	e004      	b.n	800b078 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fc60 	bl	800b936 <USBD_CtlError>
              break;
 800b076:	bf00      	nop
          }
          break;
 800b078:	e109      	b.n	800b28e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b02      	cmp	r3, #2
 800b084:	d002      	beq.n	800b08c <USBD_StdEPReq+0x124>
 800b086:	2b03      	cmp	r3, #3
 800b088:	d016      	beq.n	800b0b8 <USBD_StdEPReq+0x150>
 800b08a:	e04b      	b.n	800b124 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00d      	beq.n	800b0ae <USBD_StdEPReq+0x146>
 800b092:	7bbb      	ldrb	r3, [r7, #14]
 800b094:	2b80      	cmp	r3, #128	@ 0x80
 800b096:	d00a      	beq.n	800b0ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f001 f939 	bl	800c314 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0a2:	2180      	movs	r1, #128	@ 0x80
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 f935 	bl	800c314 <USBD_LL_StallEP>
 800b0aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0ac:	e040      	b.n	800b130 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fc40 	bl	800b936 <USBD_CtlError>
              break;
 800b0b6:	e03b      	b.n	800b130 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	885b      	ldrh	r3, [r3, #2]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d136      	bne.n	800b12e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d004      	beq.n	800b0d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f001 f93f 	bl	800c352 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fd0c 	bl	800baf2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7ff fde5 	bl	800acae <USBD_CoreFindEP>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0e8:	7b7b      	ldrb	r3, [r7, #13]
 800b0ea:	2bff      	cmp	r3, #255	@ 0xff
 800b0ec:	d01f      	beq.n	800b12e <USBD_StdEPReq+0x1c6>
 800b0ee:	7b7b      	ldrb	r3, [r7, #13]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d11c      	bne.n	800b12e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0f4:	7b7a      	ldrb	r2, [r7, #13]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b0fc:	7b7a      	ldrb	r2, [r7, #13]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	32ae      	adds	r2, #174	@ 0xae
 800b102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d010      	beq.n	800b12e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b10c:	7b7a      	ldrb	r2, [r7, #13]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	32ae      	adds	r2, #174	@ 0xae
 800b112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	4798      	blx	r3
 800b11e:	4603      	mov	r3, r0
 800b120:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b122:	e004      	b.n	800b12e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fc05 	bl	800b936 <USBD_CtlError>
              break;
 800b12c:	e000      	b.n	800b130 <USBD_StdEPReq+0x1c8>
              break;
 800b12e:	bf00      	nop
          }
          break;
 800b130:	e0ad      	b.n	800b28e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d002      	beq.n	800b144 <USBD_StdEPReq+0x1dc>
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d033      	beq.n	800b1aa <USBD_StdEPReq+0x242>
 800b142:	e099      	b.n	800b278 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d007      	beq.n	800b15a <USBD_StdEPReq+0x1f2>
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
 800b14c:	2b80      	cmp	r3, #128	@ 0x80
 800b14e:	d004      	beq.n	800b15a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fbef 	bl	800b936 <USBD_CtlError>
                break;
 800b158:	e093      	b.n	800b282 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b15a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	da0b      	bge.n	800b17a <USBD_StdEPReq+0x212>
 800b162:	7bbb      	ldrb	r3, [r7, #14]
 800b164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	3310      	adds	r3, #16
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	4413      	add	r3, r2
 800b176:	3304      	adds	r3, #4
 800b178:	e00b      	b.n	800b192 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	4413      	add	r3, r2
 800b190:	3304      	adds	r3, #4
 800b192:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2200      	movs	r2, #0
 800b198:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	330e      	adds	r3, #14
 800b19e:	2202      	movs	r2, #2
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fc44 	bl	800ba30 <USBD_CtlSendData>
              break;
 800b1a8:	e06b      	b.n	800b282 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	da11      	bge.n	800b1d6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	f003 020f 	and.w	r2, r3, #15
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	3323      	adds	r3, #35	@ 0x23
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d117      	bne.n	800b1fc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fbb1 	bl	800b936 <USBD_CtlError>
                  break;
 800b1d4:	e055      	b.n	800b282 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	f003 020f 	and.w	r2, r3, #15
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	440b      	add	r3, r1
 800b1e8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d104      	bne.n	800b1fc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fb9e 	bl	800b936 <USBD_CtlError>
                  break;
 800b1fa:	e042      	b.n	800b282 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b200:	2b00      	cmp	r3, #0
 800b202:	da0b      	bge.n	800b21c <USBD_StdEPReq+0x2b4>
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	3310      	adds	r3, #16
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	4413      	add	r3, r2
 800b218:	3304      	adds	r3, #4
 800b21a:	e00b      	b.n	800b234 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b222:	4613      	mov	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	4413      	add	r3, r2
 800b232:	3304      	adds	r3, #4
 800b234:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b236:	7bbb      	ldrb	r3, [r7, #14]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <USBD_StdEPReq+0x2da>
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	2b80      	cmp	r3, #128	@ 0x80
 800b240:	d103      	bne.n	800b24a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2200      	movs	r2, #0
 800b246:	739a      	strb	r2, [r3, #14]
 800b248:	e00e      	b.n	800b268 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b24a:	7bbb      	ldrb	r3, [r7, #14]
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 f89e 	bl	800c390 <USBD_LL_IsStallEP>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2201      	movs	r2, #1
 800b25e:	739a      	strb	r2, [r3, #14]
 800b260:	e002      	b.n	800b268 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2200      	movs	r2, #0
 800b266:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	330e      	adds	r3, #14
 800b26c:	2202      	movs	r2, #2
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fbdd 	bl	800ba30 <USBD_CtlSendData>
              break;
 800b276:	e004      	b.n	800b282 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fb5b 	bl	800b936 <USBD_CtlError>
              break;
 800b280:	bf00      	nop
          }
          break;
 800b282:	e004      	b.n	800b28e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fb55 	bl	800b936 <USBD_CtlError>
          break;
 800b28c:	bf00      	nop
      }
      break;
 800b28e:	e005      	b.n	800b29c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 fb4f 	bl	800b936 <USBD_CtlError>
      break;
 800b298:	e000      	b.n	800b29c <USBD_StdEPReq+0x334>
      break;
 800b29a:	bf00      	nop
  }

  return ret;
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
	...

0800b2a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	885b      	ldrh	r3, [r3, #2]
 800b2c2:	0a1b      	lsrs	r3, r3, #8
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	2b06      	cmp	r3, #6
 800b2ca:	f200 8128 	bhi.w	800b51e <USBD_GetDescriptor+0x276>
 800b2ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b2d4 <USBD_GetDescriptor+0x2c>)
 800b2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d4:	0800b2f1 	.word	0x0800b2f1
 800b2d8:	0800b309 	.word	0x0800b309
 800b2dc:	0800b349 	.word	0x0800b349
 800b2e0:	0800b51f 	.word	0x0800b51f
 800b2e4:	0800b51f 	.word	0x0800b51f
 800b2e8:	0800b4bf 	.word	0x0800b4bf
 800b2ec:	0800b4eb 	.word	0x0800b4eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	7c12      	ldrb	r2, [r2, #16]
 800b2fc:	f107 0108 	add.w	r1, r7, #8
 800b300:	4610      	mov	r0, r2
 800b302:	4798      	blx	r3
 800b304:	60f8      	str	r0, [r7, #12]
      break;
 800b306:	e112      	b.n	800b52e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	7c1b      	ldrb	r3, [r3, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10d      	bne.n	800b32c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b318:	f107 0208 	add.w	r2, r7, #8
 800b31c:	4610      	mov	r0, r2
 800b31e:	4798      	blx	r3
 800b320:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3301      	adds	r3, #1
 800b326:	2202      	movs	r2, #2
 800b328:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b32a:	e100      	b.n	800b52e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b334:	f107 0208 	add.w	r2, r7, #8
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
 800b33c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3301      	adds	r3, #1
 800b342:	2202      	movs	r2, #2
 800b344:	701a      	strb	r2, [r3, #0]
      break;
 800b346:	e0f2      	b.n	800b52e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	885b      	ldrh	r3, [r3, #2]
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b05      	cmp	r3, #5
 800b350:	f200 80ac 	bhi.w	800b4ac <USBD_GetDescriptor+0x204>
 800b354:	a201      	add	r2, pc, #4	@ (adr r2, 800b35c <USBD_GetDescriptor+0xb4>)
 800b356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35a:	bf00      	nop
 800b35c:	0800b375 	.word	0x0800b375
 800b360:	0800b3a9 	.word	0x0800b3a9
 800b364:	0800b3dd 	.word	0x0800b3dd
 800b368:	0800b411 	.word	0x0800b411
 800b36c:	0800b445 	.word	0x0800b445
 800b370:	0800b479 	.word	0x0800b479
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	7c12      	ldrb	r2, [r2, #16]
 800b38c:	f107 0108 	add.w	r1, r7, #8
 800b390:	4610      	mov	r0, r2
 800b392:	4798      	blx	r3
 800b394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b396:	e091      	b.n	800b4bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 facb 	bl	800b936 <USBD_CtlError>
            err++;
 800b3a0:	7afb      	ldrb	r3, [r7, #11]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3a6:	e089      	b.n	800b4bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00b      	beq.n	800b3cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	7c12      	ldrb	r2, [r2, #16]
 800b3c0:	f107 0108 	add.w	r1, r7, #8
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4798      	blx	r3
 800b3c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ca:	e077      	b.n	800b4bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fab1 	bl	800b936 <USBD_CtlError>
            err++;
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3da:	e06f      	b.n	800b4bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7c12      	ldrb	r2, [r2, #16]
 800b3f4:	f107 0108 	add.w	r1, r7, #8
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4798      	blx	r3
 800b3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3fe:	e05d      	b.n	800b4bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa97 	bl	800b936 <USBD_CtlError>
            err++;
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72fb      	strb	r3, [r7, #11]
          break;
 800b40e:	e055      	b.n	800b4bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00b      	beq.n	800b434 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	7c12      	ldrb	r2, [r2, #16]
 800b428:	f107 0108 	add.w	r1, r7, #8
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
 800b430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b432:	e043      	b.n	800b4bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fa7d 	bl	800b936 <USBD_CtlError>
            err++;
 800b43c:	7afb      	ldrb	r3, [r7, #11]
 800b43e:	3301      	adds	r3, #1
 800b440:	72fb      	strb	r3, [r7, #11]
          break;
 800b442:	e03b      	b.n	800b4bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b44a:	695b      	ldr	r3, [r3, #20]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	7c12      	ldrb	r2, [r2, #16]
 800b45c:	f107 0108 	add.w	r1, r7, #8
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
 800b464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b466:	e029      	b.n	800b4bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa63 	bl	800b936 <USBD_CtlError>
            err++;
 800b470:	7afb      	ldrb	r3, [r7, #11]
 800b472:	3301      	adds	r3, #1
 800b474:	72fb      	strb	r3, [r7, #11]
          break;
 800b476:	e021      	b.n	800b4bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00b      	beq.n	800b49c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	7c12      	ldrb	r2, [r2, #16]
 800b490:	f107 0108 	add.w	r1, r7, #8
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
 800b498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b49a:	e00f      	b.n	800b4bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 fa49 	bl	800b936 <USBD_CtlError>
            err++;
 800b4a4:	7afb      	ldrb	r3, [r7, #11]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4aa:	e007      	b.n	800b4bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa41 	bl	800b936 <USBD_CtlError>
          err++;
 800b4b4:	7afb      	ldrb	r3, [r7, #11]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4ba:	bf00      	nop
      }
      break;
 800b4bc:	e037      	b.n	800b52e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7c1b      	ldrb	r3, [r3, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ce:	f107 0208 	add.w	r2, r7, #8
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	4798      	blx	r3
 800b4d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4d8:	e029      	b.n	800b52e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fa2a 	bl	800b936 <USBD_CtlError>
        err++;
 800b4e2:	7afb      	ldrb	r3, [r7, #11]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b4e8:	e021      	b.n	800b52e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	7c1b      	ldrb	r3, [r3, #16]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10d      	bne.n	800b50e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fa:	f107 0208 	add.w	r2, r7, #8
 800b4fe:	4610      	mov	r0, r2
 800b500:	4798      	blx	r3
 800b502:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	3301      	adds	r3, #1
 800b508:	2207      	movs	r2, #7
 800b50a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b50c:	e00f      	b.n	800b52e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fa10 	bl	800b936 <USBD_CtlError>
        err++;
 800b516:	7afb      	ldrb	r3, [r7, #11]
 800b518:	3301      	adds	r3, #1
 800b51a:	72fb      	strb	r3, [r7, #11]
      break;
 800b51c:	e007      	b.n	800b52e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fa08 	bl	800b936 <USBD_CtlError>
      err++;
 800b526:	7afb      	ldrb	r3, [r7, #11]
 800b528:	3301      	adds	r3, #1
 800b52a:	72fb      	strb	r3, [r7, #11]
      break;
 800b52c:	bf00      	nop
  }

  if (err != 0U)
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d11e      	bne.n	800b572 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	88db      	ldrh	r3, [r3, #6]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d016      	beq.n	800b56a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b53c:	893b      	ldrh	r3, [r7, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00e      	beq.n	800b560 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	88da      	ldrh	r2, [r3, #6]
 800b546:	893b      	ldrh	r3, [r7, #8]
 800b548:	4293      	cmp	r3, r2
 800b54a:	bf28      	it	cs
 800b54c:	4613      	movcs	r3, r2
 800b54e:	b29b      	uxth	r3, r3
 800b550:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b552:	893b      	ldrh	r3, [r7, #8]
 800b554:	461a      	mov	r2, r3
 800b556:	68f9      	ldr	r1, [r7, #12]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 fa69 	bl	800ba30 <USBD_CtlSendData>
 800b55e:	e009      	b.n	800b574 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b560:	6839      	ldr	r1, [r7, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f9e7 	bl	800b936 <USBD_CtlError>
 800b568:	e004      	b.n	800b574 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fac1 	bl	800baf2 <USBD_CtlSendStatus>
 800b570:	e000      	b.n	800b574 <USBD_GetDescriptor+0x2cc>
    return;
 800b572:	bf00      	nop
  }
}
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop

0800b57c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	889b      	ldrh	r3, [r3, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d131      	bne.n	800b5f2 <USBD_SetAddress+0x76>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	88db      	ldrh	r3, [r3, #6]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d12d      	bne.n	800b5f2 <USBD_SetAddress+0x76>
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	885b      	ldrh	r3, [r3, #2]
 800b59a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b59c:	d829      	bhi.n	800b5f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	885b      	ldrh	r3, [r3, #2]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d104      	bne.n	800b5c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f9bc 	bl	800b936 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5be:	e01d      	b.n	800b5fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	7bfa      	ldrb	r2, [r7, #15]
 800b5c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 ff0b 	bl	800c3e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fa8d 	bl	800baf2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d004      	beq.n	800b5e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e6:	e009      	b.n	800b5fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f0:	e004      	b.n	800b5fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5f2:	6839      	ldr	r1, [r7, #0]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f99e 	bl	800b936 <USBD_CtlError>
  }
}
 800b5fa:	bf00      	nop
 800b5fc:	bf00      	nop
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	885b      	ldrh	r3, [r3, #2]
 800b616:	b2da      	uxtb	r2, r3
 800b618:	4b4e      	ldr	r3, [pc, #312]	@ (800b754 <USBD_SetConfig+0x150>)
 800b61a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b61c:	4b4d      	ldr	r3, [pc, #308]	@ (800b754 <USBD_SetConfig+0x150>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d905      	bls.n	800b630 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f985 	bl	800b936 <USBD_CtlError>
    return USBD_FAIL;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e08c      	b.n	800b74a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d002      	beq.n	800b642 <USBD_SetConfig+0x3e>
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	d029      	beq.n	800b694 <USBD_SetConfig+0x90>
 800b640:	e075      	b.n	800b72e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b642:	4b44      	ldr	r3, [pc, #272]	@ (800b754 <USBD_SetConfig+0x150>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d020      	beq.n	800b68c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b64a:	4b42      	ldr	r3, [pc, #264]	@ (800b754 <USBD_SetConfig+0x150>)
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b654:	4b3f      	ldr	r3, [pc, #252]	@ (800b754 <USBD_SetConfig+0x150>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7fe ffcf 	bl	800a5fe <USBD_SetClassConfig>
 800b660:	4603      	mov	r3, r0
 800b662:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b664:	7bfb      	ldrb	r3, [r7, #15]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d008      	beq.n	800b67c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f962 	bl	800b936 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2202      	movs	r2, #2
 800b676:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b67a:	e065      	b.n	800b748 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fa38 	bl	800baf2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2203      	movs	r2, #3
 800b686:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b68a:	e05d      	b.n	800b748 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fa30 	bl	800baf2 <USBD_CtlSendStatus>
      break;
 800b692:	e059      	b.n	800b748 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b694:	4b2f      	ldr	r3, [pc, #188]	@ (800b754 <USBD_SetConfig+0x150>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d112      	bne.n	800b6c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b6a4:	4b2b      	ldr	r3, [pc, #172]	@ (800b754 <USBD_SetConfig+0x150>)
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6ae:	4b29      	ldr	r3, [pc, #164]	@ (800b754 <USBD_SetConfig+0x150>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7fe ffbe 	bl	800a636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fa19 	bl	800baf2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6c0:	e042      	b.n	800b748 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6c2:	4b24      	ldr	r3, [pc, #144]	@ (800b754 <USBD_SetConfig+0x150>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d02a      	beq.n	800b726 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7fe ffac 	bl	800a636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6de:	4b1d      	ldr	r3, [pc, #116]	@ (800b754 <USBD_SetConfig+0x150>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b754 <USBD_SetConfig+0x150>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7fe ff85 	bl	800a5fe <USBD_SetClassConfig>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00f      	beq.n	800b71e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f918 	bl	800b936 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7fe ff91 	bl	800a636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b71c:	e014      	b.n	800b748 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f9e7 	bl	800baf2 <USBD_CtlSendStatus>
      break;
 800b724:	e010      	b.n	800b748 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f9e3 	bl	800baf2 <USBD_CtlSendStatus>
      break;
 800b72c:	e00c      	b.n	800b748 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f900 	bl	800b936 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b736:	4b07      	ldr	r3, [pc, #28]	@ (800b754 <USBD_SetConfig+0x150>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	4619      	mov	r1, r3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7fe ff7a 	bl	800a636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b742:	2303      	movs	r3, #3
 800b744:	73fb      	strb	r3, [r7, #15]
      break;
 800b746:	bf00      	nop
  }

  return ret;
 800b748:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	2000061c 	.word	0x2000061c

0800b758 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	88db      	ldrh	r3, [r3, #6]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d004      	beq.n	800b774 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f8e2 	bl	800b936 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b772:	e023      	b.n	800b7bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	dc02      	bgt.n	800b786 <USBD_GetConfig+0x2e>
 800b780:	2b00      	cmp	r3, #0
 800b782:	dc03      	bgt.n	800b78c <USBD_GetConfig+0x34>
 800b784:	e015      	b.n	800b7b2 <USBD_GetConfig+0x5a>
 800b786:	2b03      	cmp	r3, #3
 800b788:	d00b      	beq.n	800b7a2 <USBD_GetConfig+0x4a>
 800b78a:	e012      	b.n	800b7b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	3308      	adds	r3, #8
 800b796:	2201      	movs	r2, #1
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f948 	bl	800ba30 <USBD_CtlSendData>
        break;
 800b7a0:	e00c      	b.n	800b7bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f940 	bl	800ba30 <USBD_CtlSendData>
        break;
 800b7b0:	e004      	b.n	800b7bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f8be 	bl	800b936 <USBD_CtlError>
        break;
 800b7ba:	bf00      	nop
}
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d81e      	bhi.n	800b81a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	88db      	ldrh	r3, [r3, #6]
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d004      	beq.n	800b7ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f8a5 	bl	800b936 <USBD_CtlError>
        break;
 800b7ec:	e01a      	b.n	800b824 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d005      	beq.n	800b80a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	f043 0202 	orr.w	r2, r3, #2
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	330c      	adds	r3, #12
 800b80e:	2202      	movs	r2, #2
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f90c 	bl	800ba30 <USBD_CtlSendData>
      break;
 800b818:	e004      	b.n	800b824 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f88a 	bl	800b936 <USBD_CtlError>
      break;
 800b822:	bf00      	nop
  }
}
 800b824:	bf00      	nop
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	885b      	ldrh	r3, [r3, #2]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d107      	bne.n	800b84e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f953 	bl	800baf2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b84c:	e013      	b.n	800b876 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	885b      	ldrh	r3, [r3, #2]
 800b852:	2b02      	cmp	r3, #2
 800b854:	d10b      	bne.n	800b86e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	889b      	ldrh	r3, [r3, #4]
 800b85a:	0a1b      	lsrs	r3, r3, #8
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f943 	bl	800baf2 <USBD_CtlSendStatus>
}
 800b86c:	e003      	b.n	800b876 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f860 	bl	800b936 <USBD_CtlError>
}
 800b876:	bf00      	nop
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	3b01      	subs	r3, #1
 800b892:	2b02      	cmp	r3, #2
 800b894:	d80b      	bhi.n	800b8ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	885b      	ldrh	r3, [r3, #2]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d10c      	bne.n	800b8b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f923 	bl	800baf2 <USBD_CtlSendStatus>
      }
      break;
 800b8ac:	e004      	b.n	800b8b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f840 	bl	800b936 <USBD_CtlError>
      break;
 800b8b6:	e000      	b.n	800b8ba <USBD_ClrFeature+0x3c>
      break;
 800b8b8:	bf00      	nop
  }
}
 800b8ba:	bf00      	nop
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	781a      	ldrb	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	781a      	ldrb	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f7ff fa3f 	bl	800ad70 <SWAPBYTE>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3301      	adds	r3, #1
 800b904:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f7ff fa32 	bl	800ad70 <SWAPBYTE>
 800b90c:	4603      	mov	r3, r0
 800b90e:	461a      	mov	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3301      	adds	r3, #1
 800b918:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3301      	adds	r3, #1
 800b91e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff fa25 	bl	800ad70 <SWAPBYTE>
 800b926:	4603      	mov	r3, r0
 800b928:	461a      	mov	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	80da      	strh	r2, [r3, #6]
}
 800b92e:	bf00      	nop
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b940:	2180      	movs	r1, #128	@ 0x80
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fce6 	bl	800c314 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b948:	2100      	movs	r1, #0
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fce2 	bl	800c314 <USBD_LL_StallEP>
}
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b964:	2300      	movs	r3, #0
 800b966:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d042      	beq.n	800b9f4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b972:	6938      	ldr	r0, [r7, #16]
 800b974:	f000 f842 	bl	800b9fc <USBD_GetLen>
 800b978:	4603      	mov	r3, r0
 800b97a:	3301      	adds	r3, #1
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b982:	d808      	bhi.n	800b996 <USBD_GetString+0x3e>
 800b984:	6938      	ldr	r0, [r7, #16]
 800b986:	f000 f839 	bl	800b9fc <USBD_GetLen>
 800b98a:	4603      	mov	r3, r0
 800b98c:	3301      	adds	r3, #1
 800b98e:	b29b      	uxth	r3, r3
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	b29a      	uxth	r2, r3
 800b994:	e001      	b.n	800b99a <USBD_GetString+0x42>
 800b996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	7812      	ldrb	r2, [r2, #0]
 800b9a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	2203      	movs	r2, #3
 800b9b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b9c0:	e013      	b.n	800b9ea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	7812      	ldrb	r2, [r2, #0]
 800b9cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	613b      	str	r3, [r7, #16]
    idx++;
 800b9d4:	7dfb      	ldrb	r3, [r7, #23]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	4413      	add	r3, r2
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9e4:	7dfb      	ldrb	r3, [r7, #23]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e7      	bne.n	800b9c2 <USBD_GetString+0x6a>
 800b9f2:	e000      	b.n	800b9f6 <USBD_GetString+0x9e>
    return;
 800b9f4:	bf00      	nop
  }
}
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba04:	2300      	movs	r3, #0
 800ba06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba0c:	e005      	b.n	800ba1a <USBD_GetLen+0x1e>
  {
    len++;
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	3301      	adds	r3, #1
 800ba12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	3301      	adds	r3, #1
 800ba18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1f5      	bne.n	800ba0e <USBD_GetLen+0x12>
  }

  return len;
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2202      	movs	r2, #2
 800ba40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f000 fce2 	bl	800c426 <USBD_LL_Transmit>

  return USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f000 fcd1 	bl	800c426 <USBD_LL_Transmit>

  return USBD_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	60f8      	str	r0, [r7, #12]
 800ba96:	60b9      	str	r1, [r7, #8]
 800ba98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2203      	movs	r2, #3
 800ba9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	2100      	movs	r1, #0
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 fcd1 	bl	800c468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	2100      	movs	r1, #0
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f000 fcc0 	bl	800c468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b082      	sub	sp, #8
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2204      	movs	r2, #4
 800bafe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb02:	2300      	movs	r3, #0
 800bb04:	2200      	movs	r2, #0
 800bb06:	2100      	movs	r1, #0
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fc8c 	bl	800c426 <USBD_LL_Transmit>

  return USBD_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2205      	movs	r2, #5
 800bb24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb28:	2300      	movs	r3, #0
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fc9a 	bl	800c468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
	...

0800bb40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb44:	2200      	movs	r2, #0
 800bb46:	4912      	ldr	r1, [pc, #72]	@ (800bb90 <MX_USB_DEVICE_Init+0x50>)
 800bb48:	4812      	ldr	r0, [pc, #72]	@ (800bb94 <MX_USB_DEVICE_Init+0x54>)
 800bb4a:	f7fe fcdb 	bl	800a504 <USBD_Init>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb54:	f7f6 feb8 	bl	80028c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb58:	490f      	ldr	r1, [pc, #60]	@ (800bb98 <MX_USB_DEVICE_Init+0x58>)
 800bb5a:	480e      	ldr	r0, [pc, #56]	@ (800bb94 <MX_USB_DEVICE_Init+0x54>)
 800bb5c:	f7fe fd02 	bl	800a564 <USBD_RegisterClass>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb66:	f7f6 feaf 	bl	80028c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb6a:	490c      	ldr	r1, [pc, #48]	@ (800bb9c <MX_USB_DEVICE_Init+0x5c>)
 800bb6c:	4809      	ldr	r0, [pc, #36]	@ (800bb94 <MX_USB_DEVICE_Init+0x54>)
 800bb6e:	f7fe fbf9 	bl	800a364 <USBD_CDC_RegisterInterface>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb78:	f7f6 fea6 	bl	80028c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb7c:	4805      	ldr	r0, [pc, #20]	@ (800bb94 <MX_USB_DEVICE_Init+0x54>)
 800bb7e:	f7fe fd27 	bl	800a5d0 <USBD_Start>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb88:	f7f6 fe9e 	bl	80028c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb8c:	bf00      	nop
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	2000010c 	.word	0x2000010c
 800bb94:	20000620 	.word	0x20000620
 800bb98:	20000078 	.word	0x20000078
 800bb9c:	200000f8 	.word	0x200000f8

0800bba0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bba4:	2200      	movs	r2, #0
 800bba6:	4905      	ldr	r1, [pc, #20]	@ (800bbbc <CDC_Init_FS+0x1c>)
 800bba8:	4805      	ldr	r0, [pc, #20]	@ (800bbc0 <CDC_Init_FS+0x20>)
 800bbaa:	f7fe fbf5 	bl	800a398 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbae:	4905      	ldr	r1, [pc, #20]	@ (800bbc4 <CDC_Init_FS+0x24>)
 800bbb0:	4803      	ldr	r0, [pc, #12]	@ (800bbc0 <CDC_Init_FS+0x20>)
 800bbb2:	f7fe fc13 	bl	800a3dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	200010fc 	.word	0x200010fc
 800bbc0:	20000620 	.word	0x20000620
 800bbc4:	200008fc 	.word	0x200008fc

0800bbc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	6039      	str	r1, [r7, #0]
 800bbe2:	71fb      	strb	r3, [r7, #7]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbe8:	79fb      	ldrb	r3, [r7, #7]
 800bbea:	2b23      	cmp	r3, #35	@ 0x23
 800bbec:	d84a      	bhi.n	800bc84 <CDC_Control_FS+0xac>
 800bbee:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf4 <CDC_Control_FS+0x1c>)
 800bbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf4:	0800bc85 	.word	0x0800bc85
 800bbf8:	0800bc85 	.word	0x0800bc85
 800bbfc:	0800bc85 	.word	0x0800bc85
 800bc00:	0800bc85 	.word	0x0800bc85
 800bc04:	0800bc85 	.word	0x0800bc85
 800bc08:	0800bc85 	.word	0x0800bc85
 800bc0c:	0800bc85 	.word	0x0800bc85
 800bc10:	0800bc85 	.word	0x0800bc85
 800bc14:	0800bc85 	.word	0x0800bc85
 800bc18:	0800bc85 	.word	0x0800bc85
 800bc1c:	0800bc85 	.word	0x0800bc85
 800bc20:	0800bc85 	.word	0x0800bc85
 800bc24:	0800bc85 	.word	0x0800bc85
 800bc28:	0800bc85 	.word	0x0800bc85
 800bc2c:	0800bc85 	.word	0x0800bc85
 800bc30:	0800bc85 	.word	0x0800bc85
 800bc34:	0800bc85 	.word	0x0800bc85
 800bc38:	0800bc85 	.word	0x0800bc85
 800bc3c:	0800bc85 	.word	0x0800bc85
 800bc40:	0800bc85 	.word	0x0800bc85
 800bc44:	0800bc85 	.word	0x0800bc85
 800bc48:	0800bc85 	.word	0x0800bc85
 800bc4c:	0800bc85 	.word	0x0800bc85
 800bc50:	0800bc85 	.word	0x0800bc85
 800bc54:	0800bc85 	.word	0x0800bc85
 800bc58:	0800bc85 	.word	0x0800bc85
 800bc5c:	0800bc85 	.word	0x0800bc85
 800bc60:	0800bc85 	.word	0x0800bc85
 800bc64:	0800bc85 	.word	0x0800bc85
 800bc68:	0800bc85 	.word	0x0800bc85
 800bc6c:	0800bc85 	.word	0x0800bc85
 800bc70:	0800bc85 	.word	0x0800bc85
 800bc74:	0800bc85 	.word	0x0800bc85
 800bc78:	0800bc85 	.word	0x0800bc85
 800bc7c:	0800bc85 	.word	0x0800bc85
 800bc80:	0800bc85 	.word	0x0800bc85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc84:	bf00      	nop
  }

  return (USBD_OK);
 800bc86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_ProcessCommand(Buf);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7f5 f94a 	bl	8000f38 <USB_ProcessCommand>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bca4:	6879      	ldr	r1, [r7, #4]
 800bca6:	4805      	ldr	r0, [pc, #20]	@ (800bcbc <CDC_Receive_FS+0x28>)
 800bca8:	f7fe fb98 	bl	800a3dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcac:	4803      	ldr	r0, [pc, #12]	@ (800bcbc <CDC_Receive_FS+0x28>)
 800bcae:	f7fe fbf3 	bl	800a498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bcb2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20000620 	.word	0x20000620

0800bcc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcd0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd08 <CDC_Transmit_FS+0x48>)
 800bcd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bcd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e00b      	b.n	800bcfe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bce6:	887b      	ldrh	r3, [r7, #2]
 800bce8:	461a      	mov	r2, r3
 800bcea:	6879      	ldr	r1, [r7, #4]
 800bcec:	4806      	ldr	r0, [pc, #24]	@ (800bd08 <CDC_Transmit_FS+0x48>)
 800bcee:	f7fe fb53 	bl	800a398 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcf2:	4805      	ldr	r0, [pc, #20]	@ (800bd08 <CDC_Transmit_FS+0x48>)
 800bcf4:	f7fe fb90 	bl	800a418 <USBD_CDC_TransmitPacket>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20000620 	.word	0x20000620

0800bd0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4613      	mov	r3, r2
 800bd18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
	...

0800bd30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	2212      	movs	r2, #18
 800bd40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd42:	4b03      	ldr	r3, [pc, #12]	@ (800bd50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	20000128 	.word	0x20000128

0800bd54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	6039      	str	r1, [r7, #0]
 800bd5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	2204      	movs	r2, #4
 800bd64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd66:	4b03      	ldr	r3, [pc, #12]	@ (800bd74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	2000013c 	.word	0x2000013c

0800bd78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6039      	str	r1, [r7, #0]
 800bd82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd84:	79fb      	ldrb	r3, [r7, #7]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d105      	bne.n	800bd96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4907      	ldr	r1, [pc, #28]	@ (800bdac <USBD_FS_ProductStrDescriptor+0x34>)
 800bd8e:	4808      	ldr	r0, [pc, #32]	@ (800bdb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd90:	f7ff fde2 	bl	800b958 <USBD_GetString>
 800bd94:	e004      	b.n	800bda0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	4904      	ldr	r1, [pc, #16]	@ (800bdac <USBD_FS_ProductStrDescriptor+0x34>)
 800bd9a:	4805      	ldr	r0, [pc, #20]	@ (800bdb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd9c:	f7ff fddc 	bl	800b958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bda0:	4b02      	ldr	r3, [pc, #8]	@ (800bdac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	200018fc 	.word	0x200018fc
 800bdb0:	08010168 	.word	0x08010168

0800bdb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	6039      	str	r1, [r7, #0]
 800bdbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	4904      	ldr	r1, [pc, #16]	@ (800bdd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bdc4:	4804      	ldr	r0, [pc, #16]	@ (800bdd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bdc6:	f7ff fdc7 	bl	800b958 <USBD_GetString>
  return USBD_StrDesc;
 800bdca:	4b02      	ldr	r3, [pc, #8]	@ (800bdd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	200018fc 	.word	0x200018fc
 800bdd8:	08010180 	.word	0x08010180

0800bddc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	6039      	str	r1, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	221a      	movs	r2, #26
 800bdec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdee:	f000 f843 	bl	800be78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdf2:	4b02      	ldr	r3, [pc, #8]	@ (800bdfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20000140 	.word	0x20000140

0800be00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d105      	bne.n	800be1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	4907      	ldr	r1, [pc, #28]	@ (800be34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be16:	4808      	ldr	r0, [pc, #32]	@ (800be38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be18:	f7ff fd9e 	bl	800b958 <USBD_GetString>
 800be1c:	e004      	b.n	800be28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	4904      	ldr	r1, [pc, #16]	@ (800be34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be22:	4805      	ldr	r0, [pc, #20]	@ (800be38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be24:	f7ff fd98 	bl	800b958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be28:	4b02      	ldr	r3, [pc, #8]	@ (800be34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	200018fc 	.word	0x200018fc
 800be38:	08010194 	.word	0x08010194

0800be3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	4603      	mov	r3, r0
 800be44:	6039      	str	r1, [r7, #0]
 800be46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d105      	bne.n	800be5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	4907      	ldr	r1, [pc, #28]	@ (800be70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be52:	4808      	ldr	r0, [pc, #32]	@ (800be74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be54:	f7ff fd80 	bl	800b958 <USBD_GetString>
 800be58:	e004      	b.n	800be64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	4904      	ldr	r1, [pc, #16]	@ (800be70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be5e:	4805      	ldr	r0, [pc, #20]	@ (800be74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be60:	f7ff fd7a 	bl	800b958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be64:	4b02      	ldr	r3, [pc, #8]	@ (800be70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	200018fc 	.word	0x200018fc
 800be74:	080101a0 	.word	0x080101a0

0800be78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4413      	add	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d009      	beq.n	800bea0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be8c:	2208      	movs	r2, #8
 800be8e:	4906      	ldr	r1, [pc, #24]	@ (800bea8 <Get_SerialNum+0x30>)
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 f80d 	bl	800beb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be96:	2204      	movs	r2, #4
 800be98:	4904      	ldr	r1, [pc, #16]	@ (800beac <Get_SerialNum+0x34>)
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f808 	bl	800beb0 <IntToUnicode>
  }
}
 800bea0:	bf00      	nop
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	20000142 	.word	0x20000142
 800beac:	20000152 	.word	0x20000152

0800beb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	4613      	mov	r3, r2
 800bebc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bec2:	2300      	movs	r3, #0
 800bec4:	75fb      	strb	r3, [r7, #23]
 800bec6:	e027      	b.n	800bf18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	0f1b      	lsrs	r3, r3, #28
 800becc:	2b09      	cmp	r3, #9
 800bece:	d80b      	bhi.n	800bee8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	0f1b      	lsrs	r3, r3, #28
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	005b      	lsls	r3, r3, #1
 800beda:	4619      	mov	r1, r3
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	440b      	add	r3, r1
 800bee0:	3230      	adds	r2, #48	@ 0x30
 800bee2:	b2d2      	uxtb	r2, r2
 800bee4:	701a      	strb	r2, [r3, #0]
 800bee6:	e00a      	b.n	800befe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	0f1b      	lsrs	r3, r3, #28
 800beec:	b2da      	uxtb	r2, r3
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	4619      	mov	r1, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	440b      	add	r3, r1
 800bef8:	3237      	adds	r2, #55	@ 0x37
 800befa:	b2d2      	uxtb	r2, r2
 800befc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	011b      	lsls	r3, r3, #4
 800bf02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	3301      	adds	r3, #1
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	2200      	movs	r2, #0
 800bf10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	3301      	adds	r3, #1
 800bf16:	75fb      	strb	r3, [r7, #23]
 800bf18:	7dfa      	ldrb	r2, [r7, #23]
 800bf1a:	79fb      	ldrb	r3, [r7, #7]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d3d3      	bcc.n	800bec8 <IntToUnicode+0x18>
  }
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
	...

0800bf30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08a      	sub	sp, #40	@ 0x28
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf38:	f107 0314 	add.w	r3, r7, #20
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	601a      	str	r2, [r3, #0]
 800bf40:	605a      	str	r2, [r3, #4]
 800bf42:	609a      	str	r2, [r3, #8]
 800bf44:	60da      	str	r2, [r3, #12]
 800bf46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf50:	d13a      	bne.n	800bfc8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf52:	2300      	movs	r3, #0
 800bf54:	613b      	str	r3, [r7, #16]
 800bf56:	4b1e      	ldr	r3, [pc, #120]	@ (800bfd0 <HAL_PCD_MspInit+0xa0>)
 800bf58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5a:	4a1d      	ldr	r2, [pc, #116]	@ (800bfd0 <HAL_PCD_MspInit+0xa0>)
 800bf5c:	f043 0301 	orr.w	r3, r3, #1
 800bf60:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf62:	4b1b      	ldr	r3, [pc, #108]	@ (800bfd0 <HAL_PCD_MspInit+0xa0>)
 800bf64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bf72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf74:	2302      	movs	r3, #2
 800bf76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf80:	230a      	movs	r3, #10
 800bf82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf84:	f107 0314 	add.w	r3, r7, #20
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4812      	ldr	r0, [pc, #72]	@ (800bfd4 <HAL_PCD_MspInit+0xa4>)
 800bf8c:	f7f8 f800 	bl	8003f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf90:	4b0f      	ldr	r3, [pc, #60]	@ (800bfd0 <HAL_PCD_MspInit+0xa0>)
 800bf92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf94:	4a0e      	ldr	r2, [pc, #56]	@ (800bfd0 <HAL_PCD_MspInit+0xa0>)
 800bf96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf9a:	6353      	str	r3, [r2, #52]	@ 0x34
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	4b0b      	ldr	r3, [pc, #44]	@ (800bfd0 <HAL_PCD_MspInit+0xa0>)
 800bfa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfa4:	4a0a      	ldr	r2, [pc, #40]	@ (800bfd0 <HAL_PCD_MspInit+0xa0>)
 800bfa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bfaa:	6453      	str	r3, [r2, #68]	@ 0x44
 800bfac:	4b08      	ldr	r3, [pc, #32]	@ (800bfd0 <HAL_PCD_MspInit+0xa0>)
 800bfae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfb4:	60fb      	str	r3, [r7, #12]
 800bfb6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2100      	movs	r1, #0
 800bfbc:	2043      	movs	r0, #67	@ 0x43
 800bfbe:	f7f7 ffb0 	bl	8003f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfc2:	2043      	movs	r0, #67	@ 0x43
 800bfc4:	f7f7 ffc9 	bl	8003f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfc8:	bf00      	nop
 800bfca:	3728      	adds	r7, #40	@ 0x28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	40023800 	.word	0x40023800
 800bfd4:	40020000 	.word	0x40020000

0800bfd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bfec:	4619      	mov	r1, r3
 800bfee:	4610      	mov	r0, r2
 800bff0:	f7fe fb3b 	bl	800a66a <USBD_LL_SetupStage>
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c00e:	78fa      	ldrb	r2, [r7, #3]
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	4613      	mov	r3, r2
 800c014:	00db      	lsls	r3, r3, #3
 800c016:	4413      	add	r3, r2
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	440b      	add	r3, r1
 800c01c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	4619      	mov	r1, r3
 800c026:	f7fe fb75 	bl	800a714 <USBD_LL_DataOutStage>
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c044:	78fa      	ldrb	r2, [r7, #3]
 800c046:	6879      	ldr	r1, [r7, #4]
 800c048:	4613      	mov	r3, r2
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	3320      	adds	r3, #32
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	78fb      	ldrb	r3, [r7, #3]
 800c058:	4619      	mov	r1, r3
 800c05a:	f7fe fc17 	bl	800a88c <USBD_LL_DataInStage>
}
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c074:	4618      	mov	r0, r3
 800c076:	f7fe fd5b 	bl	800ab30 <USBD_LL_SOF>
}
 800c07a:	bf00      	nop
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b084      	sub	sp, #16
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c08a:	2301      	movs	r3, #1
 800c08c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	79db      	ldrb	r3, [r3, #7]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]
 800c09a:	e008      	b.n	800c0ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	79db      	ldrb	r3, [r3, #7]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d102      	bne.n	800c0aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	73fb      	strb	r3, [r7, #15]
 800c0a8:	e001      	b.n	800c0ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c0aa:	f7f6 fc0d 	bl	80028c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0b4:	7bfa      	ldrb	r2, [r7, #15]
 800c0b6:	4611      	mov	r1, r2
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7fe fcf5 	bl	800aaa8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe fc9c 	bl	800aa02 <USBD_LL_Reset>
}
 800c0ca:	bf00      	nop
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
	...

0800c0d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe fcf0 	bl	800aac8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	6812      	ldr	r2, [r2, #0]
 800c0f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c0fa:	f043 0301 	orr.w	r3, r3, #1
 800c0fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	7adb      	ldrb	r3, [r3, #11]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d005      	beq.n	800c114 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c108:	4b04      	ldr	r3, [pc, #16]	@ (800c11c <HAL_PCD_SuspendCallback+0x48>)
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	4a03      	ldr	r2, [pc, #12]	@ (800c11c <HAL_PCD_SuspendCallback+0x48>)
 800c10e:	f043 0306 	orr.w	r3, r3, #6
 800c112:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	e000ed00 	.word	0xe000ed00

0800c120 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe fce6 	bl	800ab00 <USBD_LL_Resume>
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c14e:	78fa      	ldrb	r2, [r7, #3]
 800c150:	4611      	mov	r1, r2
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fd3e 	bl	800abd4 <USBD_LL_IsoOUTIncomplete>
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c172:	78fa      	ldrb	r2, [r7, #3]
 800c174:	4611      	mov	r1, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fcfa 	bl	800ab70 <USBD_LL_IsoINIncomplete>
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe fd50 	bl	800ac38 <USBD_LL_DevConnected>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe fd4d 	bl	800ac4e <USBD_LL_DevDisconnected>
}
 800c1b4:	bf00      	nop
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d13c      	bne.n	800c246 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c1cc:	4a20      	ldr	r2, [pc, #128]	@ (800c250 <USBD_LL_Init+0x94>)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c250 <USBD_LL_Init+0x94>)
 800c1d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c1dc:	4b1c      	ldr	r3, [pc, #112]	@ (800c250 <USBD_LL_Init+0x94>)
 800c1de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c1e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c1e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c250 <USBD_LL_Init+0x94>)
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c1ea:	4b19      	ldr	r3, [pc, #100]	@ (800c250 <USBD_LL_Init+0x94>)
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c1f0:	4b17      	ldr	r3, [pc, #92]	@ (800c250 <USBD_LL_Init+0x94>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1f6:	4b16      	ldr	r3, [pc, #88]	@ (800c250 <USBD_LL_Init+0x94>)
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c1fc:	4b14      	ldr	r3, [pc, #80]	@ (800c250 <USBD_LL_Init+0x94>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c202:	4b13      	ldr	r3, [pc, #76]	@ (800c250 <USBD_LL_Init+0x94>)
 800c204:	2200      	movs	r2, #0
 800c206:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c208:	4b11      	ldr	r3, [pc, #68]	@ (800c250 <USBD_LL_Init+0x94>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c20e:	4b10      	ldr	r3, [pc, #64]	@ (800c250 <USBD_LL_Init+0x94>)
 800c210:	2200      	movs	r2, #0
 800c212:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c214:	4b0e      	ldr	r3, [pc, #56]	@ (800c250 <USBD_LL_Init+0x94>)
 800c216:	2200      	movs	r2, #0
 800c218:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c21a:	480d      	ldr	r0, [pc, #52]	@ (800c250 <USBD_LL_Init+0x94>)
 800c21c:	f7f9 f892 	bl	8005344 <HAL_PCD_Init>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d001      	beq.n	800c22a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c226:	f7f6 fb4f 	bl	80028c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c22a:	2180      	movs	r1, #128	@ 0x80
 800c22c:	4808      	ldr	r0, [pc, #32]	@ (800c250 <USBD_LL_Init+0x94>)
 800c22e:	f7fa fabe 	bl	80067ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c232:	2240      	movs	r2, #64	@ 0x40
 800c234:	2100      	movs	r1, #0
 800c236:	4806      	ldr	r0, [pc, #24]	@ (800c250 <USBD_LL_Init+0x94>)
 800c238:	f7fa fa72 	bl	8006720 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c23c:	2280      	movs	r2, #128	@ 0x80
 800c23e:	2101      	movs	r1, #1
 800c240:	4803      	ldr	r0, [pc, #12]	@ (800c250 <USBD_LL_Init+0x94>)
 800c242:	f7fa fa6d 	bl	8006720 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	20001afc 	.word	0x20001afc

0800c254 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7f9 f979 	bl	8005562 <HAL_PCD_Start>
 800c270:	4603      	mov	r3, r0
 800c272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	4618      	mov	r0, r3
 800c278:	f000 f942 	bl	800c500 <USBD_Get_USB_Status>
 800c27c:	4603      	mov	r3, r0
 800c27e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c280:	7bbb      	ldrb	r3, [r7, #14]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b084      	sub	sp, #16
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	4608      	mov	r0, r1
 800c294:	4611      	mov	r1, r2
 800c296:	461a      	mov	r2, r3
 800c298:	4603      	mov	r3, r0
 800c29a:	70fb      	strb	r3, [r7, #3]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70bb      	strb	r3, [r7, #2]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c2b2:	78bb      	ldrb	r3, [r7, #2]
 800c2b4:	883a      	ldrh	r2, [r7, #0]
 800c2b6:	78f9      	ldrb	r1, [r7, #3]
 800c2b8:	f7f9 fe4d 	bl	8005f56 <HAL_PCD_EP_Open>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 f91c 	bl	800c500 <USBD_Get_USB_Status>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	460b      	mov	r3, r1
 800c2e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2f0:	78fa      	ldrb	r2, [r7, #3]
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7f9 fe98 	bl	800602a <HAL_PCD_EP_Close>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
 800c300:	4618      	mov	r0, r3
 800c302:	f000 f8fd 	bl	800c500 <USBD_Get_USB_Status>
 800c306:	4603      	mov	r3, r0
 800c308:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c32e:	78fa      	ldrb	r2, [r7, #3]
 800c330:	4611      	mov	r1, r2
 800c332:	4618      	mov	r0, r3
 800c334:	f7f9 ff50 	bl	80061d8 <HAL_PCD_EP_SetStall>
 800c338:	4603      	mov	r3, r0
 800c33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c33c:	7bfb      	ldrb	r3, [r7, #15]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f8de 	bl	800c500 <USBD_Get_USB_Status>
 800c344:	4603      	mov	r3, r0
 800c346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c348:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	460b      	mov	r3, r1
 800c35c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c36c:	78fa      	ldrb	r2, [r7, #3]
 800c36e:	4611      	mov	r1, r2
 800c370:	4618      	mov	r0, r3
 800c372:	f7f9 ff94 	bl	800629e <HAL_PCD_EP_ClrStall>
 800c376:	4603      	mov	r3, r0
 800c378:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 f8bf 	bl	800c500 <USBD_Get_USB_Status>
 800c382:	4603      	mov	r3, r0
 800c384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c386:	7bbb      	ldrb	r3, [r7, #14]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da0b      	bge.n	800c3c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3b2:	68f9      	ldr	r1, [r7, #12]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	440b      	add	r3, r1
 800c3be:	3316      	adds	r3, #22
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	e00b      	b.n	800c3dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3c4:	78fb      	ldrb	r3, [r7, #3]
 800c3c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3ca:	68f9      	ldr	r1, [r7, #12]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	4413      	add	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	440b      	add	r3, r1
 800c3d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c3da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3714      	adds	r7, #20
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c402:	78fa      	ldrb	r2, [r7, #3]
 800c404:	4611      	mov	r1, r2
 800c406:	4618      	mov	r0, r3
 800c408:	f7f9 fd81 	bl	8005f0e <HAL_PCD_SetAddress>
 800c40c:	4603      	mov	r3, r0
 800c40e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f874 	bl	800c500 <USBD_Get_USB_Status>
 800c418:	4603      	mov	r3, r0
 800c41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b086      	sub	sp, #24
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	60f8      	str	r0, [r7, #12]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]
 800c432:	460b      	mov	r3, r1
 800c434:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c444:	7af9      	ldrb	r1, [r7, #11]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	f7f9 fe8b 	bl	8006164 <HAL_PCD_EP_Transmit>
 800c44e:	4603      	mov	r3, r0
 800c450:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	4618      	mov	r0, r3
 800c456:	f000 f853 	bl	800c500 <USBD_Get_USB_Status>
 800c45a:	4603      	mov	r3, r0
 800c45c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c45e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	607a      	str	r2, [r7, #4]
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	460b      	mov	r3, r1
 800c476:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c478:	2300      	movs	r3, #0
 800c47a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c486:	7af9      	ldrb	r1, [r7, #11]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	f7f9 fe17 	bl	80060be <HAL_PCD_EP_Receive>
 800c490:	4603      	mov	r3, r0
 800c492:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	4618      	mov	r0, r3
 800c498:	f000 f832 	bl	800c500 <USBD_Get_USB_Status>
 800c49c:	4603      	mov	r3, r0
 800c49e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4bc:	78fa      	ldrb	r2, [r7, #3]
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7f9 fe37 	bl	8006134 <HAL_PCD_EP_GetRxCount>
 800c4c6:	4603      	mov	r3, r0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4d8:	4b03      	ldr	r3, [pc, #12]	@ (800c4e8 <USBD_static_malloc+0x18>)
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	20001fe0 	.word	0x20001fe0

0800c4ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]

}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c50e:	79fb      	ldrb	r3, [r7, #7]
 800c510:	2b03      	cmp	r3, #3
 800c512:	d817      	bhi.n	800c544 <USBD_Get_USB_Status+0x44>
 800c514:	a201      	add	r2, pc, #4	@ (adr r2, 800c51c <USBD_Get_USB_Status+0x1c>)
 800c516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51a:	bf00      	nop
 800c51c:	0800c52d 	.word	0x0800c52d
 800c520:	0800c533 	.word	0x0800c533
 800c524:	0800c539 	.word	0x0800c539
 800c528:	0800c53f 	.word	0x0800c53f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
    break;
 800c530:	e00b      	b.n	800c54a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c532:	2303      	movs	r3, #3
 800c534:	73fb      	strb	r3, [r7, #15]
    break;
 800c536:	e008      	b.n	800c54a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c538:	2301      	movs	r3, #1
 800c53a:	73fb      	strb	r3, [r7, #15]
    break;
 800c53c:	e005      	b.n	800c54a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c53e:	2303      	movs	r3, #3
 800c540:	73fb      	strb	r3, [r7, #15]
    break;
 800c542:	e002      	b.n	800c54a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c544:	2303      	movs	r3, #3
 800c546:	73fb      	strb	r3, [r7, #15]
    break;
 800c548:	bf00      	nop
  }
  return usb_status;
 800c54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <__cvt>:
 800c558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c55c:	ec57 6b10 	vmov	r6, r7, d0
 800c560:	2f00      	cmp	r7, #0
 800c562:	460c      	mov	r4, r1
 800c564:	4619      	mov	r1, r3
 800c566:	463b      	mov	r3, r7
 800c568:	bfbb      	ittet	lt
 800c56a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c56e:	461f      	movlt	r7, r3
 800c570:	2300      	movge	r3, #0
 800c572:	232d      	movlt	r3, #45	@ 0x2d
 800c574:	700b      	strb	r3, [r1, #0]
 800c576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c578:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c57c:	4691      	mov	r9, r2
 800c57e:	f023 0820 	bic.w	r8, r3, #32
 800c582:	bfbc      	itt	lt
 800c584:	4632      	movlt	r2, r6
 800c586:	4616      	movlt	r6, r2
 800c588:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c58c:	d005      	beq.n	800c59a <__cvt+0x42>
 800c58e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c592:	d100      	bne.n	800c596 <__cvt+0x3e>
 800c594:	3401      	adds	r4, #1
 800c596:	2102      	movs	r1, #2
 800c598:	e000      	b.n	800c59c <__cvt+0x44>
 800c59a:	2103      	movs	r1, #3
 800c59c:	ab03      	add	r3, sp, #12
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	ab02      	add	r3, sp, #8
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	ec47 6b10 	vmov	d0, r6, r7
 800c5a8:	4653      	mov	r3, sl
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	f000 ff40 	bl	800d430 <_dtoa_r>
 800c5b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	d119      	bne.n	800c5ec <__cvt+0x94>
 800c5b8:	f019 0f01 	tst.w	r9, #1
 800c5bc:	d00e      	beq.n	800c5dc <__cvt+0x84>
 800c5be:	eb00 0904 	add.w	r9, r0, r4
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	f7f4 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5ce:	b108      	cbz	r0, 800c5d4 <__cvt+0x7c>
 800c5d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c5d4:	2230      	movs	r2, #48	@ 0x30
 800c5d6:	9b03      	ldr	r3, [sp, #12]
 800c5d8:	454b      	cmp	r3, r9
 800c5da:	d31e      	bcc.n	800c61a <__cvt+0xc2>
 800c5dc:	9b03      	ldr	r3, [sp, #12]
 800c5de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5e0:	1b5b      	subs	r3, r3, r5
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	6013      	str	r3, [r2, #0]
 800c5e6:	b004      	add	sp, #16
 800c5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5f0:	eb00 0904 	add.w	r9, r0, r4
 800c5f4:	d1e5      	bne.n	800c5c2 <__cvt+0x6a>
 800c5f6:	7803      	ldrb	r3, [r0, #0]
 800c5f8:	2b30      	cmp	r3, #48	@ 0x30
 800c5fa:	d10a      	bne.n	800c612 <__cvt+0xba>
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	2300      	movs	r3, #0
 800c600:	4630      	mov	r0, r6
 800c602:	4639      	mov	r1, r7
 800c604:	f7f4 fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 800c608:	b918      	cbnz	r0, 800c612 <__cvt+0xba>
 800c60a:	f1c4 0401 	rsb	r4, r4, #1
 800c60e:	f8ca 4000 	str.w	r4, [sl]
 800c612:	f8da 3000 	ldr.w	r3, [sl]
 800c616:	4499      	add	r9, r3
 800c618:	e7d3      	b.n	800c5c2 <__cvt+0x6a>
 800c61a:	1c59      	adds	r1, r3, #1
 800c61c:	9103      	str	r1, [sp, #12]
 800c61e:	701a      	strb	r2, [r3, #0]
 800c620:	e7d9      	b.n	800c5d6 <__cvt+0x7e>

0800c622 <__exponent>:
 800c622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c624:	2900      	cmp	r1, #0
 800c626:	bfba      	itte	lt
 800c628:	4249      	neglt	r1, r1
 800c62a:	232d      	movlt	r3, #45	@ 0x2d
 800c62c:	232b      	movge	r3, #43	@ 0x2b
 800c62e:	2909      	cmp	r1, #9
 800c630:	7002      	strb	r2, [r0, #0]
 800c632:	7043      	strb	r3, [r0, #1]
 800c634:	dd29      	ble.n	800c68a <__exponent+0x68>
 800c636:	f10d 0307 	add.w	r3, sp, #7
 800c63a:	461d      	mov	r5, r3
 800c63c:	270a      	movs	r7, #10
 800c63e:	461a      	mov	r2, r3
 800c640:	fbb1 f6f7 	udiv	r6, r1, r7
 800c644:	fb07 1416 	mls	r4, r7, r6, r1
 800c648:	3430      	adds	r4, #48	@ 0x30
 800c64a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c64e:	460c      	mov	r4, r1
 800c650:	2c63      	cmp	r4, #99	@ 0x63
 800c652:	f103 33ff 	add.w	r3, r3, #4294967295
 800c656:	4631      	mov	r1, r6
 800c658:	dcf1      	bgt.n	800c63e <__exponent+0x1c>
 800c65a:	3130      	adds	r1, #48	@ 0x30
 800c65c:	1e94      	subs	r4, r2, #2
 800c65e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c662:	1c41      	adds	r1, r0, #1
 800c664:	4623      	mov	r3, r4
 800c666:	42ab      	cmp	r3, r5
 800c668:	d30a      	bcc.n	800c680 <__exponent+0x5e>
 800c66a:	f10d 0309 	add.w	r3, sp, #9
 800c66e:	1a9b      	subs	r3, r3, r2
 800c670:	42ac      	cmp	r4, r5
 800c672:	bf88      	it	hi
 800c674:	2300      	movhi	r3, #0
 800c676:	3302      	adds	r3, #2
 800c678:	4403      	add	r3, r0
 800c67a:	1a18      	subs	r0, r3, r0
 800c67c:	b003      	add	sp, #12
 800c67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c680:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c684:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c688:	e7ed      	b.n	800c666 <__exponent+0x44>
 800c68a:	2330      	movs	r3, #48	@ 0x30
 800c68c:	3130      	adds	r1, #48	@ 0x30
 800c68e:	7083      	strb	r3, [r0, #2]
 800c690:	70c1      	strb	r1, [r0, #3]
 800c692:	1d03      	adds	r3, r0, #4
 800c694:	e7f1      	b.n	800c67a <__exponent+0x58>
	...

0800c698 <_printf_float>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	b08d      	sub	sp, #52	@ 0x34
 800c69e:	460c      	mov	r4, r1
 800c6a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6a4:	4616      	mov	r6, r2
 800c6a6:	461f      	mov	r7, r3
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	f000 fdbf 	bl	800d22c <_localeconv_r>
 800c6ae:	6803      	ldr	r3, [r0, #0]
 800c6b0:	9304      	str	r3, [sp, #16]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7f3 fddc 	bl	8000270 <strlen>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c6c0:	9005      	str	r0, [sp, #20]
 800c6c2:	3307      	adds	r3, #7
 800c6c4:	f023 0307 	bic.w	r3, r3, #7
 800c6c8:	f103 0208 	add.w	r2, r3, #8
 800c6cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c6d0:	f8d4 b000 	ldr.w	fp, [r4]
 800c6d4:	f8c8 2000 	str.w	r2, [r8]
 800c6d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c6e0:	9307      	str	r3, [sp, #28]
 800c6e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c6ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6ee:	4b9c      	ldr	r3, [pc, #624]	@ (800c960 <_printf_float+0x2c8>)
 800c6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f4:	f7f4 fa1a 	bl	8000b2c <__aeabi_dcmpun>
 800c6f8:	bb70      	cbnz	r0, 800c758 <_printf_float+0xc0>
 800c6fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6fe:	4b98      	ldr	r3, [pc, #608]	@ (800c960 <_printf_float+0x2c8>)
 800c700:	f04f 32ff 	mov.w	r2, #4294967295
 800c704:	f7f4 f9f4 	bl	8000af0 <__aeabi_dcmple>
 800c708:	bb30      	cbnz	r0, 800c758 <_printf_float+0xc0>
 800c70a:	2200      	movs	r2, #0
 800c70c:	2300      	movs	r3, #0
 800c70e:	4640      	mov	r0, r8
 800c710:	4649      	mov	r1, r9
 800c712:	f7f4 f9e3 	bl	8000adc <__aeabi_dcmplt>
 800c716:	b110      	cbz	r0, 800c71e <_printf_float+0x86>
 800c718:	232d      	movs	r3, #45	@ 0x2d
 800c71a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c71e:	4a91      	ldr	r2, [pc, #580]	@ (800c964 <_printf_float+0x2cc>)
 800c720:	4b91      	ldr	r3, [pc, #580]	@ (800c968 <_printf_float+0x2d0>)
 800c722:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c726:	bf94      	ite	ls
 800c728:	4690      	movls	r8, r2
 800c72a:	4698      	movhi	r8, r3
 800c72c:	2303      	movs	r3, #3
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	f02b 0304 	bic.w	r3, fp, #4
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	f04f 0900 	mov.w	r9, #0
 800c73a:	9700      	str	r7, [sp, #0]
 800c73c:	4633      	mov	r3, r6
 800c73e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c740:	4621      	mov	r1, r4
 800c742:	4628      	mov	r0, r5
 800c744:	f000 f9d2 	bl	800caec <_printf_common>
 800c748:	3001      	adds	r0, #1
 800c74a:	f040 808d 	bne.w	800c868 <_printf_float+0x1d0>
 800c74e:	f04f 30ff 	mov.w	r0, #4294967295
 800c752:	b00d      	add	sp, #52	@ 0x34
 800c754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c758:	4642      	mov	r2, r8
 800c75a:	464b      	mov	r3, r9
 800c75c:	4640      	mov	r0, r8
 800c75e:	4649      	mov	r1, r9
 800c760:	f7f4 f9e4 	bl	8000b2c <__aeabi_dcmpun>
 800c764:	b140      	cbz	r0, 800c778 <_printf_float+0xe0>
 800c766:	464b      	mov	r3, r9
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bfbc      	itt	lt
 800c76c:	232d      	movlt	r3, #45	@ 0x2d
 800c76e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c772:	4a7e      	ldr	r2, [pc, #504]	@ (800c96c <_printf_float+0x2d4>)
 800c774:	4b7e      	ldr	r3, [pc, #504]	@ (800c970 <_printf_float+0x2d8>)
 800c776:	e7d4      	b.n	800c722 <_printf_float+0x8a>
 800c778:	6863      	ldr	r3, [r4, #4]
 800c77a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c77e:	9206      	str	r2, [sp, #24]
 800c780:	1c5a      	adds	r2, r3, #1
 800c782:	d13b      	bne.n	800c7fc <_printf_float+0x164>
 800c784:	2306      	movs	r3, #6
 800c786:	6063      	str	r3, [r4, #4]
 800c788:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c78c:	2300      	movs	r3, #0
 800c78e:	6022      	str	r2, [r4, #0]
 800c790:	9303      	str	r3, [sp, #12]
 800c792:	ab0a      	add	r3, sp, #40	@ 0x28
 800c794:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c798:	ab09      	add	r3, sp, #36	@ 0x24
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	6861      	ldr	r1, [r4, #4]
 800c79e:	ec49 8b10 	vmov	d0, r8, r9
 800c7a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f7ff fed6 	bl	800c558 <__cvt>
 800c7ac:	9b06      	ldr	r3, [sp, #24]
 800c7ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7b0:	2b47      	cmp	r3, #71	@ 0x47
 800c7b2:	4680      	mov	r8, r0
 800c7b4:	d129      	bne.n	800c80a <_printf_float+0x172>
 800c7b6:	1cc8      	adds	r0, r1, #3
 800c7b8:	db02      	blt.n	800c7c0 <_printf_float+0x128>
 800c7ba:	6863      	ldr	r3, [r4, #4]
 800c7bc:	4299      	cmp	r1, r3
 800c7be:	dd41      	ble.n	800c844 <_printf_float+0x1ac>
 800c7c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800c7c4:	fa5f fa8a 	uxtb.w	sl, sl
 800c7c8:	3901      	subs	r1, #1
 800c7ca:	4652      	mov	r2, sl
 800c7cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c7d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7d2:	f7ff ff26 	bl	800c622 <__exponent>
 800c7d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7d8:	1813      	adds	r3, r2, r0
 800c7da:	2a01      	cmp	r2, #1
 800c7dc:	4681      	mov	r9, r0
 800c7de:	6123      	str	r3, [r4, #16]
 800c7e0:	dc02      	bgt.n	800c7e8 <_printf_float+0x150>
 800c7e2:	6822      	ldr	r2, [r4, #0]
 800c7e4:	07d2      	lsls	r2, r2, #31
 800c7e6:	d501      	bpl.n	800c7ec <_printf_float+0x154>
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	6123      	str	r3, [r4, #16]
 800c7ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d0a2      	beq.n	800c73a <_printf_float+0xa2>
 800c7f4:	232d      	movs	r3, #45	@ 0x2d
 800c7f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7fa:	e79e      	b.n	800c73a <_printf_float+0xa2>
 800c7fc:	9a06      	ldr	r2, [sp, #24]
 800c7fe:	2a47      	cmp	r2, #71	@ 0x47
 800c800:	d1c2      	bne.n	800c788 <_printf_float+0xf0>
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1c0      	bne.n	800c788 <_printf_float+0xf0>
 800c806:	2301      	movs	r3, #1
 800c808:	e7bd      	b.n	800c786 <_printf_float+0xee>
 800c80a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c80e:	d9db      	bls.n	800c7c8 <_printf_float+0x130>
 800c810:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c814:	d118      	bne.n	800c848 <_printf_float+0x1b0>
 800c816:	2900      	cmp	r1, #0
 800c818:	6863      	ldr	r3, [r4, #4]
 800c81a:	dd0b      	ble.n	800c834 <_printf_float+0x19c>
 800c81c:	6121      	str	r1, [r4, #16]
 800c81e:	b913      	cbnz	r3, 800c826 <_printf_float+0x18e>
 800c820:	6822      	ldr	r2, [r4, #0]
 800c822:	07d0      	lsls	r0, r2, #31
 800c824:	d502      	bpl.n	800c82c <_printf_float+0x194>
 800c826:	3301      	adds	r3, #1
 800c828:	440b      	add	r3, r1
 800c82a:	6123      	str	r3, [r4, #16]
 800c82c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c82e:	f04f 0900 	mov.w	r9, #0
 800c832:	e7db      	b.n	800c7ec <_printf_float+0x154>
 800c834:	b913      	cbnz	r3, 800c83c <_printf_float+0x1a4>
 800c836:	6822      	ldr	r2, [r4, #0]
 800c838:	07d2      	lsls	r2, r2, #31
 800c83a:	d501      	bpl.n	800c840 <_printf_float+0x1a8>
 800c83c:	3302      	adds	r3, #2
 800c83e:	e7f4      	b.n	800c82a <_printf_float+0x192>
 800c840:	2301      	movs	r3, #1
 800c842:	e7f2      	b.n	800c82a <_printf_float+0x192>
 800c844:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c84a:	4299      	cmp	r1, r3
 800c84c:	db05      	blt.n	800c85a <_printf_float+0x1c2>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	6121      	str	r1, [r4, #16]
 800c852:	07d8      	lsls	r0, r3, #31
 800c854:	d5ea      	bpl.n	800c82c <_printf_float+0x194>
 800c856:	1c4b      	adds	r3, r1, #1
 800c858:	e7e7      	b.n	800c82a <_printf_float+0x192>
 800c85a:	2900      	cmp	r1, #0
 800c85c:	bfd4      	ite	le
 800c85e:	f1c1 0202 	rsble	r2, r1, #2
 800c862:	2201      	movgt	r2, #1
 800c864:	4413      	add	r3, r2
 800c866:	e7e0      	b.n	800c82a <_printf_float+0x192>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	055a      	lsls	r2, r3, #21
 800c86c:	d407      	bmi.n	800c87e <_printf_float+0x1e6>
 800c86e:	6923      	ldr	r3, [r4, #16]
 800c870:	4642      	mov	r2, r8
 800c872:	4631      	mov	r1, r6
 800c874:	4628      	mov	r0, r5
 800c876:	47b8      	blx	r7
 800c878:	3001      	adds	r0, #1
 800c87a:	d12b      	bne.n	800c8d4 <_printf_float+0x23c>
 800c87c:	e767      	b.n	800c74e <_printf_float+0xb6>
 800c87e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c882:	f240 80dd 	bls.w	800ca40 <_printf_float+0x3a8>
 800c886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c88a:	2200      	movs	r2, #0
 800c88c:	2300      	movs	r3, #0
 800c88e:	f7f4 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c892:	2800      	cmp	r0, #0
 800c894:	d033      	beq.n	800c8fe <_printf_float+0x266>
 800c896:	4a37      	ldr	r2, [pc, #220]	@ (800c974 <_printf_float+0x2dc>)
 800c898:	2301      	movs	r3, #1
 800c89a:	4631      	mov	r1, r6
 800c89c:	4628      	mov	r0, r5
 800c89e:	47b8      	blx	r7
 800c8a0:	3001      	adds	r0, #1
 800c8a2:	f43f af54 	beq.w	800c74e <_printf_float+0xb6>
 800c8a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8aa:	4543      	cmp	r3, r8
 800c8ac:	db02      	blt.n	800c8b4 <_printf_float+0x21c>
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	07d8      	lsls	r0, r3, #31
 800c8b2:	d50f      	bpl.n	800c8d4 <_printf_float+0x23c>
 800c8b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8b8:	4631      	mov	r1, r6
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	47b8      	blx	r7
 800c8be:	3001      	adds	r0, #1
 800c8c0:	f43f af45 	beq.w	800c74e <_printf_float+0xb6>
 800c8c4:	f04f 0900 	mov.w	r9, #0
 800c8c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8cc:	f104 0a1a 	add.w	sl, r4, #26
 800c8d0:	45c8      	cmp	r8, r9
 800c8d2:	dc09      	bgt.n	800c8e8 <_printf_float+0x250>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	079b      	lsls	r3, r3, #30
 800c8d8:	f100 8103 	bmi.w	800cae2 <_printf_float+0x44a>
 800c8dc:	68e0      	ldr	r0, [r4, #12]
 800c8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8e0:	4298      	cmp	r0, r3
 800c8e2:	bfb8      	it	lt
 800c8e4:	4618      	movlt	r0, r3
 800c8e6:	e734      	b.n	800c752 <_printf_float+0xba>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	4652      	mov	r2, sl
 800c8ec:	4631      	mov	r1, r6
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	47b8      	blx	r7
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	f43f af2b 	beq.w	800c74e <_printf_float+0xb6>
 800c8f8:	f109 0901 	add.w	r9, r9, #1
 800c8fc:	e7e8      	b.n	800c8d0 <_printf_float+0x238>
 800c8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	dc39      	bgt.n	800c978 <_printf_float+0x2e0>
 800c904:	4a1b      	ldr	r2, [pc, #108]	@ (800c974 <_printf_float+0x2dc>)
 800c906:	2301      	movs	r3, #1
 800c908:	4631      	mov	r1, r6
 800c90a:	4628      	mov	r0, r5
 800c90c:	47b8      	blx	r7
 800c90e:	3001      	adds	r0, #1
 800c910:	f43f af1d 	beq.w	800c74e <_printf_float+0xb6>
 800c914:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c918:	ea59 0303 	orrs.w	r3, r9, r3
 800c91c:	d102      	bne.n	800c924 <_printf_float+0x28c>
 800c91e:	6823      	ldr	r3, [r4, #0]
 800c920:	07d9      	lsls	r1, r3, #31
 800c922:	d5d7      	bpl.n	800c8d4 <_printf_float+0x23c>
 800c924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b8      	blx	r7
 800c92e:	3001      	adds	r0, #1
 800c930:	f43f af0d 	beq.w	800c74e <_printf_float+0xb6>
 800c934:	f04f 0a00 	mov.w	sl, #0
 800c938:	f104 0b1a 	add.w	fp, r4, #26
 800c93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c93e:	425b      	negs	r3, r3
 800c940:	4553      	cmp	r3, sl
 800c942:	dc01      	bgt.n	800c948 <_printf_float+0x2b0>
 800c944:	464b      	mov	r3, r9
 800c946:	e793      	b.n	800c870 <_printf_float+0x1d8>
 800c948:	2301      	movs	r3, #1
 800c94a:	465a      	mov	r2, fp
 800c94c:	4631      	mov	r1, r6
 800c94e:	4628      	mov	r0, r5
 800c950:	47b8      	blx	r7
 800c952:	3001      	adds	r0, #1
 800c954:	f43f aefb 	beq.w	800c74e <_printf_float+0xb6>
 800c958:	f10a 0a01 	add.w	sl, sl, #1
 800c95c:	e7ee      	b.n	800c93c <_printf_float+0x2a4>
 800c95e:	bf00      	nop
 800c960:	7fefffff 	.word	0x7fefffff
 800c964:	080101c8 	.word	0x080101c8
 800c968:	080101cc 	.word	0x080101cc
 800c96c:	080101d0 	.word	0x080101d0
 800c970:	080101d4 	.word	0x080101d4
 800c974:	080101d8 	.word	0x080101d8
 800c978:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c97a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c97e:	4553      	cmp	r3, sl
 800c980:	bfa8      	it	ge
 800c982:	4653      	movge	r3, sl
 800c984:	2b00      	cmp	r3, #0
 800c986:	4699      	mov	r9, r3
 800c988:	dc36      	bgt.n	800c9f8 <_printf_float+0x360>
 800c98a:	f04f 0b00 	mov.w	fp, #0
 800c98e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c992:	f104 021a 	add.w	r2, r4, #26
 800c996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c998:	9306      	str	r3, [sp, #24]
 800c99a:	eba3 0309 	sub.w	r3, r3, r9
 800c99e:	455b      	cmp	r3, fp
 800c9a0:	dc31      	bgt.n	800ca06 <_printf_float+0x36e>
 800c9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a4:	459a      	cmp	sl, r3
 800c9a6:	dc3a      	bgt.n	800ca1e <_printf_float+0x386>
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	07da      	lsls	r2, r3, #31
 800c9ac:	d437      	bmi.n	800ca1e <_printf_float+0x386>
 800c9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9b0:	ebaa 0903 	sub.w	r9, sl, r3
 800c9b4:	9b06      	ldr	r3, [sp, #24]
 800c9b6:	ebaa 0303 	sub.w	r3, sl, r3
 800c9ba:	4599      	cmp	r9, r3
 800c9bc:	bfa8      	it	ge
 800c9be:	4699      	movge	r9, r3
 800c9c0:	f1b9 0f00 	cmp.w	r9, #0
 800c9c4:	dc33      	bgt.n	800ca2e <_printf_float+0x396>
 800c9c6:	f04f 0800 	mov.w	r8, #0
 800c9ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9ce:	f104 0b1a 	add.w	fp, r4, #26
 800c9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d4:	ebaa 0303 	sub.w	r3, sl, r3
 800c9d8:	eba3 0309 	sub.w	r3, r3, r9
 800c9dc:	4543      	cmp	r3, r8
 800c9de:	f77f af79 	ble.w	800c8d4 <_printf_float+0x23c>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	465a      	mov	r2, fp
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	47b8      	blx	r7
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	f43f aeae 	beq.w	800c74e <_printf_float+0xb6>
 800c9f2:	f108 0801 	add.w	r8, r8, #1
 800c9f6:	e7ec      	b.n	800c9d2 <_printf_float+0x33a>
 800c9f8:	4642      	mov	r2, r8
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	47b8      	blx	r7
 800ca00:	3001      	adds	r0, #1
 800ca02:	d1c2      	bne.n	800c98a <_printf_float+0x2f2>
 800ca04:	e6a3      	b.n	800c74e <_printf_float+0xb6>
 800ca06:	2301      	movs	r3, #1
 800ca08:	4631      	mov	r1, r6
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	9206      	str	r2, [sp, #24]
 800ca0e:	47b8      	blx	r7
 800ca10:	3001      	adds	r0, #1
 800ca12:	f43f ae9c 	beq.w	800c74e <_printf_float+0xb6>
 800ca16:	9a06      	ldr	r2, [sp, #24]
 800ca18:	f10b 0b01 	add.w	fp, fp, #1
 800ca1c:	e7bb      	b.n	800c996 <_printf_float+0x2fe>
 800ca1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca22:	4631      	mov	r1, r6
 800ca24:	4628      	mov	r0, r5
 800ca26:	47b8      	blx	r7
 800ca28:	3001      	adds	r0, #1
 800ca2a:	d1c0      	bne.n	800c9ae <_printf_float+0x316>
 800ca2c:	e68f      	b.n	800c74e <_printf_float+0xb6>
 800ca2e:	9a06      	ldr	r2, [sp, #24]
 800ca30:	464b      	mov	r3, r9
 800ca32:	4442      	add	r2, r8
 800ca34:	4631      	mov	r1, r6
 800ca36:	4628      	mov	r0, r5
 800ca38:	47b8      	blx	r7
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	d1c3      	bne.n	800c9c6 <_printf_float+0x32e>
 800ca3e:	e686      	b.n	800c74e <_printf_float+0xb6>
 800ca40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca44:	f1ba 0f01 	cmp.w	sl, #1
 800ca48:	dc01      	bgt.n	800ca4e <_printf_float+0x3b6>
 800ca4a:	07db      	lsls	r3, r3, #31
 800ca4c:	d536      	bpl.n	800cabc <_printf_float+0x424>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	4642      	mov	r2, r8
 800ca52:	4631      	mov	r1, r6
 800ca54:	4628      	mov	r0, r5
 800ca56:	47b8      	blx	r7
 800ca58:	3001      	adds	r0, #1
 800ca5a:	f43f ae78 	beq.w	800c74e <_printf_float+0xb6>
 800ca5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca62:	4631      	mov	r1, r6
 800ca64:	4628      	mov	r0, r5
 800ca66:	47b8      	blx	r7
 800ca68:	3001      	adds	r0, #1
 800ca6a:	f43f ae70 	beq.w	800c74e <_printf_float+0xb6>
 800ca6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca72:	2200      	movs	r2, #0
 800ca74:	2300      	movs	r3, #0
 800ca76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca7a:	f7f4 f825 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca7e:	b9c0      	cbnz	r0, 800cab2 <_printf_float+0x41a>
 800ca80:	4653      	mov	r3, sl
 800ca82:	f108 0201 	add.w	r2, r8, #1
 800ca86:	4631      	mov	r1, r6
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b8      	blx	r7
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	d10c      	bne.n	800caaa <_printf_float+0x412>
 800ca90:	e65d      	b.n	800c74e <_printf_float+0xb6>
 800ca92:	2301      	movs	r3, #1
 800ca94:	465a      	mov	r2, fp
 800ca96:	4631      	mov	r1, r6
 800ca98:	4628      	mov	r0, r5
 800ca9a:	47b8      	blx	r7
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	f43f ae56 	beq.w	800c74e <_printf_float+0xb6>
 800caa2:	f108 0801 	add.w	r8, r8, #1
 800caa6:	45d0      	cmp	r8, sl
 800caa8:	dbf3      	blt.n	800ca92 <_printf_float+0x3fa>
 800caaa:	464b      	mov	r3, r9
 800caac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cab0:	e6df      	b.n	800c872 <_printf_float+0x1da>
 800cab2:	f04f 0800 	mov.w	r8, #0
 800cab6:	f104 0b1a 	add.w	fp, r4, #26
 800caba:	e7f4      	b.n	800caa6 <_printf_float+0x40e>
 800cabc:	2301      	movs	r3, #1
 800cabe:	4642      	mov	r2, r8
 800cac0:	e7e1      	b.n	800ca86 <_printf_float+0x3ee>
 800cac2:	2301      	movs	r3, #1
 800cac4:	464a      	mov	r2, r9
 800cac6:	4631      	mov	r1, r6
 800cac8:	4628      	mov	r0, r5
 800caca:	47b8      	blx	r7
 800cacc:	3001      	adds	r0, #1
 800cace:	f43f ae3e 	beq.w	800c74e <_printf_float+0xb6>
 800cad2:	f108 0801 	add.w	r8, r8, #1
 800cad6:	68e3      	ldr	r3, [r4, #12]
 800cad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cada:	1a5b      	subs	r3, r3, r1
 800cadc:	4543      	cmp	r3, r8
 800cade:	dcf0      	bgt.n	800cac2 <_printf_float+0x42a>
 800cae0:	e6fc      	b.n	800c8dc <_printf_float+0x244>
 800cae2:	f04f 0800 	mov.w	r8, #0
 800cae6:	f104 0919 	add.w	r9, r4, #25
 800caea:	e7f4      	b.n	800cad6 <_printf_float+0x43e>

0800caec <_printf_common>:
 800caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	4616      	mov	r6, r2
 800caf2:	4698      	mov	r8, r3
 800caf4:	688a      	ldr	r2, [r1, #8]
 800caf6:	690b      	ldr	r3, [r1, #16]
 800caf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cafc:	4293      	cmp	r3, r2
 800cafe:	bfb8      	it	lt
 800cb00:	4613      	movlt	r3, r2
 800cb02:	6033      	str	r3, [r6, #0]
 800cb04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb08:	4607      	mov	r7, r0
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	b10a      	cbz	r2, 800cb12 <_printf_common+0x26>
 800cb0e:	3301      	adds	r3, #1
 800cb10:	6033      	str	r3, [r6, #0]
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	0699      	lsls	r1, r3, #26
 800cb16:	bf42      	ittt	mi
 800cb18:	6833      	ldrmi	r3, [r6, #0]
 800cb1a:	3302      	addmi	r3, #2
 800cb1c:	6033      	strmi	r3, [r6, #0]
 800cb1e:	6825      	ldr	r5, [r4, #0]
 800cb20:	f015 0506 	ands.w	r5, r5, #6
 800cb24:	d106      	bne.n	800cb34 <_printf_common+0x48>
 800cb26:	f104 0a19 	add.w	sl, r4, #25
 800cb2a:	68e3      	ldr	r3, [r4, #12]
 800cb2c:	6832      	ldr	r2, [r6, #0]
 800cb2e:	1a9b      	subs	r3, r3, r2
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	dc26      	bgt.n	800cb82 <_printf_common+0x96>
 800cb34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb38:	6822      	ldr	r2, [r4, #0]
 800cb3a:	3b00      	subs	r3, #0
 800cb3c:	bf18      	it	ne
 800cb3e:	2301      	movne	r3, #1
 800cb40:	0692      	lsls	r2, r2, #26
 800cb42:	d42b      	bmi.n	800cb9c <_printf_common+0xb0>
 800cb44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb48:	4641      	mov	r1, r8
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	47c8      	blx	r9
 800cb4e:	3001      	adds	r0, #1
 800cb50:	d01e      	beq.n	800cb90 <_printf_common+0xa4>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	6922      	ldr	r2, [r4, #16]
 800cb56:	f003 0306 	and.w	r3, r3, #6
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	bf02      	ittt	eq
 800cb5e:	68e5      	ldreq	r5, [r4, #12]
 800cb60:	6833      	ldreq	r3, [r6, #0]
 800cb62:	1aed      	subeq	r5, r5, r3
 800cb64:	68a3      	ldr	r3, [r4, #8]
 800cb66:	bf0c      	ite	eq
 800cb68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb6c:	2500      	movne	r5, #0
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	bfc4      	itt	gt
 800cb72:	1a9b      	subgt	r3, r3, r2
 800cb74:	18ed      	addgt	r5, r5, r3
 800cb76:	2600      	movs	r6, #0
 800cb78:	341a      	adds	r4, #26
 800cb7a:	42b5      	cmp	r5, r6
 800cb7c:	d11a      	bne.n	800cbb4 <_printf_common+0xc8>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e008      	b.n	800cb94 <_printf_common+0xa8>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4652      	mov	r2, sl
 800cb86:	4641      	mov	r1, r8
 800cb88:	4638      	mov	r0, r7
 800cb8a:	47c8      	blx	r9
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d103      	bne.n	800cb98 <_printf_common+0xac>
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb98:	3501      	adds	r5, #1
 800cb9a:	e7c6      	b.n	800cb2a <_printf_common+0x3e>
 800cb9c:	18e1      	adds	r1, r4, r3
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	2030      	movs	r0, #48	@ 0x30
 800cba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cba6:	4422      	add	r2, r4
 800cba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbb0:	3302      	adds	r3, #2
 800cbb2:	e7c7      	b.n	800cb44 <_printf_common+0x58>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	4641      	mov	r1, r8
 800cbba:	4638      	mov	r0, r7
 800cbbc:	47c8      	blx	r9
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	d0e6      	beq.n	800cb90 <_printf_common+0xa4>
 800cbc2:	3601      	adds	r6, #1
 800cbc4:	e7d9      	b.n	800cb7a <_printf_common+0x8e>
	...

0800cbc8 <_printf_i>:
 800cbc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	7e0f      	ldrb	r7, [r1, #24]
 800cbce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbd0:	2f78      	cmp	r7, #120	@ 0x78
 800cbd2:	4691      	mov	r9, r2
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	469a      	mov	sl, r3
 800cbda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbde:	d807      	bhi.n	800cbf0 <_printf_i+0x28>
 800cbe0:	2f62      	cmp	r7, #98	@ 0x62
 800cbe2:	d80a      	bhi.n	800cbfa <_printf_i+0x32>
 800cbe4:	2f00      	cmp	r7, #0
 800cbe6:	f000 80d2 	beq.w	800cd8e <_printf_i+0x1c6>
 800cbea:	2f58      	cmp	r7, #88	@ 0x58
 800cbec:	f000 80b9 	beq.w	800cd62 <_printf_i+0x19a>
 800cbf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cbf8:	e03a      	b.n	800cc70 <_printf_i+0xa8>
 800cbfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cbfe:	2b15      	cmp	r3, #21
 800cc00:	d8f6      	bhi.n	800cbf0 <_printf_i+0x28>
 800cc02:	a101      	add	r1, pc, #4	@ (adr r1, 800cc08 <_printf_i+0x40>)
 800cc04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc08:	0800cc61 	.word	0x0800cc61
 800cc0c:	0800cc75 	.word	0x0800cc75
 800cc10:	0800cbf1 	.word	0x0800cbf1
 800cc14:	0800cbf1 	.word	0x0800cbf1
 800cc18:	0800cbf1 	.word	0x0800cbf1
 800cc1c:	0800cbf1 	.word	0x0800cbf1
 800cc20:	0800cc75 	.word	0x0800cc75
 800cc24:	0800cbf1 	.word	0x0800cbf1
 800cc28:	0800cbf1 	.word	0x0800cbf1
 800cc2c:	0800cbf1 	.word	0x0800cbf1
 800cc30:	0800cbf1 	.word	0x0800cbf1
 800cc34:	0800cd75 	.word	0x0800cd75
 800cc38:	0800cc9f 	.word	0x0800cc9f
 800cc3c:	0800cd2f 	.word	0x0800cd2f
 800cc40:	0800cbf1 	.word	0x0800cbf1
 800cc44:	0800cbf1 	.word	0x0800cbf1
 800cc48:	0800cd97 	.word	0x0800cd97
 800cc4c:	0800cbf1 	.word	0x0800cbf1
 800cc50:	0800cc9f 	.word	0x0800cc9f
 800cc54:	0800cbf1 	.word	0x0800cbf1
 800cc58:	0800cbf1 	.word	0x0800cbf1
 800cc5c:	0800cd37 	.word	0x0800cd37
 800cc60:	6833      	ldr	r3, [r6, #0]
 800cc62:	1d1a      	adds	r2, r3, #4
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6032      	str	r2, [r6, #0]
 800cc68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc70:	2301      	movs	r3, #1
 800cc72:	e09d      	b.n	800cdb0 <_printf_i+0x1e8>
 800cc74:	6833      	ldr	r3, [r6, #0]
 800cc76:	6820      	ldr	r0, [r4, #0]
 800cc78:	1d19      	adds	r1, r3, #4
 800cc7a:	6031      	str	r1, [r6, #0]
 800cc7c:	0606      	lsls	r6, r0, #24
 800cc7e:	d501      	bpl.n	800cc84 <_printf_i+0xbc>
 800cc80:	681d      	ldr	r5, [r3, #0]
 800cc82:	e003      	b.n	800cc8c <_printf_i+0xc4>
 800cc84:	0645      	lsls	r5, r0, #25
 800cc86:	d5fb      	bpl.n	800cc80 <_printf_i+0xb8>
 800cc88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc8c:	2d00      	cmp	r5, #0
 800cc8e:	da03      	bge.n	800cc98 <_printf_i+0xd0>
 800cc90:	232d      	movs	r3, #45	@ 0x2d
 800cc92:	426d      	negs	r5, r5
 800cc94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc98:	4859      	ldr	r0, [pc, #356]	@ (800ce00 <_printf_i+0x238>)
 800cc9a:	230a      	movs	r3, #10
 800cc9c:	e011      	b.n	800ccc2 <_printf_i+0xfa>
 800cc9e:	6821      	ldr	r1, [r4, #0]
 800cca0:	6833      	ldr	r3, [r6, #0]
 800cca2:	0608      	lsls	r0, r1, #24
 800cca4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cca8:	d402      	bmi.n	800ccb0 <_printf_i+0xe8>
 800ccaa:	0649      	lsls	r1, r1, #25
 800ccac:	bf48      	it	mi
 800ccae:	b2ad      	uxthmi	r5, r5
 800ccb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccb2:	4853      	ldr	r0, [pc, #332]	@ (800ce00 <_printf_i+0x238>)
 800ccb4:	6033      	str	r3, [r6, #0]
 800ccb6:	bf14      	ite	ne
 800ccb8:	230a      	movne	r3, #10
 800ccba:	2308      	moveq	r3, #8
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccc2:	6866      	ldr	r6, [r4, #4]
 800ccc4:	60a6      	str	r6, [r4, #8]
 800ccc6:	2e00      	cmp	r6, #0
 800ccc8:	bfa2      	ittt	ge
 800ccca:	6821      	ldrge	r1, [r4, #0]
 800cccc:	f021 0104 	bicge.w	r1, r1, #4
 800ccd0:	6021      	strge	r1, [r4, #0]
 800ccd2:	b90d      	cbnz	r5, 800ccd8 <_printf_i+0x110>
 800ccd4:	2e00      	cmp	r6, #0
 800ccd6:	d04b      	beq.n	800cd70 <_printf_i+0x1a8>
 800ccd8:	4616      	mov	r6, r2
 800ccda:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccde:	fb03 5711 	mls	r7, r3, r1, r5
 800cce2:	5dc7      	ldrb	r7, [r0, r7]
 800cce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cce8:	462f      	mov	r7, r5
 800ccea:	42bb      	cmp	r3, r7
 800ccec:	460d      	mov	r5, r1
 800ccee:	d9f4      	bls.n	800ccda <_printf_i+0x112>
 800ccf0:	2b08      	cmp	r3, #8
 800ccf2:	d10b      	bne.n	800cd0c <_printf_i+0x144>
 800ccf4:	6823      	ldr	r3, [r4, #0]
 800ccf6:	07df      	lsls	r7, r3, #31
 800ccf8:	d508      	bpl.n	800cd0c <_printf_i+0x144>
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	6861      	ldr	r1, [r4, #4]
 800ccfe:	4299      	cmp	r1, r3
 800cd00:	bfde      	ittt	le
 800cd02:	2330      	movle	r3, #48	@ 0x30
 800cd04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd0c:	1b92      	subs	r2, r2, r6
 800cd0e:	6122      	str	r2, [r4, #16]
 800cd10:	f8cd a000 	str.w	sl, [sp]
 800cd14:	464b      	mov	r3, r9
 800cd16:	aa03      	add	r2, sp, #12
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	f7ff fee6 	bl	800caec <_printf_common>
 800cd20:	3001      	adds	r0, #1
 800cd22:	d14a      	bne.n	800cdba <_printf_i+0x1f2>
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	b004      	add	sp, #16
 800cd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	f043 0320 	orr.w	r3, r3, #32
 800cd34:	6023      	str	r3, [r4, #0]
 800cd36:	4833      	ldr	r0, [pc, #204]	@ (800ce04 <_printf_i+0x23c>)
 800cd38:	2778      	movs	r7, #120	@ 0x78
 800cd3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	6831      	ldr	r1, [r6, #0]
 800cd42:	061f      	lsls	r7, r3, #24
 800cd44:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd48:	d402      	bmi.n	800cd50 <_printf_i+0x188>
 800cd4a:	065f      	lsls	r7, r3, #25
 800cd4c:	bf48      	it	mi
 800cd4e:	b2ad      	uxthmi	r5, r5
 800cd50:	6031      	str	r1, [r6, #0]
 800cd52:	07d9      	lsls	r1, r3, #31
 800cd54:	bf44      	itt	mi
 800cd56:	f043 0320 	orrmi.w	r3, r3, #32
 800cd5a:	6023      	strmi	r3, [r4, #0]
 800cd5c:	b11d      	cbz	r5, 800cd66 <_printf_i+0x19e>
 800cd5e:	2310      	movs	r3, #16
 800cd60:	e7ac      	b.n	800ccbc <_printf_i+0xf4>
 800cd62:	4827      	ldr	r0, [pc, #156]	@ (800ce00 <_printf_i+0x238>)
 800cd64:	e7e9      	b.n	800cd3a <_printf_i+0x172>
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	f023 0320 	bic.w	r3, r3, #32
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	e7f6      	b.n	800cd5e <_printf_i+0x196>
 800cd70:	4616      	mov	r6, r2
 800cd72:	e7bd      	b.n	800ccf0 <_printf_i+0x128>
 800cd74:	6833      	ldr	r3, [r6, #0]
 800cd76:	6825      	ldr	r5, [r4, #0]
 800cd78:	6961      	ldr	r1, [r4, #20]
 800cd7a:	1d18      	adds	r0, r3, #4
 800cd7c:	6030      	str	r0, [r6, #0]
 800cd7e:	062e      	lsls	r6, r5, #24
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	d501      	bpl.n	800cd88 <_printf_i+0x1c0>
 800cd84:	6019      	str	r1, [r3, #0]
 800cd86:	e002      	b.n	800cd8e <_printf_i+0x1c6>
 800cd88:	0668      	lsls	r0, r5, #25
 800cd8a:	d5fb      	bpl.n	800cd84 <_printf_i+0x1bc>
 800cd8c:	8019      	strh	r1, [r3, #0]
 800cd8e:	2300      	movs	r3, #0
 800cd90:	6123      	str	r3, [r4, #16]
 800cd92:	4616      	mov	r6, r2
 800cd94:	e7bc      	b.n	800cd10 <_printf_i+0x148>
 800cd96:	6833      	ldr	r3, [r6, #0]
 800cd98:	1d1a      	adds	r2, r3, #4
 800cd9a:	6032      	str	r2, [r6, #0]
 800cd9c:	681e      	ldr	r6, [r3, #0]
 800cd9e:	6862      	ldr	r2, [r4, #4]
 800cda0:	2100      	movs	r1, #0
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7f3 fa14 	bl	80001d0 <memchr>
 800cda8:	b108      	cbz	r0, 800cdae <_printf_i+0x1e6>
 800cdaa:	1b80      	subs	r0, r0, r6
 800cdac:	6060      	str	r0, [r4, #4]
 800cdae:	6863      	ldr	r3, [r4, #4]
 800cdb0:	6123      	str	r3, [r4, #16]
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdb8:	e7aa      	b.n	800cd10 <_printf_i+0x148>
 800cdba:	6923      	ldr	r3, [r4, #16]
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	4649      	mov	r1, r9
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	47d0      	blx	sl
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	d0ad      	beq.n	800cd24 <_printf_i+0x15c>
 800cdc8:	6823      	ldr	r3, [r4, #0]
 800cdca:	079b      	lsls	r3, r3, #30
 800cdcc:	d413      	bmi.n	800cdf6 <_printf_i+0x22e>
 800cdce:	68e0      	ldr	r0, [r4, #12]
 800cdd0:	9b03      	ldr	r3, [sp, #12]
 800cdd2:	4298      	cmp	r0, r3
 800cdd4:	bfb8      	it	lt
 800cdd6:	4618      	movlt	r0, r3
 800cdd8:	e7a6      	b.n	800cd28 <_printf_i+0x160>
 800cdda:	2301      	movs	r3, #1
 800cddc:	4632      	mov	r2, r6
 800cdde:	4649      	mov	r1, r9
 800cde0:	4640      	mov	r0, r8
 800cde2:	47d0      	blx	sl
 800cde4:	3001      	adds	r0, #1
 800cde6:	d09d      	beq.n	800cd24 <_printf_i+0x15c>
 800cde8:	3501      	adds	r5, #1
 800cdea:	68e3      	ldr	r3, [r4, #12]
 800cdec:	9903      	ldr	r1, [sp, #12]
 800cdee:	1a5b      	subs	r3, r3, r1
 800cdf0:	42ab      	cmp	r3, r5
 800cdf2:	dcf2      	bgt.n	800cdda <_printf_i+0x212>
 800cdf4:	e7eb      	b.n	800cdce <_printf_i+0x206>
 800cdf6:	2500      	movs	r5, #0
 800cdf8:	f104 0619 	add.w	r6, r4, #25
 800cdfc:	e7f5      	b.n	800cdea <_printf_i+0x222>
 800cdfe:	bf00      	nop
 800ce00:	080101da 	.word	0x080101da
 800ce04:	080101eb 	.word	0x080101eb

0800ce08 <std>:
 800ce08:	2300      	movs	r3, #0
 800ce0a:	b510      	push	{r4, lr}
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ce12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce16:	6083      	str	r3, [r0, #8]
 800ce18:	8181      	strh	r1, [r0, #12]
 800ce1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce1c:	81c2      	strh	r2, [r0, #14]
 800ce1e:	6183      	str	r3, [r0, #24]
 800ce20:	4619      	mov	r1, r3
 800ce22:	2208      	movs	r2, #8
 800ce24:	305c      	adds	r0, #92	@ 0x5c
 800ce26:	f000 f9f9 	bl	800d21c <memset>
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce60 <std+0x58>)
 800ce2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce64 <std+0x5c>)
 800ce30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce32:	4b0d      	ldr	r3, [pc, #52]	@ (800ce68 <std+0x60>)
 800ce34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce36:	4b0d      	ldr	r3, [pc, #52]	@ (800ce6c <std+0x64>)
 800ce38:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce70 <std+0x68>)
 800ce3c:	6224      	str	r4, [r4, #32]
 800ce3e:	429c      	cmp	r4, r3
 800ce40:	d006      	beq.n	800ce50 <std+0x48>
 800ce42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce46:	4294      	cmp	r4, r2
 800ce48:	d002      	beq.n	800ce50 <std+0x48>
 800ce4a:	33d0      	adds	r3, #208	@ 0xd0
 800ce4c:	429c      	cmp	r4, r3
 800ce4e:	d105      	bne.n	800ce5c <std+0x54>
 800ce50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce58:	f000 ba5c 	b.w	800d314 <__retarget_lock_init_recursive>
 800ce5c:	bd10      	pop	{r4, pc}
 800ce5e:	bf00      	nop
 800ce60:	0800d06d 	.word	0x0800d06d
 800ce64:	0800d08f 	.word	0x0800d08f
 800ce68:	0800d0c7 	.word	0x0800d0c7
 800ce6c:	0800d0eb 	.word	0x0800d0eb
 800ce70:	20002200 	.word	0x20002200

0800ce74 <stdio_exit_handler>:
 800ce74:	4a02      	ldr	r2, [pc, #8]	@ (800ce80 <stdio_exit_handler+0xc>)
 800ce76:	4903      	ldr	r1, [pc, #12]	@ (800ce84 <stdio_exit_handler+0x10>)
 800ce78:	4803      	ldr	r0, [pc, #12]	@ (800ce88 <stdio_exit_handler+0x14>)
 800ce7a:	f000 b869 	b.w	800cf50 <_fwalk_sglue>
 800ce7e:	bf00      	nop
 800ce80:	2000015c 	.word	0x2000015c
 800ce84:	0800ec49 	.word	0x0800ec49
 800ce88:	2000016c 	.word	0x2000016c

0800ce8c <cleanup_stdio>:
 800ce8c:	6841      	ldr	r1, [r0, #4]
 800ce8e:	4b0c      	ldr	r3, [pc, #48]	@ (800cec0 <cleanup_stdio+0x34>)
 800ce90:	4299      	cmp	r1, r3
 800ce92:	b510      	push	{r4, lr}
 800ce94:	4604      	mov	r4, r0
 800ce96:	d001      	beq.n	800ce9c <cleanup_stdio+0x10>
 800ce98:	f001 fed6 	bl	800ec48 <_fflush_r>
 800ce9c:	68a1      	ldr	r1, [r4, #8]
 800ce9e:	4b09      	ldr	r3, [pc, #36]	@ (800cec4 <cleanup_stdio+0x38>)
 800cea0:	4299      	cmp	r1, r3
 800cea2:	d002      	beq.n	800ceaa <cleanup_stdio+0x1e>
 800cea4:	4620      	mov	r0, r4
 800cea6:	f001 fecf 	bl	800ec48 <_fflush_r>
 800ceaa:	68e1      	ldr	r1, [r4, #12]
 800ceac:	4b06      	ldr	r3, [pc, #24]	@ (800cec8 <cleanup_stdio+0x3c>)
 800ceae:	4299      	cmp	r1, r3
 800ceb0:	d004      	beq.n	800cebc <cleanup_stdio+0x30>
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb8:	f001 bec6 	b.w	800ec48 <_fflush_r>
 800cebc:	bd10      	pop	{r4, pc}
 800cebe:	bf00      	nop
 800cec0:	20002200 	.word	0x20002200
 800cec4:	20002268 	.word	0x20002268
 800cec8:	200022d0 	.word	0x200022d0

0800cecc <global_stdio_init.part.0>:
 800cecc:	b510      	push	{r4, lr}
 800cece:	4b0b      	ldr	r3, [pc, #44]	@ (800cefc <global_stdio_init.part.0+0x30>)
 800ced0:	4c0b      	ldr	r4, [pc, #44]	@ (800cf00 <global_stdio_init.part.0+0x34>)
 800ced2:	4a0c      	ldr	r2, [pc, #48]	@ (800cf04 <global_stdio_init.part.0+0x38>)
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	4620      	mov	r0, r4
 800ced8:	2200      	movs	r2, #0
 800ceda:	2104      	movs	r1, #4
 800cedc:	f7ff ff94 	bl	800ce08 <std>
 800cee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cee4:	2201      	movs	r2, #1
 800cee6:	2109      	movs	r1, #9
 800cee8:	f7ff ff8e 	bl	800ce08 <std>
 800ceec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cef0:	2202      	movs	r2, #2
 800cef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef6:	2112      	movs	r1, #18
 800cef8:	f7ff bf86 	b.w	800ce08 <std>
 800cefc:	20002338 	.word	0x20002338
 800cf00:	20002200 	.word	0x20002200
 800cf04:	0800ce75 	.word	0x0800ce75

0800cf08 <__sfp_lock_acquire>:
 800cf08:	4801      	ldr	r0, [pc, #4]	@ (800cf10 <__sfp_lock_acquire+0x8>)
 800cf0a:	f000 ba04 	b.w	800d316 <__retarget_lock_acquire_recursive>
 800cf0e:	bf00      	nop
 800cf10:	20002341 	.word	0x20002341

0800cf14 <__sfp_lock_release>:
 800cf14:	4801      	ldr	r0, [pc, #4]	@ (800cf1c <__sfp_lock_release+0x8>)
 800cf16:	f000 b9ff 	b.w	800d318 <__retarget_lock_release_recursive>
 800cf1a:	bf00      	nop
 800cf1c:	20002341 	.word	0x20002341

0800cf20 <__sinit>:
 800cf20:	b510      	push	{r4, lr}
 800cf22:	4604      	mov	r4, r0
 800cf24:	f7ff fff0 	bl	800cf08 <__sfp_lock_acquire>
 800cf28:	6a23      	ldr	r3, [r4, #32]
 800cf2a:	b11b      	cbz	r3, 800cf34 <__sinit+0x14>
 800cf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf30:	f7ff bff0 	b.w	800cf14 <__sfp_lock_release>
 800cf34:	4b04      	ldr	r3, [pc, #16]	@ (800cf48 <__sinit+0x28>)
 800cf36:	6223      	str	r3, [r4, #32]
 800cf38:	4b04      	ldr	r3, [pc, #16]	@ (800cf4c <__sinit+0x2c>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1f5      	bne.n	800cf2c <__sinit+0xc>
 800cf40:	f7ff ffc4 	bl	800cecc <global_stdio_init.part.0>
 800cf44:	e7f2      	b.n	800cf2c <__sinit+0xc>
 800cf46:	bf00      	nop
 800cf48:	0800ce8d 	.word	0x0800ce8d
 800cf4c:	20002338 	.word	0x20002338

0800cf50 <_fwalk_sglue>:
 800cf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf54:	4607      	mov	r7, r0
 800cf56:	4688      	mov	r8, r1
 800cf58:	4614      	mov	r4, r2
 800cf5a:	2600      	movs	r6, #0
 800cf5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf60:	f1b9 0901 	subs.w	r9, r9, #1
 800cf64:	d505      	bpl.n	800cf72 <_fwalk_sglue+0x22>
 800cf66:	6824      	ldr	r4, [r4, #0]
 800cf68:	2c00      	cmp	r4, #0
 800cf6a:	d1f7      	bne.n	800cf5c <_fwalk_sglue+0xc>
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf72:	89ab      	ldrh	r3, [r5, #12]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d907      	bls.n	800cf88 <_fwalk_sglue+0x38>
 800cf78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	d003      	beq.n	800cf88 <_fwalk_sglue+0x38>
 800cf80:	4629      	mov	r1, r5
 800cf82:	4638      	mov	r0, r7
 800cf84:	47c0      	blx	r8
 800cf86:	4306      	orrs	r6, r0
 800cf88:	3568      	adds	r5, #104	@ 0x68
 800cf8a:	e7e9      	b.n	800cf60 <_fwalk_sglue+0x10>

0800cf8c <iprintf>:
 800cf8c:	b40f      	push	{r0, r1, r2, r3}
 800cf8e:	b507      	push	{r0, r1, r2, lr}
 800cf90:	4906      	ldr	r1, [pc, #24]	@ (800cfac <iprintf+0x20>)
 800cf92:	ab04      	add	r3, sp, #16
 800cf94:	6808      	ldr	r0, [r1, #0]
 800cf96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf9a:	6881      	ldr	r1, [r0, #8]
 800cf9c:	9301      	str	r3, [sp, #4]
 800cf9e:	f001 fcb7 	bl	800e910 <_vfiprintf_r>
 800cfa2:	b003      	add	sp, #12
 800cfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfa8:	b004      	add	sp, #16
 800cfaa:	4770      	bx	lr
 800cfac:	20000168 	.word	0x20000168

0800cfb0 <_puts_r>:
 800cfb0:	6a03      	ldr	r3, [r0, #32]
 800cfb2:	b570      	push	{r4, r5, r6, lr}
 800cfb4:	6884      	ldr	r4, [r0, #8]
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	460e      	mov	r6, r1
 800cfba:	b90b      	cbnz	r3, 800cfc0 <_puts_r+0x10>
 800cfbc:	f7ff ffb0 	bl	800cf20 <__sinit>
 800cfc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfc2:	07db      	lsls	r3, r3, #31
 800cfc4:	d405      	bmi.n	800cfd2 <_puts_r+0x22>
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	0598      	lsls	r0, r3, #22
 800cfca:	d402      	bmi.n	800cfd2 <_puts_r+0x22>
 800cfcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfce:	f000 f9a2 	bl	800d316 <__retarget_lock_acquire_recursive>
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	0719      	lsls	r1, r3, #28
 800cfd6:	d502      	bpl.n	800cfde <_puts_r+0x2e>
 800cfd8:	6923      	ldr	r3, [r4, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d135      	bne.n	800d04a <_puts_r+0x9a>
 800cfde:	4621      	mov	r1, r4
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f000 f8c5 	bl	800d170 <__swsetup_r>
 800cfe6:	b380      	cbz	r0, 800d04a <_puts_r+0x9a>
 800cfe8:	f04f 35ff 	mov.w	r5, #4294967295
 800cfec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfee:	07da      	lsls	r2, r3, #31
 800cff0:	d405      	bmi.n	800cffe <_puts_r+0x4e>
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	059b      	lsls	r3, r3, #22
 800cff6:	d402      	bmi.n	800cffe <_puts_r+0x4e>
 800cff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cffa:	f000 f98d 	bl	800d318 <__retarget_lock_release_recursive>
 800cffe:	4628      	mov	r0, r5
 800d000:	bd70      	pop	{r4, r5, r6, pc}
 800d002:	2b00      	cmp	r3, #0
 800d004:	da04      	bge.n	800d010 <_puts_r+0x60>
 800d006:	69a2      	ldr	r2, [r4, #24]
 800d008:	429a      	cmp	r2, r3
 800d00a:	dc17      	bgt.n	800d03c <_puts_r+0x8c>
 800d00c:	290a      	cmp	r1, #10
 800d00e:	d015      	beq.n	800d03c <_puts_r+0x8c>
 800d010:	6823      	ldr	r3, [r4, #0]
 800d012:	1c5a      	adds	r2, r3, #1
 800d014:	6022      	str	r2, [r4, #0]
 800d016:	7019      	strb	r1, [r3, #0]
 800d018:	68a3      	ldr	r3, [r4, #8]
 800d01a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d01e:	3b01      	subs	r3, #1
 800d020:	60a3      	str	r3, [r4, #8]
 800d022:	2900      	cmp	r1, #0
 800d024:	d1ed      	bne.n	800d002 <_puts_r+0x52>
 800d026:	2b00      	cmp	r3, #0
 800d028:	da11      	bge.n	800d04e <_puts_r+0x9e>
 800d02a:	4622      	mov	r2, r4
 800d02c:	210a      	movs	r1, #10
 800d02e:	4628      	mov	r0, r5
 800d030:	f000 f85f 	bl	800d0f2 <__swbuf_r>
 800d034:	3001      	adds	r0, #1
 800d036:	d0d7      	beq.n	800cfe8 <_puts_r+0x38>
 800d038:	250a      	movs	r5, #10
 800d03a:	e7d7      	b.n	800cfec <_puts_r+0x3c>
 800d03c:	4622      	mov	r2, r4
 800d03e:	4628      	mov	r0, r5
 800d040:	f000 f857 	bl	800d0f2 <__swbuf_r>
 800d044:	3001      	adds	r0, #1
 800d046:	d1e7      	bne.n	800d018 <_puts_r+0x68>
 800d048:	e7ce      	b.n	800cfe8 <_puts_r+0x38>
 800d04a:	3e01      	subs	r6, #1
 800d04c:	e7e4      	b.n	800d018 <_puts_r+0x68>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	1c5a      	adds	r2, r3, #1
 800d052:	6022      	str	r2, [r4, #0]
 800d054:	220a      	movs	r2, #10
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	e7ee      	b.n	800d038 <_puts_r+0x88>
	...

0800d05c <puts>:
 800d05c:	4b02      	ldr	r3, [pc, #8]	@ (800d068 <puts+0xc>)
 800d05e:	4601      	mov	r1, r0
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	f7ff bfa5 	b.w	800cfb0 <_puts_r>
 800d066:	bf00      	nop
 800d068:	20000168 	.word	0x20000168

0800d06c <__sread>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	460c      	mov	r4, r1
 800d070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d074:	f000 f900 	bl	800d278 <_read_r>
 800d078:	2800      	cmp	r0, #0
 800d07a:	bfab      	itete	ge
 800d07c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d07e:	89a3      	ldrhlt	r3, [r4, #12]
 800d080:	181b      	addge	r3, r3, r0
 800d082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d086:	bfac      	ite	ge
 800d088:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d08a:	81a3      	strhlt	r3, [r4, #12]
 800d08c:	bd10      	pop	{r4, pc}

0800d08e <__swrite>:
 800d08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d092:	461f      	mov	r7, r3
 800d094:	898b      	ldrh	r3, [r1, #12]
 800d096:	05db      	lsls	r3, r3, #23
 800d098:	4605      	mov	r5, r0
 800d09a:	460c      	mov	r4, r1
 800d09c:	4616      	mov	r6, r2
 800d09e:	d505      	bpl.n	800d0ac <__swrite+0x1e>
 800d0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a4:	2302      	movs	r3, #2
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f000 f8d4 	bl	800d254 <_lseek_r>
 800d0ac:	89a3      	ldrh	r3, [r4, #12]
 800d0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0b6:	81a3      	strh	r3, [r4, #12]
 800d0b8:	4632      	mov	r2, r6
 800d0ba:	463b      	mov	r3, r7
 800d0bc:	4628      	mov	r0, r5
 800d0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c2:	f000 b8eb 	b.w	800d29c <_write_r>

0800d0c6 <__sseek>:
 800d0c6:	b510      	push	{r4, lr}
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ce:	f000 f8c1 	bl	800d254 <_lseek_r>
 800d0d2:	1c43      	adds	r3, r0, #1
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	bf15      	itete	ne
 800d0d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0e2:	81a3      	strheq	r3, [r4, #12]
 800d0e4:	bf18      	it	ne
 800d0e6:	81a3      	strhne	r3, [r4, #12]
 800d0e8:	bd10      	pop	{r4, pc}

0800d0ea <__sclose>:
 800d0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ee:	f000 b8a1 	b.w	800d234 <_close_r>

0800d0f2 <__swbuf_r>:
 800d0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f4:	460e      	mov	r6, r1
 800d0f6:	4614      	mov	r4, r2
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	b118      	cbz	r0, 800d104 <__swbuf_r+0x12>
 800d0fc:	6a03      	ldr	r3, [r0, #32]
 800d0fe:	b90b      	cbnz	r3, 800d104 <__swbuf_r+0x12>
 800d100:	f7ff ff0e 	bl	800cf20 <__sinit>
 800d104:	69a3      	ldr	r3, [r4, #24]
 800d106:	60a3      	str	r3, [r4, #8]
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	071a      	lsls	r2, r3, #28
 800d10c:	d501      	bpl.n	800d112 <__swbuf_r+0x20>
 800d10e:	6923      	ldr	r3, [r4, #16]
 800d110:	b943      	cbnz	r3, 800d124 <__swbuf_r+0x32>
 800d112:	4621      	mov	r1, r4
 800d114:	4628      	mov	r0, r5
 800d116:	f000 f82b 	bl	800d170 <__swsetup_r>
 800d11a:	b118      	cbz	r0, 800d124 <__swbuf_r+0x32>
 800d11c:	f04f 37ff 	mov.w	r7, #4294967295
 800d120:	4638      	mov	r0, r7
 800d122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d124:	6823      	ldr	r3, [r4, #0]
 800d126:	6922      	ldr	r2, [r4, #16]
 800d128:	1a98      	subs	r0, r3, r2
 800d12a:	6963      	ldr	r3, [r4, #20]
 800d12c:	b2f6      	uxtb	r6, r6
 800d12e:	4283      	cmp	r3, r0
 800d130:	4637      	mov	r7, r6
 800d132:	dc05      	bgt.n	800d140 <__swbuf_r+0x4e>
 800d134:	4621      	mov	r1, r4
 800d136:	4628      	mov	r0, r5
 800d138:	f001 fd86 	bl	800ec48 <_fflush_r>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d1ed      	bne.n	800d11c <__swbuf_r+0x2a>
 800d140:	68a3      	ldr	r3, [r4, #8]
 800d142:	3b01      	subs	r3, #1
 800d144:	60a3      	str	r3, [r4, #8]
 800d146:	6823      	ldr	r3, [r4, #0]
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	6022      	str	r2, [r4, #0]
 800d14c:	701e      	strb	r6, [r3, #0]
 800d14e:	6962      	ldr	r2, [r4, #20]
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	429a      	cmp	r2, r3
 800d154:	d004      	beq.n	800d160 <__swbuf_r+0x6e>
 800d156:	89a3      	ldrh	r3, [r4, #12]
 800d158:	07db      	lsls	r3, r3, #31
 800d15a:	d5e1      	bpl.n	800d120 <__swbuf_r+0x2e>
 800d15c:	2e0a      	cmp	r6, #10
 800d15e:	d1df      	bne.n	800d120 <__swbuf_r+0x2e>
 800d160:	4621      	mov	r1, r4
 800d162:	4628      	mov	r0, r5
 800d164:	f001 fd70 	bl	800ec48 <_fflush_r>
 800d168:	2800      	cmp	r0, #0
 800d16a:	d0d9      	beq.n	800d120 <__swbuf_r+0x2e>
 800d16c:	e7d6      	b.n	800d11c <__swbuf_r+0x2a>
	...

0800d170 <__swsetup_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4b29      	ldr	r3, [pc, #164]	@ (800d218 <__swsetup_r+0xa8>)
 800d174:	4605      	mov	r5, r0
 800d176:	6818      	ldr	r0, [r3, #0]
 800d178:	460c      	mov	r4, r1
 800d17a:	b118      	cbz	r0, 800d184 <__swsetup_r+0x14>
 800d17c:	6a03      	ldr	r3, [r0, #32]
 800d17e:	b90b      	cbnz	r3, 800d184 <__swsetup_r+0x14>
 800d180:	f7ff fece 	bl	800cf20 <__sinit>
 800d184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d188:	0719      	lsls	r1, r3, #28
 800d18a:	d422      	bmi.n	800d1d2 <__swsetup_r+0x62>
 800d18c:	06da      	lsls	r2, r3, #27
 800d18e:	d407      	bmi.n	800d1a0 <__swsetup_r+0x30>
 800d190:	2209      	movs	r2, #9
 800d192:	602a      	str	r2, [r5, #0]
 800d194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d198:	81a3      	strh	r3, [r4, #12]
 800d19a:	f04f 30ff 	mov.w	r0, #4294967295
 800d19e:	e033      	b.n	800d208 <__swsetup_r+0x98>
 800d1a0:	0758      	lsls	r0, r3, #29
 800d1a2:	d512      	bpl.n	800d1ca <__swsetup_r+0x5a>
 800d1a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1a6:	b141      	cbz	r1, 800d1ba <__swsetup_r+0x4a>
 800d1a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1ac:	4299      	cmp	r1, r3
 800d1ae:	d002      	beq.n	800d1b6 <__swsetup_r+0x46>
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	f000 ff01 	bl	800dfb8 <_free_r>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1ba:	89a3      	ldrh	r3, [r4, #12]
 800d1bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1c0:	81a3      	strh	r3, [r4, #12]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	6063      	str	r3, [r4, #4]
 800d1c6:	6923      	ldr	r3, [r4, #16]
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	89a3      	ldrh	r3, [r4, #12]
 800d1cc:	f043 0308 	orr.w	r3, r3, #8
 800d1d0:	81a3      	strh	r3, [r4, #12]
 800d1d2:	6923      	ldr	r3, [r4, #16]
 800d1d4:	b94b      	cbnz	r3, 800d1ea <__swsetup_r+0x7a>
 800d1d6:	89a3      	ldrh	r3, [r4, #12]
 800d1d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1e0:	d003      	beq.n	800d1ea <__swsetup_r+0x7a>
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	f001 fd7d 	bl	800ece4 <__smakebuf_r>
 800d1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ee:	f013 0201 	ands.w	r2, r3, #1
 800d1f2:	d00a      	beq.n	800d20a <__swsetup_r+0x9a>
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	60a2      	str	r2, [r4, #8]
 800d1f8:	6962      	ldr	r2, [r4, #20]
 800d1fa:	4252      	negs	r2, r2
 800d1fc:	61a2      	str	r2, [r4, #24]
 800d1fe:	6922      	ldr	r2, [r4, #16]
 800d200:	b942      	cbnz	r2, 800d214 <__swsetup_r+0xa4>
 800d202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d206:	d1c5      	bne.n	800d194 <__swsetup_r+0x24>
 800d208:	bd38      	pop	{r3, r4, r5, pc}
 800d20a:	0799      	lsls	r1, r3, #30
 800d20c:	bf58      	it	pl
 800d20e:	6962      	ldrpl	r2, [r4, #20]
 800d210:	60a2      	str	r2, [r4, #8]
 800d212:	e7f4      	b.n	800d1fe <__swsetup_r+0x8e>
 800d214:	2000      	movs	r0, #0
 800d216:	e7f7      	b.n	800d208 <__swsetup_r+0x98>
 800d218:	20000168 	.word	0x20000168

0800d21c <memset>:
 800d21c:	4402      	add	r2, r0
 800d21e:	4603      	mov	r3, r0
 800d220:	4293      	cmp	r3, r2
 800d222:	d100      	bne.n	800d226 <memset+0xa>
 800d224:	4770      	bx	lr
 800d226:	f803 1b01 	strb.w	r1, [r3], #1
 800d22a:	e7f9      	b.n	800d220 <memset+0x4>

0800d22c <_localeconv_r>:
 800d22c:	4800      	ldr	r0, [pc, #0]	@ (800d230 <_localeconv_r+0x4>)
 800d22e:	4770      	bx	lr
 800d230:	200002a8 	.word	0x200002a8

0800d234 <_close_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4d06      	ldr	r5, [pc, #24]	@ (800d250 <_close_r+0x1c>)
 800d238:	2300      	movs	r3, #0
 800d23a:	4604      	mov	r4, r0
 800d23c:	4608      	mov	r0, r1
 800d23e:	602b      	str	r3, [r5, #0]
 800d240:	f7f6 f916 	bl	8003470 <_close>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d102      	bne.n	800d24e <_close_r+0x1a>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	b103      	cbz	r3, 800d24e <_close_r+0x1a>
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	2000233c 	.word	0x2000233c

0800d254 <_lseek_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	4d07      	ldr	r5, [pc, #28]	@ (800d274 <_lseek_r+0x20>)
 800d258:	4604      	mov	r4, r0
 800d25a:	4608      	mov	r0, r1
 800d25c:	4611      	mov	r1, r2
 800d25e:	2200      	movs	r2, #0
 800d260:	602a      	str	r2, [r5, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	f7f6 f92b 	bl	80034be <_lseek>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d102      	bne.n	800d272 <_lseek_r+0x1e>
 800d26c:	682b      	ldr	r3, [r5, #0]
 800d26e:	b103      	cbz	r3, 800d272 <_lseek_r+0x1e>
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	bd38      	pop	{r3, r4, r5, pc}
 800d274:	2000233c 	.word	0x2000233c

0800d278 <_read_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4d07      	ldr	r5, [pc, #28]	@ (800d298 <_read_r+0x20>)
 800d27c:	4604      	mov	r4, r0
 800d27e:	4608      	mov	r0, r1
 800d280:	4611      	mov	r1, r2
 800d282:	2200      	movs	r2, #0
 800d284:	602a      	str	r2, [r5, #0]
 800d286:	461a      	mov	r2, r3
 800d288:	f7f6 f8b9 	bl	80033fe <_read>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d102      	bne.n	800d296 <_read_r+0x1e>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	b103      	cbz	r3, 800d296 <_read_r+0x1e>
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	2000233c 	.word	0x2000233c

0800d29c <_write_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4d07      	ldr	r5, [pc, #28]	@ (800d2bc <_write_r+0x20>)
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	4608      	mov	r0, r1
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	602a      	str	r2, [r5, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	f7f6 f8c4 	bl	8003438 <_write>
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d102      	bne.n	800d2ba <_write_r+0x1e>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	b103      	cbz	r3, 800d2ba <_write_r+0x1e>
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}
 800d2bc:	2000233c 	.word	0x2000233c

0800d2c0 <__errno>:
 800d2c0:	4b01      	ldr	r3, [pc, #4]	@ (800d2c8 <__errno+0x8>)
 800d2c2:	6818      	ldr	r0, [r3, #0]
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	20000168 	.word	0x20000168

0800d2cc <__libc_init_array>:
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	4d0d      	ldr	r5, [pc, #52]	@ (800d304 <__libc_init_array+0x38>)
 800d2d0:	4c0d      	ldr	r4, [pc, #52]	@ (800d308 <__libc_init_array+0x3c>)
 800d2d2:	1b64      	subs	r4, r4, r5
 800d2d4:	10a4      	asrs	r4, r4, #2
 800d2d6:	2600      	movs	r6, #0
 800d2d8:	42a6      	cmp	r6, r4
 800d2da:	d109      	bne.n	800d2f0 <__libc_init_array+0x24>
 800d2dc:	4d0b      	ldr	r5, [pc, #44]	@ (800d30c <__libc_init_array+0x40>)
 800d2de:	4c0c      	ldr	r4, [pc, #48]	@ (800d310 <__libc_init_array+0x44>)
 800d2e0:	f002 ff1a 	bl	8010118 <_init>
 800d2e4:	1b64      	subs	r4, r4, r5
 800d2e6:	10a4      	asrs	r4, r4, #2
 800d2e8:	2600      	movs	r6, #0
 800d2ea:	42a6      	cmp	r6, r4
 800d2ec:	d105      	bne.n	800d2fa <__libc_init_array+0x2e>
 800d2ee:	bd70      	pop	{r4, r5, r6, pc}
 800d2f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2f4:	4798      	blx	r3
 800d2f6:	3601      	adds	r6, #1
 800d2f8:	e7ee      	b.n	800d2d8 <__libc_init_array+0xc>
 800d2fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2fe:	4798      	blx	r3
 800d300:	3601      	adds	r6, #1
 800d302:	e7f2      	b.n	800d2ea <__libc_init_array+0x1e>
 800d304:	08010980 	.word	0x08010980
 800d308:	08010980 	.word	0x08010980
 800d30c:	08010980 	.word	0x08010980
 800d310:	08010984 	.word	0x08010984

0800d314 <__retarget_lock_init_recursive>:
 800d314:	4770      	bx	lr

0800d316 <__retarget_lock_acquire_recursive>:
 800d316:	4770      	bx	lr

0800d318 <__retarget_lock_release_recursive>:
 800d318:	4770      	bx	lr

0800d31a <quorem>:
 800d31a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31e:	6903      	ldr	r3, [r0, #16]
 800d320:	690c      	ldr	r4, [r1, #16]
 800d322:	42a3      	cmp	r3, r4
 800d324:	4607      	mov	r7, r0
 800d326:	db7e      	blt.n	800d426 <quorem+0x10c>
 800d328:	3c01      	subs	r4, #1
 800d32a:	f101 0814 	add.w	r8, r1, #20
 800d32e:	00a3      	lsls	r3, r4, #2
 800d330:	f100 0514 	add.w	r5, r0, #20
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d344:	3301      	adds	r3, #1
 800d346:	429a      	cmp	r2, r3
 800d348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d34c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d350:	d32e      	bcc.n	800d3b0 <quorem+0x96>
 800d352:	f04f 0a00 	mov.w	sl, #0
 800d356:	46c4      	mov	ip, r8
 800d358:	46ae      	mov	lr, r5
 800d35a:	46d3      	mov	fp, sl
 800d35c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d360:	b298      	uxth	r0, r3
 800d362:	fb06 a000 	mla	r0, r6, r0, sl
 800d366:	0c02      	lsrs	r2, r0, #16
 800d368:	0c1b      	lsrs	r3, r3, #16
 800d36a:	fb06 2303 	mla	r3, r6, r3, r2
 800d36e:	f8de 2000 	ldr.w	r2, [lr]
 800d372:	b280      	uxth	r0, r0
 800d374:	b292      	uxth	r2, r2
 800d376:	1a12      	subs	r2, r2, r0
 800d378:	445a      	add	r2, fp
 800d37a:	f8de 0000 	ldr.w	r0, [lr]
 800d37e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d382:	b29b      	uxth	r3, r3
 800d384:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d388:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d38c:	b292      	uxth	r2, r2
 800d38e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d392:	45e1      	cmp	r9, ip
 800d394:	f84e 2b04 	str.w	r2, [lr], #4
 800d398:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d39c:	d2de      	bcs.n	800d35c <quorem+0x42>
 800d39e:	9b00      	ldr	r3, [sp, #0]
 800d3a0:	58eb      	ldr	r3, [r5, r3]
 800d3a2:	b92b      	cbnz	r3, 800d3b0 <quorem+0x96>
 800d3a4:	9b01      	ldr	r3, [sp, #4]
 800d3a6:	3b04      	subs	r3, #4
 800d3a8:	429d      	cmp	r5, r3
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	d32f      	bcc.n	800d40e <quorem+0xf4>
 800d3ae:	613c      	str	r4, [r7, #16]
 800d3b0:	4638      	mov	r0, r7
 800d3b2:	f001 f97b 	bl	800e6ac <__mcmp>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	db25      	blt.n	800d406 <quorem+0xec>
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	2000      	movs	r0, #0
 800d3be:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3c2:	f8d1 c000 	ldr.w	ip, [r1]
 800d3c6:	fa1f fe82 	uxth.w	lr, r2
 800d3ca:	fa1f f38c 	uxth.w	r3, ip
 800d3ce:	eba3 030e 	sub.w	r3, r3, lr
 800d3d2:	4403      	add	r3, r0
 800d3d4:	0c12      	lsrs	r2, r2, #16
 800d3d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d3da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3e4:	45c1      	cmp	r9, r8
 800d3e6:	f841 3b04 	str.w	r3, [r1], #4
 800d3ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d3ee:	d2e6      	bcs.n	800d3be <quorem+0xa4>
 800d3f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3f8:	b922      	cbnz	r2, 800d404 <quorem+0xea>
 800d3fa:	3b04      	subs	r3, #4
 800d3fc:	429d      	cmp	r5, r3
 800d3fe:	461a      	mov	r2, r3
 800d400:	d30b      	bcc.n	800d41a <quorem+0x100>
 800d402:	613c      	str	r4, [r7, #16]
 800d404:	3601      	adds	r6, #1
 800d406:	4630      	mov	r0, r6
 800d408:	b003      	add	sp, #12
 800d40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40e:	6812      	ldr	r2, [r2, #0]
 800d410:	3b04      	subs	r3, #4
 800d412:	2a00      	cmp	r2, #0
 800d414:	d1cb      	bne.n	800d3ae <quorem+0x94>
 800d416:	3c01      	subs	r4, #1
 800d418:	e7c6      	b.n	800d3a8 <quorem+0x8e>
 800d41a:	6812      	ldr	r2, [r2, #0]
 800d41c:	3b04      	subs	r3, #4
 800d41e:	2a00      	cmp	r2, #0
 800d420:	d1ef      	bne.n	800d402 <quorem+0xe8>
 800d422:	3c01      	subs	r4, #1
 800d424:	e7ea      	b.n	800d3fc <quorem+0xe2>
 800d426:	2000      	movs	r0, #0
 800d428:	e7ee      	b.n	800d408 <quorem+0xee>
 800d42a:	0000      	movs	r0, r0
 800d42c:	0000      	movs	r0, r0
	...

0800d430 <_dtoa_r>:
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	69c7      	ldr	r7, [r0, #28]
 800d436:	b099      	sub	sp, #100	@ 0x64
 800d438:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d43c:	ec55 4b10 	vmov	r4, r5, d0
 800d440:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d442:	9109      	str	r1, [sp, #36]	@ 0x24
 800d444:	4683      	mov	fp, r0
 800d446:	920e      	str	r2, [sp, #56]	@ 0x38
 800d448:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d44a:	b97f      	cbnz	r7, 800d46c <_dtoa_r+0x3c>
 800d44c:	2010      	movs	r0, #16
 800d44e:	f000 fdfd 	bl	800e04c <malloc>
 800d452:	4602      	mov	r2, r0
 800d454:	f8cb 001c 	str.w	r0, [fp, #28]
 800d458:	b920      	cbnz	r0, 800d464 <_dtoa_r+0x34>
 800d45a:	4ba7      	ldr	r3, [pc, #668]	@ (800d6f8 <_dtoa_r+0x2c8>)
 800d45c:	21ef      	movs	r1, #239	@ 0xef
 800d45e:	48a7      	ldr	r0, [pc, #668]	@ (800d6fc <_dtoa_r+0x2cc>)
 800d460:	f001 fcbc 	bl	800eddc <__assert_func>
 800d464:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d468:	6007      	str	r7, [r0, #0]
 800d46a:	60c7      	str	r7, [r0, #12]
 800d46c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d470:	6819      	ldr	r1, [r3, #0]
 800d472:	b159      	cbz	r1, 800d48c <_dtoa_r+0x5c>
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	604a      	str	r2, [r1, #4]
 800d478:	2301      	movs	r3, #1
 800d47a:	4093      	lsls	r3, r2
 800d47c:	608b      	str	r3, [r1, #8]
 800d47e:	4658      	mov	r0, fp
 800d480:	f000 feda 	bl	800e238 <_Bfree>
 800d484:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	1e2b      	subs	r3, r5, #0
 800d48e:	bfb9      	ittee	lt
 800d490:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d494:	9303      	strlt	r3, [sp, #12]
 800d496:	2300      	movge	r3, #0
 800d498:	6033      	strge	r3, [r6, #0]
 800d49a:	9f03      	ldr	r7, [sp, #12]
 800d49c:	4b98      	ldr	r3, [pc, #608]	@ (800d700 <_dtoa_r+0x2d0>)
 800d49e:	bfbc      	itt	lt
 800d4a0:	2201      	movlt	r2, #1
 800d4a2:	6032      	strlt	r2, [r6, #0]
 800d4a4:	43bb      	bics	r3, r7
 800d4a6:	d112      	bne.n	800d4ce <_dtoa_r+0x9e>
 800d4a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4ae:	6013      	str	r3, [r2, #0]
 800d4b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4b4:	4323      	orrs	r3, r4
 800d4b6:	f000 854d 	beq.w	800df54 <_dtoa_r+0xb24>
 800d4ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d714 <_dtoa_r+0x2e4>
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 854f 	beq.w	800df64 <_dtoa_r+0xb34>
 800d4c6:	f10a 0303 	add.w	r3, sl, #3
 800d4ca:	f000 bd49 	b.w	800df60 <_dtoa_r+0xb30>
 800d4ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	ec51 0b17 	vmov	r0, r1, d7
 800d4d8:	2300      	movs	r3, #0
 800d4da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d4de:	f7f3 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4e2:	4680      	mov	r8, r0
 800d4e4:	b158      	cbz	r0, 800d4fe <_dtoa_r+0xce>
 800d4e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	6013      	str	r3, [r2, #0]
 800d4ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4ee:	b113      	cbz	r3, 800d4f6 <_dtoa_r+0xc6>
 800d4f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d4f2:	4b84      	ldr	r3, [pc, #528]	@ (800d704 <_dtoa_r+0x2d4>)
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d718 <_dtoa_r+0x2e8>
 800d4fa:	f000 bd33 	b.w	800df64 <_dtoa_r+0xb34>
 800d4fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d502:	aa16      	add	r2, sp, #88	@ 0x58
 800d504:	a917      	add	r1, sp, #92	@ 0x5c
 800d506:	4658      	mov	r0, fp
 800d508:	f001 f980 	bl	800e80c <__d2b>
 800d50c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d510:	4681      	mov	r9, r0
 800d512:	2e00      	cmp	r6, #0
 800d514:	d077      	beq.n	800d606 <_dtoa_r+0x1d6>
 800d516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d518:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d524:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d528:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d52c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d530:	4619      	mov	r1, r3
 800d532:	2200      	movs	r2, #0
 800d534:	4b74      	ldr	r3, [pc, #464]	@ (800d708 <_dtoa_r+0x2d8>)
 800d536:	f7f2 fea7 	bl	8000288 <__aeabi_dsub>
 800d53a:	a369      	add	r3, pc, #420	@ (adr r3, 800d6e0 <_dtoa_r+0x2b0>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	f7f3 f85a 	bl	80005f8 <__aeabi_dmul>
 800d544:	a368      	add	r3, pc, #416	@ (adr r3, 800d6e8 <_dtoa_r+0x2b8>)
 800d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54a:	f7f2 fe9f 	bl	800028c <__adddf3>
 800d54e:	4604      	mov	r4, r0
 800d550:	4630      	mov	r0, r6
 800d552:	460d      	mov	r5, r1
 800d554:	f7f2 ffe6 	bl	8000524 <__aeabi_i2d>
 800d558:	a365      	add	r3, pc, #404	@ (adr r3, 800d6f0 <_dtoa_r+0x2c0>)
 800d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55e:	f7f3 f84b 	bl	80005f8 <__aeabi_dmul>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	4620      	mov	r0, r4
 800d568:	4629      	mov	r1, r5
 800d56a:	f7f2 fe8f 	bl	800028c <__adddf3>
 800d56e:	4604      	mov	r4, r0
 800d570:	460d      	mov	r5, r1
 800d572:	f7f3 faf1 	bl	8000b58 <__aeabi_d2iz>
 800d576:	2200      	movs	r2, #0
 800d578:	4607      	mov	r7, r0
 800d57a:	2300      	movs	r3, #0
 800d57c:	4620      	mov	r0, r4
 800d57e:	4629      	mov	r1, r5
 800d580:	f7f3 faac 	bl	8000adc <__aeabi_dcmplt>
 800d584:	b140      	cbz	r0, 800d598 <_dtoa_r+0x168>
 800d586:	4638      	mov	r0, r7
 800d588:	f7f2 ffcc 	bl	8000524 <__aeabi_i2d>
 800d58c:	4622      	mov	r2, r4
 800d58e:	462b      	mov	r3, r5
 800d590:	f7f3 fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d594:	b900      	cbnz	r0, 800d598 <_dtoa_r+0x168>
 800d596:	3f01      	subs	r7, #1
 800d598:	2f16      	cmp	r7, #22
 800d59a:	d851      	bhi.n	800d640 <_dtoa_r+0x210>
 800d59c:	4b5b      	ldr	r3, [pc, #364]	@ (800d70c <_dtoa_r+0x2dc>)
 800d59e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5aa:	f7f3 fa97 	bl	8000adc <__aeabi_dcmplt>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d048      	beq.n	800d644 <_dtoa_r+0x214>
 800d5b2:	3f01      	subs	r7, #1
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d5b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d5ba:	1b9b      	subs	r3, r3, r6
 800d5bc:	1e5a      	subs	r2, r3, #1
 800d5be:	bf44      	itt	mi
 800d5c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d5c4:	2300      	movmi	r3, #0
 800d5c6:	9208      	str	r2, [sp, #32]
 800d5c8:	bf54      	ite	pl
 800d5ca:	f04f 0800 	movpl.w	r8, #0
 800d5ce:	9308      	strmi	r3, [sp, #32]
 800d5d0:	2f00      	cmp	r7, #0
 800d5d2:	db39      	blt.n	800d648 <_dtoa_r+0x218>
 800d5d4:	9b08      	ldr	r3, [sp, #32]
 800d5d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d5d8:	443b      	add	r3, r7
 800d5da:	9308      	str	r3, [sp, #32]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5e2:	2b09      	cmp	r3, #9
 800d5e4:	d864      	bhi.n	800d6b0 <_dtoa_r+0x280>
 800d5e6:	2b05      	cmp	r3, #5
 800d5e8:	bfc4      	itt	gt
 800d5ea:	3b04      	subgt	r3, #4
 800d5ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f0:	f1a3 0302 	sub.w	r3, r3, #2
 800d5f4:	bfcc      	ite	gt
 800d5f6:	2400      	movgt	r4, #0
 800d5f8:	2401      	movle	r4, #1
 800d5fa:	2b03      	cmp	r3, #3
 800d5fc:	d863      	bhi.n	800d6c6 <_dtoa_r+0x296>
 800d5fe:	e8df f003 	tbb	[pc, r3]
 800d602:	372a      	.short	0x372a
 800d604:	5535      	.short	0x5535
 800d606:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d60a:	441e      	add	r6, r3
 800d60c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d610:	2b20      	cmp	r3, #32
 800d612:	bfc1      	itttt	gt
 800d614:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d618:	409f      	lslgt	r7, r3
 800d61a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d61e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d622:	bfd6      	itet	le
 800d624:	f1c3 0320 	rsble	r3, r3, #32
 800d628:	ea47 0003 	orrgt.w	r0, r7, r3
 800d62c:	fa04 f003 	lslle.w	r0, r4, r3
 800d630:	f7f2 ff68 	bl	8000504 <__aeabi_ui2d>
 800d634:	2201      	movs	r2, #1
 800d636:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d63a:	3e01      	subs	r6, #1
 800d63c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d63e:	e777      	b.n	800d530 <_dtoa_r+0x100>
 800d640:	2301      	movs	r3, #1
 800d642:	e7b8      	b.n	800d5b6 <_dtoa_r+0x186>
 800d644:	9012      	str	r0, [sp, #72]	@ 0x48
 800d646:	e7b7      	b.n	800d5b8 <_dtoa_r+0x188>
 800d648:	427b      	negs	r3, r7
 800d64a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d64c:	2300      	movs	r3, #0
 800d64e:	eba8 0807 	sub.w	r8, r8, r7
 800d652:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d654:	e7c4      	b.n	800d5e0 <_dtoa_r+0x1b0>
 800d656:	2300      	movs	r3, #0
 800d658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d65a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	dc35      	bgt.n	800d6cc <_dtoa_r+0x29c>
 800d660:	2301      	movs	r3, #1
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	9307      	str	r3, [sp, #28]
 800d666:	461a      	mov	r2, r3
 800d668:	920e      	str	r2, [sp, #56]	@ 0x38
 800d66a:	e00b      	b.n	800d684 <_dtoa_r+0x254>
 800d66c:	2301      	movs	r3, #1
 800d66e:	e7f3      	b.n	800d658 <_dtoa_r+0x228>
 800d670:	2300      	movs	r3, #0
 800d672:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d676:	18fb      	adds	r3, r7, r3
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	3301      	adds	r3, #1
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	9307      	str	r3, [sp, #28]
 800d680:	bfb8      	it	lt
 800d682:	2301      	movlt	r3, #1
 800d684:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d688:	2100      	movs	r1, #0
 800d68a:	2204      	movs	r2, #4
 800d68c:	f102 0514 	add.w	r5, r2, #20
 800d690:	429d      	cmp	r5, r3
 800d692:	d91f      	bls.n	800d6d4 <_dtoa_r+0x2a4>
 800d694:	6041      	str	r1, [r0, #4]
 800d696:	4658      	mov	r0, fp
 800d698:	f000 fd8e 	bl	800e1b8 <_Balloc>
 800d69c:	4682      	mov	sl, r0
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d13c      	bne.n	800d71c <_dtoa_r+0x2ec>
 800d6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d710 <_dtoa_r+0x2e0>)
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6aa:	e6d8      	b.n	800d45e <_dtoa_r+0x2e>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e7e0      	b.n	800d672 <_dtoa_r+0x242>
 800d6b0:	2401      	movs	r4, #1
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	9307      	str	r3, [sp, #28]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2312      	movs	r3, #18
 800d6c4:	e7d0      	b.n	800d668 <_dtoa_r+0x238>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6ca:	e7f5      	b.n	800d6b8 <_dtoa_r+0x288>
 800d6cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	9307      	str	r3, [sp, #28]
 800d6d2:	e7d7      	b.n	800d684 <_dtoa_r+0x254>
 800d6d4:	3101      	adds	r1, #1
 800d6d6:	0052      	lsls	r2, r2, #1
 800d6d8:	e7d8      	b.n	800d68c <_dtoa_r+0x25c>
 800d6da:	bf00      	nop
 800d6dc:	f3af 8000 	nop.w
 800d6e0:	636f4361 	.word	0x636f4361
 800d6e4:	3fd287a7 	.word	0x3fd287a7
 800d6e8:	8b60c8b3 	.word	0x8b60c8b3
 800d6ec:	3fc68a28 	.word	0x3fc68a28
 800d6f0:	509f79fb 	.word	0x509f79fb
 800d6f4:	3fd34413 	.word	0x3fd34413
 800d6f8:	08010209 	.word	0x08010209
 800d6fc:	08010220 	.word	0x08010220
 800d700:	7ff00000 	.word	0x7ff00000
 800d704:	080101d9 	.word	0x080101d9
 800d708:	3ff80000 	.word	0x3ff80000
 800d70c:	08010318 	.word	0x08010318
 800d710:	08010278 	.word	0x08010278
 800d714:	08010205 	.word	0x08010205
 800d718:	080101d8 	.word	0x080101d8
 800d71c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d720:	6018      	str	r0, [r3, #0]
 800d722:	9b07      	ldr	r3, [sp, #28]
 800d724:	2b0e      	cmp	r3, #14
 800d726:	f200 80a4 	bhi.w	800d872 <_dtoa_r+0x442>
 800d72a:	2c00      	cmp	r4, #0
 800d72c:	f000 80a1 	beq.w	800d872 <_dtoa_r+0x442>
 800d730:	2f00      	cmp	r7, #0
 800d732:	dd33      	ble.n	800d79c <_dtoa_r+0x36c>
 800d734:	4bad      	ldr	r3, [pc, #692]	@ (800d9ec <_dtoa_r+0x5bc>)
 800d736:	f007 020f 	and.w	r2, r7, #15
 800d73a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d73e:	ed93 7b00 	vldr	d7, [r3]
 800d742:	05f8      	lsls	r0, r7, #23
 800d744:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d748:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d74c:	d516      	bpl.n	800d77c <_dtoa_r+0x34c>
 800d74e:	4ba8      	ldr	r3, [pc, #672]	@ (800d9f0 <_dtoa_r+0x5c0>)
 800d750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d758:	f7f3 f878 	bl	800084c <__aeabi_ddiv>
 800d75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d760:	f004 040f 	and.w	r4, r4, #15
 800d764:	2603      	movs	r6, #3
 800d766:	4da2      	ldr	r5, [pc, #648]	@ (800d9f0 <_dtoa_r+0x5c0>)
 800d768:	b954      	cbnz	r4, 800d780 <_dtoa_r+0x350>
 800d76a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d772:	f7f3 f86b 	bl	800084c <__aeabi_ddiv>
 800d776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d77a:	e028      	b.n	800d7ce <_dtoa_r+0x39e>
 800d77c:	2602      	movs	r6, #2
 800d77e:	e7f2      	b.n	800d766 <_dtoa_r+0x336>
 800d780:	07e1      	lsls	r1, r4, #31
 800d782:	d508      	bpl.n	800d796 <_dtoa_r+0x366>
 800d784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d788:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d78c:	f7f2 ff34 	bl	80005f8 <__aeabi_dmul>
 800d790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d794:	3601      	adds	r6, #1
 800d796:	1064      	asrs	r4, r4, #1
 800d798:	3508      	adds	r5, #8
 800d79a:	e7e5      	b.n	800d768 <_dtoa_r+0x338>
 800d79c:	f000 80d2 	beq.w	800d944 <_dtoa_r+0x514>
 800d7a0:	427c      	negs	r4, r7
 800d7a2:	4b92      	ldr	r3, [pc, #584]	@ (800d9ec <_dtoa_r+0x5bc>)
 800d7a4:	4d92      	ldr	r5, [pc, #584]	@ (800d9f0 <_dtoa_r+0x5c0>)
 800d7a6:	f004 020f 	and.w	r2, r4, #15
 800d7aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7b6:	f7f2 ff1f 	bl	80005f8 <__aeabi_dmul>
 800d7ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7be:	1124      	asrs	r4, r4, #4
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	2602      	movs	r6, #2
 800d7c4:	2c00      	cmp	r4, #0
 800d7c6:	f040 80b2 	bne.w	800d92e <_dtoa_r+0x4fe>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1d3      	bne.n	800d776 <_dtoa_r+0x346>
 800d7ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d7d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f000 80b7 	beq.w	800d948 <_dtoa_r+0x518>
 800d7da:	4b86      	ldr	r3, [pc, #536]	@ (800d9f4 <_dtoa_r+0x5c4>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	4620      	mov	r0, r4
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f7f3 f97b 	bl	8000adc <__aeabi_dcmplt>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	f000 80ae 	beq.w	800d948 <_dtoa_r+0x518>
 800d7ec:	9b07      	ldr	r3, [sp, #28]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f000 80aa 	beq.w	800d948 <_dtoa_r+0x518>
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dd37      	ble.n	800d86a <_dtoa_r+0x43a>
 800d7fa:	1e7b      	subs	r3, r7, #1
 800d7fc:	9304      	str	r3, [sp, #16]
 800d7fe:	4620      	mov	r0, r4
 800d800:	4b7d      	ldr	r3, [pc, #500]	@ (800d9f8 <_dtoa_r+0x5c8>)
 800d802:	2200      	movs	r2, #0
 800d804:	4629      	mov	r1, r5
 800d806:	f7f2 fef7 	bl	80005f8 <__aeabi_dmul>
 800d80a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d80e:	9c00      	ldr	r4, [sp, #0]
 800d810:	3601      	adds	r6, #1
 800d812:	4630      	mov	r0, r6
 800d814:	f7f2 fe86 	bl	8000524 <__aeabi_i2d>
 800d818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d81c:	f7f2 feec 	bl	80005f8 <__aeabi_dmul>
 800d820:	4b76      	ldr	r3, [pc, #472]	@ (800d9fc <_dtoa_r+0x5cc>)
 800d822:	2200      	movs	r2, #0
 800d824:	f7f2 fd32 	bl	800028c <__adddf3>
 800d828:	4605      	mov	r5, r0
 800d82a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d82e:	2c00      	cmp	r4, #0
 800d830:	f040 808d 	bne.w	800d94e <_dtoa_r+0x51e>
 800d834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d838:	4b71      	ldr	r3, [pc, #452]	@ (800da00 <_dtoa_r+0x5d0>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	f7f2 fd24 	bl	8000288 <__aeabi_dsub>
 800d840:	4602      	mov	r2, r0
 800d842:	460b      	mov	r3, r1
 800d844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d848:	462a      	mov	r2, r5
 800d84a:	4633      	mov	r3, r6
 800d84c:	f7f3 f964 	bl	8000b18 <__aeabi_dcmpgt>
 800d850:	2800      	cmp	r0, #0
 800d852:	f040 828b 	bne.w	800dd6c <_dtoa_r+0x93c>
 800d856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d85a:	462a      	mov	r2, r5
 800d85c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d860:	f7f3 f93c 	bl	8000adc <__aeabi_dcmplt>
 800d864:	2800      	cmp	r0, #0
 800d866:	f040 8128 	bne.w	800daba <_dtoa_r+0x68a>
 800d86a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d86e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d872:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d874:	2b00      	cmp	r3, #0
 800d876:	f2c0 815a 	blt.w	800db2e <_dtoa_r+0x6fe>
 800d87a:	2f0e      	cmp	r7, #14
 800d87c:	f300 8157 	bgt.w	800db2e <_dtoa_r+0x6fe>
 800d880:	4b5a      	ldr	r3, [pc, #360]	@ (800d9ec <_dtoa_r+0x5bc>)
 800d882:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d886:	ed93 7b00 	vldr	d7, [r3]
 800d88a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	ed8d 7b00 	vstr	d7, [sp]
 800d892:	da03      	bge.n	800d89c <_dtoa_r+0x46c>
 800d894:	9b07      	ldr	r3, [sp, #28]
 800d896:	2b00      	cmp	r3, #0
 800d898:	f340 8101 	ble.w	800da9e <_dtoa_r+0x66e>
 800d89c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8a0:	4656      	mov	r6, sl
 800d8a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7f2 ffcf 	bl	800084c <__aeabi_ddiv>
 800d8ae:	f7f3 f953 	bl	8000b58 <__aeabi_d2iz>
 800d8b2:	4680      	mov	r8, r0
 800d8b4:	f7f2 fe36 	bl	8000524 <__aeabi_i2d>
 800d8b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8bc:	f7f2 fe9c 	bl	80005f8 <__aeabi_dmul>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d8cc:	f7f2 fcdc 	bl	8000288 <__aeabi_dsub>
 800d8d0:	f806 4b01 	strb.w	r4, [r6], #1
 800d8d4:	9d07      	ldr	r5, [sp, #28]
 800d8d6:	eba6 040a 	sub.w	r4, r6, sl
 800d8da:	42a5      	cmp	r5, r4
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	f040 8117 	bne.w	800db12 <_dtoa_r+0x6e2>
 800d8e4:	f7f2 fcd2 	bl	800028c <__adddf3>
 800d8e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	460d      	mov	r5, r1
 800d8f0:	f7f3 f912 	bl	8000b18 <__aeabi_dcmpgt>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	f040 80f9 	bne.w	800daec <_dtoa_r+0x6bc>
 800d8fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f7f3 f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d906:	b118      	cbz	r0, 800d910 <_dtoa_r+0x4e0>
 800d908:	f018 0f01 	tst.w	r8, #1
 800d90c:	f040 80ee 	bne.w	800daec <_dtoa_r+0x6bc>
 800d910:	4649      	mov	r1, r9
 800d912:	4658      	mov	r0, fp
 800d914:	f000 fc90 	bl	800e238 <_Bfree>
 800d918:	2300      	movs	r3, #0
 800d91a:	7033      	strb	r3, [r6, #0]
 800d91c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d91e:	3701      	adds	r7, #1
 800d920:	601f      	str	r7, [r3, #0]
 800d922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d924:	2b00      	cmp	r3, #0
 800d926:	f000 831d 	beq.w	800df64 <_dtoa_r+0xb34>
 800d92a:	601e      	str	r6, [r3, #0]
 800d92c:	e31a      	b.n	800df64 <_dtoa_r+0xb34>
 800d92e:	07e2      	lsls	r2, r4, #31
 800d930:	d505      	bpl.n	800d93e <_dtoa_r+0x50e>
 800d932:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d936:	f7f2 fe5f 	bl	80005f8 <__aeabi_dmul>
 800d93a:	3601      	adds	r6, #1
 800d93c:	2301      	movs	r3, #1
 800d93e:	1064      	asrs	r4, r4, #1
 800d940:	3508      	adds	r5, #8
 800d942:	e73f      	b.n	800d7c4 <_dtoa_r+0x394>
 800d944:	2602      	movs	r6, #2
 800d946:	e742      	b.n	800d7ce <_dtoa_r+0x39e>
 800d948:	9c07      	ldr	r4, [sp, #28]
 800d94a:	9704      	str	r7, [sp, #16]
 800d94c:	e761      	b.n	800d812 <_dtoa_r+0x3e2>
 800d94e:	4b27      	ldr	r3, [pc, #156]	@ (800d9ec <_dtoa_r+0x5bc>)
 800d950:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d952:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d956:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d95a:	4454      	add	r4, sl
 800d95c:	2900      	cmp	r1, #0
 800d95e:	d053      	beq.n	800da08 <_dtoa_r+0x5d8>
 800d960:	4928      	ldr	r1, [pc, #160]	@ (800da04 <_dtoa_r+0x5d4>)
 800d962:	2000      	movs	r0, #0
 800d964:	f7f2 ff72 	bl	800084c <__aeabi_ddiv>
 800d968:	4633      	mov	r3, r6
 800d96a:	462a      	mov	r2, r5
 800d96c:	f7f2 fc8c 	bl	8000288 <__aeabi_dsub>
 800d970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d974:	4656      	mov	r6, sl
 800d976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d97a:	f7f3 f8ed 	bl	8000b58 <__aeabi_d2iz>
 800d97e:	4605      	mov	r5, r0
 800d980:	f7f2 fdd0 	bl	8000524 <__aeabi_i2d>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d98c:	f7f2 fc7c 	bl	8000288 <__aeabi_dsub>
 800d990:	3530      	adds	r5, #48	@ 0x30
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d99a:	f806 5b01 	strb.w	r5, [r6], #1
 800d99e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9a2:	f7f3 f89b 	bl	8000adc <__aeabi_dcmplt>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d171      	bne.n	800da8e <_dtoa_r+0x65e>
 800d9aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9ae:	4911      	ldr	r1, [pc, #68]	@ (800d9f4 <_dtoa_r+0x5c4>)
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	f7f2 fc69 	bl	8000288 <__aeabi_dsub>
 800d9b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9ba:	f7f3 f88f 	bl	8000adc <__aeabi_dcmplt>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	f040 8095 	bne.w	800daee <_dtoa_r+0x6be>
 800d9c4:	42a6      	cmp	r6, r4
 800d9c6:	f43f af50 	beq.w	800d86a <_dtoa_r+0x43a>
 800d9ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d9f8 <_dtoa_r+0x5c8>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f7f2 fe11 	bl	80005f8 <__aeabi_dmul>
 800d9d6:	4b08      	ldr	r3, [pc, #32]	@ (800d9f8 <_dtoa_r+0x5c8>)
 800d9d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9dc:	2200      	movs	r2, #0
 800d9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e2:	f7f2 fe09 	bl	80005f8 <__aeabi_dmul>
 800d9e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9ea:	e7c4      	b.n	800d976 <_dtoa_r+0x546>
 800d9ec:	08010318 	.word	0x08010318
 800d9f0:	080102f0 	.word	0x080102f0
 800d9f4:	3ff00000 	.word	0x3ff00000
 800d9f8:	40240000 	.word	0x40240000
 800d9fc:	401c0000 	.word	0x401c0000
 800da00:	40140000 	.word	0x40140000
 800da04:	3fe00000 	.word	0x3fe00000
 800da08:	4631      	mov	r1, r6
 800da0a:	4628      	mov	r0, r5
 800da0c:	f7f2 fdf4 	bl	80005f8 <__aeabi_dmul>
 800da10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da14:	9415      	str	r4, [sp, #84]	@ 0x54
 800da16:	4656      	mov	r6, sl
 800da18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da1c:	f7f3 f89c 	bl	8000b58 <__aeabi_d2iz>
 800da20:	4605      	mov	r5, r0
 800da22:	f7f2 fd7f 	bl	8000524 <__aeabi_i2d>
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da2e:	f7f2 fc2b 	bl	8000288 <__aeabi_dsub>
 800da32:	3530      	adds	r5, #48	@ 0x30
 800da34:	f806 5b01 	strb.w	r5, [r6], #1
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	42a6      	cmp	r6, r4
 800da3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da42:	f04f 0200 	mov.w	r2, #0
 800da46:	d124      	bne.n	800da92 <_dtoa_r+0x662>
 800da48:	4bac      	ldr	r3, [pc, #688]	@ (800dcfc <_dtoa_r+0x8cc>)
 800da4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da4e:	f7f2 fc1d 	bl	800028c <__adddf3>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da5a:	f7f3 f85d 	bl	8000b18 <__aeabi_dcmpgt>
 800da5e:	2800      	cmp	r0, #0
 800da60:	d145      	bne.n	800daee <_dtoa_r+0x6be>
 800da62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da66:	49a5      	ldr	r1, [pc, #660]	@ (800dcfc <_dtoa_r+0x8cc>)
 800da68:	2000      	movs	r0, #0
 800da6a:	f7f2 fc0d 	bl	8000288 <__aeabi_dsub>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da76:	f7f3 f831 	bl	8000adc <__aeabi_dcmplt>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f43f aef5 	beq.w	800d86a <_dtoa_r+0x43a>
 800da80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800da82:	1e73      	subs	r3, r6, #1
 800da84:	9315      	str	r3, [sp, #84]	@ 0x54
 800da86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da8a:	2b30      	cmp	r3, #48	@ 0x30
 800da8c:	d0f8      	beq.n	800da80 <_dtoa_r+0x650>
 800da8e:	9f04      	ldr	r7, [sp, #16]
 800da90:	e73e      	b.n	800d910 <_dtoa_r+0x4e0>
 800da92:	4b9b      	ldr	r3, [pc, #620]	@ (800dd00 <_dtoa_r+0x8d0>)
 800da94:	f7f2 fdb0 	bl	80005f8 <__aeabi_dmul>
 800da98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da9c:	e7bc      	b.n	800da18 <_dtoa_r+0x5e8>
 800da9e:	d10c      	bne.n	800daba <_dtoa_r+0x68a>
 800daa0:	4b98      	ldr	r3, [pc, #608]	@ (800dd04 <_dtoa_r+0x8d4>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daa8:	f7f2 fda6 	bl	80005f8 <__aeabi_dmul>
 800daac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dab0:	f7f3 f828 	bl	8000b04 <__aeabi_dcmpge>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	f000 8157 	beq.w	800dd68 <_dtoa_r+0x938>
 800daba:	2400      	movs	r4, #0
 800dabc:	4625      	mov	r5, r4
 800dabe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dac0:	43db      	mvns	r3, r3
 800dac2:	9304      	str	r3, [sp, #16]
 800dac4:	4656      	mov	r6, sl
 800dac6:	2700      	movs	r7, #0
 800dac8:	4621      	mov	r1, r4
 800daca:	4658      	mov	r0, fp
 800dacc:	f000 fbb4 	bl	800e238 <_Bfree>
 800dad0:	2d00      	cmp	r5, #0
 800dad2:	d0dc      	beq.n	800da8e <_dtoa_r+0x65e>
 800dad4:	b12f      	cbz	r7, 800dae2 <_dtoa_r+0x6b2>
 800dad6:	42af      	cmp	r7, r5
 800dad8:	d003      	beq.n	800dae2 <_dtoa_r+0x6b2>
 800dada:	4639      	mov	r1, r7
 800dadc:	4658      	mov	r0, fp
 800dade:	f000 fbab 	bl	800e238 <_Bfree>
 800dae2:	4629      	mov	r1, r5
 800dae4:	4658      	mov	r0, fp
 800dae6:	f000 fba7 	bl	800e238 <_Bfree>
 800daea:	e7d0      	b.n	800da8e <_dtoa_r+0x65e>
 800daec:	9704      	str	r7, [sp, #16]
 800daee:	4633      	mov	r3, r6
 800daf0:	461e      	mov	r6, r3
 800daf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800daf6:	2a39      	cmp	r2, #57	@ 0x39
 800daf8:	d107      	bne.n	800db0a <_dtoa_r+0x6da>
 800dafa:	459a      	cmp	sl, r3
 800dafc:	d1f8      	bne.n	800daf0 <_dtoa_r+0x6c0>
 800dafe:	9a04      	ldr	r2, [sp, #16]
 800db00:	3201      	adds	r2, #1
 800db02:	9204      	str	r2, [sp, #16]
 800db04:	2230      	movs	r2, #48	@ 0x30
 800db06:	f88a 2000 	strb.w	r2, [sl]
 800db0a:	781a      	ldrb	r2, [r3, #0]
 800db0c:	3201      	adds	r2, #1
 800db0e:	701a      	strb	r2, [r3, #0]
 800db10:	e7bd      	b.n	800da8e <_dtoa_r+0x65e>
 800db12:	4b7b      	ldr	r3, [pc, #492]	@ (800dd00 <_dtoa_r+0x8d0>)
 800db14:	2200      	movs	r2, #0
 800db16:	f7f2 fd6f 	bl	80005f8 <__aeabi_dmul>
 800db1a:	2200      	movs	r2, #0
 800db1c:	2300      	movs	r3, #0
 800db1e:	4604      	mov	r4, r0
 800db20:	460d      	mov	r5, r1
 800db22:	f7f2 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800db26:	2800      	cmp	r0, #0
 800db28:	f43f aebb 	beq.w	800d8a2 <_dtoa_r+0x472>
 800db2c:	e6f0      	b.n	800d910 <_dtoa_r+0x4e0>
 800db2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db30:	2a00      	cmp	r2, #0
 800db32:	f000 80db 	beq.w	800dcec <_dtoa_r+0x8bc>
 800db36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db38:	2a01      	cmp	r2, #1
 800db3a:	f300 80bf 	bgt.w	800dcbc <_dtoa_r+0x88c>
 800db3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db40:	2a00      	cmp	r2, #0
 800db42:	f000 80b7 	beq.w	800dcb4 <_dtoa_r+0x884>
 800db46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db4c:	4646      	mov	r6, r8
 800db4e:	9a08      	ldr	r2, [sp, #32]
 800db50:	2101      	movs	r1, #1
 800db52:	441a      	add	r2, r3
 800db54:	4658      	mov	r0, fp
 800db56:	4498      	add	r8, r3
 800db58:	9208      	str	r2, [sp, #32]
 800db5a:	f000 fc21 	bl	800e3a0 <__i2b>
 800db5e:	4605      	mov	r5, r0
 800db60:	b15e      	cbz	r6, 800db7a <_dtoa_r+0x74a>
 800db62:	9b08      	ldr	r3, [sp, #32]
 800db64:	2b00      	cmp	r3, #0
 800db66:	dd08      	ble.n	800db7a <_dtoa_r+0x74a>
 800db68:	42b3      	cmp	r3, r6
 800db6a:	9a08      	ldr	r2, [sp, #32]
 800db6c:	bfa8      	it	ge
 800db6e:	4633      	movge	r3, r6
 800db70:	eba8 0803 	sub.w	r8, r8, r3
 800db74:	1af6      	subs	r6, r6, r3
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	9308      	str	r3, [sp, #32]
 800db7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db7c:	b1f3      	cbz	r3, 800dbbc <_dtoa_r+0x78c>
 800db7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 80b7 	beq.w	800dcf4 <_dtoa_r+0x8c4>
 800db86:	b18c      	cbz	r4, 800dbac <_dtoa_r+0x77c>
 800db88:	4629      	mov	r1, r5
 800db8a:	4622      	mov	r2, r4
 800db8c:	4658      	mov	r0, fp
 800db8e:	f000 fcc7 	bl	800e520 <__pow5mult>
 800db92:	464a      	mov	r2, r9
 800db94:	4601      	mov	r1, r0
 800db96:	4605      	mov	r5, r0
 800db98:	4658      	mov	r0, fp
 800db9a:	f000 fc17 	bl	800e3cc <__multiply>
 800db9e:	4649      	mov	r1, r9
 800dba0:	9004      	str	r0, [sp, #16]
 800dba2:	4658      	mov	r0, fp
 800dba4:	f000 fb48 	bl	800e238 <_Bfree>
 800dba8:	9b04      	ldr	r3, [sp, #16]
 800dbaa:	4699      	mov	r9, r3
 800dbac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbae:	1b1a      	subs	r2, r3, r4
 800dbb0:	d004      	beq.n	800dbbc <_dtoa_r+0x78c>
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	4658      	mov	r0, fp
 800dbb6:	f000 fcb3 	bl	800e520 <__pow5mult>
 800dbba:	4681      	mov	r9, r0
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	4658      	mov	r0, fp
 800dbc0:	f000 fbee 	bl	800e3a0 <__i2b>
 800dbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 81cf 	beq.w	800df6c <_dtoa_r+0xb3c>
 800dbce:	461a      	mov	r2, r3
 800dbd0:	4601      	mov	r1, r0
 800dbd2:	4658      	mov	r0, fp
 800dbd4:	f000 fca4 	bl	800e520 <__pow5mult>
 800dbd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	4604      	mov	r4, r0
 800dbde:	f300 8095 	bgt.w	800dd0c <_dtoa_r+0x8dc>
 800dbe2:	9b02      	ldr	r3, [sp, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f040 8087 	bne.w	800dcf8 <_dtoa_r+0x8c8>
 800dbea:	9b03      	ldr	r3, [sp, #12]
 800dbec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f040 8089 	bne.w	800dd08 <_dtoa_r+0x8d8>
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dbfc:	0d1b      	lsrs	r3, r3, #20
 800dbfe:	051b      	lsls	r3, r3, #20
 800dc00:	b12b      	cbz	r3, 800dc0e <_dtoa_r+0x7de>
 800dc02:	9b08      	ldr	r3, [sp, #32]
 800dc04:	3301      	adds	r3, #1
 800dc06:	9308      	str	r3, [sp, #32]
 800dc08:	f108 0801 	add.w	r8, r8, #1
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f000 81b0 	beq.w	800df78 <_dtoa_r+0xb48>
 800dc18:	6923      	ldr	r3, [r4, #16]
 800dc1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc1e:	6918      	ldr	r0, [r3, #16]
 800dc20:	f000 fb72 	bl	800e308 <__hi0bits>
 800dc24:	f1c0 0020 	rsb	r0, r0, #32
 800dc28:	9b08      	ldr	r3, [sp, #32]
 800dc2a:	4418      	add	r0, r3
 800dc2c:	f010 001f 	ands.w	r0, r0, #31
 800dc30:	d077      	beq.n	800dd22 <_dtoa_r+0x8f2>
 800dc32:	f1c0 0320 	rsb	r3, r0, #32
 800dc36:	2b04      	cmp	r3, #4
 800dc38:	dd6b      	ble.n	800dd12 <_dtoa_r+0x8e2>
 800dc3a:	9b08      	ldr	r3, [sp, #32]
 800dc3c:	f1c0 001c 	rsb	r0, r0, #28
 800dc40:	4403      	add	r3, r0
 800dc42:	4480      	add	r8, r0
 800dc44:	4406      	add	r6, r0
 800dc46:	9308      	str	r3, [sp, #32]
 800dc48:	f1b8 0f00 	cmp.w	r8, #0
 800dc4c:	dd05      	ble.n	800dc5a <_dtoa_r+0x82a>
 800dc4e:	4649      	mov	r1, r9
 800dc50:	4642      	mov	r2, r8
 800dc52:	4658      	mov	r0, fp
 800dc54:	f000 fcbe 	bl	800e5d4 <__lshift>
 800dc58:	4681      	mov	r9, r0
 800dc5a:	9b08      	ldr	r3, [sp, #32]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	dd05      	ble.n	800dc6c <_dtoa_r+0x83c>
 800dc60:	4621      	mov	r1, r4
 800dc62:	461a      	mov	r2, r3
 800dc64:	4658      	mov	r0, fp
 800dc66:	f000 fcb5 	bl	800e5d4 <__lshift>
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d059      	beq.n	800dd26 <_dtoa_r+0x8f6>
 800dc72:	4621      	mov	r1, r4
 800dc74:	4648      	mov	r0, r9
 800dc76:	f000 fd19 	bl	800e6ac <__mcmp>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	da53      	bge.n	800dd26 <_dtoa_r+0x8f6>
 800dc7e:	1e7b      	subs	r3, r7, #1
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	4649      	mov	r1, r9
 800dc84:	2300      	movs	r3, #0
 800dc86:	220a      	movs	r2, #10
 800dc88:	4658      	mov	r0, fp
 800dc8a:	f000 faf7 	bl	800e27c <__multadd>
 800dc8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc90:	4681      	mov	r9, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 8172 	beq.w	800df7c <_dtoa_r+0xb4c>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	220a      	movs	r2, #10
 800dc9e:	4658      	mov	r0, fp
 800dca0:	f000 faec 	bl	800e27c <__multadd>
 800dca4:	9b00      	ldr	r3, [sp, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	4605      	mov	r5, r0
 800dcaa:	dc67      	bgt.n	800dd7c <_dtoa_r+0x94c>
 800dcac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	dc41      	bgt.n	800dd36 <_dtoa_r+0x906>
 800dcb2:	e063      	b.n	800dd7c <_dtoa_r+0x94c>
 800dcb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dcb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dcba:	e746      	b.n	800db4a <_dtoa_r+0x71a>
 800dcbc:	9b07      	ldr	r3, [sp, #28]
 800dcbe:	1e5c      	subs	r4, r3, #1
 800dcc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcc2:	42a3      	cmp	r3, r4
 800dcc4:	bfbf      	itttt	lt
 800dcc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dcc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dcca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dccc:	1ae3      	sublt	r3, r4, r3
 800dcce:	bfb4      	ite	lt
 800dcd0:	18d2      	addlt	r2, r2, r3
 800dcd2:	1b1c      	subge	r4, r3, r4
 800dcd4:	9b07      	ldr	r3, [sp, #28]
 800dcd6:	bfbc      	itt	lt
 800dcd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dcda:	2400      	movlt	r4, #0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	bfb5      	itete	lt
 800dce0:	eba8 0603 	sublt.w	r6, r8, r3
 800dce4:	9b07      	ldrge	r3, [sp, #28]
 800dce6:	2300      	movlt	r3, #0
 800dce8:	4646      	movge	r6, r8
 800dcea:	e730      	b.n	800db4e <_dtoa_r+0x71e>
 800dcec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dcee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dcf0:	4646      	mov	r6, r8
 800dcf2:	e735      	b.n	800db60 <_dtoa_r+0x730>
 800dcf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcf6:	e75c      	b.n	800dbb2 <_dtoa_r+0x782>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	e788      	b.n	800dc0e <_dtoa_r+0x7de>
 800dcfc:	3fe00000 	.word	0x3fe00000
 800dd00:	40240000 	.word	0x40240000
 800dd04:	40140000 	.word	0x40140000
 800dd08:	9b02      	ldr	r3, [sp, #8]
 800dd0a:	e780      	b.n	800dc0e <_dtoa_r+0x7de>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd10:	e782      	b.n	800dc18 <_dtoa_r+0x7e8>
 800dd12:	d099      	beq.n	800dc48 <_dtoa_r+0x818>
 800dd14:	9a08      	ldr	r2, [sp, #32]
 800dd16:	331c      	adds	r3, #28
 800dd18:	441a      	add	r2, r3
 800dd1a:	4498      	add	r8, r3
 800dd1c:	441e      	add	r6, r3
 800dd1e:	9208      	str	r2, [sp, #32]
 800dd20:	e792      	b.n	800dc48 <_dtoa_r+0x818>
 800dd22:	4603      	mov	r3, r0
 800dd24:	e7f6      	b.n	800dd14 <_dtoa_r+0x8e4>
 800dd26:	9b07      	ldr	r3, [sp, #28]
 800dd28:	9704      	str	r7, [sp, #16]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	dc20      	bgt.n	800dd70 <_dtoa_r+0x940>
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	dd1e      	ble.n	800dd74 <_dtoa_r+0x944>
 800dd36:	9b00      	ldr	r3, [sp, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f47f aec0 	bne.w	800dabe <_dtoa_r+0x68e>
 800dd3e:	4621      	mov	r1, r4
 800dd40:	2205      	movs	r2, #5
 800dd42:	4658      	mov	r0, fp
 800dd44:	f000 fa9a 	bl	800e27c <__multadd>
 800dd48:	4601      	mov	r1, r0
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	4648      	mov	r0, r9
 800dd4e:	f000 fcad 	bl	800e6ac <__mcmp>
 800dd52:	2800      	cmp	r0, #0
 800dd54:	f77f aeb3 	ble.w	800dabe <_dtoa_r+0x68e>
 800dd58:	4656      	mov	r6, sl
 800dd5a:	2331      	movs	r3, #49	@ 0x31
 800dd5c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd60:	9b04      	ldr	r3, [sp, #16]
 800dd62:	3301      	adds	r3, #1
 800dd64:	9304      	str	r3, [sp, #16]
 800dd66:	e6ae      	b.n	800dac6 <_dtoa_r+0x696>
 800dd68:	9c07      	ldr	r4, [sp, #28]
 800dd6a:	9704      	str	r7, [sp, #16]
 800dd6c:	4625      	mov	r5, r4
 800dd6e:	e7f3      	b.n	800dd58 <_dtoa_r+0x928>
 800dd70:	9b07      	ldr	r3, [sp, #28]
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f000 8104 	beq.w	800df84 <_dtoa_r+0xb54>
 800dd7c:	2e00      	cmp	r6, #0
 800dd7e:	dd05      	ble.n	800dd8c <_dtoa_r+0x95c>
 800dd80:	4629      	mov	r1, r5
 800dd82:	4632      	mov	r2, r6
 800dd84:	4658      	mov	r0, fp
 800dd86:	f000 fc25 	bl	800e5d4 <__lshift>
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d05a      	beq.n	800de48 <_dtoa_r+0xa18>
 800dd92:	6869      	ldr	r1, [r5, #4]
 800dd94:	4658      	mov	r0, fp
 800dd96:	f000 fa0f 	bl	800e1b8 <_Balloc>
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	b928      	cbnz	r0, 800ddaa <_dtoa_r+0x97a>
 800dd9e:	4b84      	ldr	r3, [pc, #528]	@ (800dfb0 <_dtoa_r+0xb80>)
 800dda0:	4602      	mov	r2, r0
 800dda2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dda6:	f7ff bb5a 	b.w	800d45e <_dtoa_r+0x2e>
 800ddaa:	692a      	ldr	r2, [r5, #16]
 800ddac:	3202      	adds	r2, #2
 800ddae:	0092      	lsls	r2, r2, #2
 800ddb0:	f105 010c 	add.w	r1, r5, #12
 800ddb4:	300c      	adds	r0, #12
 800ddb6:	f001 f803 	bl	800edc0 <memcpy>
 800ddba:	2201      	movs	r2, #1
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4658      	mov	r0, fp
 800ddc0:	f000 fc08 	bl	800e5d4 <__lshift>
 800ddc4:	f10a 0301 	add.w	r3, sl, #1
 800ddc8:	9307      	str	r3, [sp, #28]
 800ddca:	9b00      	ldr	r3, [sp, #0]
 800ddcc:	4453      	add	r3, sl
 800ddce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddd0:	9b02      	ldr	r3, [sp, #8]
 800ddd2:	f003 0301 	and.w	r3, r3, #1
 800ddd6:	462f      	mov	r7, r5
 800ddd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddda:	4605      	mov	r5, r0
 800dddc:	9b07      	ldr	r3, [sp, #28]
 800ddde:	4621      	mov	r1, r4
 800dde0:	3b01      	subs	r3, #1
 800dde2:	4648      	mov	r0, r9
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	f7ff fa98 	bl	800d31a <quorem>
 800ddea:	4639      	mov	r1, r7
 800ddec:	9002      	str	r0, [sp, #8]
 800ddee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddf2:	4648      	mov	r0, r9
 800ddf4:	f000 fc5a 	bl	800e6ac <__mcmp>
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	9008      	str	r0, [sp, #32]
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	4658      	mov	r0, fp
 800de00:	f000 fc70 	bl	800e6e4 <__mdiff>
 800de04:	68c2      	ldr	r2, [r0, #12]
 800de06:	4606      	mov	r6, r0
 800de08:	bb02      	cbnz	r2, 800de4c <_dtoa_r+0xa1c>
 800de0a:	4601      	mov	r1, r0
 800de0c:	4648      	mov	r0, r9
 800de0e:	f000 fc4d 	bl	800e6ac <__mcmp>
 800de12:	4602      	mov	r2, r0
 800de14:	4631      	mov	r1, r6
 800de16:	4658      	mov	r0, fp
 800de18:	920e      	str	r2, [sp, #56]	@ 0x38
 800de1a:	f000 fa0d 	bl	800e238 <_Bfree>
 800de1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de22:	9e07      	ldr	r6, [sp, #28]
 800de24:	ea43 0102 	orr.w	r1, r3, r2
 800de28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de2a:	4319      	orrs	r1, r3
 800de2c:	d110      	bne.n	800de50 <_dtoa_r+0xa20>
 800de2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de32:	d029      	beq.n	800de88 <_dtoa_r+0xa58>
 800de34:	9b08      	ldr	r3, [sp, #32]
 800de36:	2b00      	cmp	r3, #0
 800de38:	dd02      	ble.n	800de40 <_dtoa_r+0xa10>
 800de3a:	9b02      	ldr	r3, [sp, #8]
 800de3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de40:	9b00      	ldr	r3, [sp, #0]
 800de42:	f883 8000 	strb.w	r8, [r3]
 800de46:	e63f      	b.n	800dac8 <_dtoa_r+0x698>
 800de48:	4628      	mov	r0, r5
 800de4a:	e7bb      	b.n	800ddc4 <_dtoa_r+0x994>
 800de4c:	2201      	movs	r2, #1
 800de4e:	e7e1      	b.n	800de14 <_dtoa_r+0x9e4>
 800de50:	9b08      	ldr	r3, [sp, #32]
 800de52:	2b00      	cmp	r3, #0
 800de54:	db04      	blt.n	800de60 <_dtoa_r+0xa30>
 800de56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de58:	430b      	orrs	r3, r1
 800de5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de5c:	430b      	orrs	r3, r1
 800de5e:	d120      	bne.n	800dea2 <_dtoa_r+0xa72>
 800de60:	2a00      	cmp	r2, #0
 800de62:	dded      	ble.n	800de40 <_dtoa_r+0xa10>
 800de64:	4649      	mov	r1, r9
 800de66:	2201      	movs	r2, #1
 800de68:	4658      	mov	r0, fp
 800de6a:	f000 fbb3 	bl	800e5d4 <__lshift>
 800de6e:	4621      	mov	r1, r4
 800de70:	4681      	mov	r9, r0
 800de72:	f000 fc1b 	bl	800e6ac <__mcmp>
 800de76:	2800      	cmp	r0, #0
 800de78:	dc03      	bgt.n	800de82 <_dtoa_r+0xa52>
 800de7a:	d1e1      	bne.n	800de40 <_dtoa_r+0xa10>
 800de7c:	f018 0f01 	tst.w	r8, #1
 800de80:	d0de      	beq.n	800de40 <_dtoa_r+0xa10>
 800de82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de86:	d1d8      	bne.n	800de3a <_dtoa_r+0xa0a>
 800de88:	9a00      	ldr	r2, [sp, #0]
 800de8a:	2339      	movs	r3, #57	@ 0x39
 800de8c:	7013      	strb	r3, [r2, #0]
 800de8e:	4633      	mov	r3, r6
 800de90:	461e      	mov	r6, r3
 800de92:	3b01      	subs	r3, #1
 800de94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de98:	2a39      	cmp	r2, #57	@ 0x39
 800de9a:	d052      	beq.n	800df42 <_dtoa_r+0xb12>
 800de9c:	3201      	adds	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	e612      	b.n	800dac8 <_dtoa_r+0x698>
 800dea2:	2a00      	cmp	r2, #0
 800dea4:	dd07      	ble.n	800deb6 <_dtoa_r+0xa86>
 800dea6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800deaa:	d0ed      	beq.n	800de88 <_dtoa_r+0xa58>
 800deac:	9a00      	ldr	r2, [sp, #0]
 800deae:	f108 0301 	add.w	r3, r8, #1
 800deb2:	7013      	strb	r3, [r2, #0]
 800deb4:	e608      	b.n	800dac8 <_dtoa_r+0x698>
 800deb6:	9b07      	ldr	r3, [sp, #28]
 800deb8:	9a07      	ldr	r2, [sp, #28]
 800deba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800debe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d028      	beq.n	800df16 <_dtoa_r+0xae6>
 800dec4:	4649      	mov	r1, r9
 800dec6:	2300      	movs	r3, #0
 800dec8:	220a      	movs	r2, #10
 800deca:	4658      	mov	r0, fp
 800decc:	f000 f9d6 	bl	800e27c <__multadd>
 800ded0:	42af      	cmp	r7, r5
 800ded2:	4681      	mov	r9, r0
 800ded4:	f04f 0300 	mov.w	r3, #0
 800ded8:	f04f 020a 	mov.w	r2, #10
 800dedc:	4639      	mov	r1, r7
 800dede:	4658      	mov	r0, fp
 800dee0:	d107      	bne.n	800def2 <_dtoa_r+0xac2>
 800dee2:	f000 f9cb 	bl	800e27c <__multadd>
 800dee6:	4607      	mov	r7, r0
 800dee8:	4605      	mov	r5, r0
 800deea:	9b07      	ldr	r3, [sp, #28]
 800deec:	3301      	adds	r3, #1
 800deee:	9307      	str	r3, [sp, #28]
 800def0:	e774      	b.n	800dddc <_dtoa_r+0x9ac>
 800def2:	f000 f9c3 	bl	800e27c <__multadd>
 800def6:	4629      	mov	r1, r5
 800def8:	4607      	mov	r7, r0
 800defa:	2300      	movs	r3, #0
 800defc:	220a      	movs	r2, #10
 800defe:	4658      	mov	r0, fp
 800df00:	f000 f9bc 	bl	800e27c <__multadd>
 800df04:	4605      	mov	r5, r0
 800df06:	e7f0      	b.n	800deea <_dtoa_r+0xaba>
 800df08:	9b00      	ldr	r3, [sp, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	bfcc      	ite	gt
 800df0e:	461e      	movgt	r6, r3
 800df10:	2601      	movle	r6, #1
 800df12:	4456      	add	r6, sl
 800df14:	2700      	movs	r7, #0
 800df16:	4649      	mov	r1, r9
 800df18:	2201      	movs	r2, #1
 800df1a:	4658      	mov	r0, fp
 800df1c:	f000 fb5a 	bl	800e5d4 <__lshift>
 800df20:	4621      	mov	r1, r4
 800df22:	4681      	mov	r9, r0
 800df24:	f000 fbc2 	bl	800e6ac <__mcmp>
 800df28:	2800      	cmp	r0, #0
 800df2a:	dcb0      	bgt.n	800de8e <_dtoa_r+0xa5e>
 800df2c:	d102      	bne.n	800df34 <_dtoa_r+0xb04>
 800df2e:	f018 0f01 	tst.w	r8, #1
 800df32:	d1ac      	bne.n	800de8e <_dtoa_r+0xa5e>
 800df34:	4633      	mov	r3, r6
 800df36:	461e      	mov	r6, r3
 800df38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df3c:	2a30      	cmp	r2, #48	@ 0x30
 800df3e:	d0fa      	beq.n	800df36 <_dtoa_r+0xb06>
 800df40:	e5c2      	b.n	800dac8 <_dtoa_r+0x698>
 800df42:	459a      	cmp	sl, r3
 800df44:	d1a4      	bne.n	800de90 <_dtoa_r+0xa60>
 800df46:	9b04      	ldr	r3, [sp, #16]
 800df48:	3301      	adds	r3, #1
 800df4a:	9304      	str	r3, [sp, #16]
 800df4c:	2331      	movs	r3, #49	@ 0x31
 800df4e:	f88a 3000 	strb.w	r3, [sl]
 800df52:	e5b9      	b.n	800dac8 <_dtoa_r+0x698>
 800df54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dfb4 <_dtoa_r+0xb84>
 800df5a:	b11b      	cbz	r3, 800df64 <_dtoa_r+0xb34>
 800df5c:	f10a 0308 	add.w	r3, sl, #8
 800df60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df62:	6013      	str	r3, [r2, #0]
 800df64:	4650      	mov	r0, sl
 800df66:	b019      	add	sp, #100	@ 0x64
 800df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df6e:	2b01      	cmp	r3, #1
 800df70:	f77f ae37 	ble.w	800dbe2 <_dtoa_r+0x7b2>
 800df74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df76:	930a      	str	r3, [sp, #40]	@ 0x28
 800df78:	2001      	movs	r0, #1
 800df7a:	e655      	b.n	800dc28 <_dtoa_r+0x7f8>
 800df7c:	9b00      	ldr	r3, [sp, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f77f aed6 	ble.w	800dd30 <_dtoa_r+0x900>
 800df84:	4656      	mov	r6, sl
 800df86:	4621      	mov	r1, r4
 800df88:	4648      	mov	r0, r9
 800df8a:	f7ff f9c6 	bl	800d31a <quorem>
 800df8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800df92:	f806 8b01 	strb.w	r8, [r6], #1
 800df96:	9b00      	ldr	r3, [sp, #0]
 800df98:	eba6 020a 	sub.w	r2, r6, sl
 800df9c:	4293      	cmp	r3, r2
 800df9e:	ddb3      	ble.n	800df08 <_dtoa_r+0xad8>
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	220a      	movs	r2, #10
 800dfa6:	4658      	mov	r0, fp
 800dfa8:	f000 f968 	bl	800e27c <__multadd>
 800dfac:	4681      	mov	r9, r0
 800dfae:	e7ea      	b.n	800df86 <_dtoa_r+0xb56>
 800dfb0:	08010278 	.word	0x08010278
 800dfb4:	080101fc 	.word	0x080101fc

0800dfb8 <_free_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	4605      	mov	r5, r0
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	d041      	beq.n	800e044 <_free_r+0x8c>
 800dfc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfc4:	1f0c      	subs	r4, r1, #4
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	bfb8      	it	lt
 800dfca:	18e4      	addlt	r4, r4, r3
 800dfcc:	f000 f8e8 	bl	800e1a0 <__malloc_lock>
 800dfd0:	4a1d      	ldr	r2, [pc, #116]	@ (800e048 <_free_r+0x90>)
 800dfd2:	6813      	ldr	r3, [r2, #0]
 800dfd4:	b933      	cbnz	r3, 800dfe4 <_free_r+0x2c>
 800dfd6:	6063      	str	r3, [r4, #4]
 800dfd8:	6014      	str	r4, [r2, #0]
 800dfda:	4628      	mov	r0, r5
 800dfdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfe0:	f000 b8e4 	b.w	800e1ac <__malloc_unlock>
 800dfe4:	42a3      	cmp	r3, r4
 800dfe6:	d908      	bls.n	800dffa <_free_r+0x42>
 800dfe8:	6820      	ldr	r0, [r4, #0]
 800dfea:	1821      	adds	r1, r4, r0
 800dfec:	428b      	cmp	r3, r1
 800dfee:	bf01      	itttt	eq
 800dff0:	6819      	ldreq	r1, [r3, #0]
 800dff2:	685b      	ldreq	r3, [r3, #4]
 800dff4:	1809      	addeq	r1, r1, r0
 800dff6:	6021      	streq	r1, [r4, #0]
 800dff8:	e7ed      	b.n	800dfd6 <_free_r+0x1e>
 800dffa:	461a      	mov	r2, r3
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	b10b      	cbz	r3, 800e004 <_free_r+0x4c>
 800e000:	42a3      	cmp	r3, r4
 800e002:	d9fa      	bls.n	800dffa <_free_r+0x42>
 800e004:	6811      	ldr	r1, [r2, #0]
 800e006:	1850      	adds	r0, r2, r1
 800e008:	42a0      	cmp	r0, r4
 800e00a:	d10b      	bne.n	800e024 <_free_r+0x6c>
 800e00c:	6820      	ldr	r0, [r4, #0]
 800e00e:	4401      	add	r1, r0
 800e010:	1850      	adds	r0, r2, r1
 800e012:	4283      	cmp	r3, r0
 800e014:	6011      	str	r1, [r2, #0]
 800e016:	d1e0      	bne.n	800dfda <_free_r+0x22>
 800e018:	6818      	ldr	r0, [r3, #0]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	6053      	str	r3, [r2, #4]
 800e01e:	4408      	add	r0, r1
 800e020:	6010      	str	r0, [r2, #0]
 800e022:	e7da      	b.n	800dfda <_free_r+0x22>
 800e024:	d902      	bls.n	800e02c <_free_r+0x74>
 800e026:	230c      	movs	r3, #12
 800e028:	602b      	str	r3, [r5, #0]
 800e02a:	e7d6      	b.n	800dfda <_free_r+0x22>
 800e02c:	6820      	ldr	r0, [r4, #0]
 800e02e:	1821      	adds	r1, r4, r0
 800e030:	428b      	cmp	r3, r1
 800e032:	bf04      	itt	eq
 800e034:	6819      	ldreq	r1, [r3, #0]
 800e036:	685b      	ldreq	r3, [r3, #4]
 800e038:	6063      	str	r3, [r4, #4]
 800e03a:	bf04      	itt	eq
 800e03c:	1809      	addeq	r1, r1, r0
 800e03e:	6021      	streq	r1, [r4, #0]
 800e040:	6054      	str	r4, [r2, #4]
 800e042:	e7ca      	b.n	800dfda <_free_r+0x22>
 800e044:	bd38      	pop	{r3, r4, r5, pc}
 800e046:	bf00      	nop
 800e048:	20002348 	.word	0x20002348

0800e04c <malloc>:
 800e04c:	4b02      	ldr	r3, [pc, #8]	@ (800e058 <malloc+0xc>)
 800e04e:	4601      	mov	r1, r0
 800e050:	6818      	ldr	r0, [r3, #0]
 800e052:	f000 b825 	b.w	800e0a0 <_malloc_r>
 800e056:	bf00      	nop
 800e058:	20000168 	.word	0x20000168

0800e05c <sbrk_aligned>:
 800e05c:	b570      	push	{r4, r5, r6, lr}
 800e05e:	4e0f      	ldr	r6, [pc, #60]	@ (800e09c <sbrk_aligned+0x40>)
 800e060:	460c      	mov	r4, r1
 800e062:	6831      	ldr	r1, [r6, #0]
 800e064:	4605      	mov	r5, r0
 800e066:	b911      	cbnz	r1, 800e06e <sbrk_aligned+0x12>
 800e068:	f000 fe9a 	bl	800eda0 <_sbrk_r>
 800e06c:	6030      	str	r0, [r6, #0]
 800e06e:	4621      	mov	r1, r4
 800e070:	4628      	mov	r0, r5
 800e072:	f000 fe95 	bl	800eda0 <_sbrk_r>
 800e076:	1c43      	adds	r3, r0, #1
 800e078:	d103      	bne.n	800e082 <sbrk_aligned+0x26>
 800e07a:	f04f 34ff 	mov.w	r4, #4294967295
 800e07e:	4620      	mov	r0, r4
 800e080:	bd70      	pop	{r4, r5, r6, pc}
 800e082:	1cc4      	adds	r4, r0, #3
 800e084:	f024 0403 	bic.w	r4, r4, #3
 800e088:	42a0      	cmp	r0, r4
 800e08a:	d0f8      	beq.n	800e07e <sbrk_aligned+0x22>
 800e08c:	1a21      	subs	r1, r4, r0
 800e08e:	4628      	mov	r0, r5
 800e090:	f000 fe86 	bl	800eda0 <_sbrk_r>
 800e094:	3001      	adds	r0, #1
 800e096:	d1f2      	bne.n	800e07e <sbrk_aligned+0x22>
 800e098:	e7ef      	b.n	800e07a <sbrk_aligned+0x1e>
 800e09a:	bf00      	nop
 800e09c:	20002344 	.word	0x20002344

0800e0a0 <_malloc_r>:
 800e0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0a4:	1ccd      	adds	r5, r1, #3
 800e0a6:	f025 0503 	bic.w	r5, r5, #3
 800e0aa:	3508      	adds	r5, #8
 800e0ac:	2d0c      	cmp	r5, #12
 800e0ae:	bf38      	it	cc
 800e0b0:	250c      	movcc	r5, #12
 800e0b2:	2d00      	cmp	r5, #0
 800e0b4:	4606      	mov	r6, r0
 800e0b6:	db01      	blt.n	800e0bc <_malloc_r+0x1c>
 800e0b8:	42a9      	cmp	r1, r5
 800e0ba:	d904      	bls.n	800e0c6 <_malloc_r+0x26>
 800e0bc:	230c      	movs	r3, #12
 800e0be:	6033      	str	r3, [r6, #0]
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e19c <_malloc_r+0xfc>
 800e0ca:	f000 f869 	bl	800e1a0 <__malloc_lock>
 800e0ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e0d2:	461c      	mov	r4, r3
 800e0d4:	bb44      	cbnz	r4, 800e128 <_malloc_r+0x88>
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f7ff ffbf 	bl	800e05c <sbrk_aligned>
 800e0de:	1c43      	adds	r3, r0, #1
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	d158      	bne.n	800e196 <_malloc_r+0xf6>
 800e0e4:	f8d8 4000 	ldr.w	r4, [r8]
 800e0e8:	4627      	mov	r7, r4
 800e0ea:	2f00      	cmp	r7, #0
 800e0ec:	d143      	bne.n	800e176 <_malloc_r+0xd6>
 800e0ee:	2c00      	cmp	r4, #0
 800e0f0:	d04b      	beq.n	800e18a <_malloc_r+0xea>
 800e0f2:	6823      	ldr	r3, [r4, #0]
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	eb04 0903 	add.w	r9, r4, r3
 800e0fc:	f000 fe50 	bl	800eda0 <_sbrk_r>
 800e100:	4581      	cmp	r9, r0
 800e102:	d142      	bne.n	800e18a <_malloc_r+0xea>
 800e104:	6821      	ldr	r1, [r4, #0]
 800e106:	1a6d      	subs	r5, r5, r1
 800e108:	4629      	mov	r1, r5
 800e10a:	4630      	mov	r0, r6
 800e10c:	f7ff ffa6 	bl	800e05c <sbrk_aligned>
 800e110:	3001      	adds	r0, #1
 800e112:	d03a      	beq.n	800e18a <_malloc_r+0xea>
 800e114:	6823      	ldr	r3, [r4, #0]
 800e116:	442b      	add	r3, r5
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	f8d8 3000 	ldr.w	r3, [r8]
 800e11e:	685a      	ldr	r2, [r3, #4]
 800e120:	bb62      	cbnz	r2, 800e17c <_malloc_r+0xdc>
 800e122:	f8c8 7000 	str.w	r7, [r8]
 800e126:	e00f      	b.n	800e148 <_malloc_r+0xa8>
 800e128:	6822      	ldr	r2, [r4, #0]
 800e12a:	1b52      	subs	r2, r2, r5
 800e12c:	d420      	bmi.n	800e170 <_malloc_r+0xd0>
 800e12e:	2a0b      	cmp	r2, #11
 800e130:	d917      	bls.n	800e162 <_malloc_r+0xc2>
 800e132:	1961      	adds	r1, r4, r5
 800e134:	42a3      	cmp	r3, r4
 800e136:	6025      	str	r5, [r4, #0]
 800e138:	bf18      	it	ne
 800e13a:	6059      	strne	r1, [r3, #4]
 800e13c:	6863      	ldr	r3, [r4, #4]
 800e13e:	bf08      	it	eq
 800e140:	f8c8 1000 	streq.w	r1, [r8]
 800e144:	5162      	str	r2, [r4, r5]
 800e146:	604b      	str	r3, [r1, #4]
 800e148:	4630      	mov	r0, r6
 800e14a:	f000 f82f 	bl	800e1ac <__malloc_unlock>
 800e14e:	f104 000b 	add.w	r0, r4, #11
 800e152:	1d23      	adds	r3, r4, #4
 800e154:	f020 0007 	bic.w	r0, r0, #7
 800e158:	1ac2      	subs	r2, r0, r3
 800e15a:	bf1c      	itt	ne
 800e15c:	1a1b      	subne	r3, r3, r0
 800e15e:	50a3      	strne	r3, [r4, r2]
 800e160:	e7af      	b.n	800e0c2 <_malloc_r+0x22>
 800e162:	6862      	ldr	r2, [r4, #4]
 800e164:	42a3      	cmp	r3, r4
 800e166:	bf0c      	ite	eq
 800e168:	f8c8 2000 	streq.w	r2, [r8]
 800e16c:	605a      	strne	r2, [r3, #4]
 800e16e:	e7eb      	b.n	800e148 <_malloc_r+0xa8>
 800e170:	4623      	mov	r3, r4
 800e172:	6864      	ldr	r4, [r4, #4]
 800e174:	e7ae      	b.n	800e0d4 <_malloc_r+0x34>
 800e176:	463c      	mov	r4, r7
 800e178:	687f      	ldr	r7, [r7, #4]
 800e17a:	e7b6      	b.n	800e0ea <_malloc_r+0x4a>
 800e17c:	461a      	mov	r2, r3
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	42a3      	cmp	r3, r4
 800e182:	d1fb      	bne.n	800e17c <_malloc_r+0xdc>
 800e184:	2300      	movs	r3, #0
 800e186:	6053      	str	r3, [r2, #4]
 800e188:	e7de      	b.n	800e148 <_malloc_r+0xa8>
 800e18a:	230c      	movs	r3, #12
 800e18c:	6033      	str	r3, [r6, #0]
 800e18e:	4630      	mov	r0, r6
 800e190:	f000 f80c 	bl	800e1ac <__malloc_unlock>
 800e194:	e794      	b.n	800e0c0 <_malloc_r+0x20>
 800e196:	6005      	str	r5, [r0, #0]
 800e198:	e7d6      	b.n	800e148 <_malloc_r+0xa8>
 800e19a:	bf00      	nop
 800e19c:	20002348 	.word	0x20002348

0800e1a0 <__malloc_lock>:
 800e1a0:	4801      	ldr	r0, [pc, #4]	@ (800e1a8 <__malloc_lock+0x8>)
 800e1a2:	f7ff b8b8 	b.w	800d316 <__retarget_lock_acquire_recursive>
 800e1a6:	bf00      	nop
 800e1a8:	20002340 	.word	0x20002340

0800e1ac <__malloc_unlock>:
 800e1ac:	4801      	ldr	r0, [pc, #4]	@ (800e1b4 <__malloc_unlock+0x8>)
 800e1ae:	f7ff b8b3 	b.w	800d318 <__retarget_lock_release_recursive>
 800e1b2:	bf00      	nop
 800e1b4:	20002340 	.word	0x20002340

0800e1b8 <_Balloc>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	69c6      	ldr	r6, [r0, #28]
 800e1bc:	4604      	mov	r4, r0
 800e1be:	460d      	mov	r5, r1
 800e1c0:	b976      	cbnz	r6, 800e1e0 <_Balloc+0x28>
 800e1c2:	2010      	movs	r0, #16
 800e1c4:	f7ff ff42 	bl	800e04c <malloc>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	61e0      	str	r0, [r4, #28]
 800e1cc:	b920      	cbnz	r0, 800e1d8 <_Balloc+0x20>
 800e1ce:	4b18      	ldr	r3, [pc, #96]	@ (800e230 <_Balloc+0x78>)
 800e1d0:	4818      	ldr	r0, [pc, #96]	@ (800e234 <_Balloc+0x7c>)
 800e1d2:	216b      	movs	r1, #107	@ 0x6b
 800e1d4:	f000 fe02 	bl	800eddc <__assert_func>
 800e1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1dc:	6006      	str	r6, [r0, #0]
 800e1de:	60c6      	str	r6, [r0, #12]
 800e1e0:	69e6      	ldr	r6, [r4, #28]
 800e1e2:	68f3      	ldr	r3, [r6, #12]
 800e1e4:	b183      	cbz	r3, 800e208 <_Balloc+0x50>
 800e1e6:	69e3      	ldr	r3, [r4, #28]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1ee:	b9b8      	cbnz	r0, 800e220 <_Balloc+0x68>
 800e1f0:	2101      	movs	r1, #1
 800e1f2:	fa01 f605 	lsl.w	r6, r1, r5
 800e1f6:	1d72      	adds	r2, r6, #5
 800e1f8:	0092      	lsls	r2, r2, #2
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f000 fe0c 	bl	800ee18 <_calloc_r>
 800e200:	b160      	cbz	r0, 800e21c <_Balloc+0x64>
 800e202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e206:	e00e      	b.n	800e226 <_Balloc+0x6e>
 800e208:	2221      	movs	r2, #33	@ 0x21
 800e20a:	2104      	movs	r1, #4
 800e20c:	4620      	mov	r0, r4
 800e20e:	f000 fe03 	bl	800ee18 <_calloc_r>
 800e212:	69e3      	ldr	r3, [r4, #28]
 800e214:	60f0      	str	r0, [r6, #12]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d1e4      	bne.n	800e1e6 <_Balloc+0x2e>
 800e21c:	2000      	movs	r0, #0
 800e21e:	bd70      	pop	{r4, r5, r6, pc}
 800e220:	6802      	ldr	r2, [r0, #0]
 800e222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e226:	2300      	movs	r3, #0
 800e228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e22c:	e7f7      	b.n	800e21e <_Balloc+0x66>
 800e22e:	bf00      	nop
 800e230:	08010209 	.word	0x08010209
 800e234:	08010289 	.word	0x08010289

0800e238 <_Bfree>:
 800e238:	b570      	push	{r4, r5, r6, lr}
 800e23a:	69c6      	ldr	r6, [r0, #28]
 800e23c:	4605      	mov	r5, r0
 800e23e:	460c      	mov	r4, r1
 800e240:	b976      	cbnz	r6, 800e260 <_Bfree+0x28>
 800e242:	2010      	movs	r0, #16
 800e244:	f7ff ff02 	bl	800e04c <malloc>
 800e248:	4602      	mov	r2, r0
 800e24a:	61e8      	str	r0, [r5, #28]
 800e24c:	b920      	cbnz	r0, 800e258 <_Bfree+0x20>
 800e24e:	4b09      	ldr	r3, [pc, #36]	@ (800e274 <_Bfree+0x3c>)
 800e250:	4809      	ldr	r0, [pc, #36]	@ (800e278 <_Bfree+0x40>)
 800e252:	218f      	movs	r1, #143	@ 0x8f
 800e254:	f000 fdc2 	bl	800eddc <__assert_func>
 800e258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e25c:	6006      	str	r6, [r0, #0]
 800e25e:	60c6      	str	r6, [r0, #12]
 800e260:	b13c      	cbz	r4, 800e272 <_Bfree+0x3a>
 800e262:	69eb      	ldr	r3, [r5, #28]
 800e264:	6862      	ldr	r2, [r4, #4]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e26c:	6021      	str	r1, [r4, #0]
 800e26e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e272:	bd70      	pop	{r4, r5, r6, pc}
 800e274:	08010209 	.word	0x08010209
 800e278:	08010289 	.word	0x08010289

0800e27c <__multadd>:
 800e27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e280:	690d      	ldr	r5, [r1, #16]
 800e282:	4607      	mov	r7, r0
 800e284:	460c      	mov	r4, r1
 800e286:	461e      	mov	r6, r3
 800e288:	f101 0c14 	add.w	ip, r1, #20
 800e28c:	2000      	movs	r0, #0
 800e28e:	f8dc 3000 	ldr.w	r3, [ip]
 800e292:	b299      	uxth	r1, r3
 800e294:	fb02 6101 	mla	r1, r2, r1, r6
 800e298:	0c1e      	lsrs	r6, r3, #16
 800e29a:	0c0b      	lsrs	r3, r1, #16
 800e29c:	fb02 3306 	mla	r3, r2, r6, r3
 800e2a0:	b289      	uxth	r1, r1
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2a8:	4285      	cmp	r5, r0
 800e2aa:	f84c 1b04 	str.w	r1, [ip], #4
 800e2ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2b2:	dcec      	bgt.n	800e28e <__multadd+0x12>
 800e2b4:	b30e      	cbz	r6, 800e2fa <__multadd+0x7e>
 800e2b6:	68a3      	ldr	r3, [r4, #8]
 800e2b8:	42ab      	cmp	r3, r5
 800e2ba:	dc19      	bgt.n	800e2f0 <__multadd+0x74>
 800e2bc:	6861      	ldr	r1, [r4, #4]
 800e2be:	4638      	mov	r0, r7
 800e2c0:	3101      	adds	r1, #1
 800e2c2:	f7ff ff79 	bl	800e1b8 <_Balloc>
 800e2c6:	4680      	mov	r8, r0
 800e2c8:	b928      	cbnz	r0, 800e2d6 <__multadd+0x5a>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e300 <__multadd+0x84>)
 800e2ce:	480d      	ldr	r0, [pc, #52]	@ (800e304 <__multadd+0x88>)
 800e2d0:	21ba      	movs	r1, #186	@ 0xba
 800e2d2:	f000 fd83 	bl	800eddc <__assert_func>
 800e2d6:	6922      	ldr	r2, [r4, #16]
 800e2d8:	3202      	adds	r2, #2
 800e2da:	f104 010c 	add.w	r1, r4, #12
 800e2de:	0092      	lsls	r2, r2, #2
 800e2e0:	300c      	adds	r0, #12
 800e2e2:	f000 fd6d 	bl	800edc0 <memcpy>
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	4638      	mov	r0, r7
 800e2ea:	f7ff ffa5 	bl	800e238 <_Bfree>
 800e2ee:	4644      	mov	r4, r8
 800e2f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2f4:	3501      	adds	r5, #1
 800e2f6:	615e      	str	r6, [r3, #20]
 800e2f8:	6125      	str	r5, [r4, #16]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e300:	08010278 	.word	0x08010278
 800e304:	08010289 	.word	0x08010289

0800e308 <__hi0bits>:
 800e308:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e30c:	4603      	mov	r3, r0
 800e30e:	bf36      	itet	cc
 800e310:	0403      	lslcc	r3, r0, #16
 800e312:	2000      	movcs	r0, #0
 800e314:	2010      	movcc	r0, #16
 800e316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e31a:	bf3c      	itt	cc
 800e31c:	021b      	lslcc	r3, r3, #8
 800e31e:	3008      	addcc	r0, #8
 800e320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e324:	bf3c      	itt	cc
 800e326:	011b      	lslcc	r3, r3, #4
 800e328:	3004      	addcc	r0, #4
 800e32a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e32e:	bf3c      	itt	cc
 800e330:	009b      	lslcc	r3, r3, #2
 800e332:	3002      	addcc	r0, #2
 800e334:	2b00      	cmp	r3, #0
 800e336:	db05      	blt.n	800e344 <__hi0bits+0x3c>
 800e338:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e33c:	f100 0001 	add.w	r0, r0, #1
 800e340:	bf08      	it	eq
 800e342:	2020      	moveq	r0, #32
 800e344:	4770      	bx	lr

0800e346 <__lo0bits>:
 800e346:	6803      	ldr	r3, [r0, #0]
 800e348:	4602      	mov	r2, r0
 800e34a:	f013 0007 	ands.w	r0, r3, #7
 800e34e:	d00b      	beq.n	800e368 <__lo0bits+0x22>
 800e350:	07d9      	lsls	r1, r3, #31
 800e352:	d421      	bmi.n	800e398 <__lo0bits+0x52>
 800e354:	0798      	lsls	r0, r3, #30
 800e356:	bf49      	itett	mi
 800e358:	085b      	lsrmi	r3, r3, #1
 800e35a:	089b      	lsrpl	r3, r3, #2
 800e35c:	2001      	movmi	r0, #1
 800e35e:	6013      	strmi	r3, [r2, #0]
 800e360:	bf5c      	itt	pl
 800e362:	6013      	strpl	r3, [r2, #0]
 800e364:	2002      	movpl	r0, #2
 800e366:	4770      	bx	lr
 800e368:	b299      	uxth	r1, r3
 800e36a:	b909      	cbnz	r1, 800e370 <__lo0bits+0x2a>
 800e36c:	0c1b      	lsrs	r3, r3, #16
 800e36e:	2010      	movs	r0, #16
 800e370:	b2d9      	uxtb	r1, r3
 800e372:	b909      	cbnz	r1, 800e378 <__lo0bits+0x32>
 800e374:	3008      	adds	r0, #8
 800e376:	0a1b      	lsrs	r3, r3, #8
 800e378:	0719      	lsls	r1, r3, #28
 800e37a:	bf04      	itt	eq
 800e37c:	091b      	lsreq	r3, r3, #4
 800e37e:	3004      	addeq	r0, #4
 800e380:	0799      	lsls	r1, r3, #30
 800e382:	bf04      	itt	eq
 800e384:	089b      	lsreq	r3, r3, #2
 800e386:	3002      	addeq	r0, #2
 800e388:	07d9      	lsls	r1, r3, #31
 800e38a:	d403      	bmi.n	800e394 <__lo0bits+0x4e>
 800e38c:	085b      	lsrs	r3, r3, #1
 800e38e:	f100 0001 	add.w	r0, r0, #1
 800e392:	d003      	beq.n	800e39c <__lo0bits+0x56>
 800e394:	6013      	str	r3, [r2, #0]
 800e396:	4770      	bx	lr
 800e398:	2000      	movs	r0, #0
 800e39a:	4770      	bx	lr
 800e39c:	2020      	movs	r0, #32
 800e39e:	4770      	bx	lr

0800e3a0 <__i2b>:
 800e3a0:	b510      	push	{r4, lr}
 800e3a2:	460c      	mov	r4, r1
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	f7ff ff07 	bl	800e1b8 <_Balloc>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	b928      	cbnz	r0, 800e3ba <__i2b+0x1a>
 800e3ae:	4b05      	ldr	r3, [pc, #20]	@ (800e3c4 <__i2b+0x24>)
 800e3b0:	4805      	ldr	r0, [pc, #20]	@ (800e3c8 <__i2b+0x28>)
 800e3b2:	f240 1145 	movw	r1, #325	@ 0x145
 800e3b6:	f000 fd11 	bl	800eddc <__assert_func>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	6144      	str	r4, [r0, #20]
 800e3be:	6103      	str	r3, [r0, #16]
 800e3c0:	bd10      	pop	{r4, pc}
 800e3c2:	bf00      	nop
 800e3c4:	08010278 	.word	0x08010278
 800e3c8:	08010289 	.word	0x08010289

0800e3cc <__multiply>:
 800e3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d0:	4614      	mov	r4, r2
 800e3d2:	690a      	ldr	r2, [r1, #16]
 800e3d4:	6923      	ldr	r3, [r4, #16]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	bfa8      	it	ge
 800e3da:	4623      	movge	r3, r4
 800e3dc:	460f      	mov	r7, r1
 800e3de:	bfa4      	itt	ge
 800e3e0:	460c      	movge	r4, r1
 800e3e2:	461f      	movge	r7, r3
 800e3e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e3e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e3ec:	68a3      	ldr	r3, [r4, #8]
 800e3ee:	6861      	ldr	r1, [r4, #4]
 800e3f0:	eb0a 0609 	add.w	r6, sl, r9
 800e3f4:	42b3      	cmp	r3, r6
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	bfb8      	it	lt
 800e3fa:	3101      	addlt	r1, #1
 800e3fc:	f7ff fedc 	bl	800e1b8 <_Balloc>
 800e400:	b930      	cbnz	r0, 800e410 <__multiply+0x44>
 800e402:	4602      	mov	r2, r0
 800e404:	4b44      	ldr	r3, [pc, #272]	@ (800e518 <__multiply+0x14c>)
 800e406:	4845      	ldr	r0, [pc, #276]	@ (800e51c <__multiply+0x150>)
 800e408:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e40c:	f000 fce6 	bl	800eddc <__assert_func>
 800e410:	f100 0514 	add.w	r5, r0, #20
 800e414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e418:	462b      	mov	r3, r5
 800e41a:	2200      	movs	r2, #0
 800e41c:	4543      	cmp	r3, r8
 800e41e:	d321      	bcc.n	800e464 <__multiply+0x98>
 800e420:	f107 0114 	add.w	r1, r7, #20
 800e424:	f104 0214 	add.w	r2, r4, #20
 800e428:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e42c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e430:	9302      	str	r3, [sp, #8]
 800e432:	1b13      	subs	r3, r2, r4
 800e434:	3b15      	subs	r3, #21
 800e436:	f023 0303 	bic.w	r3, r3, #3
 800e43a:	3304      	adds	r3, #4
 800e43c:	f104 0715 	add.w	r7, r4, #21
 800e440:	42ba      	cmp	r2, r7
 800e442:	bf38      	it	cc
 800e444:	2304      	movcc	r3, #4
 800e446:	9301      	str	r3, [sp, #4]
 800e448:	9b02      	ldr	r3, [sp, #8]
 800e44a:	9103      	str	r1, [sp, #12]
 800e44c:	428b      	cmp	r3, r1
 800e44e:	d80c      	bhi.n	800e46a <__multiply+0x9e>
 800e450:	2e00      	cmp	r6, #0
 800e452:	dd03      	ble.n	800e45c <__multiply+0x90>
 800e454:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d05b      	beq.n	800e514 <__multiply+0x148>
 800e45c:	6106      	str	r6, [r0, #16]
 800e45e:	b005      	add	sp, #20
 800e460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e464:	f843 2b04 	str.w	r2, [r3], #4
 800e468:	e7d8      	b.n	800e41c <__multiply+0x50>
 800e46a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e46e:	f1ba 0f00 	cmp.w	sl, #0
 800e472:	d024      	beq.n	800e4be <__multiply+0xf2>
 800e474:	f104 0e14 	add.w	lr, r4, #20
 800e478:	46a9      	mov	r9, r5
 800e47a:	f04f 0c00 	mov.w	ip, #0
 800e47e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e482:	f8d9 3000 	ldr.w	r3, [r9]
 800e486:	fa1f fb87 	uxth.w	fp, r7
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e490:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e494:	f8d9 7000 	ldr.w	r7, [r9]
 800e498:	4463      	add	r3, ip
 800e49a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e49e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e4a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4ac:	4572      	cmp	r2, lr
 800e4ae:	f849 3b04 	str.w	r3, [r9], #4
 800e4b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4b6:	d8e2      	bhi.n	800e47e <__multiply+0xb2>
 800e4b8:	9b01      	ldr	r3, [sp, #4]
 800e4ba:	f845 c003 	str.w	ip, [r5, r3]
 800e4be:	9b03      	ldr	r3, [sp, #12]
 800e4c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e4c4:	3104      	adds	r1, #4
 800e4c6:	f1b9 0f00 	cmp.w	r9, #0
 800e4ca:	d021      	beq.n	800e510 <__multiply+0x144>
 800e4cc:	682b      	ldr	r3, [r5, #0]
 800e4ce:	f104 0c14 	add.w	ip, r4, #20
 800e4d2:	46ae      	mov	lr, r5
 800e4d4:	f04f 0a00 	mov.w	sl, #0
 800e4d8:	f8bc b000 	ldrh.w	fp, [ip]
 800e4dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e4e0:	fb09 770b 	mla	r7, r9, fp, r7
 800e4e4:	4457      	add	r7, sl
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4ec:	f84e 3b04 	str.w	r3, [lr], #4
 800e4f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4f8:	f8be 3000 	ldrh.w	r3, [lr]
 800e4fc:	fb09 330a 	mla	r3, r9, sl, r3
 800e500:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e504:	4562      	cmp	r2, ip
 800e506:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e50a:	d8e5      	bhi.n	800e4d8 <__multiply+0x10c>
 800e50c:	9f01      	ldr	r7, [sp, #4]
 800e50e:	51eb      	str	r3, [r5, r7]
 800e510:	3504      	adds	r5, #4
 800e512:	e799      	b.n	800e448 <__multiply+0x7c>
 800e514:	3e01      	subs	r6, #1
 800e516:	e79b      	b.n	800e450 <__multiply+0x84>
 800e518:	08010278 	.word	0x08010278
 800e51c:	08010289 	.word	0x08010289

0800e520 <__pow5mult>:
 800e520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e524:	4615      	mov	r5, r2
 800e526:	f012 0203 	ands.w	r2, r2, #3
 800e52a:	4607      	mov	r7, r0
 800e52c:	460e      	mov	r6, r1
 800e52e:	d007      	beq.n	800e540 <__pow5mult+0x20>
 800e530:	4c25      	ldr	r4, [pc, #148]	@ (800e5c8 <__pow5mult+0xa8>)
 800e532:	3a01      	subs	r2, #1
 800e534:	2300      	movs	r3, #0
 800e536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e53a:	f7ff fe9f 	bl	800e27c <__multadd>
 800e53e:	4606      	mov	r6, r0
 800e540:	10ad      	asrs	r5, r5, #2
 800e542:	d03d      	beq.n	800e5c0 <__pow5mult+0xa0>
 800e544:	69fc      	ldr	r4, [r7, #28]
 800e546:	b97c      	cbnz	r4, 800e568 <__pow5mult+0x48>
 800e548:	2010      	movs	r0, #16
 800e54a:	f7ff fd7f 	bl	800e04c <malloc>
 800e54e:	4602      	mov	r2, r0
 800e550:	61f8      	str	r0, [r7, #28]
 800e552:	b928      	cbnz	r0, 800e560 <__pow5mult+0x40>
 800e554:	4b1d      	ldr	r3, [pc, #116]	@ (800e5cc <__pow5mult+0xac>)
 800e556:	481e      	ldr	r0, [pc, #120]	@ (800e5d0 <__pow5mult+0xb0>)
 800e558:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e55c:	f000 fc3e 	bl	800eddc <__assert_func>
 800e560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e564:	6004      	str	r4, [r0, #0]
 800e566:	60c4      	str	r4, [r0, #12]
 800e568:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e570:	b94c      	cbnz	r4, 800e586 <__pow5mult+0x66>
 800e572:	f240 2171 	movw	r1, #625	@ 0x271
 800e576:	4638      	mov	r0, r7
 800e578:	f7ff ff12 	bl	800e3a0 <__i2b>
 800e57c:	2300      	movs	r3, #0
 800e57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e582:	4604      	mov	r4, r0
 800e584:	6003      	str	r3, [r0, #0]
 800e586:	f04f 0900 	mov.w	r9, #0
 800e58a:	07eb      	lsls	r3, r5, #31
 800e58c:	d50a      	bpl.n	800e5a4 <__pow5mult+0x84>
 800e58e:	4631      	mov	r1, r6
 800e590:	4622      	mov	r2, r4
 800e592:	4638      	mov	r0, r7
 800e594:	f7ff ff1a 	bl	800e3cc <__multiply>
 800e598:	4631      	mov	r1, r6
 800e59a:	4680      	mov	r8, r0
 800e59c:	4638      	mov	r0, r7
 800e59e:	f7ff fe4b 	bl	800e238 <_Bfree>
 800e5a2:	4646      	mov	r6, r8
 800e5a4:	106d      	asrs	r5, r5, #1
 800e5a6:	d00b      	beq.n	800e5c0 <__pow5mult+0xa0>
 800e5a8:	6820      	ldr	r0, [r4, #0]
 800e5aa:	b938      	cbnz	r0, 800e5bc <__pow5mult+0x9c>
 800e5ac:	4622      	mov	r2, r4
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	4638      	mov	r0, r7
 800e5b2:	f7ff ff0b 	bl	800e3cc <__multiply>
 800e5b6:	6020      	str	r0, [r4, #0]
 800e5b8:	f8c0 9000 	str.w	r9, [r0]
 800e5bc:	4604      	mov	r4, r0
 800e5be:	e7e4      	b.n	800e58a <__pow5mult+0x6a>
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5c6:	bf00      	nop
 800e5c8:	080102e4 	.word	0x080102e4
 800e5cc:	08010209 	.word	0x08010209
 800e5d0:	08010289 	.word	0x08010289

0800e5d4 <__lshift>:
 800e5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5d8:	460c      	mov	r4, r1
 800e5da:	6849      	ldr	r1, [r1, #4]
 800e5dc:	6923      	ldr	r3, [r4, #16]
 800e5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5e2:	68a3      	ldr	r3, [r4, #8]
 800e5e4:	4607      	mov	r7, r0
 800e5e6:	4691      	mov	r9, r2
 800e5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5ec:	f108 0601 	add.w	r6, r8, #1
 800e5f0:	42b3      	cmp	r3, r6
 800e5f2:	db0b      	blt.n	800e60c <__lshift+0x38>
 800e5f4:	4638      	mov	r0, r7
 800e5f6:	f7ff fddf 	bl	800e1b8 <_Balloc>
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	b948      	cbnz	r0, 800e612 <__lshift+0x3e>
 800e5fe:	4602      	mov	r2, r0
 800e600:	4b28      	ldr	r3, [pc, #160]	@ (800e6a4 <__lshift+0xd0>)
 800e602:	4829      	ldr	r0, [pc, #164]	@ (800e6a8 <__lshift+0xd4>)
 800e604:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e608:	f000 fbe8 	bl	800eddc <__assert_func>
 800e60c:	3101      	adds	r1, #1
 800e60e:	005b      	lsls	r3, r3, #1
 800e610:	e7ee      	b.n	800e5f0 <__lshift+0x1c>
 800e612:	2300      	movs	r3, #0
 800e614:	f100 0114 	add.w	r1, r0, #20
 800e618:	f100 0210 	add.w	r2, r0, #16
 800e61c:	4618      	mov	r0, r3
 800e61e:	4553      	cmp	r3, sl
 800e620:	db33      	blt.n	800e68a <__lshift+0xb6>
 800e622:	6920      	ldr	r0, [r4, #16]
 800e624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e628:	f104 0314 	add.w	r3, r4, #20
 800e62c:	f019 091f 	ands.w	r9, r9, #31
 800e630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e638:	d02b      	beq.n	800e692 <__lshift+0xbe>
 800e63a:	f1c9 0e20 	rsb	lr, r9, #32
 800e63e:	468a      	mov	sl, r1
 800e640:	2200      	movs	r2, #0
 800e642:	6818      	ldr	r0, [r3, #0]
 800e644:	fa00 f009 	lsl.w	r0, r0, r9
 800e648:	4310      	orrs	r0, r2
 800e64a:	f84a 0b04 	str.w	r0, [sl], #4
 800e64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e652:	459c      	cmp	ip, r3
 800e654:	fa22 f20e 	lsr.w	r2, r2, lr
 800e658:	d8f3      	bhi.n	800e642 <__lshift+0x6e>
 800e65a:	ebac 0304 	sub.w	r3, ip, r4
 800e65e:	3b15      	subs	r3, #21
 800e660:	f023 0303 	bic.w	r3, r3, #3
 800e664:	3304      	adds	r3, #4
 800e666:	f104 0015 	add.w	r0, r4, #21
 800e66a:	4584      	cmp	ip, r0
 800e66c:	bf38      	it	cc
 800e66e:	2304      	movcc	r3, #4
 800e670:	50ca      	str	r2, [r1, r3]
 800e672:	b10a      	cbz	r2, 800e678 <__lshift+0xa4>
 800e674:	f108 0602 	add.w	r6, r8, #2
 800e678:	3e01      	subs	r6, #1
 800e67a:	4638      	mov	r0, r7
 800e67c:	612e      	str	r6, [r5, #16]
 800e67e:	4621      	mov	r1, r4
 800e680:	f7ff fdda 	bl	800e238 <_Bfree>
 800e684:	4628      	mov	r0, r5
 800e686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e68e:	3301      	adds	r3, #1
 800e690:	e7c5      	b.n	800e61e <__lshift+0x4a>
 800e692:	3904      	subs	r1, #4
 800e694:	f853 2b04 	ldr.w	r2, [r3], #4
 800e698:	f841 2f04 	str.w	r2, [r1, #4]!
 800e69c:	459c      	cmp	ip, r3
 800e69e:	d8f9      	bhi.n	800e694 <__lshift+0xc0>
 800e6a0:	e7ea      	b.n	800e678 <__lshift+0xa4>
 800e6a2:	bf00      	nop
 800e6a4:	08010278 	.word	0x08010278
 800e6a8:	08010289 	.word	0x08010289

0800e6ac <__mcmp>:
 800e6ac:	690a      	ldr	r2, [r1, #16]
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	6900      	ldr	r0, [r0, #16]
 800e6b2:	1a80      	subs	r0, r0, r2
 800e6b4:	b530      	push	{r4, r5, lr}
 800e6b6:	d10e      	bne.n	800e6d6 <__mcmp+0x2a>
 800e6b8:	3314      	adds	r3, #20
 800e6ba:	3114      	adds	r1, #20
 800e6bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e6c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e6c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e6c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e6cc:	4295      	cmp	r5, r2
 800e6ce:	d003      	beq.n	800e6d8 <__mcmp+0x2c>
 800e6d0:	d205      	bcs.n	800e6de <__mcmp+0x32>
 800e6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d6:	bd30      	pop	{r4, r5, pc}
 800e6d8:	42a3      	cmp	r3, r4
 800e6da:	d3f3      	bcc.n	800e6c4 <__mcmp+0x18>
 800e6dc:	e7fb      	b.n	800e6d6 <__mcmp+0x2a>
 800e6de:	2001      	movs	r0, #1
 800e6e0:	e7f9      	b.n	800e6d6 <__mcmp+0x2a>
	...

0800e6e4 <__mdiff>:
 800e6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	4689      	mov	r9, r1
 800e6ea:	4606      	mov	r6, r0
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4648      	mov	r0, r9
 800e6f0:	4614      	mov	r4, r2
 800e6f2:	f7ff ffdb 	bl	800e6ac <__mcmp>
 800e6f6:	1e05      	subs	r5, r0, #0
 800e6f8:	d112      	bne.n	800e720 <__mdiff+0x3c>
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f7ff fd5b 	bl	800e1b8 <_Balloc>
 800e702:	4602      	mov	r2, r0
 800e704:	b928      	cbnz	r0, 800e712 <__mdiff+0x2e>
 800e706:	4b3f      	ldr	r3, [pc, #252]	@ (800e804 <__mdiff+0x120>)
 800e708:	f240 2137 	movw	r1, #567	@ 0x237
 800e70c:	483e      	ldr	r0, [pc, #248]	@ (800e808 <__mdiff+0x124>)
 800e70e:	f000 fb65 	bl	800eddc <__assert_func>
 800e712:	2301      	movs	r3, #1
 800e714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e718:	4610      	mov	r0, r2
 800e71a:	b003      	add	sp, #12
 800e71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e720:	bfbc      	itt	lt
 800e722:	464b      	movlt	r3, r9
 800e724:	46a1      	movlt	r9, r4
 800e726:	4630      	mov	r0, r6
 800e728:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e72c:	bfba      	itte	lt
 800e72e:	461c      	movlt	r4, r3
 800e730:	2501      	movlt	r5, #1
 800e732:	2500      	movge	r5, #0
 800e734:	f7ff fd40 	bl	800e1b8 <_Balloc>
 800e738:	4602      	mov	r2, r0
 800e73a:	b918      	cbnz	r0, 800e744 <__mdiff+0x60>
 800e73c:	4b31      	ldr	r3, [pc, #196]	@ (800e804 <__mdiff+0x120>)
 800e73e:	f240 2145 	movw	r1, #581	@ 0x245
 800e742:	e7e3      	b.n	800e70c <__mdiff+0x28>
 800e744:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e748:	6926      	ldr	r6, [r4, #16]
 800e74a:	60c5      	str	r5, [r0, #12]
 800e74c:	f109 0310 	add.w	r3, r9, #16
 800e750:	f109 0514 	add.w	r5, r9, #20
 800e754:	f104 0e14 	add.w	lr, r4, #20
 800e758:	f100 0b14 	add.w	fp, r0, #20
 800e75c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e760:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e764:	9301      	str	r3, [sp, #4]
 800e766:	46d9      	mov	r9, fp
 800e768:	f04f 0c00 	mov.w	ip, #0
 800e76c:	9b01      	ldr	r3, [sp, #4]
 800e76e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e772:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e776:	9301      	str	r3, [sp, #4]
 800e778:	fa1f f38a 	uxth.w	r3, sl
 800e77c:	4619      	mov	r1, r3
 800e77e:	b283      	uxth	r3, r0
 800e780:	1acb      	subs	r3, r1, r3
 800e782:	0c00      	lsrs	r0, r0, #16
 800e784:	4463      	add	r3, ip
 800e786:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e78a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e78e:	b29b      	uxth	r3, r3
 800e790:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e794:	4576      	cmp	r6, lr
 800e796:	f849 3b04 	str.w	r3, [r9], #4
 800e79a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e79e:	d8e5      	bhi.n	800e76c <__mdiff+0x88>
 800e7a0:	1b33      	subs	r3, r6, r4
 800e7a2:	3b15      	subs	r3, #21
 800e7a4:	f023 0303 	bic.w	r3, r3, #3
 800e7a8:	3415      	adds	r4, #21
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	42a6      	cmp	r6, r4
 800e7ae:	bf38      	it	cc
 800e7b0:	2304      	movcc	r3, #4
 800e7b2:	441d      	add	r5, r3
 800e7b4:	445b      	add	r3, fp
 800e7b6:	461e      	mov	r6, r3
 800e7b8:	462c      	mov	r4, r5
 800e7ba:	4544      	cmp	r4, r8
 800e7bc:	d30e      	bcc.n	800e7dc <__mdiff+0xf8>
 800e7be:	f108 0103 	add.w	r1, r8, #3
 800e7c2:	1b49      	subs	r1, r1, r5
 800e7c4:	f021 0103 	bic.w	r1, r1, #3
 800e7c8:	3d03      	subs	r5, #3
 800e7ca:	45a8      	cmp	r8, r5
 800e7cc:	bf38      	it	cc
 800e7ce:	2100      	movcc	r1, #0
 800e7d0:	440b      	add	r3, r1
 800e7d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7d6:	b191      	cbz	r1, 800e7fe <__mdiff+0x11a>
 800e7d8:	6117      	str	r7, [r2, #16]
 800e7da:	e79d      	b.n	800e718 <__mdiff+0x34>
 800e7dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800e7e0:	46e6      	mov	lr, ip
 800e7e2:	0c08      	lsrs	r0, r1, #16
 800e7e4:	fa1c fc81 	uxtah	ip, ip, r1
 800e7e8:	4471      	add	r1, lr
 800e7ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e7ee:	b289      	uxth	r1, r1
 800e7f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e7f4:	f846 1b04 	str.w	r1, [r6], #4
 800e7f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7fc:	e7dd      	b.n	800e7ba <__mdiff+0xd6>
 800e7fe:	3f01      	subs	r7, #1
 800e800:	e7e7      	b.n	800e7d2 <__mdiff+0xee>
 800e802:	bf00      	nop
 800e804:	08010278 	.word	0x08010278
 800e808:	08010289 	.word	0x08010289

0800e80c <__d2b>:
 800e80c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e810:	460f      	mov	r7, r1
 800e812:	2101      	movs	r1, #1
 800e814:	ec59 8b10 	vmov	r8, r9, d0
 800e818:	4616      	mov	r6, r2
 800e81a:	f7ff fccd 	bl	800e1b8 <_Balloc>
 800e81e:	4604      	mov	r4, r0
 800e820:	b930      	cbnz	r0, 800e830 <__d2b+0x24>
 800e822:	4602      	mov	r2, r0
 800e824:	4b23      	ldr	r3, [pc, #140]	@ (800e8b4 <__d2b+0xa8>)
 800e826:	4824      	ldr	r0, [pc, #144]	@ (800e8b8 <__d2b+0xac>)
 800e828:	f240 310f 	movw	r1, #783	@ 0x30f
 800e82c:	f000 fad6 	bl	800eddc <__assert_func>
 800e830:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e834:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e838:	b10d      	cbz	r5, 800e83e <__d2b+0x32>
 800e83a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	f1b8 0300 	subs.w	r3, r8, #0
 800e844:	d023      	beq.n	800e88e <__d2b+0x82>
 800e846:	4668      	mov	r0, sp
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	f7ff fd7c 	bl	800e346 <__lo0bits>
 800e84e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e852:	b1d0      	cbz	r0, 800e88a <__d2b+0x7e>
 800e854:	f1c0 0320 	rsb	r3, r0, #32
 800e858:	fa02 f303 	lsl.w	r3, r2, r3
 800e85c:	430b      	orrs	r3, r1
 800e85e:	40c2      	lsrs	r2, r0
 800e860:	6163      	str	r3, [r4, #20]
 800e862:	9201      	str	r2, [sp, #4]
 800e864:	9b01      	ldr	r3, [sp, #4]
 800e866:	61a3      	str	r3, [r4, #24]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	bf0c      	ite	eq
 800e86c:	2201      	moveq	r2, #1
 800e86e:	2202      	movne	r2, #2
 800e870:	6122      	str	r2, [r4, #16]
 800e872:	b1a5      	cbz	r5, 800e89e <__d2b+0x92>
 800e874:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e878:	4405      	add	r5, r0
 800e87a:	603d      	str	r5, [r7, #0]
 800e87c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e880:	6030      	str	r0, [r6, #0]
 800e882:	4620      	mov	r0, r4
 800e884:	b003      	add	sp, #12
 800e886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e88a:	6161      	str	r1, [r4, #20]
 800e88c:	e7ea      	b.n	800e864 <__d2b+0x58>
 800e88e:	a801      	add	r0, sp, #4
 800e890:	f7ff fd59 	bl	800e346 <__lo0bits>
 800e894:	9b01      	ldr	r3, [sp, #4]
 800e896:	6163      	str	r3, [r4, #20]
 800e898:	3020      	adds	r0, #32
 800e89a:	2201      	movs	r2, #1
 800e89c:	e7e8      	b.n	800e870 <__d2b+0x64>
 800e89e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e8a6:	6038      	str	r0, [r7, #0]
 800e8a8:	6918      	ldr	r0, [r3, #16]
 800e8aa:	f7ff fd2d 	bl	800e308 <__hi0bits>
 800e8ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8b2:	e7e5      	b.n	800e880 <__d2b+0x74>
 800e8b4:	08010278 	.word	0x08010278
 800e8b8:	08010289 	.word	0x08010289

0800e8bc <__sfputc_r>:
 800e8bc:	6893      	ldr	r3, [r2, #8]
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	b410      	push	{r4}
 800e8c4:	6093      	str	r3, [r2, #8]
 800e8c6:	da08      	bge.n	800e8da <__sfputc_r+0x1e>
 800e8c8:	6994      	ldr	r4, [r2, #24]
 800e8ca:	42a3      	cmp	r3, r4
 800e8cc:	db01      	blt.n	800e8d2 <__sfputc_r+0x16>
 800e8ce:	290a      	cmp	r1, #10
 800e8d0:	d103      	bne.n	800e8da <__sfputc_r+0x1e>
 800e8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8d6:	f7fe bc0c 	b.w	800d0f2 <__swbuf_r>
 800e8da:	6813      	ldr	r3, [r2, #0]
 800e8dc:	1c58      	adds	r0, r3, #1
 800e8de:	6010      	str	r0, [r2, #0]
 800e8e0:	7019      	strb	r1, [r3, #0]
 800e8e2:	4608      	mov	r0, r1
 800e8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8e8:	4770      	bx	lr

0800e8ea <__sfputs_r>:
 800e8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	460f      	mov	r7, r1
 800e8f0:	4614      	mov	r4, r2
 800e8f2:	18d5      	adds	r5, r2, r3
 800e8f4:	42ac      	cmp	r4, r5
 800e8f6:	d101      	bne.n	800e8fc <__sfputs_r+0x12>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e007      	b.n	800e90c <__sfputs_r+0x22>
 800e8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e900:	463a      	mov	r2, r7
 800e902:	4630      	mov	r0, r6
 800e904:	f7ff ffda 	bl	800e8bc <__sfputc_r>
 800e908:	1c43      	adds	r3, r0, #1
 800e90a:	d1f3      	bne.n	800e8f4 <__sfputs_r+0xa>
 800e90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e910 <_vfiprintf_r>:
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	460d      	mov	r5, r1
 800e916:	b09d      	sub	sp, #116	@ 0x74
 800e918:	4614      	mov	r4, r2
 800e91a:	4698      	mov	r8, r3
 800e91c:	4606      	mov	r6, r0
 800e91e:	b118      	cbz	r0, 800e928 <_vfiprintf_r+0x18>
 800e920:	6a03      	ldr	r3, [r0, #32]
 800e922:	b90b      	cbnz	r3, 800e928 <_vfiprintf_r+0x18>
 800e924:	f7fe fafc 	bl	800cf20 <__sinit>
 800e928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e92a:	07d9      	lsls	r1, r3, #31
 800e92c:	d405      	bmi.n	800e93a <_vfiprintf_r+0x2a>
 800e92e:	89ab      	ldrh	r3, [r5, #12]
 800e930:	059a      	lsls	r2, r3, #22
 800e932:	d402      	bmi.n	800e93a <_vfiprintf_r+0x2a>
 800e934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e936:	f7fe fcee 	bl	800d316 <__retarget_lock_acquire_recursive>
 800e93a:	89ab      	ldrh	r3, [r5, #12]
 800e93c:	071b      	lsls	r3, r3, #28
 800e93e:	d501      	bpl.n	800e944 <_vfiprintf_r+0x34>
 800e940:	692b      	ldr	r3, [r5, #16]
 800e942:	b99b      	cbnz	r3, 800e96c <_vfiprintf_r+0x5c>
 800e944:	4629      	mov	r1, r5
 800e946:	4630      	mov	r0, r6
 800e948:	f7fe fc12 	bl	800d170 <__swsetup_r>
 800e94c:	b170      	cbz	r0, 800e96c <_vfiprintf_r+0x5c>
 800e94e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e950:	07dc      	lsls	r4, r3, #31
 800e952:	d504      	bpl.n	800e95e <_vfiprintf_r+0x4e>
 800e954:	f04f 30ff 	mov.w	r0, #4294967295
 800e958:	b01d      	add	sp, #116	@ 0x74
 800e95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e95e:	89ab      	ldrh	r3, [r5, #12]
 800e960:	0598      	lsls	r0, r3, #22
 800e962:	d4f7      	bmi.n	800e954 <_vfiprintf_r+0x44>
 800e964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e966:	f7fe fcd7 	bl	800d318 <__retarget_lock_release_recursive>
 800e96a:	e7f3      	b.n	800e954 <_vfiprintf_r+0x44>
 800e96c:	2300      	movs	r3, #0
 800e96e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e970:	2320      	movs	r3, #32
 800e972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e976:	f8cd 800c 	str.w	r8, [sp, #12]
 800e97a:	2330      	movs	r3, #48	@ 0x30
 800e97c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eb2c <_vfiprintf_r+0x21c>
 800e980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e984:	f04f 0901 	mov.w	r9, #1
 800e988:	4623      	mov	r3, r4
 800e98a:	469a      	mov	sl, r3
 800e98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e990:	b10a      	cbz	r2, 800e996 <_vfiprintf_r+0x86>
 800e992:	2a25      	cmp	r2, #37	@ 0x25
 800e994:	d1f9      	bne.n	800e98a <_vfiprintf_r+0x7a>
 800e996:	ebba 0b04 	subs.w	fp, sl, r4
 800e99a:	d00b      	beq.n	800e9b4 <_vfiprintf_r+0xa4>
 800e99c:	465b      	mov	r3, fp
 800e99e:	4622      	mov	r2, r4
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff ffa1 	bl	800e8ea <__sfputs_r>
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	f000 80a7 	beq.w	800eafc <_vfiprintf_r+0x1ec>
 800e9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9b0:	445a      	add	r2, fp
 800e9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f000 809f 	beq.w	800eafc <_vfiprintf_r+0x1ec>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9c8:	f10a 0a01 	add.w	sl, sl, #1
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	9307      	str	r3, [sp, #28]
 800e9d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9d6:	4654      	mov	r4, sl
 800e9d8:	2205      	movs	r2, #5
 800e9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9de:	4853      	ldr	r0, [pc, #332]	@ (800eb2c <_vfiprintf_r+0x21c>)
 800e9e0:	f7f1 fbf6 	bl	80001d0 <memchr>
 800e9e4:	9a04      	ldr	r2, [sp, #16]
 800e9e6:	b9d8      	cbnz	r0, 800ea20 <_vfiprintf_r+0x110>
 800e9e8:	06d1      	lsls	r1, r2, #27
 800e9ea:	bf44      	itt	mi
 800e9ec:	2320      	movmi	r3, #32
 800e9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9f2:	0713      	lsls	r3, r2, #28
 800e9f4:	bf44      	itt	mi
 800e9f6:	232b      	movmi	r3, #43	@ 0x2b
 800e9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ea00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea02:	d015      	beq.n	800ea30 <_vfiprintf_r+0x120>
 800ea04:	9a07      	ldr	r2, [sp, #28]
 800ea06:	4654      	mov	r4, sl
 800ea08:	2000      	movs	r0, #0
 800ea0a:	f04f 0c0a 	mov.w	ip, #10
 800ea0e:	4621      	mov	r1, r4
 800ea10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea14:	3b30      	subs	r3, #48	@ 0x30
 800ea16:	2b09      	cmp	r3, #9
 800ea18:	d94b      	bls.n	800eab2 <_vfiprintf_r+0x1a2>
 800ea1a:	b1b0      	cbz	r0, 800ea4a <_vfiprintf_r+0x13a>
 800ea1c:	9207      	str	r2, [sp, #28]
 800ea1e:	e014      	b.n	800ea4a <_vfiprintf_r+0x13a>
 800ea20:	eba0 0308 	sub.w	r3, r0, r8
 800ea24:	fa09 f303 	lsl.w	r3, r9, r3
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	9304      	str	r3, [sp, #16]
 800ea2c:	46a2      	mov	sl, r4
 800ea2e:	e7d2      	b.n	800e9d6 <_vfiprintf_r+0xc6>
 800ea30:	9b03      	ldr	r3, [sp, #12]
 800ea32:	1d19      	adds	r1, r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	9103      	str	r1, [sp, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	bfbb      	ittet	lt
 800ea3c:	425b      	neglt	r3, r3
 800ea3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ea42:	9307      	strge	r3, [sp, #28]
 800ea44:	9307      	strlt	r3, [sp, #28]
 800ea46:	bfb8      	it	lt
 800ea48:	9204      	strlt	r2, [sp, #16]
 800ea4a:	7823      	ldrb	r3, [r4, #0]
 800ea4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea4e:	d10a      	bne.n	800ea66 <_vfiprintf_r+0x156>
 800ea50:	7863      	ldrb	r3, [r4, #1]
 800ea52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea54:	d132      	bne.n	800eabc <_vfiprintf_r+0x1ac>
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	1d1a      	adds	r2, r3, #4
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	9203      	str	r2, [sp, #12]
 800ea5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea62:	3402      	adds	r4, #2
 800ea64:	9305      	str	r3, [sp, #20]
 800ea66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eb3c <_vfiprintf_r+0x22c>
 800ea6a:	7821      	ldrb	r1, [r4, #0]
 800ea6c:	2203      	movs	r2, #3
 800ea6e:	4650      	mov	r0, sl
 800ea70:	f7f1 fbae 	bl	80001d0 <memchr>
 800ea74:	b138      	cbz	r0, 800ea86 <_vfiprintf_r+0x176>
 800ea76:	9b04      	ldr	r3, [sp, #16]
 800ea78:	eba0 000a 	sub.w	r0, r0, sl
 800ea7c:	2240      	movs	r2, #64	@ 0x40
 800ea7e:	4082      	lsls	r2, r0
 800ea80:	4313      	orrs	r3, r2
 800ea82:	3401      	adds	r4, #1
 800ea84:	9304      	str	r3, [sp, #16]
 800ea86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea8a:	4829      	ldr	r0, [pc, #164]	@ (800eb30 <_vfiprintf_r+0x220>)
 800ea8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea90:	2206      	movs	r2, #6
 800ea92:	f7f1 fb9d 	bl	80001d0 <memchr>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d03f      	beq.n	800eb1a <_vfiprintf_r+0x20a>
 800ea9a:	4b26      	ldr	r3, [pc, #152]	@ (800eb34 <_vfiprintf_r+0x224>)
 800ea9c:	bb1b      	cbnz	r3, 800eae6 <_vfiprintf_r+0x1d6>
 800ea9e:	9b03      	ldr	r3, [sp, #12]
 800eaa0:	3307      	adds	r3, #7
 800eaa2:	f023 0307 	bic.w	r3, r3, #7
 800eaa6:	3308      	adds	r3, #8
 800eaa8:	9303      	str	r3, [sp, #12]
 800eaaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaac:	443b      	add	r3, r7
 800eaae:	9309      	str	r3, [sp, #36]	@ 0x24
 800eab0:	e76a      	b.n	800e988 <_vfiprintf_r+0x78>
 800eab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800eab6:	460c      	mov	r4, r1
 800eab8:	2001      	movs	r0, #1
 800eaba:	e7a8      	b.n	800ea0e <_vfiprintf_r+0xfe>
 800eabc:	2300      	movs	r3, #0
 800eabe:	3401      	adds	r4, #1
 800eac0:	9305      	str	r3, [sp, #20]
 800eac2:	4619      	mov	r1, r3
 800eac4:	f04f 0c0a 	mov.w	ip, #10
 800eac8:	4620      	mov	r0, r4
 800eaca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eace:	3a30      	subs	r2, #48	@ 0x30
 800ead0:	2a09      	cmp	r2, #9
 800ead2:	d903      	bls.n	800eadc <_vfiprintf_r+0x1cc>
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d0c6      	beq.n	800ea66 <_vfiprintf_r+0x156>
 800ead8:	9105      	str	r1, [sp, #20]
 800eada:	e7c4      	b.n	800ea66 <_vfiprintf_r+0x156>
 800eadc:	fb0c 2101 	mla	r1, ip, r1, r2
 800eae0:	4604      	mov	r4, r0
 800eae2:	2301      	movs	r3, #1
 800eae4:	e7f0      	b.n	800eac8 <_vfiprintf_r+0x1b8>
 800eae6:	ab03      	add	r3, sp, #12
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	462a      	mov	r2, r5
 800eaec:	4b12      	ldr	r3, [pc, #72]	@ (800eb38 <_vfiprintf_r+0x228>)
 800eaee:	a904      	add	r1, sp, #16
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f7fd fdd1 	bl	800c698 <_printf_float>
 800eaf6:	4607      	mov	r7, r0
 800eaf8:	1c78      	adds	r0, r7, #1
 800eafa:	d1d6      	bne.n	800eaaa <_vfiprintf_r+0x19a>
 800eafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eafe:	07d9      	lsls	r1, r3, #31
 800eb00:	d405      	bmi.n	800eb0e <_vfiprintf_r+0x1fe>
 800eb02:	89ab      	ldrh	r3, [r5, #12]
 800eb04:	059a      	lsls	r2, r3, #22
 800eb06:	d402      	bmi.n	800eb0e <_vfiprintf_r+0x1fe>
 800eb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb0a:	f7fe fc05 	bl	800d318 <__retarget_lock_release_recursive>
 800eb0e:	89ab      	ldrh	r3, [r5, #12]
 800eb10:	065b      	lsls	r3, r3, #25
 800eb12:	f53f af1f 	bmi.w	800e954 <_vfiprintf_r+0x44>
 800eb16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb18:	e71e      	b.n	800e958 <_vfiprintf_r+0x48>
 800eb1a:	ab03      	add	r3, sp, #12
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	462a      	mov	r2, r5
 800eb20:	4b05      	ldr	r3, [pc, #20]	@ (800eb38 <_vfiprintf_r+0x228>)
 800eb22:	a904      	add	r1, sp, #16
 800eb24:	4630      	mov	r0, r6
 800eb26:	f7fe f84f 	bl	800cbc8 <_printf_i>
 800eb2a:	e7e4      	b.n	800eaf6 <_vfiprintf_r+0x1e6>
 800eb2c:	080103e0 	.word	0x080103e0
 800eb30:	080103ea 	.word	0x080103ea
 800eb34:	0800c699 	.word	0x0800c699
 800eb38:	0800e8eb 	.word	0x0800e8eb
 800eb3c:	080103e6 	.word	0x080103e6

0800eb40 <__sflush_r>:
 800eb40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb48:	0716      	lsls	r6, r2, #28
 800eb4a:	4605      	mov	r5, r0
 800eb4c:	460c      	mov	r4, r1
 800eb4e:	d454      	bmi.n	800ebfa <__sflush_r+0xba>
 800eb50:	684b      	ldr	r3, [r1, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	dc02      	bgt.n	800eb5c <__sflush_r+0x1c>
 800eb56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	dd48      	ble.n	800ebee <__sflush_r+0xae>
 800eb5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb5e:	2e00      	cmp	r6, #0
 800eb60:	d045      	beq.n	800ebee <__sflush_r+0xae>
 800eb62:	2300      	movs	r3, #0
 800eb64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb68:	682f      	ldr	r7, [r5, #0]
 800eb6a:	6a21      	ldr	r1, [r4, #32]
 800eb6c:	602b      	str	r3, [r5, #0]
 800eb6e:	d030      	beq.n	800ebd2 <__sflush_r+0x92>
 800eb70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	0759      	lsls	r1, r3, #29
 800eb76:	d505      	bpl.n	800eb84 <__sflush_r+0x44>
 800eb78:	6863      	ldr	r3, [r4, #4]
 800eb7a:	1ad2      	subs	r2, r2, r3
 800eb7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb7e:	b10b      	cbz	r3, 800eb84 <__sflush_r+0x44>
 800eb80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	2300      	movs	r3, #0
 800eb86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	47b0      	blx	r6
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	d106      	bne.n	800eba2 <__sflush_r+0x62>
 800eb94:	6829      	ldr	r1, [r5, #0]
 800eb96:	291d      	cmp	r1, #29
 800eb98:	d82b      	bhi.n	800ebf2 <__sflush_r+0xb2>
 800eb9a:	4a2a      	ldr	r2, [pc, #168]	@ (800ec44 <__sflush_r+0x104>)
 800eb9c:	410a      	asrs	r2, r1
 800eb9e:	07d6      	lsls	r6, r2, #31
 800eba0:	d427      	bmi.n	800ebf2 <__sflush_r+0xb2>
 800eba2:	2200      	movs	r2, #0
 800eba4:	6062      	str	r2, [r4, #4]
 800eba6:	04d9      	lsls	r1, r3, #19
 800eba8:	6922      	ldr	r2, [r4, #16]
 800ebaa:	6022      	str	r2, [r4, #0]
 800ebac:	d504      	bpl.n	800ebb8 <__sflush_r+0x78>
 800ebae:	1c42      	adds	r2, r0, #1
 800ebb0:	d101      	bne.n	800ebb6 <__sflush_r+0x76>
 800ebb2:	682b      	ldr	r3, [r5, #0]
 800ebb4:	b903      	cbnz	r3, 800ebb8 <__sflush_r+0x78>
 800ebb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ebb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebba:	602f      	str	r7, [r5, #0]
 800ebbc:	b1b9      	cbz	r1, 800ebee <__sflush_r+0xae>
 800ebbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ebc2:	4299      	cmp	r1, r3
 800ebc4:	d002      	beq.n	800ebcc <__sflush_r+0x8c>
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f7ff f9f6 	bl	800dfb8 <_free_r>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	6363      	str	r3, [r4, #52]	@ 0x34
 800ebd0:	e00d      	b.n	800ebee <__sflush_r+0xae>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	47b0      	blx	r6
 800ebd8:	4602      	mov	r2, r0
 800ebda:	1c50      	adds	r0, r2, #1
 800ebdc:	d1c9      	bne.n	800eb72 <__sflush_r+0x32>
 800ebde:	682b      	ldr	r3, [r5, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d0c6      	beq.n	800eb72 <__sflush_r+0x32>
 800ebe4:	2b1d      	cmp	r3, #29
 800ebe6:	d001      	beq.n	800ebec <__sflush_r+0xac>
 800ebe8:	2b16      	cmp	r3, #22
 800ebea:	d11e      	bne.n	800ec2a <__sflush_r+0xea>
 800ebec:	602f      	str	r7, [r5, #0]
 800ebee:	2000      	movs	r0, #0
 800ebf0:	e022      	b.n	800ec38 <__sflush_r+0xf8>
 800ebf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebf6:	b21b      	sxth	r3, r3
 800ebf8:	e01b      	b.n	800ec32 <__sflush_r+0xf2>
 800ebfa:	690f      	ldr	r7, [r1, #16]
 800ebfc:	2f00      	cmp	r7, #0
 800ebfe:	d0f6      	beq.n	800ebee <__sflush_r+0xae>
 800ec00:	0793      	lsls	r3, r2, #30
 800ec02:	680e      	ldr	r6, [r1, #0]
 800ec04:	bf08      	it	eq
 800ec06:	694b      	ldreq	r3, [r1, #20]
 800ec08:	600f      	str	r7, [r1, #0]
 800ec0a:	bf18      	it	ne
 800ec0c:	2300      	movne	r3, #0
 800ec0e:	eba6 0807 	sub.w	r8, r6, r7
 800ec12:	608b      	str	r3, [r1, #8]
 800ec14:	f1b8 0f00 	cmp.w	r8, #0
 800ec18:	dde9      	ble.n	800ebee <__sflush_r+0xae>
 800ec1a:	6a21      	ldr	r1, [r4, #32]
 800ec1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ec1e:	4643      	mov	r3, r8
 800ec20:	463a      	mov	r2, r7
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b0      	blx	r6
 800ec26:	2800      	cmp	r0, #0
 800ec28:	dc08      	bgt.n	800ec3c <__sflush_r+0xfc>
 800ec2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec32:	81a3      	strh	r3, [r4, #12]
 800ec34:	f04f 30ff 	mov.w	r0, #4294967295
 800ec38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec3c:	4407      	add	r7, r0
 800ec3e:	eba8 0800 	sub.w	r8, r8, r0
 800ec42:	e7e7      	b.n	800ec14 <__sflush_r+0xd4>
 800ec44:	dfbffffe 	.word	0xdfbffffe

0800ec48 <_fflush_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	690b      	ldr	r3, [r1, #16]
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	b913      	cbnz	r3, 800ec58 <_fflush_r+0x10>
 800ec52:	2500      	movs	r5, #0
 800ec54:	4628      	mov	r0, r5
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	b118      	cbz	r0, 800ec62 <_fflush_r+0x1a>
 800ec5a:	6a03      	ldr	r3, [r0, #32]
 800ec5c:	b90b      	cbnz	r3, 800ec62 <_fflush_r+0x1a>
 800ec5e:	f7fe f95f 	bl	800cf20 <__sinit>
 800ec62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d0f3      	beq.n	800ec52 <_fflush_r+0xa>
 800ec6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec6c:	07d0      	lsls	r0, r2, #31
 800ec6e:	d404      	bmi.n	800ec7a <_fflush_r+0x32>
 800ec70:	0599      	lsls	r1, r3, #22
 800ec72:	d402      	bmi.n	800ec7a <_fflush_r+0x32>
 800ec74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec76:	f7fe fb4e 	bl	800d316 <__retarget_lock_acquire_recursive>
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	f7ff ff5f 	bl	800eb40 <__sflush_r>
 800ec82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec84:	07da      	lsls	r2, r3, #31
 800ec86:	4605      	mov	r5, r0
 800ec88:	d4e4      	bmi.n	800ec54 <_fflush_r+0xc>
 800ec8a:	89a3      	ldrh	r3, [r4, #12]
 800ec8c:	059b      	lsls	r3, r3, #22
 800ec8e:	d4e1      	bmi.n	800ec54 <_fflush_r+0xc>
 800ec90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec92:	f7fe fb41 	bl	800d318 <__retarget_lock_release_recursive>
 800ec96:	e7dd      	b.n	800ec54 <_fflush_r+0xc>

0800ec98 <__swhatbuf_r>:
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca0:	2900      	cmp	r1, #0
 800eca2:	b096      	sub	sp, #88	@ 0x58
 800eca4:	4615      	mov	r5, r2
 800eca6:	461e      	mov	r6, r3
 800eca8:	da0d      	bge.n	800ecc6 <__swhatbuf_r+0x2e>
 800ecaa:	89a3      	ldrh	r3, [r4, #12]
 800ecac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ecb0:	f04f 0100 	mov.w	r1, #0
 800ecb4:	bf14      	ite	ne
 800ecb6:	2340      	movne	r3, #64	@ 0x40
 800ecb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	6031      	str	r1, [r6, #0]
 800ecc0:	602b      	str	r3, [r5, #0]
 800ecc2:	b016      	add	sp, #88	@ 0x58
 800ecc4:	bd70      	pop	{r4, r5, r6, pc}
 800ecc6:	466a      	mov	r2, sp
 800ecc8:	f000 f848 	bl	800ed5c <_fstat_r>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	dbec      	blt.n	800ecaa <__swhatbuf_r+0x12>
 800ecd0:	9901      	ldr	r1, [sp, #4]
 800ecd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ecd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ecda:	4259      	negs	r1, r3
 800ecdc:	4159      	adcs	r1, r3
 800ecde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ece2:	e7eb      	b.n	800ecbc <__swhatbuf_r+0x24>

0800ece4 <__smakebuf_r>:
 800ece4:	898b      	ldrh	r3, [r1, #12]
 800ece6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ece8:	079d      	lsls	r5, r3, #30
 800ecea:	4606      	mov	r6, r0
 800ecec:	460c      	mov	r4, r1
 800ecee:	d507      	bpl.n	800ed00 <__smakebuf_r+0x1c>
 800ecf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ecf4:	6023      	str	r3, [r4, #0]
 800ecf6:	6123      	str	r3, [r4, #16]
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	6163      	str	r3, [r4, #20]
 800ecfc:	b003      	add	sp, #12
 800ecfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed00:	ab01      	add	r3, sp, #4
 800ed02:	466a      	mov	r2, sp
 800ed04:	f7ff ffc8 	bl	800ec98 <__swhatbuf_r>
 800ed08:	9f00      	ldr	r7, [sp, #0]
 800ed0a:	4605      	mov	r5, r0
 800ed0c:	4639      	mov	r1, r7
 800ed0e:	4630      	mov	r0, r6
 800ed10:	f7ff f9c6 	bl	800e0a0 <_malloc_r>
 800ed14:	b948      	cbnz	r0, 800ed2a <__smakebuf_r+0x46>
 800ed16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed1a:	059a      	lsls	r2, r3, #22
 800ed1c:	d4ee      	bmi.n	800ecfc <__smakebuf_r+0x18>
 800ed1e:	f023 0303 	bic.w	r3, r3, #3
 800ed22:	f043 0302 	orr.w	r3, r3, #2
 800ed26:	81a3      	strh	r3, [r4, #12]
 800ed28:	e7e2      	b.n	800ecf0 <__smakebuf_r+0xc>
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	6020      	str	r0, [r4, #0]
 800ed2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed32:	81a3      	strh	r3, [r4, #12]
 800ed34:	9b01      	ldr	r3, [sp, #4]
 800ed36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ed3a:	b15b      	cbz	r3, 800ed54 <__smakebuf_r+0x70>
 800ed3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed40:	4630      	mov	r0, r6
 800ed42:	f000 f81d 	bl	800ed80 <_isatty_r>
 800ed46:	b128      	cbz	r0, 800ed54 <__smakebuf_r+0x70>
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	f023 0303 	bic.w	r3, r3, #3
 800ed4e:	f043 0301 	orr.w	r3, r3, #1
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	89a3      	ldrh	r3, [r4, #12]
 800ed56:	431d      	orrs	r5, r3
 800ed58:	81a5      	strh	r5, [r4, #12]
 800ed5a:	e7cf      	b.n	800ecfc <__smakebuf_r+0x18>

0800ed5c <_fstat_r>:
 800ed5c:	b538      	push	{r3, r4, r5, lr}
 800ed5e:	4d07      	ldr	r5, [pc, #28]	@ (800ed7c <_fstat_r+0x20>)
 800ed60:	2300      	movs	r3, #0
 800ed62:	4604      	mov	r4, r0
 800ed64:	4608      	mov	r0, r1
 800ed66:	4611      	mov	r1, r2
 800ed68:	602b      	str	r3, [r5, #0]
 800ed6a:	f7f4 fb8d 	bl	8003488 <_fstat>
 800ed6e:	1c43      	adds	r3, r0, #1
 800ed70:	d102      	bne.n	800ed78 <_fstat_r+0x1c>
 800ed72:	682b      	ldr	r3, [r5, #0]
 800ed74:	b103      	cbz	r3, 800ed78 <_fstat_r+0x1c>
 800ed76:	6023      	str	r3, [r4, #0]
 800ed78:	bd38      	pop	{r3, r4, r5, pc}
 800ed7a:	bf00      	nop
 800ed7c:	2000233c 	.word	0x2000233c

0800ed80 <_isatty_r>:
 800ed80:	b538      	push	{r3, r4, r5, lr}
 800ed82:	4d06      	ldr	r5, [pc, #24]	@ (800ed9c <_isatty_r+0x1c>)
 800ed84:	2300      	movs	r3, #0
 800ed86:	4604      	mov	r4, r0
 800ed88:	4608      	mov	r0, r1
 800ed8a:	602b      	str	r3, [r5, #0]
 800ed8c:	f7f4 fb8c 	bl	80034a8 <_isatty>
 800ed90:	1c43      	adds	r3, r0, #1
 800ed92:	d102      	bne.n	800ed9a <_isatty_r+0x1a>
 800ed94:	682b      	ldr	r3, [r5, #0]
 800ed96:	b103      	cbz	r3, 800ed9a <_isatty_r+0x1a>
 800ed98:	6023      	str	r3, [r4, #0]
 800ed9a:	bd38      	pop	{r3, r4, r5, pc}
 800ed9c:	2000233c 	.word	0x2000233c

0800eda0 <_sbrk_r>:
 800eda0:	b538      	push	{r3, r4, r5, lr}
 800eda2:	4d06      	ldr	r5, [pc, #24]	@ (800edbc <_sbrk_r+0x1c>)
 800eda4:	2300      	movs	r3, #0
 800eda6:	4604      	mov	r4, r0
 800eda8:	4608      	mov	r0, r1
 800edaa:	602b      	str	r3, [r5, #0]
 800edac:	f7f4 fb94 	bl	80034d8 <_sbrk>
 800edb0:	1c43      	adds	r3, r0, #1
 800edb2:	d102      	bne.n	800edba <_sbrk_r+0x1a>
 800edb4:	682b      	ldr	r3, [r5, #0]
 800edb6:	b103      	cbz	r3, 800edba <_sbrk_r+0x1a>
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	2000233c 	.word	0x2000233c

0800edc0 <memcpy>:
 800edc0:	440a      	add	r2, r1
 800edc2:	4291      	cmp	r1, r2
 800edc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800edc8:	d100      	bne.n	800edcc <memcpy+0xc>
 800edca:	4770      	bx	lr
 800edcc:	b510      	push	{r4, lr}
 800edce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edd6:	4291      	cmp	r1, r2
 800edd8:	d1f9      	bne.n	800edce <memcpy+0xe>
 800edda:	bd10      	pop	{r4, pc}

0800eddc <__assert_func>:
 800eddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edde:	4614      	mov	r4, r2
 800ede0:	461a      	mov	r2, r3
 800ede2:	4b09      	ldr	r3, [pc, #36]	@ (800ee08 <__assert_func+0x2c>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4605      	mov	r5, r0
 800ede8:	68d8      	ldr	r0, [r3, #12]
 800edea:	b954      	cbnz	r4, 800ee02 <__assert_func+0x26>
 800edec:	4b07      	ldr	r3, [pc, #28]	@ (800ee0c <__assert_func+0x30>)
 800edee:	461c      	mov	r4, r3
 800edf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edf4:	9100      	str	r1, [sp, #0]
 800edf6:	462b      	mov	r3, r5
 800edf8:	4905      	ldr	r1, [pc, #20]	@ (800ee10 <__assert_func+0x34>)
 800edfa:	f000 f841 	bl	800ee80 <fiprintf>
 800edfe:	f000 f851 	bl	800eea4 <abort>
 800ee02:	4b04      	ldr	r3, [pc, #16]	@ (800ee14 <__assert_func+0x38>)
 800ee04:	e7f4      	b.n	800edf0 <__assert_func+0x14>
 800ee06:	bf00      	nop
 800ee08:	20000168 	.word	0x20000168
 800ee0c:	08010436 	.word	0x08010436
 800ee10:	08010408 	.word	0x08010408
 800ee14:	080103fb 	.word	0x080103fb

0800ee18 <_calloc_r>:
 800ee18:	b570      	push	{r4, r5, r6, lr}
 800ee1a:	fba1 5402 	umull	r5, r4, r1, r2
 800ee1e:	b93c      	cbnz	r4, 800ee30 <_calloc_r+0x18>
 800ee20:	4629      	mov	r1, r5
 800ee22:	f7ff f93d 	bl	800e0a0 <_malloc_r>
 800ee26:	4606      	mov	r6, r0
 800ee28:	b928      	cbnz	r0, 800ee36 <_calloc_r+0x1e>
 800ee2a:	2600      	movs	r6, #0
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	bd70      	pop	{r4, r5, r6, pc}
 800ee30:	220c      	movs	r2, #12
 800ee32:	6002      	str	r2, [r0, #0]
 800ee34:	e7f9      	b.n	800ee2a <_calloc_r+0x12>
 800ee36:	462a      	mov	r2, r5
 800ee38:	4621      	mov	r1, r4
 800ee3a:	f7fe f9ef 	bl	800d21c <memset>
 800ee3e:	e7f5      	b.n	800ee2c <_calloc_r+0x14>

0800ee40 <__ascii_mbtowc>:
 800ee40:	b082      	sub	sp, #8
 800ee42:	b901      	cbnz	r1, 800ee46 <__ascii_mbtowc+0x6>
 800ee44:	a901      	add	r1, sp, #4
 800ee46:	b142      	cbz	r2, 800ee5a <__ascii_mbtowc+0x1a>
 800ee48:	b14b      	cbz	r3, 800ee5e <__ascii_mbtowc+0x1e>
 800ee4a:	7813      	ldrb	r3, [r2, #0]
 800ee4c:	600b      	str	r3, [r1, #0]
 800ee4e:	7812      	ldrb	r2, [r2, #0]
 800ee50:	1e10      	subs	r0, r2, #0
 800ee52:	bf18      	it	ne
 800ee54:	2001      	movne	r0, #1
 800ee56:	b002      	add	sp, #8
 800ee58:	4770      	bx	lr
 800ee5a:	4610      	mov	r0, r2
 800ee5c:	e7fb      	b.n	800ee56 <__ascii_mbtowc+0x16>
 800ee5e:	f06f 0001 	mvn.w	r0, #1
 800ee62:	e7f8      	b.n	800ee56 <__ascii_mbtowc+0x16>

0800ee64 <__ascii_wctomb>:
 800ee64:	4603      	mov	r3, r0
 800ee66:	4608      	mov	r0, r1
 800ee68:	b141      	cbz	r1, 800ee7c <__ascii_wctomb+0x18>
 800ee6a:	2aff      	cmp	r2, #255	@ 0xff
 800ee6c:	d904      	bls.n	800ee78 <__ascii_wctomb+0x14>
 800ee6e:	228a      	movs	r2, #138	@ 0x8a
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	f04f 30ff 	mov.w	r0, #4294967295
 800ee76:	4770      	bx	lr
 800ee78:	700a      	strb	r2, [r1, #0]
 800ee7a:	2001      	movs	r0, #1
 800ee7c:	4770      	bx	lr
	...

0800ee80 <fiprintf>:
 800ee80:	b40e      	push	{r1, r2, r3}
 800ee82:	b503      	push	{r0, r1, lr}
 800ee84:	4601      	mov	r1, r0
 800ee86:	ab03      	add	r3, sp, #12
 800ee88:	4805      	ldr	r0, [pc, #20]	@ (800eea0 <fiprintf+0x20>)
 800ee8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee8e:	6800      	ldr	r0, [r0, #0]
 800ee90:	9301      	str	r3, [sp, #4]
 800ee92:	f7ff fd3d 	bl	800e910 <_vfiprintf_r>
 800ee96:	b002      	add	sp, #8
 800ee98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee9c:	b003      	add	sp, #12
 800ee9e:	4770      	bx	lr
 800eea0:	20000168 	.word	0x20000168

0800eea4 <abort>:
 800eea4:	b508      	push	{r3, lr}
 800eea6:	2006      	movs	r0, #6
 800eea8:	f000 f82c 	bl	800ef04 <raise>
 800eeac:	2001      	movs	r0, #1
 800eeae:	f7f4 fa9b 	bl	80033e8 <_exit>

0800eeb2 <_raise_r>:
 800eeb2:	291f      	cmp	r1, #31
 800eeb4:	b538      	push	{r3, r4, r5, lr}
 800eeb6:	4605      	mov	r5, r0
 800eeb8:	460c      	mov	r4, r1
 800eeba:	d904      	bls.n	800eec6 <_raise_r+0x14>
 800eebc:	2316      	movs	r3, #22
 800eebe:	6003      	str	r3, [r0, #0]
 800eec0:	f04f 30ff 	mov.w	r0, #4294967295
 800eec4:	bd38      	pop	{r3, r4, r5, pc}
 800eec6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eec8:	b112      	cbz	r2, 800eed0 <_raise_r+0x1e>
 800eeca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eece:	b94b      	cbnz	r3, 800eee4 <_raise_r+0x32>
 800eed0:	4628      	mov	r0, r5
 800eed2:	f000 f831 	bl	800ef38 <_getpid_r>
 800eed6:	4622      	mov	r2, r4
 800eed8:	4601      	mov	r1, r0
 800eeda:	4628      	mov	r0, r5
 800eedc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eee0:	f000 b818 	b.w	800ef14 <_kill_r>
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d00a      	beq.n	800eefe <_raise_r+0x4c>
 800eee8:	1c59      	adds	r1, r3, #1
 800eeea:	d103      	bne.n	800eef4 <_raise_r+0x42>
 800eeec:	2316      	movs	r3, #22
 800eeee:	6003      	str	r3, [r0, #0]
 800eef0:	2001      	movs	r0, #1
 800eef2:	e7e7      	b.n	800eec4 <_raise_r+0x12>
 800eef4:	2100      	movs	r1, #0
 800eef6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eefa:	4620      	mov	r0, r4
 800eefc:	4798      	blx	r3
 800eefe:	2000      	movs	r0, #0
 800ef00:	e7e0      	b.n	800eec4 <_raise_r+0x12>
	...

0800ef04 <raise>:
 800ef04:	4b02      	ldr	r3, [pc, #8]	@ (800ef10 <raise+0xc>)
 800ef06:	4601      	mov	r1, r0
 800ef08:	6818      	ldr	r0, [r3, #0]
 800ef0a:	f7ff bfd2 	b.w	800eeb2 <_raise_r>
 800ef0e:	bf00      	nop
 800ef10:	20000168 	.word	0x20000168

0800ef14 <_kill_r>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	4d07      	ldr	r5, [pc, #28]	@ (800ef34 <_kill_r+0x20>)
 800ef18:	2300      	movs	r3, #0
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	4611      	mov	r1, r2
 800ef20:	602b      	str	r3, [r5, #0]
 800ef22:	f7f4 fa51 	bl	80033c8 <_kill>
 800ef26:	1c43      	adds	r3, r0, #1
 800ef28:	d102      	bne.n	800ef30 <_kill_r+0x1c>
 800ef2a:	682b      	ldr	r3, [r5, #0]
 800ef2c:	b103      	cbz	r3, 800ef30 <_kill_r+0x1c>
 800ef2e:	6023      	str	r3, [r4, #0]
 800ef30:	bd38      	pop	{r3, r4, r5, pc}
 800ef32:	bf00      	nop
 800ef34:	2000233c 	.word	0x2000233c

0800ef38 <_getpid_r>:
 800ef38:	f7f4 ba3e 	b.w	80033b8 <_getpid>

0800ef3c <atan2>:
 800ef3c:	f000 b990 	b.w	800f260 <__ieee754_atan2>

0800ef40 <sqrt>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	ed2d 8b02 	vpush	{d8}
 800ef46:	ec55 4b10 	vmov	r4, r5, d0
 800ef4a:	f000 f8af 	bl	800f0ac <__ieee754_sqrt>
 800ef4e:	4622      	mov	r2, r4
 800ef50:	462b      	mov	r3, r5
 800ef52:	4620      	mov	r0, r4
 800ef54:	4629      	mov	r1, r5
 800ef56:	eeb0 8a40 	vmov.f32	s16, s0
 800ef5a:	eef0 8a60 	vmov.f32	s17, s1
 800ef5e:	f7f1 fde5 	bl	8000b2c <__aeabi_dcmpun>
 800ef62:	b990      	cbnz	r0, 800ef8a <sqrt+0x4a>
 800ef64:	2200      	movs	r2, #0
 800ef66:	2300      	movs	r3, #0
 800ef68:	4620      	mov	r0, r4
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	f7f1 fdb6 	bl	8000adc <__aeabi_dcmplt>
 800ef70:	b158      	cbz	r0, 800ef8a <sqrt+0x4a>
 800ef72:	f7fe f9a5 	bl	800d2c0 <__errno>
 800ef76:	2321      	movs	r3, #33	@ 0x21
 800ef78:	6003      	str	r3, [r0, #0]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	4610      	mov	r0, r2
 800ef80:	4619      	mov	r1, r3
 800ef82:	f7f1 fc63 	bl	800084c <__aeabi_ddiv>
 800ef86:	ec41 0b18 	vmov	d8, r0, r1
 800ef8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ef8e:	eef0 0a68 	vmov.f32	s1, s17
 800ef92:	ecbd 8b02 	vpop	{d8}
 800ef96:	bd38      	pop	{r3, r4, r5, pc}

0800ef98 <cosf>:
 800ef98:	ee10 3a10 	vmov	r3, s0
 800ef9c:	b507      	push	{r0, r1, r2, lr}
 800ef9e:	4a1e      	ldr	r2, [pc, #120]	@ (800f018 <cosf+0x80>)
 800efa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d806      	bhi.n	800efb6 <cosf+0x1e>
 800efa8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f01c <cosf+0x84>
 800efac:	b003      	add	sp, #12
 800efae:	f85d eb04 	ldr.w	lr, [sp], #4
 800efb2:	f000 bbbd 	b.w	800f730 <__kernel_cosf>
 800efb6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800efba:	d304      	bcc.n	800efc6 <cosf+0x2e>
 800efbc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800efc0:	b003      	add	sp, #12
 800efc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800efc6:	4668      	mov	r0, sp
 800efc8:	f000 fc52 	bl	800f870 <__ieee754_rem_pio2f>
 800efcc:	f000 0003 	and.w	r0, r0, #3
 800efd0:	2801      	cmp	r0, #1
 800efd2:	d009      	beq.n	800efe8 <cosf+0x50>
 800efd4:	2802      	cmp	r0, #2
 800efd6:	d010      	beq.n	800effa <cosf+0x62>
 800efd8:	b9b0      	cbnz	r0, 800f008 <cosf+0x70>
 800efda:	eddd 0a01 	vldr	s1, [sp, #4]
 800efde:	ed9d 0a00 	vldr	s0, [sp]
 800efe2:	f000 fba5 	bl	800f730 <__kernel_cosf>
 800efe6:	e7eb      	b.n	800efc0 <cosf+0x28>
 800efe8:	eddd 0a01 	vldr	s1, [sp, #4]
 800efec:	ed9d 0a00 	vldr	s0, [sp]
 800eff0:	f000 fbf6 	bl	800f7e0 <__kernel_sinf>
 800eff4:	eeb1 0a40 	vneg.f32	s0, s0
 800eff8:	e7e2      	b.n	800efc0 <cosf+0x28>
 800effa:	eddd 0a01 	vldr	s1, [sp, #4]
 800effe:	ed9d 0a00 	vldr	s0, [sp]
 800f002:	f000 fb95 	bl	800f730 <__kernel_cosf>
 800f006:	e7f5      	b.n	800eff4 <cosf+0x5c>
 800f008:	eddd 0a01 	vldr	s1, [sp, #4]
 800f00c:	ed9d 0a00 	vldr	s0, [sp]
 800f010:	2001      	movs	r0, #1
 800f012:	f000 fbe5 	bl	800f7e0 <__kernel_sinf>
 800f016:	e7d3      	b.n	800efc0 <cosf+0x28>
 800f018:	3f490fd8 	.word	0x3f490fd8
 800f01c:	00000000 	.word	0x00000000

0800f020 <sinf>:
 800f020:	ee10 3a10 	vmov	r3, s0
 800f024:	b507      	push	{r0, r1, r2, lr}
 800f026:	4a1f      	ldr	r2, [pc, #124]	@ (800f0a4 <sinf+0x84>)
 800f028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d807      	bhi.n	800f040 <sinf+0x20>
 800f030:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f0a8 <sinf+0x88>
 800f034:	2000      	movs	r0, #0
 800f036:	b003      	add	sp, #12
 800f038:	f85d eb04 	ldr.w	lr, [sp], #4
 800f03c:	f000 bbd0 	b.w	800f7e0 <__kernel_sinf>
 800f040:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f044:	d304      	bcc.n	800f050 <sinf+0x30>
 800f046:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f04a:	b003      	add	sp, #12
 800f04c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f050:	4668      	mov	r0, sp
 800f052:	f000 fc0d 	bl	800f870 <__ieee754_rem_pio2f>
 800f056:	f000 0003 	and.w	r0, r0, #3
 800f05a:	2801      	cmp	r0, #1
 800f05c:	d00a      	beq.n	800f074 <sinf+0x54>
 800f05e:	2802      	cmp	r0, #2
 800f060:	d00f      	beq.n	800f082 <sinf+0x62>
 800f062:	b9c0      	cbnz	r0, 800f096 <sinf+0x76>
 800f064:	eddd 0a01 	vldr	s1, [sp, #4]
 800f068:	ed9d 0a00 	vldr	s0, [sp]
 800f06c:	2001      	movs	r0, #1
 800f06e:	f000 fbb7 	bl	800f7e0 <__kernel_sinf>
 800f072:	e7ea      	b.n	800f04a <sinf+0x2a>
 800f074:	eddd 0a01 	vldr	s1, [sp, #4]
 800f078:	ed9d 0a00 	vldr	s0, [sp]
 800f07c:	f000 fb58 	bl	800f730 <__kernel_cosf>
 800f080:	e7e3      	b.n	800f04a <sinf+0x2a>
 800f082:	eddd 0a01 	vldr	s1, [sp, #4]
 800f086:	ed9d 0a00 	vldr	s0, [sp]
 800f08a:	2001      	movs	r0, #1
 800f08c:	f000 fba8 	bl	800f7e0 <__kernel_sinf>
 800f090:	eeb1 0a40 	vneg.f32	s0, s0
 800f094:	e7d9      	b.n	800f04a <sinf+0x2a>
 800f096:	eddd 0a01 	vldr	s1, [sp, #4]
 800f09a:	ed9d 0a00 	vldr	s0, [sp]
 800f09e:	f000 fb47 	bl	800f730 <__kernel_cosf>
 800f0a2:	e7f5      	b.n	800f090 <sinf+0x70>
 800f0a4:	3f490fd8 	.word	0x3f490fd8
 800f0a8:	00000000 	.word	0x00000000

0800f0ac <__ieee754_sqrt>:
 800f0ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b0:	4a68      	ldr	r2, [pc, #416]	@ (800f254 <__ieee754_sqrt+0x1a8>)
 800f0b2:	ec55 4b10 	vmov	r4, r5, d0
 800f0b6:	43aa      	bics	r2, r5
 800f0b8:	462b      	mov	r3, r5
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	d110      	bne.n	800f0e0 <__ieee754_sqrt+0x34>
 800f0be:	4622      	mov	r2, r4
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	f7f1 fa98 	bl	80005f8 <__aeabi_dmul>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	f7f1 f8dc 	bl	800028c <__adddf3>
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	460d      	mov	r5, r1
 800f0d8:	ec45 4b10 	vmov	d0, r4, r5
 800f0dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e0:	2d00      	cmp	r5, #0
 800f0e2:	dc0e      	bgt.n	800f102 <__ieee754_sqrt+0x56>
 800f0e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f0e8:	4322      	orrs	r2, r4
 800f0ea:	d0f5      	beq.n	800f0d8 <__ieee754_sqrt+0x2c>
 800f0ec:	b19d      	cbz	r5, 800f116 <__ieee754_sqrt+0x6a>
 800f0ee:	4622      	mov	r2, r4
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	f7f1 f8c8 	bl	8000288 <__aeabi_dsub>
 800f0f8:	4602      	mov	r2, r0
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	f7f1 fba6 	bl	800084c <__aeabi_ddiv>
 800f100:	e7e8      	b.n	800f0d4 <__ieee754_sqrt+0x28>
 800f102:	152a      	asrs	r2, r5, #20
 800f104:	d115      	bne.n	800f132 <__ieee754_sqrt+0x86>
 800f106:	2000      	movs	r0, #0
 800f108:	e009      	b.n	800f11e <__ieee754_sqrt+0x72>
 800f10a:	0acb      	lsrs	r3, r1, #11
 800f10c:	3a15      	subs	r2, #21
 800f10e:	0549      	lsls	r1, r1, #21
 800f110:	2b00      	cmp	r3, #0
 800f112:	d0fa      	beq.n	800f10a <__ieee754_sqrt+0x5e>
 800f114:	e7f7      	b.n	800f106 <__ieee754_sqrt+0x5a>
 800f116:	462a      	mov	r2, r5
 800f118:	e7fa      	b.n	800f110 <__ieee754_sqrt+0x64>
 800f11a:	005b      	lsls	r3, r3, #1
 800f11c:	3001      	adds	r0, #1
 800f11e:	02dc      	lsls	r4, r3, #11
 800f120:	d5fb      	bpl.n	800f11a <__ieee754_sqrt+0x6e>
 800f122:	1e44      	subs	r4, r0, #1
 800f124:	1b12      	subs	r2, r2, r4
 800f126:	f1c0 0420 	rsb	r4, r0, #32
 800f12a:	fa21 f404 	lsr.w	r4, r1, r4
 800f12e:	4323      	orrs	r3, r4
 800f130:	4081      	lsls	r1, r0
 800f132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f136:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f13a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f13e:	07d2      	lsls	r2, r2, #31
 800f140:	bf5c      	itt	pl
 800f142:	005b      	lslpl	r3, r3, #1
 800f144:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f148:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f14c:	bf58      	it	pl
 800f14e:	0049      	lslpl	r1, r1, #1
 800f150:	2600      	movs	r6, #0
 800f152:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f156:	106d      	asrs	r5, r5, #1
 800f158:	0049      	lsls	r1, r1, #1
 800f15a:	2016      	movs	r0, #22
 800f15c:	4632      	mov	r2, r6
 800f15e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f162:	1917      	adds	r7, r2, r4
 800f164:	429f      	cmp	r7, r3
 800f166:	bfde      	ittt	le
 800f168:	193a      	addle	r2, r7, r4
 800f16a:	1bdb      	suble	r3, r3, r7
 800f16c:	1936      	addle	r6, r6, r4
 800f16e:	0fcf      	lsrs	r7, r1, #31
 800f170:	3801      	subs	r0, #1
 800f172:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f176:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f17a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f17e:	d1f0      	bne.n	800f162 <__ieee754_sqrt+0xb6>
 800f180:	4604      	mov	r4, r0
 800f182:	2720      	movs	r7, #32
 800f184:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f188:	429a      	cmp	r2, r3
 800f18a:	eb00 0e0c 	add.w	lr, r0, ip
 800f18e:	db02      	blt.n	800f196 <__ieee754_sqrt+0xea>
 800f190:	d113      	bne.n	800f1ba <__ieee754_sqrt+0x10e>
 800f192:	458e      	cmp	lr, r1
 800f194:	d811      	bhi.n	800f1ba <__ieee754_sqrt+0x10e>
 800f196:	f1be 0f00 	cmp.w	lr, #0
 800f19a:	eb0e 000c 	add.w	r0, lr, ip
 800f19e:	da42      	bge.n	800f226 <__ieee754_sqrt+0x17a>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	db40      	blt.n	800f226 <__ieee754_sqrt+0x17a>
 800f1a4:	f102 0801 	add.w	r8, r2, #1
 800f1a8:	1a9b      	subs	r3, r3, r2
 800f1aa:	458e      	cmp	lr, r1
 800f1ac:	bf88      	it	hi
 800f1ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f1b2:	eba1 010e 	sub.w	r1, r1, lr
 800f1b6:	4464      	add	r4, ip
 800f1b8:	4642      	mov	r2, r8
 800f1ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f1be:	3f01      	subs	r7, #1
 800f1c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f1c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f1c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f1cc:	d1dc      	bne.n	800f188 <__ieee754_sqrt+0xdc>
 800f1ce:	4319      	orrs	r1, r3
 800f1d0:	d01b      	beq.n	800f20a <__ieee754_sqrt+0x15e>
 800f1d2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f258 <__ieee754_sqrt+0x1ac>
 800f1d6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f25c <__ieee754_sqrt+0x1b0>
 800f1da:	e9da 0100 	ldrd	r0, r1, [sl]
 800f1de:	e9db 2300 	ldrd	r2, r3, [fp]
 800f1e2:	f7f1 f851 	bl	8000288 <__aeabi_dsub>
 800f1e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	f7f1 fc7d 	bl	8000af0 <__aeabi_dcmple>
 800f1f6:	b140      	cbz	r0, 800f20a <__ieee754_sqrt+0x15e>
 800f1f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f1fc:	e9da 0100 	ldrd	r0, r1, [sl]
 800f200:	e9db 2300 	ldrd	r2, r3, [fp]
 800f204:	d111      	bne.n	800f22a <__ieee754_sqrt+0x17e>
 800f206:	3601      	adds	r6, #1
 800f208:	463c      	mov	r4, r7
 800f20a:	1072      	asrs	r2, r6, #1
 800f20c:	0863      	lsrs	r3, r4, #1
 800f20e:	07f1      	lsls	r1, r6, #31
 800f210:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f214:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f218:	bf48      	it	mi
 800f21a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f21e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f222:	4618      	mov	r0, r3
 800f224:	e756      	b.n	800f0d4 <__ieee754_sqrt+0x28>
 800f226:	4690      	mov	r8, r2
 800f228:	e7be      	b.n	800f1a8 <__ieee754_sqrt+0xfc>
 800f22a:	f7f1 f82f 	bl	800028c <__adddf3>
 800f22e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f232:	4602      	mov	r2, r0
 800f234:	460b      	mov	r3, r1
 800f236:	4640      	mov	r0, r8
 800f238:	4649      	mov	r1, r9
 800f23a:	f7f1 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800f23e:	b120      	cbz	r0, 800f24a <__ieee754_sqrt+0x19e>
 800f240:	1ca0      	adds	r0, r4, #2
 800f242:	bf08      	it	eq
 800f244:	3601      	addeq	r6, #1
 800f246:	3402      	adds	r4, #2
 800f248:	e7df      	b.n	800f20a <__ieee754_sqrt+0x15e>
 800f24a:	1c63      	adds	r3, r4, #1
 800f24c:	f023 0401 	bic.w	r4, r3, #1
 800f250:	e7db      	b.n	800f20a <__ieee754_sqrt+0x15e>
 800f252:	bf00      	nop
 800f254:	7ff00000 	.word	0x7ff00000
 800f258:	20000330 	.word	0x20000330
 800f25c:	20000328 	.word	0x20000328

0800f260 <__ieee754_atan2>:
 800f260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f264:	ec57 6b11 	vmov	r6, r7, d1
 800f268:	4273      	negs	r3, r6
 800f26a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f3e8 <__ieee754_atan2+0x188>
 800f26e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f272:	4333      	orrs	r3, r6
 800f274:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f278:	4543      	cmp	r3, r8
 800f27a:	ec51 0b10 	vmov	r0, r1, d0
 800f27e:	4635      	mov	r5, r6
 800f280:	d809      	bhi.n	800f296 <__ieee754_atan2+0x36>
 800f282:	4244      	negs	r4, r0
 800f284:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f288:	4304      	orrs	r4, r0
 800f28a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f28e:	4544      	cmp	r4, r8
 800f290:	468e      	mov	lr, r1
 800f292:	4681      	mov	r9, r0
 800f294:	d907      	bls.n	800f2a6 <__ieee754_atan2+0x46>
 800f296:	4632      	mov	r2, r6
 800f298:	463b      	mov	r3, r7
 800f29a:	f7f0 fff7 	bl	800028c <__adddf3>
 800f29e:	ec41 0b10 	vmov	d0, r0, r1
 800f2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f2aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f2ae:	4334      	orrs	r4, r6
 800f2b0:	d103      	bne.n	800f2ba <__ieee754_atan2+0x5a>
 800f2b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2b6:	f000 b89b 	b.w	800f3f0 <atan>
 800f2ba:	17bc      	asrs	r4, r7, #30
 800f2bc:	f004 0402 	and.w	r4, r4, #2
 800f2c0:	ea53 0909 	orrs.w	r9, r3, r9
 800f2c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f2c8:	d107      	bne.n	800f2da <__ieee754_atan2+0x7a>
 800f2ca:	2c02      	cmp	r4, #2
 800f2cc:	d05f      	beq.n	800f38e <__ieee754_atan2+0x12e>
 800f2ce:	2c03      	cmp	r4, #3
 800f2d0:	d1e5      	bne.n	800f29e <__ieee754_atan2+0x3e>
 800f2d2:	a141      	add	r1, pc, #260	@ (adr r1, 800f3d8 <__ieee754_atan2+0x178>)
 800f2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2d8:	e7e1      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f2da:	4315      	orrs	r5, r2
 800f2dc:	d106      	bne.n	800f2ec <__ieee754_atan2+0x8c>
 800f2de:	f1be 0f00 	cmp.w	lr, #0
 800f2e2:	da5f      	bge.n	800f3a4 <__ieee754_atan2+0x144>
 800f2e4:	a13e      	add	r1, pc, #248	@ (adr r1, 800f3e0 <__ieee754_atan2+0x180>)
 800f2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2ea:	e7d8      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f2ec:	4542      	cmp	r2, r8
 800f2ee:	d10f      	bne.n	800f310 <__ieee754_atan2+0xb0>
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800f2f6:	d107      	bne.n	800f308 <__ieee754_atan2+0xa8>
 800f2f8:	2c02      	cmp	r4, #2
 800f2fa:	d84c      	bhi.n	800f396 <__ieee754_atan2+0x136>
 800f2fc:	4b34      	ldr	r3, [pc, #208]	@ (800f3d0 <__ieee754_atan2+0x170>)
 800f2fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f302:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f306:	e7ca      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f308:	2c02      	cmp	r4, #2
 800f30a:	d848      	bhi.n	800f39e <__ieee754_atan2+0x13e>
 800f30c:	4b31      	ldr	r3, [pc, #196]	@ (800f3d4 <__ieee754_atan2+0x174>)
 800f30e:	e7f6      	b.n	800f2fe <__ieee754_atan2+0x9e>
 800f310:	4543      	cmp	r3, r8
 800f312:	d0e4      	beq.n	800f2de <__ieee754_atan2+0x7e>
 800f314:	1a9b      	subs	r3, r3, r2
 800f316:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f31a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f31e:	da1e      	bge.n	800f35e <__ieee754_atan2+0xfe>
 800f320:	2f00      	cmp	r7, #0
 800f322:	da01      	bge.n	800f328 <__ieee754_atan2+0xc8>
 800f324:	323c      	adds	r2, #60	@ 0x3c
 800f326:	db1e      	blt.n	800f366 <__ieee754_atan2+0x106>
 800f328:	4632      	mov	r2, r6
 800f32a:	463b      	mov	r3, r7
 800f32c:	f7f1 fa8e 	bl	800084c <__aeabi_ddiv>
 800f330:	ec41 0b10 	vmov	d0, r0, r1
 800f334:	f000 f9f4 	bl	800f720 <fabs>
 800f338:	f000 f85a 	bl	800f3f0 <atan>
 800f33c:	ec51 0b10 	vmov	r0, r1, d0
 800f340:	2c01      	cmp	r4, #1
 800f342:	d013      	beq.n	800f36c <__ieee754_atan2+0x10c>
 800f344:	2c02      	cmp	r4, #2
 800f346:	d015      	beq.n	800f374 <__ieee754_atan2+0x114>
 800f348:	2c00      	cmp	r4, #0
 800f34a:	d0a8      	beq.n	800f29e <__ieee754_atan2+0x3e>
 800f34c:	a318      	add	r3, pc, #96	@ (adr r3, 800f3b0 <__ieee754_atan2+0x150>)
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	f7f0 ff99 	bl	8000288 <__aeabi_dsub>
 800f356:	a318      	add	r3, pc, #96	@ (adr r3, 800f3b8 <__ieee754_atan2+0x158>)
 800f358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35c:	e014      	b.n	800f388 <__ieee754_atan2+0x128>
 800f35e:	a118      	add	r1, pc, #96	@ (adr r1, 800f3c0 <__ieee754_atan2+0x160>)
 800f360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f364:	e7ec      	b.n	800f340 <__ieee754_atan2+0xe0>
 800f366:	2000      	movs	r0, #0
 800f368:	2100      	movs	r1, #0
 800f36a:	e7e9      	b.n	800f340 <__ieee754_atan2+0xe0>
 800f36c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f370:	4619      	mov	r1, r3
 800f372:	e794      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f374:	a30e      	add	r3, pc, #56	@ (adr r3, 800f3b0 <__ieee754_atan2+0x150>)
 800f376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37a:	f7f0 ff85 	bl	8000288 <__aeabi_dsub>
 800f37e:	4602      	mov	r2, r0
 800f380:	460b      	mov	r3, r1
 800f382:	a10d      	add	r1, pc, #52	@ (adr r1, 800f3b8 <__ieee754_atan2+0x158>)
 800f384:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f388:	f7f0 ff7e 	bl	8000288 <__aeabi_dsub>
 800f38c:	e787      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f38e:	a10a      	add	r1, pc, #40	@ (adr r1, 800f3b8 <__ieee754_atan2+0x158>)
 800f390:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f394:	e783      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f396:	a10c      	add	r1, pc, #48	@ (adr r1, 800f3c8 <__ieee754_atan2+0x168>)
 800f398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f39c:	e77f      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f39e:	2000      	movs	r0, #0
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	e77c      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f3a4:	a106      	add	r1, pc, #24	@ (adr r1, 800f3c0 <__ieee754_atan2+0x160>)
 800f3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3aa:	e778      	b.n	800f29e <__ieee754_atan2+0x3e>
 800f3ac:	f3af 8000 	nop.w
 800f3b0:	33145c07 	.word	0x33145c07
 800f3b4:	3ca1a626 	.word	0x3ca1a626
 800f3b8:	54442d18 	.word	0x54442d18
 800f3bc:	400921fb 	.word	0x400921fb
 800f3c0:	54442d18 	.word	0x54442d18
 800f3c4:	3ff921fb 	.word	0x3ff921fb
 800f3c8:	54442d18 	.word	0x54442d18
 800f3cc:	3fe921fb 	.word	0x3fe921fb
 800f3d0:	08010550 	.word	0x08010550
 800f3d4:	08010538 	.word	0x08010538
 800f3d8:	54442d18 	.word	0x54442d18
 800f3dc:	c00921fb 	.word	0xc00921fb
 800f3e0:	54442d18 	.word	0x54442d18
 800f3e4:	bff921fb 	.word	0xbff921fb
 800f3e8:	7ff00000 	.word	0x7ff00000
 800f3ec:	00000000 	.word	0x00000000

0800f3f0 <atan>:
 800f3f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f4:	ec55 4b10 	vmov	r4, r5, d0
 800f3f8:	4bbf      	ldr	r3, [pc, #764]	@ (800f6f8 <atan+0x308>)
 800f3fa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f3fe:	429e      	cmp	r6, r3
 800f400:	46ab      	mov	fp, r5
 800f402:	d918      	bls.n	800f436 <atan+0x46>
 800f404:	4bbd      	ldr	r3, [pc, #756]	@ (800f6fc <atan+0x30c>)
 800f406:	429e      	cmp	r6, r3
 800f408:	d801      	bhi.n	800f40e <atan+0x1e>
 800f40a:	d109      	bne.n	800f420 <atan+0x30>
 800f40c:	b144      	cbz	r4, 800f420 <atan+0x30>
 800f40e:	4622      	mov	r2, r4
 800f410:	462b      	mov	r3, r5
 800f412:	4620      	mov	r0, r4
 800f414:	4629      	mov	r1, r5
 800f416:	f7f0 ff39 	bl	800028c <__adddf3>
 800f41a:	4604      	mov	r4, r0
 800f41c:	460d      	mov	r5, r1
 800f41e:	e006      	b.n	800f42e <atan+0x3e>
 800f420:	f1bb 0f00 	cmp.w	fp, #0
 800f424:	f340 812b 	ble.w	800f67e <atan+0x28e>
 800f428:	a597      	add	r5, pc, #604	@ (adr r5, 800f688 <atan+0x298>)
 800f42a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f42e:	ec45 4b10 	vmov	d0, r4, r5
 800f432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f436:	4bb2      	ldr	r3, [pc, #712]	@ (800f700 <atan+0x310>)
 800f438:	429e      	cmp	r6, r3
 800f43a:	d813      	bhi.n	800f464 <atan+0x74>
 800f43c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f440:	429e      	cmp	r6, r3
 800f442:	d80c      	bhi.n	800f45e <atan+0x6e>
 800f444:	a392      	add	r3, pc, #584	@ (adr r3, 800f690 <atan+0x2a0>)
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	4620      	mov	r0, r4
 800f44c:	4629      	mov	r1, r5
 800f44e:	f7f0 ff1d 	bl	800028c <__adddf3>
 800f452:	4bac      	ldr	r3, [pc, #688]	@ (800f704 <atan+0x314>)
 800f454:	2200      	movs	r2, #0
 800f456:	f7f1 fb5f 	bl	8000b18 <__aeabi_dcmpgt>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d1e7      	bne.n	800f42e <atan+0x3e>
 800f45e:	f04f 3aff 	mov.w	sl, #4294967295
 800f462:	e029      	b.n	800f4b8 <atan+0xc8>
 800f464:	f000 f95c 	bl	800f720 <fabs>
 800f468:	4ba7      	ldr	r3, [pc, #668]	@ (800f708 <atan+0x318>)
 800f46a:	429e      	cmp	r6, r3
 800f46c:	ec55 4b10 	vmov	r4, r5, d0
 800f470:	f200 80bc 	bhi.w	800f5ec <atan+0x1fc>
 800f474:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f478:	429e      	cmp	r6, r3
 800f47a:	f200 809e 	bhi.w	800f5ba <atan+0x1ca>
 800f47e:	4622      	mov	r2, r4
 800f480:	462b      	mov	r3, r5
 800f482:	4620      	mov	r0, r4
 800f484:	4629      	mov	r1, r5
 800f486:	f7f0 ff01 	bl	800028c <__adddf3>
 800f48a:	4b9e      	ldr	r3, [pc, #632]	@ (800f704 <atan+0x314>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	f7f0 fefb 	bl	8000288 <__aeabi_dsub>
 800f492:	2200      	movs	r2, #0
 800f494:	4606      	mov	r6, r0
 800f496:	460f      	mov	r7, r1
 800f498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f49c:	4620      	mov	r0, r4
 800f49e:	4629      	mov	r1, r5
 800f4a0:	f7f0 fef4 	bl	800028c <__adddf3>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	4639      	mov	r1, r7
 800f4ac:	f7f1 f9ce 	bl	800084c <__aeabi_ddiv>
 800f4b0:	f04f 0a00 	mov.w	sl, #0
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	460d      	mov	r5, r1
 800f4b8:	4622      	mov	r2, r4
 800f4ba:	462b      	mov	r3, r5
 800f4bc:	4620      	mov	r0, r4
 800f4be:	4629      	mov	r1, r5
 800f4c0:	f7f1 f89a 	bl	80005f8 <__aeabi_dmul>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	4680      	mov	r8, r0
 800f4ca:	4689      	mov	r9, r1
 800f4cc:	f7f1 f894 	bl	80005f8 <__aeabi_dmul>
 800f4d0:	a371      	add	r3, pc, #452	@ (adr r3, 800f698 <atan+0x2a8>)
 800f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d6:	4606      	mov	r6, r0
 800f4d8:	460f      	mov	r7, r1
 800f4da:	f7f1 f88d 	bl	80005f8 <__aeabi_dmul>
 800f4de:	a370      	add	r3, pc, #448	@ (adr r3, 800f6a0 <atan+0x2b0>)
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	f7f0 fed2 	bl	800028c <__adddf3>
 800f4e8:	4632      	mov	r2, r6
 800f4ea:	463b      	mov	r3, r7
 800f4ec:	f7f1 f884 	bl	80005f8 <__aeabi_dmul>
 800f4f0:	a36d      	add	r3, pc, #436	@ (adr r3, 800f6a8 <atan+0x2b8>)
 800f4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f6:	f7f0 fec9 	bl	800028c <__adddf3>
 800f4fa:	4632      	mov	r2, r6
 800f4fc:	463b      	mov	r3, r7
 800f4fe:	f7f1 f87b 	bl	80005f8 <__aeabi_dmul>
 800f502:	a36b      	add	r3, pc, #428	@ (adr r3, 800f6b0 <atan+0x2c0>)
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	f7f0 fec0 	bl	800028c <__adddf3>
 800f50c:	4632      	mov	r2, r6
 800f50e:	463b      	mov	r3, r7
 800f510:	f7f1 f872 	bl	80005f8 <__aeabi_dmul>
 800f514:	a368      	add	r3, pc, #416	@ (adr r3, 800f6b8 <atan+0x2c8>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	f7f0 feb7 	bl	800028c <__adddf3>
 800f51e:	4632      	mov	r2, r6
 800f520:	463b      	mov	r3, r7
 800f522:	f7f1 f869 	bl	80005f8 <__aeabi_dmul>
 800f526:	a366      	add	r3, pc, #408	@ (adr r3, 800f6c0 <atan+0x2d0>)
 800f528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52c:	f7f0 feae 	bl	800028c <__adddf3>
 800f530:	4642      	mov	r2, r8
 800f532:	464b      	mov	r3, r9
 800f534:	f7f1 f860 	bl	80005f8 <__aeabi_dmul>
 800f538:	a363      	add	r3, pc, #396	@ (adr r3, 800f6c8 <atan+0x2d8>)
 800f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53e:	4680      	mov	r8, r0
 800f540:	4689      	mov	r9, r1
 800f542:	4630      	mov	r0, r6
 800f544:	4639      	mov	r1, r7
 800f546:	f7f1 f857 	bl	80005f8 <__aeabi_dmul>
 800f54a:	a361      	add	r3, pc, #388	@ (adr r3, 800f6d0 <atan+0x2e0>)
 800f54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f550:	f7f0 fe9a 	bl	8000288 <__aeabi_dsub>
 800f554:	4632      	mov	r2, r6
 800f556:	463b      	mov	r3, r7
 800f558:	f7f1 f84e 	bl	80005f8 <__aeabi_dmul>
 800f55c:	a35e      	add	r3, pc, #376	@ (adr r3, 800f6d8 <atan+0x2e8>)
 800f55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f562:	f7f0 fe91 	bl	8000288 <__aeabi_dsub>
 800f566:	4632      	mov	r2, r6
 800f568:	463b      	mov	r3, r7
 800f56a:	f7f1 f845 	bl	80005f8 <__aeabi_dmul>
 800f56e:	a35c      	add	r3, pc, #368	@ (adr r3, 800f6e0 <atan+0x2f0>)
 800f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f574:	f7f0 fe88 	bl	8000288 <__aeabi_dsub>
 800f578:	4632      	mov	r2, r6
 800f57a:	463b      	mov	r3, r7
 800f57c:	f7f1 f83c 	bl	80005f8 <__aeabi_dmul>
 800f580:	a359      	add	r3, pc, #356	@ (adr r3, 800f6e8 <atan+0x2f8>)
 800f582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f586:	f7f0 fe7f 	bl	8000288 <__aeabi_dsub>
 800f58a:	4632      	mov	r2, r6
 800f58c:	463b      	mov	r3, r7
 800f58e:	f7f1 f833 	bl	80005f8 <__aeabi_dmul>
 800f592:	4602      	mov	r2, r0
 800f594:	460b      	mov	r3, r1
 800f596:	4640      	mov	r0, r8
 800f598:	4649      	mov	r1, r9
 800f59a:	f7f0 fe77 	bl	800028c <__adddf3>
 800f59e:	4622      	mov	r2, r4
 800f5a0:	462b      	mov	r3, r5
 800f5a2:	f7f1 f829 	bl	80005f8 <__aeabi_dmul>
 800f5a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	d148      	bne.n	800f642 <atan+0x252>
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	f7f0 fe68 	bl	8000288 <__aeabi_dsub>
 800f5b8:	e72f      	b.n	800f41a <atan+0x2a>
 800f5ba:	4b52      	ldr	r3, [pc, #328]	@ (800f704 <atan+0x314>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	4620      	mov	r0, r4
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	f7f0 fe61 	bl	8000288 <__aeabi_dsub>
 800f5c6:	4b4f      	ldr	r3, [pc, #316]	@ (800f704 <atan+0x314>)
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	460f      	mov	r7, r1
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	4629      	mov	r1, r5
 800f5d2:	f7f0 fe5b 	bl	800028c <__adddf3>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	4630      	mov	r0, r6
 800f5dc:	4639      	mov	r1, r7
 800f5de:	f7f1 f935 	bl	800084c <__aeabi_ddiv>
 800f5e2:	f04f 0a01 	mov.w	sl, #1
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	460d      	mov	r5, r1
 800f5ea:	e765      	b.n	800f4b8 <atan+0xc8>
 800f5ec:	4b47      	ldr	r3, [pc, #284]	@ (800f70c <atan+0x31c>)
 800f5ee:	429e      	cmp	r6, r3
 800f5f0:	d21c      	bcs.n	800f62c <atan+0x23c>
 800f5f2:	4b47      	ldr	r3, [pc, #284]	@ (800f710 <atan+0x320>)
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	f7f0 fe45 	bl	8000288 <__aeabi_dsub>
 800f5fe:	4b44      	ldr	r3, [pc, #272]	@ (800f710 <atan+0x320>)
 800f600:	4606      	mov	r6, r0
 800f602:	460f      	mov	r7, r1
 800f604:	2200      	movs	r2, #0
 800f606:	4620      	mov	r0, r4
 800f608:	4629      	mov	r1, r5
 800f60a:	f7f0 fff5 	bl	80005f8 <__aeabi_dmul>
 800f60e:	4b3d      	ldr	r3, [pc, #244]	@ (800f704 <atan+0x314>)
 800f610:	2200      	movs	r2, #0
 800f612:	f7f0 fe3b 	bl	800028c <__adddf3>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	4630      	mov	r0, r6
 800f61c:	4639      	mov	r1, r7
 800f61e:	f7f1 f915 	bl	800084c <__aeabi_ddiv>
 800f622:	f04f 0a02 	mov.w	sl, #2
 800f626:	4604      	mov	r4, r0
 800f628:	460d      	mov	r5, r1
 800f62a:	e745      	b.n	800f4b8 <atan+0xc8>
 800f62c:	4622      	mov	r2, r4
 800f62e:	462b      	mov	r3, r5
 800f630:	4938      	ldr	r1, [pc, #224]	@ (800f714 <atan+0x324>)
 800f632:	2000      	movs	r0, #0
 800f634:	f7f1 f90a 	bl	800084c <__aeabi_ddiv>
 800f638:	f04f 0a03 	mov.w	sl, #3
 800f63c:	4604      	mov	r4, r0
 800f63e:	460d      	mov	r5, r1
 800f640:	e73a      	b.n	800f4b8 <atan+0xc8>
 800f642:	4b35      	ldr	r3, [pc, #212]	@ (800f718 <atan+0x328>)
 800f644:	4e35      	ldr	r6, [pc, #212]	@ (800f71c <atan+0x32c>)
 800f646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64e:	f7f0 fe1b 	bl	8000288 <__aeabi_dsub>
 800f652:	4622      	mov	r2, r4
 800f654:	462b      	mov	r3, r5
 800f656:	f7f0 fe17 	bl	8000288 <__aeabi_dsub>
 800f65a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f666:	f7f0 fe0f 	bl	8000288 <__aeabi_dsub>
 800f66a:	f1bb 0f00 	cmp.w	fp, #0
 800f66e:	4604      	mov	r4, r0
 800f670:	460d      	mov	r5, r1
 800f672:	f6bf aedc 	bge.w	800f42e <atan+0x3e>
 800f676:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f67a:	461d      	mov	r5, r3
 800f67c:	e6d7      	b.n	800f42e <atan+0x3e>
 800f67e:	a51c      	add	r5, pc, #112	@ (adr r5, 800f6f0 <atan+0x300>)
 800f680:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f684:	e6d3      	b.n	800f42e <atan+0x3e>
 800f686:	bf00      	nop
 800f688:	54442d18 	.word	0x54442d18
 800f68c:	3ff921fb 	.word	0x3ff921fb
 800f690:	8800759c 	.word	0x8800759c
 800f694:	7e37e43c 	.word	0x7e37e43c
 800f698:	e322da11 	.word	0xe322da11
 800f69c:	3f90ad3a 	.word	0x3f90ad3a
 800f6a0:	24760deb 	.word	0x24760deb
 800f6a4:	3fa97b4b 	.word	0x3fa97b4b
 800f6a8:	a0d03d51 	.word	0xa0d03d51
 800f6ac:	3fb10d66 	.word	0x3fb10d66
 800f6b0:	c54c206e 	.word	0xc54c206e
 800f6b4:	3fb745cd 	.word	0x3fb745cd
 800f6b8:	920083ff 	.word	0x920083ff
 800f6bc:	3fc24924 	.word	0x3fc24924
 800f6c0:	5555550d 	.word	0x5555550d
 800f6c4:	3fd55555 	.word	0x3fd55555
 800f6c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f6cc:	bfa2b444 	.word	0xbfa2b444
 800f6d0:	52defd9a 	.word	0x52defd9a
 800f6d4:	3fadde2d 	.word	0x3fadde2d
 800f6d8:	af749a6d 	.word	0xaf749a6d
 800f6dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800f6e0:	fe231671 	.word	0xfe231671
 800f6e4:	3fbc71c6 	.word	0x3fbc71c6
 800f6e8:	9998ebc4 	.word	0x9998ebc4
 800f6ec:	3fc99999 	.word	0x3fc99999
 800f6f0:	54442d18 	.word	0x54442d18
 800f6f4:	bff921fb 	.word	0xbff921fb
 800f6f8:	440fffff 	.word	0x440fffff
 800f6fc:	7ff00000 	.word	0x7ff00000
 800f700:	3fdbffff 	.word	0x3fdbffff
 800f704:	3ff00000 	.word	0x3ff00000
 800f708:	3ff2ffff 	.word	0x3ff2ffff
 800f70c:	40038000 	.word	0x40038000
 800f710:	3ff80000 	.word	0x3ff80000
 800f714:	bff00000 	.word	0xbff00000
 800f718:	08010568 	.word	0x08010568
 800f71c:	08010588 	.word	0x08010588

0800f720 <fabs>:
 800f720:	ec51 0b10 	vmov	r0, r1, d0
 800f724:	4602      	mov	r2, r0
 800f726:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f72a:	ec43 2b10 	vmov	d0, r2, r3
 800f72e:	4770      	bx	lr

0800f730 <__kernel_cosf>:
 800f730:	ee10 3a10 	vmov	r3, s0
 800f734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f738:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f73c:	eef0 6a40 	vmov.f32	s13, s0
 800f740:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f744:	d204      	bcs.n	800f750 <__kernel_cosf+0x20>
 800f746:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f74a:	ee17 2a90 	vmov	r2, s15
 800f74e:	b342      	cbz	r2, 800f7a2 <__kernel_cosf+0x72>
 800f750:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f754:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f7c0 <__kernel_cosf+0x90>
 800f758:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f7c4 <__kernel_cosf+0x94>
 800f75c:	4a1a      	ldr	r2, [pc, #104]	@ (800f7c8 <__kernel_cosf+0x98>)
 800f75e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f762:	4293      	cmp	r3, r2
 800f764:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f7cc <__kernel_cosf+0x9c>
 800f768:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f76c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f7d0 <__kernel_cosf+0xa0>
 800f770:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f774:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f7d4 <__kernel_cosf+0xa4>
 800f778:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f77c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f7d8 <__kernel_cosf+0xa8>
 800f780:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f784:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f788:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f78c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f790:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f794:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f798:	d804      	bhi.n	800f7a4 <__kernel_cosf+0x74>
 800f79a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f79e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7a2:	4770      	bx	lr
 800f7a4:	4a0d      	ldr	r2, [pc, #52]	@ (800f7dc <__kernel_cosf+0xac>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	bf9a      	itte	ls
 800f7aa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f7ae:	ee07 3a10 	vmovls	s14, r3
 800f7b2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f7b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f7ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7be:	e7ec      	b.n	800f79a <__kernel_cosf+0x6a>
 800f7c0:	ad47d74e 	.word	0xad47d74e
 800f7c4:	310f74f6 	.word	0x310f74f6
 800f7c8:	3e999999 	.word	0x3e999999
 800f7cc:	b493f27c 	.word	0xb493f27c
 800f7d0:	37d00d01 	.word	0x37d00d01
 800f7d4:	bab60b61 	.word	0xbab60b61
 800f7d8:	3d2aaaab 	.word	0x3d2aaaab
 800f7dc:	3f480000 	.word	0x3f480000

0800f7e0 <__kernel_sinf>:
 800f7e0:	ee10 3a10 	vmov	r3, s0
 800f7e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f7ec:	d204      	bcs.n	800f7f8 <__kernel_sinf+0x18>
 800f7ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f7f2:	ee17 3a90 	vmov	r3, s15
 800f7f6:	b35b      	cbz	r3, 800f850 <__kernel_sinf+0x70>
 800f7f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f7fc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f854 <__kernel_sinf+0x74>
 800f800:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f858 <__kernel_sinf+0x78>
 800f804:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f808:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f85c <__kernel_sinf+0x7c>
 800f80c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f810:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f860 <__kernel_sinf+0x80>
 800f814:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f818:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f864 <__kernel_sinf+0x84>
 800f81c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f820:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f824:	b930      	cbnz	r0, 800f834 <__kernel_sinf+0x54>
 800f826:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f868 <__kernel_sinf+0x88>
 800f82a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f82e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f832:	4770      	bx	lr
 800f834:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f838:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f83c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f840:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f844:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f86c <__kernel_sinf+0x8c>
 800f848:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f84c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	2f2ec9d3 	.word	0x2f2ec9d3
 800f858:	b2d72f34 	.word	0xb2d72f34
 800f85c:	3638ef1b 	.word	0x3638ef1b
 800f860:	b9500d01 	.word	0xb9500d01
 800f864:	3c088889 	.word	0x3c088889
 800f868:	be2aaaab 	.word	0xbe2aaaab
 800f86c:	3e2aaaab 	.word	0x3e2aaaab

0800f870 <__ieee754_rem_pio2f>:
 800f870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f872:	ee10 6a10 	vmov	r6, s0
 800f876:	4b88      	ldr	r3, [pc, #544]	@ (800fa98 <__ieee754_rem_pio2f+0x228>)
 800f878:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f87c:	429d      	cmp	r5, r3
 800f87e:	b087      	sub	sp, #28
 800f880:	4604      	mov	r4, r0
 800f882:	d805      	bhi.n	800f890 <__ieee754_rem_pio2f+0x20>
 800f884:	2300      	movs	r3, #0
 800f886:	ed80 0a00 	vstr	s0, [r0]
 800f88a:	6043      	str	r3, [r0, #4]
 800f88c:	2000      	movs	r0, #0
 800f88e:	e022      	b.n	800f8d6 <__ieee754_rem_pio2f+0x66>
 800f890:	4b82      	ldr	r3, [pc, #520]	@ (800fa9c <__ieee754_rem_pio2f+0x22c>)
 800f892:	429d      	cmp	r5, r3
 800f894:	d83a      	bhi.n	800f90c <__ieee754_rem_pio2f+0x9c>
 800f896:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f89a:	2e00      	cmp	r6, #0
 800f89c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800faa0 <__ieee754_rem_pio2f+0x230>
 800f8a0:	4a80      	ldr	r2, [pc, #512]	@ (800faa4 <__ieee754_rem_pio2f+0x234>)
 800f8a2:	f023 030f 	bic.w	r3, r3, #15
 800f8a6:	dd18      	ble.n	800f8da <__ieee754_rem_pio2f+0x6a>
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f8ae:	bf09      	itett	eq
 800f8b0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800faa8 <__ieee754_rem_pio2f+0x238>
 800f8b4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800faac <__ieee754_rem_pio2f+0x23c>
 800f8b8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800fab0 <__ieee754_rem_pio2f+0x240>
 800f8bc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f8c0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f8c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8c8:	ed80 7a00 	vstr	s14, [r0]
 800f8cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f8d0:	edc0 7a01 	vstr	s15, [r0, #4]
 800f8d4:	2001      	movs	r0, #1
 800f8d6:	b007      	add	sp, #28
 800f8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f8e0:	bf09      	itett	eq
 800f8e2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800faa8 <__ieee754_rem_pio2f+0x238>
 800f8e6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800faac <__ieee754_rem_pio2f+0x23c>
 800f8ea:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800fab0 <__ieee754_rem_pio2f+0x240>
 800f8ee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f8f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f8f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8fa:	ed80 7a00 	vstr	s14, [r0]
 800f8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f902:	edc0 7a01 	vstr	s15, [r0, #4]
 800f906:	f04f 30ff 	mov.w	r0, #4294967295
 800f90a:	e7e4      	b.n	800f8d6 <__ieee754_rem_pio2f+0x66>
 800f90c:	4b69      	ldr	r3, [pc, #420]	@ (800fab4 <__ieee754_rem_pio2f+0x244>)
 800f90e:	429d      	cmp	r5, r3
 800f910:	d873      	bhi.n	800f9fa <__ieee754_rem_pio2f+0x18a>
 800f912:	f000 f8dd 	bl	800fad0 <fabsf>
 800f916:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800fab8 <__ieee754_rem_pio2f+0x248>
 800f91a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f91e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f92a:	ee17 0a90 	vmov	r0, s15
 800f92e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800faa0 <__ieee754_rem_pio2f+0x230>
 800f932:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f936:	281f      	cmp	r0, #31
 800f938:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800faac <__ieee754_rem_pio2f+0x23c>
 800f93c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f940:	eeb1 6a47 	vneg.f32	s12, s14
 800f944:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f948:	ee16 1a90 	vmov	r1, s13
 800f94c:	dc09      	bgt.n	800f962 <__ieee754_rem_pio2f+0xf2>
 800f94e:	4a5b      	ldr	r2, [pc, #364]	@ (800fabc <__ieee754_rem_pio2f+0x24c>)
 800f950:	1e47      	subs	r7, r0, #1
 800f952:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f956:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f95a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f95e:	4293      	cmp	r3, r2
 800f960:	d107      	bne.n	800f972 <__ieee754_rem_pio2f+0x102>
 800f962:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f966:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f96a:	2a08      	cmp	r2, #8
 800f96c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f970:	dc14      	bgt.n	800f99c <__ieee754_rem_pio2f+0x12c>
 800f972:	6021      	str	r1, [r4, #0]
 800f974:	ed94 7a00 	vldr	s14, [r4]
 800f978:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f97c:	2e00      	cmp	r6, #0
 800f97e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f982:	ed84 0a01 	vstr	s0, [r4, #4]
 800f986:	daa6      	bge.n	800f8d6 <__ieee754_rem_pio2f+0x66>
 800f988:	eeb1 7a47 	vneg.f32	s14, s14
 800f98c:	eeb1 0a40 	vneg.f32	s0, s0
 800f990:	ed84 7a00 	vstr	s14, [r4]
 800f994:	ed84 0a01 	vstr	s0, [r4, #4]
 800f998:	4240      	negs	r0, r0
 800f99a:	e79c      	b.n	800f8d6 <__ieee754_rem_pio2f+0x66>
 800f99c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800faa8 <__ieee754_rem_pio2f+0x238>
 800f9a0:	eef0 6a40 	vmov.f32	s13, s0
 800f9a4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f9a8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f9ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f9b0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fab0 <__ieee754_rem_pio2f+0x240>
 800f9b4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f9b8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f9bc:	ee15 2a90 	vmov	r2, s11
 800f9c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f9c4:	1a5b      	subs	r3, r3, r1
 800f9c6:	2b19      	cmp	r3, #25
 800f9c8:	dc04      	bgt.n	800f9d4 <__ieee754_rem_pio2f+0x164>
 800f9ca:	edc4 5a00 	vstr	s11, [r4]
 800f9ce:	eeb0 0a66 	vmov.f32	s0, s13
 800f9d2:	e7cf      	b.n	800f974 <__ieee754_rem_pio2f+0x104>
 800f9d4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800fac0 <__ieee754_rem_pio2f+0x250>
 800f9d8:	eeb0 0a66 	vmov.f32	s0, s13
 800f9dc:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f9e0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f9e4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800fac4 <__ieee754_rem_pio2f+0x254>
 800f9e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f9ec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f9f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f9f4:	ed84 7a00 	vstr	s14, [r4]
 800f9f8:	e7bc      	b.n	800f974 <__ieee754_rem_pio2f+0x104>
 800f9fa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f9fe:	d306      	bcc.n	800fa0e <__ieee754_rem_pio2f+0x19e>
 800fa00:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fa04:	edc0 7a01 	vstr	s15, [r0, #4]
 800fa08:	edc0 7a00 	vstr	s15, [r0]
 800fa0c:	e73e      	b.n	800f88c <__ieee754_rem_pio2f+0x1c>
 800fa0e:	15ea      	asrs	r2, r5, #23
 800fa10:	3a86      	subs	r2, #134	@ 0x86
 800fa12:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fa16:	ee07 3a90 	vmov	s15, r3
 800fa1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa1e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800fac8 <__ieee754_rem_pio2f+0x258>
 800fa22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa2a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fa2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa3e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fa42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa46:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4e:	edcd 7a05 	vstr	s15, [sp, #20]
 800fa52:	d11e      	bne.n	800fa92 <__ieee754_rem_pio2f+0x222>
 800fa54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5c:	bf0c      	ite	eq
 800fa5e:	2301      	moveq	r3, #1
 800fa60:	2302      	movne	r3, #2
 800fa62:	491a      	ldr	r1, [pc, #104]	@ (800facc <__ieee754_rem_pio2f+0x25c>)
 800fa64:	9101      	str	r1, [sp, #4]
 800fa66:	2102      	movs	r1, #2
 800fa68:	9100      	str	r1, [sp, #0]
 800fa6a:	a803      	add	r0, sp, #12
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	f000 f837 	bl	800fae0 <__kernel_rem_pio2f>
 800fa72:	2e00      	cmp	r6, #0
 800fa74:	f6bf af2f 	bge.w	800f8d6 <__ieee754_rem_pio2f+0x66>
 800fa78:	edd4 7a00 	vldr	s15, [r4]
 800fa7c:	eef1 7a67 	vneg.f32	s15, s15
 800fa80:	edc4 7a00 	vstr	s15, [r4]
 800fa84:	edd4 7a01 	vldr	s15, [r4, #4]
 800fa88:	eef1 7a67 	vneg.f32	s15, s15
 800fa8c:	edc4 7a01 	vstr	s15, [r4, #4]
 800fa90:	e782      	b.n	800f998 <__ieee754_rem_pio2f+0x128>
 800fa92:	2303      	movs	r3, #3
 800fa94:	e7e5      	b.n	800fa62 <__ieee754_rem_pio2f+0x1f2>
 800fa96:	bf00      	nop
 800fa98:	3f490fd8 	.word	0x3f490fd8
 800fa9c:	4016cbe3 	.word	0x4016cbe3
 800faa0:	3fc90f80 	.word	0x3fc90f80
 800faa4:	3fc90fd0 	.word	0x3fc90fd0
 800faa8:	37354400 	.word	0x37354400
 800faac:	37354443 	.word	0x37354443
 800fab0:	2e85a308 	.word	0x2e85a308
 800fab4:	43490f80 	.word	0x43490f80
 800fab8:	3f22f984 	.word	0x3f22f984
 800fabc:	080105a8 	.word	0x080105a8
 800fac0:	2e85a300 	.word	0x2e85a300
 800fac4:	248d3132 	.word	0x248d3132
 800fac8:	43800000 	.word	0x43800000
 800facc:	08010628 	.word	0x08010628

0800fad0 <fabsf>:
 800fad0:	ee10 3a10 	vmov	r3, s0
 800fad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fad8:	ee00 3a10 	vmov	s0, r3
 800fadc:	4770      	bx	lr
	...

0800fae0 <__kernel_rem_pio2f>:
 800fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae4:	ed2d 8b04 	vpush	{d8-d9}
 800fae8:	b0d9      	sub	sp, #356	@ 0x164
 800faea:	4690      	mov	r8, r2
 800faec:	9001      	str	r0, [sp, #4]
 800faee:	4ab9      	ldr	r2, [pc, #740]	@ (800fdd4 <__kernel_rem_pio2f+0x2f4>)
 800faf0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800faf2:	f118 0f04 	cmn.w	r8, #4
 800faf6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800fafa:	460f      	mov	r7, r1
 800fafc:	f103 3bff 	add.w	fp, r3, #4294967295
 800fb00:	db27      	blt.n	800fb52 <__kernel_rem_pio2f+0x72>
 800fb02:	f1b8 0203 	subs.w	r2, r8, #3
 800fb06:	bf48      	it	mi
 800fb08:	f108 0204 	addmi.w	r2, r8, #4
 800fb0c:	10d2      	asrs	r2, r2, #3
 800fb0e:	1c55      	adds	r5, r2, #1
 800fb10:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fb12:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800fde4 <__kernel_rem_pio2f+0x304>
 800fb16:	00e8      	lsls	r0, r5, #3
 800fb18:	eba2 060b 	sub.w	r6, r2, fp
 800fb1c:	9002      	str	r0, [sp, #8]
 800fb1e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800fb22:	eb0a 0c0b 	add.w	ip, sl, fp
 800fb26:	ac1c      	add	r4, sp, #112	@ 0x70
 800fb28:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	4560      	cmp	r0, ip
 800fb30:	dd11      	ble.n	800fb56 <__kernel_rem_pio2f+0x76>
 800fb32:	a91c      	add	r1, sp, #112	@ 0x70
 800fb34:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800fb38:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800fb3c:	f04f 0c00 	mov.w	ip, #0
 800fb40:	45d4      	cmp	ip, sl
 800fb42:	dc27      	bgt.n	800fb94 <__kernel_rem_pio2f+0xb4>
 800fb44:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fb48:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800fde4 <__kernel_rem_pio2f+0x304>
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	2400      	movs	r4, #0
 800fb50:	e016      	b.n	800fb80 <__kernel_rem_pio2f+0xa0>
 800fb52:	2200      	movs	r2, #0
 800fb54:	e7db      	b.n	800fb0e <__kernel_rem_pio2f+0x2e>
 800fb56:	42c6      	cmn	r6, r0
 800fb58:	bf5d      	ittte	pl
 800fb5a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800fb5e:	ee07 1a90 	vmovpl	s15, r1
 800fb62:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fb66:	eef0 7a47 	vmovmi.f32	s15, s14
 800fb6a:	ece4 7a01 	vstmia	r4!, {s15}
 800fb6e:	3001      	adds	r0, #1
 800fb70:	e7dd      	b.n	800fb2e <__kernel_rem_pio2f+0x4e>
 800fb72:	ecfe 6a01 	vldmia	lr!, {s13}
 800fb76:	ed96 7a00 	vldr	s14, [r6]
 800fb7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fb7e:	3401      	adds	r4, #1
 800fb80:	455c      	cmp	r4, fp
 800fb82:	f1a6 0604 	sub.w	r6, r6, #4
 800fb86:	ddf4      	ble.n	800fb72 <__kernel_rem_pio2f+0x92>
 800fb88:	ece9 7a01 	vstmia	r9!, {s15}
 800fb8c:	f10c 0c01 	add.w	ip, ip, #1
 800fb90:	3004      	adds	r0, #4
 800fb92:	e7d5      	b.n	800fb40 <__kernel_rem_pio2f+0x60>
 800fb94:	a908      	add	r1, sp, #32
 800fb96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb9a:	9104      	str	r1, [sp, #16]
 800fb9c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fb9e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800fde0 <__kernel_rem_pio2f+0x300>
 800fba2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800fddc <__kernel_rem_pio2f+0x2fc>
 800fba6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fbaa:	9203      	str	r2, [sp, #12]
 800fbac:	4654      	mov	r4, sl
 800fbae:	00a2      	lsls	r2, r4, #2
 800fbb0:	9205      	str	r2, [sp, #20]
 800fbb2:	aa58      	add	r2, sp, #352	@ 0x160
 800fbb4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fbb8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800fbbc:	a944      	add	r1, sp, #272	@ 0x110
 800fbbe:	aa08      	add	r2, sp, #32
 800fbc0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800fbc4:	4694      	mov	ip, r2
 800fbc6:	4626      	mov	r6, r4
 800fbc8:	2e00      	cmp	r6, #0
 800fbca:	f1a0 0004 	sub.w	r0, r0, #4
 800fbce:	dc4c      	bgt.n	800fc6a <__kernel_rem_pio2f+0x18a>
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fbd6:	f000 f9f5 	bl	800ffc4 <scalbnf>
 800fbda:	eeb0 8a40 	vmov.f32	s16, s0
 800fbde:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800fbe2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fbe6:	f000 fa53 	bl	8010090 <floorf>
 800fbea:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800fbee:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fbf2:	2d00      	cmp	r5, #0
 800fbf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fbf8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fbfc:	ee17 9a90 	vmov	r9, s15
 800fc00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc04:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fc08:	dd41      	ble.n	800fc8e <__kernel_rem_pio2f+0x1ae>
 800fc0a:	f104 3cff 	add.w	ip, r4, #4294967295
 800fc0e:	a908      	add	r1, sp, #32
 800fc10:	f1c5 0e08 	rsb	lr, r5, #8
 800fc14:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fc18:	fa46 f00e 	asr.w	r0, r6, lr
 800fc1c:	4481      	add	r9, r0
 800fc1e:	fa00 f00e 	lsl.w	r0, r0, lr
 800fc22:	1a36      	subs	r6, r6, r0
 800fc24:	f1c5 0007 	rsb	r0, r5, #7
 800fc28:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fc2c:	4106      	asrs	r6, r0
 800fc2e:	2e00      	cmp	r6, #0
 800fc30:	dd3c      	ble.n	800fcac <__kernel_rem_pio2f+0x1cc>
 800fc32:	f04f 0e00 	mov.w	lr, #0
 800fc36:	f109 0901 	add.w	r9, r9, #1
 800fc3a:	4670      	mov	r0, lr
 800fc3c:	4574      	cmp	r4, lr
 800fc3e:	dc68      	bgt.n	800fd12 <__kernel_rem_pio2f+0x232>
 800fc40:	2d00      	cmp	r5, #0
 800fc42:	dd03      	ble.n	800fc4c <__kernel_rem_pio2f+0x16c>
 800fc44:	2d01      	cmp	r5, #1
 800fc46:	d074      	beq.n	800fd32 <__kernel_rem_pio2f+0x252>
 800fc48:	2d02      	cmp	r5, #2
 800fc4a:	d07d      	beq.n	800fd48 <__kernel_rem_pio2f+0x268>
 800fc4c:	2e02      	cmp	r6, #2
 800fc4e:	d12d      	bne.n	800fcac <__kernel_rem_pio2f+0x1cc>
 800fc50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fc54:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fc58:	b340      	cbz	r0, 800fcac <__kernel_rem_pio2f+0x1cc>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	9306      	str	r3, [sp, #24]
 800fc5e:	f000 f9b1 	bl	800ffc4 <scalbnf>
 800fc62:	9b06      	ldr	r3, [sp, #24]
 800fc64:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fc68:	e020      	b.n	800fcac <__kernel_rem_pio2f+0x1cc>
 800fc6a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fc6e:	3e01      	subs	r6, #1
 800fc70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc78:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fc7c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fc80:	ecac 0a01 	vstmia	ip!, {s0}
 800fc84:	ed90 0a00 	vldr	s0, [r0]
 800fc88:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fc8c:	e79c      	b.n	800fbc8 <__kernel_rem_pio2f+0xe8>
 800fc8e:	d105      	bne.n	800fc9c <__kernel_rem_pio2f+0x1bc>
 800fc90:	1e60      	subs	r0, r4, #1
 800fc92:	a908      	add	r1, sp, #32
 800fc94:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800fc98:	11f6      	asrs	r6, r6, #7
 800fc9a:	e7c8      	b.n	800fc2e <__kernel_rem_pio2f+0x14e>
 800fc9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fca0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca8:	da31      	bge.n	800fd0e <__kernel_rem_pio2f+0x22e>
 800fcaa:	2600      	movs	r6, #0
 800fcac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb4:	f040 8098 	bne.w	800fde8 <__kernel_rem_pio2f+0x308>
 800fcb8:	1e60      	subs	r0, r4, #1
 800fcba:	2200      	movs	r2, #0
 800fcbc:	4550      	cmp	r0, sl
 800fcbe:	da4b      	bge.n	800fd58 <__kernel_rem_pio2f+0x278>
 800fcc0:	2a00      	cmp	r2, #0
 800fcc2:	d065      	beq.n	800fd90 <__kernel_rem_pio2f+0x2b0>
 800fcc4:	3c01      	subs	r4, #1
 800fcc6:	ab08      	add	r3, sp, #32
 800fcc8:	3d08      	subs	r5, #8
 800fcca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d0f8      	beq.n	800fcc4 <__kernel_rem_pio2f+0x1e4>
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fcd8:	f000 f974 	bl	800ffc4 <scalbnf>
 800fcdc:	1c63      	adds	r3, r4, #1
 800fcde:	aa44      	add	r2, sp, #272	@ 0x110
 800fce0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800fde0 <__kernel_rem_pio2f+0x300>
 800fce4:	0099      	lsls	r1, r3, #2
 800fce6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fcea:	4623      	mov	r3, r4
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	f280 80a9 	bge.w	800fe44 <__kernel_rem_pio2f+0x364>
 800fcf2:	4623      	mov	r3, r4
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f2c0 80c7 	blt.w	800fe88 <__kernel_rem_pio2f+0x3a8>
 800fcfa:	aa44      	add	r2, sp, #272	@ 0x110
 800fcfc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fd00:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fdd8 <__kernel_rem_pio2f+0x2f8>
 800fd04:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800fde4 <__kernel_rem_pio2f+0x304>
 800fd08:	2000      	movs	r0, #0
 800fd0a:	1ae2      	subs	r2, r4, r3
 800fd0c:	e0b1      	b.n	800fe72 <__kernel_rem_pio2f+0x392>
 800fd0e:	2602      	movs	r6, #2
 800fd10:	e78f      	b.n	800fc32 <__kernel_rem_pio2f+0x152>
 800fd12:	f852 1b04 	ldr.w	r1, [r2], #4
 800fd16:	b948      	cbnz	r0, 800fd2c <__kernel_rem_pio2f+0x24c>
 800fd18:	b121      	cbz	r1, 800fd24 <__kernel_rem_pio2f+0x244>
 800fd1a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fd1e:	f842 1c04 	str.w	r1, [r2, #-4]
 800fd22:	2101      	movs	r1, #1
 800fd24:	f10e 0e01 	add.w	lr, lr, #1
 800fd28:	4608      	mov	r0, r1
 800fd2a:	e787      	b.n	800fc3c <__kernel_rem_pio2f+0x15c>
 800fd2c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fd30:	e7f5      	b.n	800fd1e <__kernel_rem_pio2f+0x23e>
 800fd32:	f104 3cff 	add.w	ip, r4, #4294967295
 800fd36:	aa08      	add	r2, sp, #32
 800fd38:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fd3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fd40:	a908      	add	r1, sp, #32
 800fd42:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fd46:	e781      	b.n	800fc4c <__kernel_rem_pio2f+0x16c>
 800fd48:	f104 3cff 	add.w	ip, r4, #4294967295
 800fd4c:	aa08      	add	r2, sp, #32
 800fd4e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fd52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fd56:	e7f3      	b.n	800fd40 <__kernel_rem_pio2f+0x260>
 800fd58:	a908      	add	r1, sp, #32
 800fd5a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fd5e:	3801      	subs	r0, #1
 800fd60:	430a      	orrs	r2, r1
 800fd62:	e7ab      	b.n	800fcbc <__kernel_rem_pio2f+0x1dc>
 800fd64:	3201      	adds	r2, #1
 800fd66:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800fd6a:	2e00      	cmp	r6, #0
 800fd6c:	d0fa      	beq.n	800fd64 <__kernel_rem_pio2f+0x284>
 800fd6e:	9905      	ldr	r1, [sp, #20]
 800fd70:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800fd74:	eb0d 0001 	add.w	r0, sp, r1
 800fd78:	18e6      	adds	r6, r4, r3
 800fd7a:	a91c      	add	r1, sp, #112	@ 0x70
 800fd7c:	f104 0c01 	add.w	ip, r4, #1
 800fd80:	384c      	subs	r0, #76	@ 0x4c
 800fd82:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fd86:	4422      	add	r2, r4
 800fd88:	4562      	cmp	r2, ip
 800fd8a:	da04      	bge.n	800fd96 <__kernel_rem_pio2f+0x2b6>
 800fd8c:	4614      	mov	r4, r2
 800fd8e:	e70e      	b.n	800fbae <__kernel_rem_pio2f+0xce>
 800fd90:	9804      	ldr	r0, [sp, #16]
 800fd92:	2201      	movs	r2, #1
 800fd94:	e7e7      	b.n	800fd66 <__kernel_rem_pio2f+0x286>
 800fd96:	9903      	ldr	r1, [sp, #12]
 800fd98:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fd9c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800fda0:	9105      	str	r1, [sp, #20]
 800fda2:	ee07 1a90 	vmov	s15, r1
 800fda6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdaa:	2400      	movs	r4, #0
 800fdac:	ece6 7a01 	vstmia	r6!, {s15}
 800fdb0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800fde4 <__kernel_rem_pio2f+0x304>
 800fdb4:	46b1      	mov	r9, r6
 800fdb6:	455c      	cmp	r4, fp
 800fdb8:	dd04      	ble.n	800fdc4 <__kernel_rem_pio2f+0x2e4>
 800fdba:	ece0 7a01 	vstmia	r0!, {s15}
 800fdbe:	f10c 0c01 	add.w	ip, ip, #1
 800fdc2:	e7e1      	b.n	800fd88 <__kernel_rem_pio2f+0x2a8>
 800fdc4:	ecfe 6a01 	vldmia	lr!, {s13}
 800fdc8:	ed39 7a01 	vldmdb	r9!, {s14}
 800fdcc:	3401      	adds	r4, #1
 800fdce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fdd2:	e7f0      	b.n	800fdb6 <__kernel_rem_pio2f+0x2d6>
 800fdd4:	0801096c 	.word	0x0801096c
 800fdd8:	08010940 	.word	0x08010940
 800fddc:	43800000 	.word	0x43800000
 800fde0:	3b800000 	.word	0x3b800000
 800fde4:	00000000 	.word	0x00000000
 800fde8:	9b02      	ldr	r3, [sp, #8]
 800fdea:	eeb0 0a48 	vmov.f32	s0, s16
 800fdee:	eba3 0008 	sub.w	r0, r3, r8
 800fdf2:	f000 f8e7 	bl	800ffc4 <scalbnf>
 800fdf6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fddc <__kernel_rem_pio2f+0x2fc>
 800fdfa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe02:	db19      	blt.n	800fe38 <__kernel_rem_pio2f+0x358>
 800fe04:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800fde0 <__kernel_rem_pio2f+0x300>
 800fe08:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fe0c:	aa08      	add	r2, sp, #32
 800fe0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe12:	3508      	adds	r5, #8
 800fe14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fe1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fe24:	ee10 3a10 	vmov	r3, s0
 800fe28:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fe2c:	ee17 3a90 	vmov	r3, s15
 800fe30:	3401      	adds	r4, #1
 800fe32:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fe36:	e74c      	b.n	800fcd2 <__kernel_rem_pio2f+0x1f2>
 800fe38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fe3c:	aa08      	add	r2, sp, #32
 800fe3e:	ee10 3a10 	vmov	r3, s0
 800fe42:	e7f6      	b.n	800fe32 <__kernel_rem_pio2f+0x352>
 800fe44:	a808      	add	r0, sp, #32
 800fe46:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fe4a:	9001      	str	r0, [sp, #4]
 800fe4c:	ee07 0a90 	vmov	s15, r0
 800fe50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe54:	3b01      	subs	r3, #1
 800fe56:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fe5a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fe5e:	ed62 7a01 	vstmdb	r2!, {s15}
 800fe62:	e743      	b.n	800fcec <__kernel_rem_pio2f+0x20c>
 800fe64:	ecfc 6a01 	vldmia	ip!, {s13}
 800fe68:	ecb5 7a01 	vldmia	r5!, {s14}
 800fe6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe70:	3001      	adds	r0, #1
 800fe72:	4550      	cmp	r0, sl
 800fe74:	dc01      	bgt.n	800fe7a <__kernel_rem_pio2f+0x39a>
 800fe76:	4282      	cmp	r2, r0
 800fe78:	daf4      	bge.n	800fe64 <__kernel_rem_pio2f+0x384>
 800fe7a:	a858      	add	r0, sp, #352	@ 0x160
 800fe7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fe80:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800fe84:	3b01      	subs	r3, #1
 800fe86:	e735      	b.n	800fcf4 <__kernel_rem_pio2f+0x214>
 800fe88:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	dc09      	bgt.n	800fea2 <__kernel_rem_pio2f+0x3c2>
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	dc2b      	bgt.n	800feea <__kernel_rem_pio2f+0x40a>
 800fe92:	d044      	beq.n	800ff1e <__kernel_rem_pio2f+0x43e>
 800fe94:	f009 0007 	and.w	r0, r9, #7
 800fe98:	b059      	add	sp, #356	@ 0x164
 800fe9a:	ecbd 8b04 	vpop	{d8-d9}
 800fe9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fea4:	2b03      	cmp	r3, #3
 800fea6:	d1f5      	bne.n	800fe94 <__kernel_rem_pio2f+0x3b4>
 800fea8:	aa30      	add	r2, sp, #192	@ 0xc0
 800feaa:	1f0b      	subs	r3, r1, #4
 800feac:	4413      	add	r3, r2
 800feae:	461a      	mov	r2, r3
 800feb0:	4620      	mov	r0, r4
 800feb2:	2800      	cmp	r0, #0
 800feb4:	f1a2 0204 	sub.w	r2, r2, #4
 800feb8:	dc52      	bgt.n	800ff60 <__kernel_rem_pio2f+0x480>
 800feba:	4622      	mov	r2, r4
 800febc:	2a01      	cmp	r2, #1
 800febe:	f1a3 0304 	sub.w	r3, r3, #4
 800fec2:	dc5d      	bgt.n	800ff80 <__kernel_rem_pio2f+0x4a0>
 800fec4:	ab30      	add	r3, sp, #192	@ 0xc0
 800fec6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800fde4 <__kernel_rem_pio2f+0x304>
 800feca:	440b      	add	r3, r1
 800fecc:	2c01      	cmp	r4, #1
 800fece:	dc67      	bgt.n	800ffa0 <__kernel_rem_pio2f+0x4c0>
 800fed0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800fed4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800fed8:	2e00      	cmp	r6, #0
 800feda:	d167      	bne.n	800ffac <__kernel_rem_pio2f+0x4cc>
 800fedc:	edc7 6a00 	vstr	s13, [r7]
 800fee0:	ed87 7a01 	vstr	s14, [r7, #4]
 800fee4:	edc7 7a02 	vstr	s15, [r7, #8]
 800fee8:	e7d4      	b.n	800fe94 <__kernel_rem_pio2f+0x3b4>
 800feea:	ab30      	add	r3, sp, #192	@ 0xc0
 800feec:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800fde4 <__kernel_rem_pio2f+0x304>
 800fef0:	440b      	add	r3, r1
 800fef2:	4622      	mov	r2, r4
 800fef4:	2a00      	cmp	r2, #0
 800fef6:	da24      	bge.n	800ff42 <__kernel_rem_pio2f+0x462>
 800fef8:	b34e      	cbz	r6, 800ff4e <__kernel_rem_pio2f+0x46e>
 800fefa:	eef1 7a47 	vneg.f32	s15, s14
 800fefe:	edc7 7a00 	vstr	s15, [r7]
 800ff02:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ff06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff0a:	aa31      	add	r2, sp, #196	@ 0xc4
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	429c      	cmp	r4, r3
 800ff10:	da20      	bge.n	800ff54 <__kernel_rem_pio2f+0x474>
 800ff12:	b10e      	cbz	r6, 800ff18 <__kernel_rem_pio2f+0x438>
 800ff14:	eef1 7a67 	vneg.f32	s15, s15
 800ff18:	edc7 7a01 	vstr	s15, [r7, #4]
 800ff1c:	e7ba      	b.n	800fe94 <__kernel_rem_pio2f+0x3b4>
 800ff1e:	ab30      	add	r3, sp, #192	@ 0xc0
 800ff20:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800fde4 <__kernel_rem_pio2f+0x304>
 800ff24:	440b      	add	r3, r1
 800ff26:	2c00      	cmp	r4, #0
 800ff28:	da05      	bge.n	800ff36 <__kernel_rem_pio2f+0x456>
 800ff2a:	b10e      	cbz	r6, 800ff30 <__kernel_rem_pio2f+0x450>
 800ff2c:	eef1 7a67 	vneg.f32	s15, s15
 800ff30:	edc7 7a00 	vstr	s15, [r7]
 800ff34:	e7ae      	b.n	800fe94 <__kernel_rem_pio2f+0x3b4>
 800ff36:	ed33 7a01 	vldmdb	r3!, {s14}
 800ff3a:	3c01      	subs	r4, #1
 800ff3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff40:	e7f1      	b.n	800ff26 <__kernel_rem_pio2f+0x446>
 800ff42:	ed73 7a01 	vldmdb	r3!, {s15}
 800ff46:	3a01      	subs	r2, #1
 800ff48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff4c:	e7d2      	b.n	800fef4 <__kernel_rem_pio2f+0x414>
 800ff4e:	eef0 7a47 	vmov.f32	s15, s14
 800ff52:	e7d4      	b.n	800fefe <__kernel_rem_pio2f+0x41e>
 800ff54:	ecb2 7a01 	vldmia	r2!, {s14}
 800ff58:	3301      	adds	r3, #1
 800ff5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff5e:	e7d6      	b.n	800ff0e <__kernel_rem_pio2f+0x42e>
 800ff60:	edd2 7a00 	vldr	s15, [r2]
 800ff64:	edd2 6a01 	vldr	s13, [r2, #4]
 800ff68:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ff6c:	3801      	subs	r0, #1
 800ff6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff72:	ed82 7a00 	vstr	s14, [r2]
 800ff76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff7a:	edc2 7a01 	vstr	s15, [r2, #4]
 800ff7e:	e798      	b.n	800feb2 <__kernel_rem_pio2f+0x3d2>
 800ff80:	edd3 7a00 	vldr	s15, [r3]
 800ff84:	edd3 6a01 	vldr	s13, [r3, #4]
 800ff88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ff8c:	3a01      	subs	r2, #1
 800ff8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff92:	ed83 7a00 	vstr	s14, [r3]
 800ff96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff9a:	edc3 7a01 	vstr	s15, [r3, #4]
 800ff9e:	e78d      	b.n	800febc <__kernel_rem_pio2f+0x3dc>
 800ffa0:	ed33 7a01 	vldmdb	r3!, {s14}
 800ffa4:	3c01      	subs	r4, #1
 800ffa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ffaa:	e78f      	b.n	800fecc <__kernel_rem_pio2f+0x3ec>
 800ffac:	eef1 6a66 	vneg.f32	s13, s13
 800ffb0:	eeb1 7a47 	vneg.f32	s14, s14
 800ffb4:	edc7 6a00 	vstr	s13, [r7]
 800ffb8:	ed87 7a01 	vstr	s14, [r7, #4]
 800ffbc:	eef1 7a67 	vneg.f32	s15, s15
 800ffc0:	e790      	b.n	800fee4 <__kernel_rem_pio2f+0x404>
 800ffc2:	bf00      	nop

0800ffc4 <scalbnf>:
 800ffc4:	ee10 3a10 	vmov	r3, s0
 800ffc8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ffcc:	d02b      	beq.n	8010026 <scalbnf+0x62>
 800ffce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ffd2:	d302      	bcc.n	800ffda <scalbnf+0x16>
 800ffd4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ffd8:	4770      	bx	lr
 800ffda:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ffde:	d123      	bne.n	8010028 <scalbnf+0x64>
 800ffe0:	4b24      	ldr	r3, [pc, #144]	@ (8010074 <scalbnf+0xb0>)
 800ffe2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010078 <scalbnf+0xb4>
 800ffe6:	4298      	cmp	r0, r3
 800ffe8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ffec:	db17      	blt.n	801001e <scalbnf+0x5a>
 800ffee:	ee10 3a10 	vmov	r3, s0
 800fff2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fff6:	3a19      	subs	r2, #25
 800fff8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fffc:	4288      	cmp	r0, r1
 800fffe:	dd15      	ble.n	801002c <scalbnf+0x68>
 8010000:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801007c <scalbnf+0xb8>
 8010004:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010080 <scalbnf+0xbc>
 8010008:	ee10 3a10 	vmov	r3, s0
 801000c:	eeb0 7a67 	vmov.f32	s14, s15
 8010010:	2b00      	cmp	r3, #0
 8010012:	bfb8      	it	lt
 8010014:	eef0 7a66 	vmovlt.f32	s15, s13
 8010018:	ee27 0a87 	vmul.f32	s0, s15, s14
 801001c:	4770      	bx	lr
 801001e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010084 <scalbnf+0xc0>
 8010022:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010026:	4770      	bx	lr
 8010028:	0dd2      	lsrs	r2, r2, #23
 801002a:	e7e5      	b.n	800fff8 <scalbnf+0x34>
 801002c:	4410      	add	r0, r2
 801002e:	28fe      	cmp	r0, #254	@ 0xfe
 8010030:	dce6      	bgt.n	8010000 <scalbnf+0x3c>
 8010032:	2800      	cmp	r0, #0
 8010034:	dd06      	ble.n	8010044 <scalbnf+0x80>
 8010036:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801003a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801003e:	ee00 3a10 	vmov	s0, r3
 8010042:	4770      	bx	lr
 8010044:	f110 0f16 	cmn.w	r0, #22
 8010048:	da09      	bge.n	801005e <scalbnf+0x9a>
 801004a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010084 <scalbnf+0xc0>
 801004e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010088 <scalbnf+0xc4>
 8010052:	ee10 3a10 	vmov	r3, s0
 8010056:	eeb0 7a67 	vmov.f32	s14, s15
 801005a:	2b00      	cmp	r3, #0
 801005c:	e7d9      	b.n	8010012 <scalbnf+0x4e>
 801005e:	3019      	adds	r0, #25
 8010060:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010064:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010068:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801008c <scalbnf+0xc8>
 801006c:	ee07 3a90 	vmov	s15, r3
 8010070:	e7d7      	b.n	8010022 <scalbnf+0x5e>
 8010072:	bf00      	nop
 8010074:	ffff3cb0 	.word	0xffff3cb0
 8010078:	4c000000 	.word	0x4c000000
 801007c:	7149f2ca 	.word	0x7149f2ca
 8010080:	f149f2ca 	.word	0xf149f2ca
 8010084:	0da24260 	.word	0x0da24260
 8010088:	8da24260 	.word	0x8da24260
 801008c:	33000000 	.word	0x33000000

08010090 <floorf>:
 8010090:	ee10 3a10 	vmov	r3, s0
 8010094:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010098:	3a7f      	subs	r2, #127	@ 0x7f
 801009a:	2a16      	cmp	r2, #22
 801009c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80100a0:	dc2b      	bgt.n	80100fa <floorf+0x6a>
 80100a2:	2a00      	cmp	r2, #0
 80100a4:	da12      	bge.n	80100cc <floorf+0x3c>
 80100a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801010c <floorf+0x7c>
 80100aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80100ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80100b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b6:	dd06      	ble.n	80100c6 <floorf+0x36>
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	da24      	bge.n	8010106 <floorf+0x76>
 80100bc:	2900      	cmp	r1, #0
 80100be:	4b14      	ldr	r3, [pc, #80]	@ (8010110 <floorf+0x80>)
 80100c0:	bf08      	it	eq
 80100c2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80100c6:	ee00 3a10 	vmov	s0, r3
 80100ca:	4770      	bx	lr
 80100cc:	4911      	ldr	r1, [pc, #68]	@ (8010114 <floorf+0x84>)
 80100ce:	4111      	asrs	r1, r2
 80100d0:	420b      	tst	r3, r1
 80100d2:	d0fa      	beq.n	80100ca <floorf+0x3a>
 80100d4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801010c <floorf+0x7c>
 80100d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80100dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80100e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e4:	ddef      	ble.n	80100c6 <floorf+0x36>
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	bfbe      	ittt	lt
 80100ea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80100ee:	fa40 f202 	asrlt.w	r2, r0, r2
 80100f2:	189b      	addlt	r3, r3, r2
 80100f4:	ea23 0301 	bic.w	r3, r3, r1
 80100f8:	e7e5      	b.n	80100c6 <floorf+0x36>
 80100fa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80100fe:	d3e4      	bcc.n	80100ca <floorf+0x3a>
 8010100:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010104:	4770      	bx	lr
 8010106:	2300      	movs	r3, #0
 8010108:	e7dd      	b.n	80100c6 <floorf+0x36>
 801010a:	bf00      	nop
 801010c:	7149f2ca 	.word	0x7149f2ca
 8010110:	bf800000 	.word	0xbf800000
 8010114:	007fffff 	.word	0x007fffff

08010118 <_init>:
 8010118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801011a:	bf00      	nop
 801011c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801011e:	bc08      	pop	{r3}
 8010120:	469e      	mov	lr, r3
 8010122:	4770      	bx	lr

08010124 <_fini>:
 8010124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010126:	bf00      	nop
 8010128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801012a:	bc08      	pop	{r3}
 801012c:	469e      	mov	lr, r3
 801012e:	4770      	bx	lr
